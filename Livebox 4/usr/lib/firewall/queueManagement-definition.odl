

using "queueManagement.so";

/** 
 * The structure defines a queue with the basic queue parameters
 * The name of the queue, if it is enabled, the shapingRate and the assuredRate
 */
define qos_queue_t {
	string queueName;
	bool enable;
	uint32 shapingRate;
	uint32 assuredRate;
}

acl {
	group cwmpd read,write,execute;
	group admin read,write,execute;
	group remoteadmin read,execute;
	group technician read,write,execute;
}

/** 
 * This object describes the configuration of classifications and queues.
 */
persistent object QueueManagement {
	acl {
		world none;
		group admin none;
		group remoteadmin none;
	}

/**
 * Enable or disable the classification and queue configuration.
 */
	persistent bool Enable {
		write with enableQueueManagementOnWrite;
		default true;
	}

/** 
 * Define the maximum number of classifications supported on this system.
 */ 
	persistent uint32 MaxClassificationEntries {
		write with maxClassificationsOnWrite;
		default 100;
	}

/**
 * Define the maximum number of queues supported on this system.
 */
	persistent uint32 MaxQueuesEntries {
		write with maxQueuesOnWrite;
		default 100;
	}

/** 
  * This parameter specifies the defaultClass for Queue configuration. This parameter is mainly introduced for compatibility with tr181.
  */
	persistent int32 DefaultTrafficClass {
		default -1;
	}

/** 
 * Value is fixed set to "default", for compatibility with tr181.
 */
	persistent string DefaultForwardingPolicy {
		default "default";
	}

/** 
 * The value is fixed set to 0, for compatibility with tr181.
 * The real default queue is highly dependant on the queueing mechanims used. 
 */
	persistent uint32 DefaultQueue {
		default 0;
	}

/** 
 * The value is set to -1, for compatibility with tr181.
 */
	persistent int32 DefaultDSCPMark {
		write with defaultDSCPMarkOnWrite;
		default -1;
	}

/** 
 * The value is fixed set to -1, for compatibility with tr181. Sets the Default vlan priority.
 * In fact this parameter is not very useful. The default ethernet priority will be set per 
 * interface in the NeMo config.
 */
	persistent int32 DefaultEthernetPriorityMark {
		default -1;
	}

/** 
 * This object defines queue, the configuration is highly dependant on the hardware QoS capabilities.
 * Currently we have support for software QoS(HTB), IKANOS Qos(WFQ) and BROADCOM specific QoS implementations.
 */
	persistent object Queue[] {
		write with queueOnWrite;
		delete with queueOnDelete;
		bool set(variant parameters);
		variant get();

/** 
 * Human readable name for the Queue.
 */
		persistent string Name;

/** 
 * Unique Key for the Queue, the implementation is different per QoS implementation.
 */
		persistent int32 QueueKey;

/** 
 * Enable the Queue, if the root queue is disabled all child queues are disabled as well. 
 */
		persistent bool QueueEnable = false;

/** 
 * Status of the Queue. Can be Enabled, Disabled or Error.
 */
		read-only string QueueStatus {
			read with queueStatusOnRead;
			constraint enum ["Error", "Disabled", "Enabled"];
			default "Disabled"; 
		}
/**
 * TrafficClasses
 */
		persistent string TrafficClasses {
			constraint maxvalue 256;
		}

/** 
 * NeMo interface name for which interface this queue is applicable.
 */
		persistent string QueueInterface {
			constraint maxvalue 256;
		}

/** 
 * The behaviour is dependent per QoS implementation. 
 * As per HTB, WFQ, brcm QoS, this parameter is not implemented. 
 */
		persistent uint32 QueueBufferLength;

/** 
 * The behaviour is dependent per QoS implementation. 
 * As per HTB, WFQ, brcm QoS, this parameter is not implemented. 
 */
		persistent uint32 QueueWeight;

/**
 * For WFQ this is the number of the Queue. 0 is used as the defaultQueue and must be provided.
 * A number from 0 to 7 is allowed.
 */
		persistent uint32 QueuePrecedence;

/** 
 * The behaviour is dependent per QoS implementation. 
 * As per HTB, WFQ, brcm QoS, this parameter is not implemented. 
 */
		persistent uint32 REDTreshold {
			constraint maxvalue 100;
			default 0;
		}

/** 
 * The behaviour is dependent per QoS implementation. 
 * As per HTB, WFQ, brcm QoS, this parameter is not implemented. 
 */
		persistent uint32 REDPercentage {
			constraint maxvalue 100;
			default 0;
		}

/**
 * This parameter is mainly implemented for tr181 compatibility. 
 * Currently we do not support the configuration for the drop algorithm.
 */
		persistent string DropAlgorithm {
			constraint enum ["RED", "DT", "WRED", "BLUE", "SFQ"];
			default "DT";
		}

/** 
 * For ikanos targets, use WFQ. Currently HTB and WFQ cannot be used in the same build.
 * It is decided at compile time which schedule algorithm to use.
 */
		persistent string SchedulerAlgorithm {
			constraint enum ["WFQ", "WRR", "SP", "SPWRR", "HTB"];
			default "SP"; 
		}

/** 
 * This parameter defines the maximum bandwidth the queue can get. 
 * If the value is smaller or equal than 100 then the value is considered a percentage.
 * If the value is greater than 100 the value is interpreted as bps.  
 */
		persistent int32 ShapingRate = -1;

/** 
 * This read-only parameter gives the current assured(minimum)bandwidth in Bps.
 */
		read-only int32 CurrentShapingRate {
			read with queueCurrentShapingRateOnRead;
		}

/** 
 * This parameter defines the burstsize of the shaping rate.
 */ 
		persistent int32 ShapingBurstSize =-1;

/** 
 * This parameter defines the minimum bandwidth the queue can get. 
 * If the value is smaller or equal than 100 then the value is considered a percentage.
 * If the value is greater than 100 it is expressed in bps.  
 */
		persistent int32 AssuredRate =-1;

/** 
 * This read-only parameter gives the current assured(minimum)bandwidth in Bps.
 */
		read-only int32 CurrentAssuredRate {
			read with queueCurrentAssuredRateOnRead;
		}

/** 
 * This parameter defines the burstsize of the assured rate.
 */ 
		persistent int32 AssuredBurstSize =-1;

/**
 * RootQueue is a string parameter to point to the root queue in the datamodel.
 * It must be defined before it's children and it can not be changed on the fly.
 */
		persistent string RootQueue;

/**
 * Boolean parameter to indicate if this queue is a default queue are not. 
 * This is important for HTB. For WFQ the default queue has to set the queuePrecedence to 0.
 */
		persistent bool DefaultQueue = false;

/**
 * This Parameter is only applicable for HTB in the rootQueue, for other configurations, 
 * it will not be taken into account.
 * The parameter verifies the per packet overhead. for instance for vlans you have 2 bytes
 * overhead, this will be needed for the QoS calculations. 
 */
		persistent int32 PerPacketOverhead = -1;
	}

/**
 * This object is implemented for compatibility with tr69. 
 * TODO, the implementation only supports HTB(software QoS). 
 * We suggest using the console tools to get correct statistics from the queues.
 */
	persistent object QueueStats[] {
		write with queueStatsOnWrite;
		delete with queueStatsOnDelete;

/**
 * Enable the QueueStats object if you want to read statistics from it.
 */ 
		persistent bool Enable = false;

/** 
 * This parameter returns the status of the queueStats object 
 */ 
		read-only string Status {
			read with queueStatsStatusOnRead;
			constraint enum ["Disabled", "Enabled", "Error"];
			default "Disabled";
		}
		persistent uint32 Queue = 0;

/**
 * This parameter specifies the interface of the queue.
 */ 
		persistent string Interface;

/**
 * This parameters returns the number of outgoing packets.
 */ 
		read-only uint32 OutputPackets = 0;

/**
 * This parameters returns the number of outgoing bytes.
 */ 
		read-only uint32 OutputBytes = 0;

/**
 * This parameters returns the number of dropped packets.
 */ 
		read-only uint32 DroppedPackets =0;

/**
 * This parameters returns the number of dropped bytes.
 */ 
		read-only uint32 DroppedBytes = 0;
	}

/**
 * This object specifies the configuration of a classification object. 
 */ 
	persistent object Classification[] {
		write with classificationOnWrite;
		delete with classificationOnDelete;
		bool set(variant parameters);
		variant get();

		acl {
			group admin read,write,execute;
		}

/** 
 * Human readable name for a classification 
 */
		persistent string Name;

/**
 * This parameter is translated in a nfmark iptables rule. This mark is used mainly in HTB.
 * Set the parameter to 0 if not needed.
 */  
		persistent uint32 ClassificationKey;

/**
 * Enable or disable the Classification 
 */
		persistent bool ClassificationEnable = false;

/**
 * The status can be Disabled, Enabled or Error
 */
		read-only string ClassificationStatus {
			read with classificationStatusOnRead;
			constraint enum ["Disabled", "Enabled", "Error"];
			default "Disabled";
		}

/**
 * This parameter is not supported. (Compatibility with tr181)
 */
		persistent uint32 ClassificationOrder;

/**
 * Indicates which packets are matched:
 * Local: locally generated packets are matched: (iptables OUTPUT chain in the mangle table.)
 * Forward: matches forwarded packets: (iptables FORWARD chain in the mangle table)
 * Postrouting: matches both forwarded and locally generated packets (iptables POSTROUTING chain in mangle table.)
 * "empty": matches both in PREROUTING and local generated traffic.
 */
		persistent string ClassInterface {
			constraint maxvalue 16;
		}

/**
 * Defines a Outgoing Interface if applicable: nemo name or linux name are supported.
 */
		persistent string OutInterface {
			constraint maxvalue 16;
		}

/** 
 * This parameter matches the destination IP address. Important, if you specify IPv4 addresses,
 * the ipversion has to be set to 4, if you specify a IPv6 addresses, the ipversion 
 * has to be set to 6.
 */ 
		persistent string DestIP {
			constraint maxvalue 40;
		}
/**
 * Destination mask, both integer or dotted notation are supported
 */
		persistent string DestMask {
			constraint maxvalue 40;
		}

/**
 * Matches all but the defined destination IP address/mask combination. 
 * The IP address must be non-empty.
 */
		persistent bool DestIPExclude = false;

/** 
 * Matches the source IP address. Important, if you specify IPv4 addresses,
 * the ipversion has to be set to 4, if you specify IPv6 addresses the ipversion 
 * has to be set to 6.
 */ 
		persistent string SourceIP {
			constraint maxvalue 40;
		}
/**
 * Source mask, both integer or dotted notation are supported
 */
		persistent string SourceMask {
			constraint maxvalue 40;
		}
/**
 * Matches all but the defined source IP address/mask combination. 
 * The IP address must be non-empty.
 */

		persistent bool SourceIPExclude = false;

/** 
 * Matches a protocol: The protocol must be set as a numeric value
 * i.e. TCP = 6, UDP = 17, IGMP = 2, ...
 */ 
		persistent int32 Protocol = -1;

/** 
 * Set to true if you want to match all but the defined protocol.
 */
		persistent bool ProtocolExclude = false;

/**
 * Minimum destination port
 */
		persistent int32 DestPort = -1;

/**
 * Maximum destination port, must be bigger (or equal) than DestPort.
 */
		persistent int32 DestPortRangeMax = -1;

/**
 * Match all but the destionation port(range)
 */
		persistent bool DestPortExclude = false;

/**
 * Minimum source port
 */
		persistent int32 SourcePort = -1;

/**
 * Maximum source port, must be bigger (or equal) than SourcePort.
 */
		persistent int32 SourcePortRangeMax = -1;

/**
 * Match all but the source port(range)
 */
		persistent bool SourcePortExclude = false; 

/** 
 * Source Mac address to be matched. If empty no source mac address will be checked.
 */
		persistent string SourceMacAddress {
			constraint maxvalue 18;
		}

/**
 * Invert the source mac address check.
 */
		persistent bool SourceMacExclude = false;

/**
 * The DestMACAddress parameter is not supported 
 */
		persistent string DestMACAddress {
			constraint maxvalue 18;
		}
/**
 * The DestMACExclude parameter is not supported 
 */
		persistent bool DestMACExclude = false;

/** 
 * We can match on packet lenght features. This can be used to match for instance small TCP Ack packets.
 * Minimum packet lenght to be matched.
 */
		persistent int32 IPLengthMin = 0;

/**
 * We can match on packet lenght features. This can be used to match for instance small TCP Ack packets.
 * Minimum packet lenght to be matched.
 */
		persistent int32 IPLengthMax = 0;

/**
 * Check on DSCP values, a comma separated list of DSCP values is supported
 */
		persistent string DSCPCheck {
			constraint maxvalue 100;
		}
/**
 * Negate the check on DSCP values.
 */
		persistent bool DSCPExclude = false;

/**
 * This parameter can be used to mark packets with a defined DSCP mark. 
 * It can be used in combination with ClassificationKey(HTB) or QueuePrecedence(WFQ)
 * Or it can be used with both parameters unset. Then we see only a set DSCP iptables rule.
 * both decimal or hexadecimal values are supported.
 */
		persistent int32 DSCPMark = -1;

/**
 * ForwardingPolicy:TODO
 */
		persistent string ForwardingPolicy;

/**
 * TrafficClass:TODO
 */
		persistent int32 TrafficClass = -1;

/**
 * ClassPolicer: tr181 compatibility.
 */
		persistent int32 ClassPolicer = -1;

/** 
 * This parameter is a reference to the Queue it must link to. 
 */
		persistent string ClassQueue;

/**
 * Not supported 
 */
		persistent int32 EthernetPriorityCheck = -1;

/** 
 * Not supported
 */
		persistent bool EthernetPriorityExclude = false;

/**
 * EthernetPriority mark: between 0 and 7, the value is set fixed.
 * If we specify -2, we do a mapping from the DSCP value of the packet to the pbit/
 */
		persistent int32 EthernetPriorityMark = -1;

/** 
 * VLANIDCheck is currently not supported. Check on vlan interface instead.
 */
		persistent int32 VLANIDCheck = -1;

/** 
 * VLANIDExclude is currently not supported.
 */
		persistent bool VLANIDExclude = false;

/** 
* Classification can used for ipv4(4), ipv6(6) or both(0)
*/
		persistent int32 IPVersion = 0;

/**
 * Normally a packet will not stop when it matches a classification. 
 * It will continue to traverse all the rules in a chain. 
 * If you want to a packet to stop traversing the chain, set this parameter to true.
 * It will result in a iptables rules "-j RETURN"
 */
		persistent bool StopTraverse = false;
	}

/**
 * Function to save the QoS configuration. setQosConfig saves the function implicitly. 
 * In setClassification, a parameter exists where you can specify if the configuration must be persistent or not.
 * @param none
 * @return true
 * @error none
 * @version V4.6
 */ 
	bool save();

/** 
 * Remove the saved configuration, will be applied after a reboot.
 * @param none
 * @return true
 * @error none
 * @version V4.6
 */
	bool reset();

/** 
 * Apply the changes if the datamodel is changed by manually. Should not be used anymore.
 * @param none
 * @return true
 * @error none
 * @version V4.6
 */
	bool commit();

/**
 * This function configures the qos configuration on a specific interface, with a specific scheduling mechanism.
 * All this data will be set atomic.
 * @param Interface - NeMo interface name on which the queue must be applied.
 * @param Enable - Enable or disable the queue.
 * @param Algorithm - WFQ, HTB is supported
 * @param WanQueue - A map object containing an Enable parameter, a minimum and maximum bandwidth.
 * @param SubQueue - A list of qos_queue_t objects describing the children queues.
 * @return true of false
 * @error To document
 * @version V4.6
 */
	bool setQosConfig(mandatory string Interface, mandatory bool Enable, mandatory string Algorithm, qos_queue_t WanQueue, list SubQueue);

/** 
 * setClassification function, sets parameters to a classification function
 * @param Id the name of the classification to be changed. If it does not exists, an error is returned.
 * @param Enable mandatory parameter, must be true or false to enable, disable the classification.
 * @param OutInterface outgoing interface, optional parameter.
 * @param DestinationPrefix destination ip address match, optional parameter.
 * @param Persistent store the configuration persistently or not.
 * @return true if the function is executed correctly, false if an error occured.
 * @error to document
 * @version V4.6
 */
	bool setClassification(mandatory string Id, mandatory bool Enable, string OutInterface, string DestinationPrefix, bool Persistent);

/** 
 * setPolicyClassification function, sets parameters to a classification for policy based routing. 
 * @param Id the name of the classification to be changed. If it does not exists, the classification is created..
 * @param Key mandatory parameter, indicated a number for a nfmark.
 * @param Enable mandatory parameter, must be true or false to enable, disable the classification.
 * @param SourceIP, source IP address to be matched.
 * @param SourceMAC, source MAC address to be matched.
 * @param DestIP, destination IP address to be matched.
 * @param DestPort, destination port to be matched.
 * @param Protocol, protocol number, in case a valid DestPort is specified, protocol must be 6(tcp) or 17(udp)
 * @param Policy indicates to which routing table the packets needs to be sent. This must be a number between 1 and 253 (i.e. it will be the index of the routing table.)
 * @param Persistent store the configuration persistently or not.
 * @return void
 * @error to document
 * @version V7.1
 */
	void setPolicyClassification(mandatory string Id, mandatory uint32 Key, mandatory bool Enable, string SourceIP, string SourceMac, string DestIP, int32 DestPort, int32 Protocol, uint32 Policy, bool Persistent) {
	acl {
		group admin read, write, execute;
		group remoteadmin read, execute;
	}
}


/** 
 * setClassifications function, sets a number of classifications at once
 * @param Classifications list of Classification: Each Classification contains the following parameters.
 * @param Id the name of the classification to be changed. If it does not exists, an error is returned.
 * @param Enable mandatory parameter, must be true or false to enable, disable the classification.
 * @param OutInterface outgoing interface, optional parameter.
 * @param DestinationPrefix destination ip address match, optional parameter.
 * @param Persistent store the configuration persistently or not.
 * @return true if the function is executed correctly, false if an error occured.
 * @error to document
 * @version V4.6
 */
	bool setClassifications(list Classifications);

/**
 * Retrieve a list of queues.
 * @return a list of queue names.
 * @error to document
 * @version V7.0
 */
	list listQueues();

/**
 * Retrieve a list of classifications.
 * @return a list of classification names.
 * @error to document
 * @version V7.0
 */
	list listClassifications();


}

/** @location sah_services_queuemanagement /queueManagement-definition.odl */
