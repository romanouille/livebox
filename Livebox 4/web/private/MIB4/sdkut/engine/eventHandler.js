define(["utils/basics","utils/console","engine/sopws","json!engine/eventsMapper.json"],function(basicUtilities,console,SOPWS,eventsMap){"use strict";var sopStbHandlerList,sopHgwHandlerList,fields,buildEventId=function(aHandler,aReason,aSessionId){var reason,sessionId;reason=aReason;if(!reason){reason="ANY"}sessionId=aSessionId;if(!sessionId){sessionId="ANY"}return aHandler+"-"+reason+"-"+sessionId},translateSahToComEvent=function(aHandler,aReason,aSession){var newEventObj,newEventTab,i,mappedEvtObj;newEventObj={handler:aHandler,reason:aReason||"ANY",session:aSession};newEventTab=[];if(eventsMap.hasOwnProperty(aHandler)){for(i=0;i<eventsMap[aHandler].length;i+=1){mappedEvtObj=basicUtilities.cloneObj(newEventObj);mappedEvtObj.handler=eventsMap[aHandler][i];newEventTab.push(mappedEvtObj)}console.info("EVT_LSTN. SAH event "+aHandler+" | "+aReason+" translated into "+JSON.stringify(newEventTab))}else{newEventTab.push(newEventObj)}return newEventTab};sopStbHandlerList=["ALARM","APPLICATION_MANAGER","AV_OUTPUTS","BITBAND_ADDON","BROWSER_MANAGER","CAS","CEC","DHCP","DMC","DMR","DRM","AIRPLAY","EIT_PF","EIT_S","FILE_SYSTEM","FRONTEND","GENERAL","MEDIA","NETWORK","PVR","RECORDING_LIST","RESOURCE_MANAGER","SRV_PLAN","STORAGE","SYSTEM","SQM_SYSTEM","RUICP","TR069","UPNP_IGD_CLIENT","VOD","VOICE","WINDOW_MANAGER"];sopHgwHandlerList=["Devices.Device","NMC","NeMo","Scheduler","PnP"];fields={eventRegister:{},eventExpected:{},isOnStb:false,isOnHgw:false,listenCallback:null,isListenning:false,isStopRequired:false,useApplicationMode:false,applicationGroup:""};return{init:function(aIsOnStb,aUseSimulationMode,aUseApplicationMode){var indHandler,handlerList;fields.isOnStb=aIsOnStb;fields.isStopRequired=false;fields.useApplicationMode=aUseApplicationMode;if(!aUseSimulationMode){fields.listenCallback=this.handleEvent.bind(this);if(fields.isOnStb){if(!fields.applicationGroup){if(typeof __sah!=="undefined"){var r=__sah.gbus.call("com.softathome.Private.WindowManager","FindGroupWithWindow",{title:"qtrabrowser"});fields.applicationGroup=typeof r.data==="object"&&r.data?r.data.group:""}console.info("EVT_LSTN: Start listenning to remote events with support for HbbTV mode ("+fields.applicationGroup+")")}else{console.info("EVT_LSTN: Start listenning to remote events locally on STB")}for(indHandler=0;indHandler<sopStbHandlerList.length;indHandler+=1){this.listen(sopStbHandlerList[indHandler],fields.listenCallback)}}else{if(!fields.isListenning){console.info("EVT_LSTN: Start listenning to remote events");handlerList=fields.isOnHgw?sopHgwHandlerList:sopStbHandlerList;SOPWS.sopStbEvent(handlerList,"",this.handleRemoteEvent.bind(this))}fields.isListenning=true}}},setOnHgw:function(aIsOnHgw){fields.isOnHgw=aIsOnHgw},listen:function(aEventName,aCallback){if(typeof aCallback==="undefined"){console.error("EVT_LSTN: Invalid callback for listenning to event "+aEventName);return}console.info("EVT_LSTN: Liste to the event "+aEventName);if(window.document.addEventListener){window.document.addEventListener(aEventName,aCallback,false)}else if(window.document.attachEvent){window.document.attachEvent("on"+aEventName,aCallback,false)}else{console.error("EVT_LSTN: Events not supported by browser!")}},unlisten:function(aEventName,aCallback){if(window.document.addEventListener){window.document.removeEventListener(aEventName,aCallback,false)}else if(window.document.attachEvent){window.document.detachEvent("on"+aEventName,aCallback,false)}else{console.error("EVT_LSTN: Events not supported by browser!")}},listenEvent:function(aHandler,aCallback){var undef,indEvent,eventId,uuid,eventUuid;eventUuid=[];if(eventsMap[aHandler]!==undef){if(!fields.useApplicationMode){console.debug("EVT_LSTN: {Listening to event} Handler <"+aHandler+">")}for(indEvent=0;indEvent<eventsMap[aHandler].length;indEvent+=1){uuid=basicUtilities.generateUUID();eventId=buildEventId(eventsMap[aHandler][indEvent]);if(typeof fields.eventRegister[eventId]!=="object"){fields.eventRegister[eventId]=[]}fields.eventRegister[eventId].push({uuid:uuid,callback:aCallback});eventUuid.push(uuid)}}else{uuid=basicUtilities.generateUUID();eventId=buildEventId(aHandler);if(typeof fields.eventRegister[eventId]!=="object"){fields.eventRegister[eventId]=[]}fields.eventRegister[eventId].push({uuid:uuid,callback:aCallback});eventUuid.push(uuid)}return eventUuid.join("|")},registerSahEvent:function(aEventId,aCallback){return this.register(aEventId,"ANY","ANY",aCallback)},register:function(aHandler,aReason,aSessionId,aCallback){var eventId,uuid,uuidTab,translatedEventTab,i,newHandler,newReason,newRegister;console.info("EVT_LSTN: register events for "+aHandler+", reason "+aReason);translatedEventTab=translateSahToComEvent(aHandler,aReason,aSessionId);uuidTab=[];for(i=0;i<translatedEventTab.length;i+=1){newHandler=translatedEventTab[i].handler;newReason=translatedEventTab[i].reason;eventId=buildEventId(newHandler,newReason,aSessionId);if(typeof fields.eventRegister[eventId]!=="object"){fields.eventRegister[eventId]=[]}uuid=basicUtilities.generateUUID();uuidTab.push(uuid);if(!fields.useApplicationMode){console.info("EVT_LSTN: {Listening to event} Handler<"+newHandler+">, Reason<"+newReason+">, Session_Name<"+aSessionId+"> with Uuid<"+uuid+">")}newRegister={uuid:uuid,callback:aCallback};if(aHandler.indexOf("sah.")===0){newRegister.isSahEvent=true;newRegister.sahName=aHandler}fields.eventRegister[eventId].push(newRegister)}return uuidTab.join(",")},unlistenEvent:function(aHandler,aEventUUID){var undef,eventsUuid,eventId,indEvent,indKey;eventsUuid=aEventUUID.split("|");if(eventsMap[aHandler]!==undef){if(!fields.useApplicationMode){console.debug("EVT_LSTN: {Unregister event listener} Handler<"+aHandler+"> using Uuid<"+aEventUUID+">")}for(indEvent=0;indEvent<eventsMap[aHandler].length;indEvent+=1){eventId=buildEventId(eventsMap[aHandler][indEvent]);for(indKey in fields.eventRegister[eventId]){if(fields.eventRegister[eventId].hasOwnProperty(indKey)){if(fields.eventRegister[eventId][indKey].uuid===aEventUUID){fields.eventRegister[eventId].splice(indKey,1)}}}if(fields.eventRegister[eventId].length===0){delete fields.eventRegister[eventId]}}}else{console.warn("EVT_LSTN: {Unmapped event} Handler<"+aHandler+">");return false}},unregisterSahEvent:function(aEventId,aEventUUID){var uuidTab,i;uuidTab=aEventUUID.split(",");for(i=0;i<uuidTab.length;i+=1){this.unregister(aEventId,"ANY","ANY",uuidTab[i])}},unregister:function(aHandler,aReason,aSessionId,aEventUUID){var eventId,indKey,translatedEventTab,i,newHandler,newReason;translatedEventTab=translateSahToComEvent(aHandler,aReason,aSessionId);for(i=0;i<translatedEventTab.length;i+=1){newHandler=translatedEventTab[i].handler;newReason=translatedEventTab[i].reason;eventId=buildEventId(newHandler,newReason,aSessionId);if(typeof fields.eventRegister[eventId]!=="object"){console.warn("EVT_LSTN: Trying to unregister unknown event "+eventId+" using UUID "+aEventUUID);return}if(!fields.useApplicationMode){console.debug("EVT_LSTN: {Unregister event listener} Handler<"+newHandler+">, Reason<"+newReason+">, Session_Name<"+aSessionId+"> using Uuid<"+aEventUUID+">")}for(indKey in fields.eventRegister[eventId]){if(fields.eventRegister[eventId].hasOwnProperty(indKey)){if(fields.eventRegister[eventId][indKey].uuid===aEventUUID){fields.eventRegister[eventId].splice(indKey,1)}}}if(fields.eventRegister[eventId].length===0){delete fields.eventRegister[eventId]}}},generateExpectedEvent:function(aHandler,aReason,aSessionId,aAttrObj){var attr,fakeEvent;attr=aAttrObj;if(!attr){attr={}}fakeEvent={data:{handler:aHandler,object:{reason:aReason,attributes:attr}},handler:aHandler,object:{reason:aReason,attributes:attr}};if(aSessionId!=="ANY"){fakeEvent.data.object.attributes.session_id=aSessionId;fakeEvent.object.attributes.session_id=aSessionId}console.debug("EVT_LSTN: {Firing event} EventId<"+buildEventId(aHandler,aReason,aSessionId)+"> on timer");this.cancelWaitForEvent(aHandler,aReason,aSessionId);this.handleEvent(fakeEvent)},cancelWaitForEvent:function(aHandler,aReason,aSessionId){var eventId;eventId=buildEventId(aHandler,aReason,aSessionId);if(fields.eventExpected[eventId]){if(!fields.useApplicationMode){console.debug("EVT_LSTN: Releasing timer for event "+eventId)}window.clearTimeout(fields.eventExpected[eventId]);fields.eventExpected[eventId]=null}},waitForEvent:function(aHandler,aReason,aSessionId,aAttrObj){var eventId,timeout;eventId=buildEventId(aHandler,aReason,aSessionId);if(!fields.useApplicationMode){console.debug("EVT_LSTN: Initiating timer for event "+eventId)}timeout=3e3;fields.eventExpected[eventId]=window.setTimeout(this.generateExpectedEvent.bind(this,aHandler,aReason,aSessionId,aAttrObj),timeout)},handleEvent:function(aEvent){var isValid,sopEvent,eventId,handler,reason,attributes,session,indCallback,indHandler,registered,registeredTab,testedEventId,testedEventIdTab,index;isValid=false;if(aEvent.data&&typeof aEvent.data==="string"){try{sopEvent=JSON.parse(aEvent.data)}catch(e){console.error("EVT_LSTN: Discarding a malformed event <"+JSON.stringify(aEvent.data)+">");console.error("EVT_LSTN: Error reason <"+e.message+">")}}else if(aEvent.data&&typeof aEvent.data==="object"){sopEvent=aEvent.data}else if(!aEvent.handler||typeof aEvent.handler!=="string"||!aEvent.object||typeof aEvent.object!=="object"){console.error("EVT_LSTN: Skipping invalid SOP event <"+JSON.stringify(aEvent.data)+">");return false}handler="";reason="";attributes={};session="ANY";if(!fields.isOnStb){console.log("EVT_LSTN: Received event: "+JSON.stringify(aEvent));if(aEvent.handler){if(aEvent.handler.indexOf("com.softathome.")>=0){handler=aEvent.handler.substring(15,aEvent.handler.length)}else{handler=aEvent.handler}if(aEvent.object&&typeof aEvent.object==="object"){if(typeof aEvent.object.reason==="string"){reason=aEvent.object.reason;isValid=true}if(aEvent.object.attributes&&typeof aEvent.object.attributes==="object"){attributes=aEvent.object.attributes;if(attributes.session_id&&typeof attributes.session_id==="string"){session=attributes.session_id}}}}else{console.log("EVT_LSTN: Received event: "+JSON.stringify(aEvent));if(typeof aEvent.service==="string"){if(aEvent.service.indexOf("com.softathome.")>=0){handler=aEvent.service.substring(15,aEvent.service.length)}else{handler=aEvent.service}}if(typeof aEvent.event==="string"){reason=aEvent.event;isValid=true}if(aEvent.data&&typeof aEvent.data==="object"){attributes=aEvent.data;if(attributes.session_id&&typeof attributes.session_id==="string"){session=attributes.session_id}}}if(!isValid){console.error("EVT_LSTN: Skipping invalid SOP event <"+JSON.stringify(aEvent.data)+">");return false}}else{console.log("EVT_LSTN: Received event: "+JSON.stringify(sopEvent));if(typeof sopEvent.handler==="string"&&typeof sopEvent.object.reason==="string"&&typeof sopEvent.object.attributes==="object"){handler=sopEvent.handler;reason=sopEvent.object.reason;attributes=sopEvent.object.attributes}else{console.error("EVT_LSTN: Skipping invalid SOP event <"+JSON.stringify(sopEvent)+">")}if(handler==="WINDOW_MANAGER"&&attributes.group===fields.applicationGroup){if(reason==="GROUP_BLURRED"){console.warn("EVT_LSTN: Leaving focus to alternate browser");for(indHandler=0;indHandler<sopStbHandlerList.length;indHandler+=1){if(sopStbHandlerList[indHandler]!=="WINDOW_MANAGER"&&sopStbHandlerList[indHandler]!=="APPLICATION_MANAGER"){this.unlisten(sopStbHandlerList[indHandler],fields.listenCallback)}}}else if(reason==="GROUP_FOCUSED"){console.warn("EVT_LSTN: Getting back focus from alternate browser");for(indHandler=0;indHandler<sopStbHandlerList.length;indHandler+=1){if(sopStbHandlerList[indHandler]!=="WINDOW_MANAGER"&&sopStbHandlerList[indHandler]!=="APPLICATION_MANAGER"){this.listen(sopStbHandlerList[indHandler],fields.listenCallback)}}}}}eventId=buildEventId(handler,reason,session);if(fields.eventRegister[eventId]&&typeof fields.eventRegister[eventId]==="object"){for(indCallback=fields.eventRegister[eventId].length-1;indCallback>=0;indCallback-=1){fields.eventRegister[eventId][indCallback].callback(handler,reason,session,attributes)}}eventId=buildEventId(handler);if(fields.isOnHgw){testedEventIdTab=eventId.split("-");testedEventId=testedEventIdTab[0].split(".")[0]||eventId;for(index=1;index<testedEventIdTab.length;index+=1){testedEventId+="-"+testedEventIdTab[index]}if(fields.eventRegister[testedEventId]&&fields.eventRegister[testedEventId][0].isSahEvent){console.info("EVT_LSTN: handle SAH event");require(["semantic/"+fields.eventRegister[testedEventId][0].sahName.split(".").join("/")],function(customEvtHandler){var newEvent=customEvtHandler.handleEvent(handler,reason,attributes);for(indCallback=0;indCallback<fields.eventRegister[testedEventId].length;indCallback+=1){console.log("EVT_HANDLER: calling callback function for event "+newEvent.id+", data="+JSON.stringify(newEvent.data));fields.eventRegister[testedEventId][indCallback].callback(newEvent.id,newEvent.data)}},function(){console.error("CANNOT FIND THE FILE semantic/"+fields.eventRegister[testedEventId][0].sahName.split(".").join("/")+".js")})}}else{if(fields.eventRegister[eventId]&&fields.eventRegister[eventId][0].isSahEvent){console.info("EVT_LSTN: handle SAH event");require(["semantic/"+fields.eventRegister[eventId][0].sahName.split(".").join("/")],function(customEvtHandler){var newEvent=customEvtHandler.handleEvent(handler,reason,attributes);for(indCallback=0;indCallback<fields.eventRegister[eventId].length;indCallback+=1){console.log("EVT_HANDLER: calling callback function for event "+newEvent.id+", data="+JSON.stringify(newEvent.data));fields.eventRegister[eventId][indCallback].callback(newEvent.id,newEvent.data)}},function(){console.error("CANNOT FIND THE FILE semantic/"+fields.eventRegister[eventId][0].sahName.split(".").join("/")+".js")})}}if(fields.isOnHgw){for(registered in fields.eventRegister){if(fields.eventRegister.hasOwnProperty(registered)){registeredTab=registered.split("-");if(handler.indexOf(registeredTab[0])>-1){for(indCallback=0;indCallback<fields.eventRegister[registered].length;indCallback+=1){fields.eventRegister[registered][indCallback].callback(handler,reason,session,attributes)}}}}}else{if(fields.eventRegister[eventId]&&typeof fields.eventRegister[eventId]==="object"){for(indCallback=0;indCallback<fields.eventRegister[eventId].length;indCallback+=1){fields.eventRegister[eventId][indCallback].callback(handler,reason,session,attributes)}}}return true},handleRemoteEvent:function(aEvent){var channelId,remoteEvent,indEvent;if(aEvent.httpStatus!==0){console.error("EVT_LSTN: Skipping remote listening to SOP event due to HTTP error ("+aEvent.httpStatus+")");return}console.info("EVT_LSTN: handle remote event ",aEvent);channelId="";if(aEvent.httpData){try{remoteEvent=JSON.parse(aEvent.httpData);channelId=remoteEvent.channelid;if(remoteEvent.objects){for(indEvent=0;indEvent<remoteEvent.objects.length;indEvent+=1){this.handleEvent(remoteEvent.objects[indEvent])}}else if(remoteEvent.events){for(indEvent=0;indEvent<remoteEvent.events.length;indEvent+=1){if(remoteEvent.events[indEvent].data){this.handleEvent(remoteEvent.events[indEvent].data)}else{this.handleEvent(remoteEvent.events[indEvent])}}}}catch(e){console.error("EVT_LSTN: Discarding a malformed event <"+JSON.stringify(aEvent.httpData)+">");console.error("EVT_LSTN: Error reason <"+e.message+">")}}if(fields.isStopRequired){console.info("EVT_LSTN: Stop listenning to Remote events");fields.isListenning=false;return}if(fields.isOnHgw){SOPWS.sopStbEvent(sopHgwHandlerList,channelId,this.handleRemoteEvent.bind(this))}else{SOPWS.sopStbEvent(sopStbHandlerList,channelId,this.handleRemoteEvent.bind(this))}return},stopAll:function(){fields.isStopRequired=true},makeListen:function(){fields.isStopRequired=false},updateHandlersList:function(aNewHandler){var handlerList;handlerList=fields.isOnStb?sopStbHandlerList:sopHgwHandlerList;if(handlerList.indexOf(aNewHandler)===-1){handlerList.push(aNewHandler)}}}});