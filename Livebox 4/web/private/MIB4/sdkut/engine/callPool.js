define(["utils/console"],function(console){"use strict";var pool={};return{init:function(){pool={}},push:function(aCall,uuid){var undef,aKey;if(aCall.handler&&aCall.handler.stackId){aKey=aCall.handler.stackId}else if(aCall.details&&aCall.details.uuid){aKey=aCall.details.uuid}else{aKey="UNDEFINED"}if(pool[aCall.handler.stackId]===undef){pool[aKey]={}}pool[aKey][uuid]=aCall},getByIdInStack:function(uuid,aStackId){if(!pool[aStackId]){return null}return pool[aStackId][uuid]},getById:function(uuid,aStackId){if(aStackId&&pool[aStackId]){return this.getByIdInStack(uuid,aStackId)}var elt,found;for(elt in pool){if(pool.hasOwnProperty(elt)){found=this.getByIdInStack(uuid,elt);if(found){return found}}}return null},printStack:function(){return pool},printShortStack:function(aStackId){var call_thread,i=0,resultList=[],indent="";if(!aStackId){call_thread=Object.keys(pool)}else{call_thread=this.findThread(aStackId)}try{for(i=call_thread.length-2;i>=0;i-=1){resultList.push(indent+"<b>"+pool[aStackId][call_thread[i]].type.toUpperCase()+"</b>&nbsp;"+pool[aStackId][call_thread[i]].name);indent+="&nbsp;&nbsp;"}return resultList.join("<br>")}catch(e){return"problem in callstack. Cannot pretty-print the stack: "+JSON.stringify(pool)}},getLast:function(aStackId){var call_thread;if(Object.keys(pool).length===0){return null}if(!aStackId){aStackId=Object.keys(pool)[0]}call_thread=this.findThread(aStackId);return pool[aStackId][call_thread[0]]},getLastId:function(aStackId){var call_thread=this.findThread(aStackId);return pool[aStackId][call_thread[0]].details.uuid},remove:function(uuid,aStackId){if(aStackId&&pool[aStackId]){if(pool[aStackId][uuid]){delete pool[aStackId][uuid];if(Object.keys(pool[aStackId]).length===0){delete pool[aStackId]}}}else{console.error("callPool: trying to remove inexistant element "+uuid+", thread "+aStackId+" from the pool "+JSON.stringify(pool))}},hasUuid:function(uuid,aStackId){if(pool[aStackId]){return!!pool[aStackId][uuid]}return false},findThread:function(aStackId){var elt,thread=[],child_parent,i,final_thread=[],nb_turns=0,max_turns,cp_length;for(elt in pool[aStackId]){if(pool[aStackId].hasOwnProperty(elt)){child_parent=pool[aStackId][elt].handler.fields?pool[aStackId][elt].handler.fields.uuid:pool[aStackId][elt].handler.stackId;thread.push([elt,child_parent])}}max_turns=thread.length;if(thread.length>0){child_parent=[thread[0]];thread.splice(0,1);cp_length=0;while(thread.length>0&&nb_turns<=max_turns){for(i=0;i<thread.length;i+=1){if(child_parent[0][0]===thread[i][1]){child_parent.splice(0,0,thread[i]);thread.splice(i,1);cp_length+=1;break}if(child_parent[cp_length][1]===thread[i][0]){child_parent.splice(cp_length+1,0,thread[i]);thread.splice(i,1);cp_length+=1;break}}nb_turns+=1}final_thread.push(child_parent[0][0]);for(i=0;i<child_parent.length;i+=1){final_thread.push(child_parent[i][1])}}return final_thread},findChildren:function(uuid,aStackId){if(!pool[aStackId]){return[]}var i,call_thread;call_thread=this.findThread(aStackId);for(i=0;i<call_thread.length;i+=1){if(call_thread[i]===uuid){return call_thread.slice(0,i)}}return[]},size:function(aStackId){return Object.keys(pool[aStackId]).length},isFirst:function(aStackId){if(!pool[aStackId]){return true}return Object.keys(pool[aStackId]).length<=1}}});