define(["utils/console","engine/callStack"],function(console,callStack){"use strict";var generateAndCheckId=function(aLength){var attempt;function generateId(l){var result,charSet,i;result="";charSet="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";for(i=0;i<l;i+=1){result+=charSet.charAt(Math.floor(Math.random()*charSet.length))}return result}attempt=generateId(aLength);while(window.document.getElementById(attempt)){attempt=generateId(aLength)}return attempt};return{askForUpgrade:{name:"Checks for firmware upgrade",description:"This method checks if a firmware update is available.",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;callStack.push("api","pcb.NMC.checkForUpgrades","1",this,{})}else{this.fields.nbStep+=1;switch(aStep){case"1":if(typeof aResult.status==="boolean"){this.fields.status=0;this.fields.data.hasNewVersion=aResult.status}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},setSources:{name:"setSources",description:"This method sets the sources to be searched for new version",fields:{uuid:null,nbStep:0,mxStep:0,configObj:null,status:0,data:{}},call:function(aStep,aResult){var result;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.data=null;this.fields.configObj=aResult.inputList[0];this.fields.mxStep+=1;callStack.push("api","com.softathome.System.Upgrade.SetSources","1",this,{url_list:this.fields.configObj.urlList})}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status!==0){this.fields.status=-1;this.fields.mxStep=-1;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},getSources:{name:"getSources",description:"This method returns the sources to be searched for new version",fields:{uuid:null,nbStep:0,mxStep:0,configObj:null,status:0,data:{}},call:function(aStep,aResult){var result;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.data={urlList:[]};this.fields.configObj=aResult.inputList[0];this.fields.mxStep+=1;callStack.push("api","com.softathome.System.Upgrade.GetSources","1",this)}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0&&aResult.data&&aResult.data.url_list){this.fields.data.urlList=aResult.data.url_list}else{this.fields.status=-1;this.fields.mxStep=-1;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},getInstalledVersions:{name:"getInstalledVersions",description:"This method returns the current versions of components used in the Set-Top Box",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{}},call:function(aStep,aResult){var result,i;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.data={versionList:[]};this.fields.mxStep+=1;callStack.push("api","com.softathome.System.Upgrade.GetInstalledVersions","1",this)}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0&&aResult.data&&aResult.data.version_list){for(i=0;i<aResult.data.version_list.length;i+=1){this.fields.data.versionList.push({componentId:aResult.data.version_list[i].id,url:aResult.data.version_list[i].url,verions:aResult.data.version_list[i].version})}}else{this.fields.status=-1;this.fields.mxStep=-1;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},getFoundVersions:{name:"getFoundVersions",description:"This method returns the new versions found from the last search operation",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{}},call:function(aStep,aResult){var result,forced,i;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.data={versionList:[]};this.fields.mxStep+=1;forced=false;if(aResult.inputList&&aResult.inputList[0]){forced=aResult.inputList[0].forcedOnly||false}callStack.push("api","com.softathome.System.Upgrade.GetFoundVersions","1",this,{forced:forced})}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0&&aResult.data&&aResult.data.version_list){for(i=0;i<aResult.data.version_list.length;i+=1){this.fields.data.versionList.push({componentId:aResult.data.version_list[i].id,url:aResult.data.version_list[i].url,verions:aResult.data.version_list[i].version})}}else{this.fields.status=-1;this.fields.mxStep=-1;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},requestInstall:{name:"requestInstall",description:"Requests the installation of one or more versions",fields:{uuid:null,nbStep:0,mxStep:0,configObj:null,status:0,data:{}},call:function(aStep,aResult){var result,inputParam,i;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.data=null;this.fields.configObj=aResult.inputList[0];this.fields.mxStep+=1;inputParam=[];if(!aResult.inputList||aResult.inputList.length<=0||!aResult.inputList[0].versionList){callStack.logMessage("SEM_BAD_ARGS");this.fields.mxStep=-1;this.fields.status=-1}else{for(i=0;i<aResult.inputList[0].versionList.length;i+=1){inputParam.push({id:aResult.inputList[0].versionList[i].componentId,url:aResult.inputList[0].versionList[i].url,version:aResult.inputList[0].versionList[i].version})}callStack.push("api","com.softathome.System.Upgrade.RequestInstall","1",this,{version_list:inputParam,forced:aResult.inputList[0].enforceInstall||false})}}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0&&aResult.data){if(aResult.data.eventHandler==="SYSTEM"){if(aResult.data.eventReason!=="UPGRADE_REQUEST_INSTALL_SUCCESS"&&aResult.data.eventReason!=="UPGRADE_DOWNLOAD_SUCCESS"){this.fields.status=-1;this.fields.mxStep=-1;callStack.logMessage("SEM_SYN_EVENT","Cannot schedule upgrade request")}}else{this.fields.status=-1;this.fields.mxStep=-1;callStack.logMessage("SEM_SYN_EVENT","Bad event handler on RequestInstall call")}}else{this.fields.status=-1;this.fields.mxStep=-1;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},getInstallStatus:{name:"getInstallStatus",description:"Returns the status of the last upgrade",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{}},call:function(aStep,aResult){var result,statusList,i;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.data={statusList:[]};this.fields.mxStep+=1;callStack.push("api","com.softathome.System.Upgrade.GetInstallStatus","1",this)}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0&&aResult.data&&aResult.data.status_list){statusList=[];for(i=0;i<aResult.data.status_list.length;i+=1){statusList.push({componentId:aResult.data.status_list[i].id,status:aResult.data.status_list[i].install_status})}this.fields.data.statusList=statusList}else{this.fields.status=-1;this.fields.mxStep=-1;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},searchNewVersions:{name:"searchNewVersions",description:"This method checks once on each source if new versions are available ",fields:{uuid:null,nbStep:0,mxStep:0,configObj:null,status:0,data:{}},call:function(aStep,aResult){var result;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.data={};this.fields.configObj=aResult.inputList[0];this.fields.mxStep+=1;callStack.push("api","com.softathome.System.Upgrade.Search","1",this)}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0){if(aResult.data.eventHandler==="SYSTEM"){switch(aResult.data.eventReason){case"UPGRADE_SEARCH_SUCCESS":case"UPGRADE_DOWNLOAD_SUCCESS":this.fields.data.hasNewVersion=true;break;case"UPGRADE_SEARCH_UNSUCCESS":this.fields.data.hasNewVersion=false;break;default:this.fields.data.hasNewVersion=false;this.fields.status=-1}}else{this.fields.status=-1;this.fields.mxStep=-1;callStack.logMessage("SYN_EVENT_FORMAT","Bad event handler '"+aResult.data.eventHandler+"' for com.softathome.System.Upgrade.searchNewVersions event. Check API json description")}}else{this.fields.status=-1;this.fields.mxStep=-1;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},manualInstall:{name:"Install a local firmware",description:"This method requests an installation of a local firmware",fields:{uuid:null,nbStep:0,mxStep:0,status:0,initialParameters:{}},call:function(aStep,aResult){var result,par,fileP,formData,req,iframeIndex,capabilities;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList[0];par=callStack.getRequest();if(typeof this.fields.initialParameters==="object"){if(typeof this.fields.initialParameters.fileInputId==="string"){if(window.document.getElementById(this.fields.initialParameters.fileInputId)){fileP=window.document.getElementById(this.fields.initialParameters.fileInputId).files[0]}else if(window.document.getElementsByTagName("iframe")){for(iframeIndex=0;window.document.getElementsByTagName("iframe").length;iframeIndex=iframeIndex+1){if(window.document.getElementsByTagName("iframe")[iframeIndex].contentWindow.document.getElementById(this.fields.initialParameters.fileInputId)){fileP=window.document.getElementsByTagName("iframe")[iframeIndex].contentWindow.document.getElementById(this.fields.initialParameters.fileInputId).files[0];break}}}else{this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}formData=new FormData;capabilities=callStack.getCapabilities();formData.append("SOP",fileP);req=new XMLHttpRequest;if(par.proxyUrl===""){req.open("PUT","http://"+par.ip+"/webuiUpgrade",true)}else{req.open("PUT",par.proxyUrl+"?url="+encodeURIComponent("http://"+par.ip+"/webuiUpgrade"),true)}req.setRequestHeader("X-Context",par.contextId);req.onreadystatechange=function(){var tempId,target,myScript,i;if(req.readyState===4&&req.status===200){tempId=generateAndCheckId(8);target=window.document.createElement("div");target.setAttribute("id",tempId);target.setAttribute("style","display:none");window.document.body.appendChild(target);window.document.getElementById(tempId).innerHTML=req.responseText;myScript=window.document.getElementById(tempId).getElementsByTagName("script");for(i=0;i<myScript.length;i+=1){eval(myScript[i].innerHTML)}}};req.send(formData);callStack.reCall(this,"1",0)}else{this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.nbStep+=1;switch(aStep){case"1":break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},checkUsbInstall:{name:"Checks if a firmware version is located in usb device",description:"This method checks if a firmware version is located in usb device",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},usbVolumeList:null,mountPoint:""},call:function(aStep,aResult){var result,indDevice,indVolume,indEntry,usbVolume,fileTab;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.data={isAvailable:false,firmwareFile:"",firmwarePath:""};this.fields.usbVolumeList=[];this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;callStack.push("semantic","sah.Device.Storage.listStorages","1",this)}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0){this.fields.usbMountPointList=[];for(indDevice=0;indDevice<aResult.data.deviceList.length;indDevice+=1){for(indVolume=0;indVolume<aResult.data.deviceList[indDevice].volumeList.length;indVolume+=1){if(aResult.data.deviceList[indDevice].volumeList[indVolume].isMounted&&aResult.data.deviceList[indDevice].volumeList[indVolume].mountPoint){this.fields.data.isAvailable=true;this.fields.usbVolumeList.push({mountPoint:aResult.data.deviceList[indDevice].volumeList[indVolume].mountPoint.replace("//","/"),volumeId:aResult.data.deviceList[indDevice].volumeList[indVolume].volumeId})}}}this.fields.mxStep+=1;callStack.reCall(this,"2",0)}else{this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(!aResult||aResult.status===0){if(this.fields.usbVolumeList.length>0){usbVolume=this.fields.usbVolumeList.pop();this.fields.mountPoint=usbVolume.mountPoint;this.fields.mxStep+=1;callStack.push("semantic","sah.Content.Storage.browseStorage","3",this,{path:"/",volumeId:usbVolume.volumeId})}}else{this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}break;case"3":if(aResult.status===0){for(indEntry=0;indEntry<aResult.data.entryList.length;indEntry+=1){if(aResult.data.entryList[indEntry].type==="file"){fileTab=aResult.data.entryList[indEntry].name.split(".");if(fileTab.length>0&&fileTab[fileTab.length-1].toLowerCase()==="rui"){this.fields.data.firmwareFile=aResult.data.entryList[indEntry].name;this.fields.data.firmwarePath=this.fields.mountPoint;break}}}if(!this.fields.data.firmwareFile){this.fields.mxStep+=1;callStack.reCall(this,"2",0)}}else{this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},usbInstall:{name:"Install a local firmware",description:"This method requests an installation of a local firmware",fields:{uuid:null,nbStep:0,mxStep:0,status:0},call:function(aStep,aResult){var result,inputArg,pathTab,fullPath;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;inputArg=aResult.inputList[0];if(typeof inputArg.firmwareFile==="string"){if(typeof inputArg.firmwarePath==="string"){pathTab=inputArg.firmwarePath.split("/");if(pathTab.length>1){if(pathTab[pathTab.length-1].length===0){pathTab.pop()}fullPath=pathTab.pop()+"/"+inputArg.firmwareFile}else{fullPath="/"+inputArg.firmwareFile}}else{fullPath="/"+inputArg.firmwareFile}this.fields.mxStep+=1;callStack.push("api","pcb.UsbUpgrade.doUsbUpgrade","1",this,{File:fullPath})}}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status!==0&&aResult.status!==true){this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}}}});