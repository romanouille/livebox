define(["utils/console","engine/callStack"],function(console,callStack){"use strict";return{isConnected:{name:"Indicates whether the device is connected or not",description:"This method checks whether or not the local device is connected.",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{}},call:function(aStep,aResult){var result;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.data={isEthernetConnected:true};this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;if(callStack.hasCapability("hasConnectionManager")){callStack.push("api","com.softathome.ConnectionManager.Client.Common.GetConnectionState","2",this)}else{callStack.push("api","com.softathome.Network.Common.GetEthernetStatus","1",this)}}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0){this.fields.data.isEthernetConnected=aResult.data.result[0]==="LINK"}else{callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status===0){this.fields.data.isEthernetConnected=aResult.data.link_state==="OK"&&aResult.data.state==="OK"}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},getConfiguration:{name:"Returns the network configuration",description:"This method returns the network configuration of the current device.",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},hasCM:false},call:function(aStep,aResult){var result;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.aFilter=aResult.inputList[0];this.fields.nbStep=0;this.fields.mxStep=0;this.fields.hasCM=callStack.hasCapability("hasConnectionManager");if(!this.fields.aFilter||Object.typeOf(this.fields.aFilter.parameterList)!=="array"||!this.fields.aFilter.parameterList.length||this.fields.hasCM){this.fields.aFilter=null;this.fields.data={isEthernetConnected:true,ethernetSpeed:100,ethernetMode:"",isDhcpActivated:true,dhcpStatus:"BOUND",ipIpv4:"192.168.1.10",maskIpv4:"255.255.255.0",gatewayIpv4:"192.168.1.1",macAddress:"",dnsPrimaryIpv4:"192.168.1.1",dnsSecondaryIpv4:"0.0.0.0"};if(this.fields.hasCM){this.fields.mxStep+=1;callStack.push("api","com.softathome.ConnectionManager.Client.Common.GetConfiguration","10",this)}else{this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.GetEthernetStatus","1",this);this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.DHCP.GetActivationState","2",this);this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.DHCP.GetInternalState","3",this);this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.GetIp","4",this);this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.GetMask","5",this);this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.GetGatewayIp","6",this);this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.GetDns1Ip","7",this);this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.GetDns2Ip","8",this);this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.GetMacAddress","9",this)}}else{this.fields.data={};if(this.fields.aFilter.parameterList.indexOf("ethernetStatus")!==-1||this.fields.aFilter.parameterList.indexOf("ethernetSpeed")!==-1||this.fields.aFilter.parameterList.indexOf("ethernetMode")!==-1){this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.GetEthernetStatus","1",this)}if(this.fields.aFilter.parameterList.indexOf("isDhcpActivated")!==-1){this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.DHCP.GetActivationState","2",this)}if(this.fields.aFilter.parameterList.indexOf("dhcpStatus")!==-1){this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.DHCP.GetInternalState","3",this)}if(this.fields.aFilter.parameterList.indexOf("ipIpv4")!==-1){this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.GetIp","4",this)}if(this.fields.aFilter.parameterList.indexOf("maskIpv4")!==-1){this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.GetMask","5",this)}if(this.fields.aFilter.parameterList.indexOf("gatewayIpv4")!==-1){this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.GetGatewayIp","6",this)}if(this.fields.aFilter.parameterList.indexOf("dnsPrimaryIpv4")!==-1){this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.GetDns1Ip","7",this)}if(this.fields.aFilter.parameterList.indexOf("dnsSecondaryIpv4")!==-1){this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.GetDns2Ip","8",this)}if(this.fields.aFilter.parameterList.indexOf("macAddress")!==-1){this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.GetMacAddress","9",this)}}}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0){if(!this.fields.aFilter||this.fields.aFilter.parameterList.indexOf("ethernetStatus")!==-1){this.fields.data.ethernetStatus=aResult.data.result[0]==="LINK"}if(!this.fields.aFilter||this.fields.aFilter.parameterList.indexOf("ethernetSpeed")!==-1){if(aResult.data.result[1]!=="NULL"){this.fields.data.ethernetSpeed=parseInt(aResult.data.result[1],10)}else{this.fields.data.ethernetSpeed=-1}}if(!this.fields.aFilter||this.fields.aFilter.parameterList.indexOf("ethernetMode")!==-1){if(aResult.data.result[2]!=="NULL"){this.fields.data.ethernetMode=aResult.data.result[2]}else{this.fields.data.ethernetMode=""}}}else{callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status===0){this.fields.data.isDhcpActivated=aResult.data.result==="yes"}else{callStack.logMessage("SEM_SYN_ERROR")}break;case"3":if(aResult.status===0){this.fields.data.dhcpStatus=aResult.data.result}else{callStack.logMessage("SEM_SYN_ERROR")}break;case"4":if(aResult.status===0){this.fields.data.ipIpv4=aResult.data.result}else{callStack.logMessage("SEM_SYN_ERROR")}break;case"5":if(aResult.status===0){this.fields.data.maskIpv4=aResult.data.result}else{callStack.logMessage("SEM_SYN_ERROR")}break;case"6":if(aResult.status===0){this.fields.data.gatewayIpv4=aResult.data.result}else{callStack.logMessage("SEM_SYN_ERROR")}break;case"7":if(aResult.status===0){this.fields.data.dnsPrimaryIpv4=aResult.data.result}else{callStack.logMessage("SEM_SYN_ERROR")}break;case"8":if(aResult.status===0){this.fields.data.dnsSecondaryIpv4=aResult.data.result}else{callStack.logMessage("SEM_SYN_ERROR")}break;case"9":if(aResult.status===0){this.fields.data.macAddress=aResult.data.result}else{callStack.logMessage("SEM_SYN_ERROR")}break;case"10":if(aResult.status===0){this.fields.data.ipIpv4=aResult.data.ipv4.ip_address;this.fields.data.maskIpv4=aResult.data.ipv4.subnet_mask;this.fields.data.macAddress=aResult.data.hwaddr;this.fields.data.gatewayIpv4=aResult.data.ipv4.gateway_address;this.fields.data.dnsPrimaryIpv4=aResult.data.dns_list.length>0?aResult.data.dns_list[0]:"";this.fields.data.dnsSecondaryIpv4=aResult.data.dns_list.length>1?aResult.data.dns_list[1]:"";this.fields.mxStep+=1;callStack.push("api","com.softathome.ConnectionManager.Client.Common.GetConnectionState","11",this)}else{callStack.logMessage("SEM_SYN_ERROR")}break;case"11":if(aResult.status===0){this.fields.data.isEthernetConnected=aResult.data.state==="OK"&&aResult.data.link_state==="OK";this.fields.mxStep+=1;callStack.push("api","com.softathome.ConnectionManager.Client.DHCP.GetActivationState","12",this)}else{callStack.logMessage("SEM_SYN_ERROR")}break;case"12":if(aResult.status===0){this.fields.data.isDhcpActivated=aResult.data.is_activated;this.fields.mxStep+=1;callStack.push("api","com.softathome.ConnectionManager.Client.Ethernet.GetStatus","13",this)}else{callStack.logMessage("SEM_SYN_ERROR")}break;case"13":if(aResult.status===0){this.fields.data.ethernetSpeed=aResult.data.maximum_speed;this.fields.data.ethernetMode=aResult.data.duplex_mode}else{callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},setConfiguration:{name:"Updates the network configuration",description:"This method updates the network configuration of the current device.",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},hasCM:false},call:function(aStep,aResult){var result,configObj;if(aStep==="0"){this.fields.uuid=aResult.uuid;configObj=aResult.inputList[0];this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.hasCM=callStack.hasCapability("hasConnectionManager");if(typeof configObj.isDhcpActivated==="boolean"){this.fields.mxStep+=1;if(this.fields.hasCM){callStack.push("api","com.softathome.ConnectionManager.Client.DHCP.SetActivationState","1",this,{is_activated:configObj.isDhcpActivated})}else{callStack.push("api","com.softathome.Network.DHCP.SetActivationState","1",this,configObj.isDhcpActivated?"yes":"no","SAVE")}}if(!configObj.isDhcpActivated){if(this.fields.hasCM){var ipv4obj={ip_address:typeof configObj.ipIpv4==="string"?configObj.ipIpv4:"127.0.0.1",subnet_mask:typeof configObj.maskIpv4==="string"?configObj.maskIpv4:"255.255.255.0",gateway_address:typeof configObj.gatewayIpv4==="string"?configObj.gatewayIpv4:"192.168.1.1"};this.fields.mxStep+=1;callStack.push("api","com.softathome.ConnectionManager.Client.DHCP.SetStaticConfiguration","1",this,{ipv4:ipv4obj})}else{if(typeof configObj.ipIpv4==="string"){callStack.push("api","com.softathome.Network.Common.SetIp","1",this,configObj.ipIpv4,"SAVE|APPLY")}if(typeof configObj.maskIpv4==="string"){this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.SetMask","1",this,configObj.maskIpv4,"SAVE|APPLY")}if(typeof configObj.gatewayIpv4==="string"){this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.SetGatewayIp","1",this,configObj.gatewayIpv4,"SAVE|APPLY")}}}if(this.fields.hasCM){var dns_list=[typeof configObj.dnsPrimaryIpv4==="string"?configObj.dnsPrimaryIpv4:"",typeof configObj.dnsSecondaryIpv4==="string"?configObj.dnsSecondaryIpv4:""];this.fields.mxStep+=1;callStack.push("api","com.softathome.ConnectionManager.Client.Common.SetDNSConfiguration","1",this,{dns_list:dns_list})}else{if(typeof configObj.dnsPrimaryIpv4==="string"){this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.SetDns1Ip","1",this,configObj.dnsPrimaryIpv4,"SAVE|APPLY")}if(typeof configObj.dnsSecondaryIpv4==="string"){this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.SetDns2Ip","1",this,configObj.dnsSecondaryIpv4,"SAVE|APPLY")}}}else{if(aStep==="1"){this.fields.nbStep+=1;if(aResult.status!==0){this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}}else{console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},renewConfiguration:{name:"Renew the network configuration through DHCP server",description:"This method requests the DHCP server to renew the network configuration.",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{}},call:function(aStep,aResult){var result;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;if(callStack.hasCapability("hasConnectionManager")){callStack.push("api","com.softathome.ConnectionManager.Client.DHCP.Renew","1",this)}else{callStack.push("api","com.softathome.Network.DHCP.Renew","1",this)}}else{if(aStep==="1"){this.fields.nbStep+=1;if(aResult.status!==0){this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}}else{console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},checkInternetAccess:{name:"Checks the Internet access",description:"This method tests whether or not the current device has an Internet access.",fields:{uuid:null,nbStep:0,mxStep:0,configObj:null,status:0,data:{},hasCM:false},call:function(aStep,aResult){var result,hostTab,hostUrl,ip,size;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.data={};this.fields.nbStep=0;this.fields.mxStep=0;this.fields.configObj=aResult.inputList[0];this.fields.hasCM=callStack.hasCapability("hasConnectionManager");if(this.fields.hasCM){this.fields.mxStep+=1;callStack.push("api","com.softathome.ConnectionManager.Client.Common.GetConnectionState","4",this)}else if(callStack.isOnHgw()){callStack.logMessage("SEM_VALUE_WORK","Invalid way to check Internet Access on Home gateway.");this.fields.data.hasInternetAccess=true}else{hostTab=this.fields.configObj.fileUrl.split("/");if(this.fields.configObj.fileUrl.indexOf("://")>=0){hostUrl=hostTab[2]}else{hostUrl=hostTab[0]}this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.ResolveHostname","1",this,hostUrl)}}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0){if(aResult.data.result.split(".").length===4){ip=aResult.data.result.replace(/^\s+/g,"").replace(/\s+$/g,"");this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.Ping","2",this,ip)}else{this.fields.mxStep+=1;callStack.push("api","com.softathome.FS.Transfer.Download.GetRemoteFileSize","3",this,this.fields.configObj.fileUrl)}}else{callStack.logMessage("SEM_VALUE_WORK","Checking remote file size as hostname resolution is not supported");this.fields.mxStep+=1;callStack.push("api","com.softathome.FS.Transfer.Download.GetRemoteFileSize","3",this,this.fields.configObj.fileUrl)}break;case"2":if(aResult.status===0){if(parseInt(aResult.data.result,10)<0){this.fields.mxStep+=1;callStack.push("api","com.softathome.FS.Transfer.Download.GetRemoteFileSize","3",this,this.fields.configObj.fileUrl)}else{this.fields.data.hasInternetAccess=true}}else if(aResult.status===-999){this.fields.mxStep+=1;callStack.push("api","com.softathome.FS.Transfer.Download.GetRemoteFileSize","3",this,this.fields.configObj.fileUrl)}else{this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}break;case"3":if(aResult.status===0){size=parseInt(aResult.data.result,10);if(size<0){this.fields.data.hasInternetAccess=false}else{this.fields.data.hasInternetAccess=true}}else{this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}break;case"4":if(aResult.status===0){if(aResult.data.link_state==="OK"&&aResult.data.state==="OK"){this.fields.mxStep+=1;callStack.push("api","com.softathome.FS.Transfer.Download.GetRemoteFileSize","3",this,this.fields.configObj.fileUrl)}else{this.fields.data.hasInternetAccess=false}}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},checkRemoteFile:{name:"Checks the validity of a remote file",description:"This method tests whether or not a remote file is valid.",fields:{uuid:null,nbStep:0,mxStep:0,resources:null,status:0,data:{}},call:function(aStep,aResult){var result,configObj,size;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.data={};this.fields.nbStep=0;this.fields.mxStep=0;configObj=aResult.inputList[0];this.fields.mxStep+=1;callStack.push("api","com.softathome.FS.Transfer.Download.GetRemoteFileSize","1",this,configObj.fileUrl)}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0){size=parseInt(aResult.data.result,10);if(size<0){this.fields.data.isFileUrlValid=false}else{this.fields.data.isFileUrlValid=true}}else{this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},getRemoteAccessConfiguration:{name:"Returns the remote access configuration",description:"This method returns the remote access configuration of the current device.",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{}},call:function(aStep,aResult){var result,indPort,rule,mapping;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.data={connectionType:"none",connectionStatus:"",externalIpIpv4:"",portMappingList:[]};this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.UPnP.IGDClient.GetInfo","1",this)}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0){if(aResult.data.connection_type==="IP_Bridged"){this.fields.data.connectionType="bridged"}else if(aResult.data.connection_type==="IP_Routed"){this.fields.data.connectionType="routed"}else{this.fields.data.connectionType="none"}this.fields.data.connectionStatus=aResult.data.connection_status.toLowerCase();this.fields.data.externalIpIpv4=aResult.data.external_ip_address;this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.UPnP.IGDClient.GetPortMappingList","2",this)}else{this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status===0){for(indPort=0;indPort<aResult.data.entries.length;indPort+=1){rule=aResult.data.entries[indPort];mapping={isEnabled:rule.enabled,leaseDuration:rule.lease_duration,ipAddress:rule.internal_client,internalPort:rule.internal_port.toString(),remoteIpAddress:rule.remote_host,externalPort:rule.external_port.toString(),protocol:rule.protocol.toLowerCase(),name:rule.description};this.fields.data.portMappingList.push(mapping)}}else{this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},addRemoteAccessRule:{name:"Adds a port mapping rule",description:"This method adds a port mapping rule on the remote access configuration of the current device.",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{}},call:function(aStep,aResult){var result,configObj,rule;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.data={};this.fields.nbStep=0;this.fields.mxStep=0;configObj=aResult.inputList[0];rule={external_port:parseInt(configObj.externalPort,10),internal_port:parseInt(configObj.internalPort,10),protocol:configObj.protocol.toUpperCase(),remote_host:configObj.remoteIpAddress,lease_duration:configObj.leaseDuration,description:configObj.name};this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.UPnP.IGDClient.AddPortMapping","1",this,rule)}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status!==0){this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},deleteRemoteAccessRule:{name:"Deletes a port mapping rule",description:"This method deletes a port mapping rule on the remote access configuration of the current device.",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{}},call:function(aStep,aResult){var result,configObj,rule;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.data={};this.fields.nbStep=0;this.fields.mxStep=0;configObj=aResult.inputList[0];rule={external_port:parseInt(configObj.externalPort,10),protocol:configObj.protocol.toUpperCase(),remote_host:configObj.remoteIpAddress};this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.UPnP.IGDClient.DeletePortMapping","1",this,rule)}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status!==0){this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}}}});