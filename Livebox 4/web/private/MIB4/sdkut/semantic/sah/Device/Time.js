define(["utils/console","engine/callStack"],function(console,callStack){"use strict";var timezoneList={Paris:"CET-1CEST-2,M3.5.0/02:00:00,M10.5.0/03:00:00","Adelaide, Darwin":"CST-9:30CDT-10:30,M10.5.0/02:00:00,M3.5.0/03:00:00",Alaska:"AKST9AKDT","Amsterdam, Bern, Rome, Stockholm":"CET-1CEST-2,M3.5.0/02:00:00,M10.5.0/03:00:00",Arizona:"MST7","Atlantic Time (Canada)":"AST4ADT","Auckland, Wellington":"NZST-12NZDT-13,M10.1.0/02:00:00,M3.3.0/03:00:00","Bangkok, Hanoi, Jakarta":"WIB-7","Belgrade, Berlin, Budapest, Ljubljana":"CET-1CEST-2,M3.5.0/02:00:00,M10.5.0/03:00:00","Bratislava, Prague, Vienna":"CET-1CEST-2,M3.5.0/02:00:00,M10.5.0/03:00:00",Brisbane:"EST-10","Brussels, Copenhagen, Madrid":"CET-1CEST-2,M3.5.0/02:00:00,M10.5.0/03:00:00","Canberra, Melbourne, Sydney":"EET-10EETDT","Casablanca, Lisbon, Monrovia":"WET-0WEST-1,M3.5.0/01:00:00,M10.5.0/02:00:00","Central America":"CST+6","Central Time (US/Canada)":"CST6CDT","Eastern Time (US/Canada)":"EST5EDT","GMT: Dublin, Edinburgh, London":"GMT+0IST-1,M3.5.0/01:00:00,M10.5.0/02:00:00",Hawaii:"HAW10","Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius":"EET-2EEST-3,M3.5.0/03:00:00,M10.5.0/04:00:00","Hobart, Vladivosto":"EST-10EDT-11,M10.1.0/02:00:00,M3.5.0/03:00:00","Kuala Lumpur, Singapore":"SGT-8","Moscow, St. Petersburg, Volgograd":"MSK-3MSD,M3.5.0/2,M10.5.0/3","Mountain Time (US/Canada)":"MST7MDT",Newfoundland:"NST+3:30NDT+2:30,M4.1.0/00:01:00,M10.5.0/00:01:00","Pacific Time (US/Canada), Tijuana":"PST8PDT","Perth, Taipei":"WST-8"};return{getTime:{name:"Returns the current time",description:"This method returns the current time.",fields:{uuid:null,nbStep:0,mxStep:0,capabilities:null,status:0,data:{}},call:function(aStep,aResult){var result,date;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;if(callStack.isOnHgw()){date=new Date;this.fields.data={time:date.toString()}}else{this.fields.capabilities=callStack.getCapabilities();if(this.fields.capabilities.hasTime2){this.fields.mxStep+=1;callStack.push("api","com.softathome.Time.GetTime","1",this)}else{callStack.logMessage("SEM_VALUE_WORK","Time API not supported");date=new Date;this.fields.data.time=date.toString()}}}else{if(aStep==="1"){this.fields.nbStep+=1;if(aResult.status===0){date=new Date(aResult.data.time);this.fields.data.time=date.toString()}else{if(callStack.isOnStb()){callStack.logMessage("SEM_VALUE_WORK","Using local STB time as Time API is not supported");date=new Date;this.fields.data.time=date.toString()}else{this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}}}else{console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},getLocalTimeZoneName:{name:"Returns the current time zone.",description:"This method returns the current time zone.",fields:{uuid:null,nbStep:0,mxStep:0,capabilities:null,status:0,data:{}},call:function(aStep,aResult){var result,timezone,lastTimezone;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.data={timezone:"Paris",timezoneList:[]};this.fields.nbStep=0;this.fields.mxStep=0;if(callStack.isOnHgw()){this.fields.mxStep+=1;callStack.push("api","pcb.Time.getLocalTimeZoneName","1",this,{})}else{this.fields.capabilities=callStack.getCapabilities();if(this.fields.capabilities.hasTime2){this.fields.mxStep+=1;callStack.push("api","com.softathome.Time.GetLocalTimeZoneName","1",this);this.fields.mxStep+=1;callStack.push("api","com.softathome.Time.ListLocalTimeZoneNames","2",this)}else if(this.fields.capabilities.hasTime1){this.fields.mxStep+=1;callStack.push("api","com.softathome.System.Time.GetTimeZone","3",this)}}}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){if(callStack.isOnHgw()){this.fields.mxStep+=1;callStack.push("api","pcb.Time.ListLocalTimeZoneNames","2",this,{})}this.fields.data.timezone=aResult.data.timezone}else{callStack.logMessage("SEM_VALUE_WORK","Invalid local Time Zone");this.fields.data.timezone=""}break;case"2":if(aResult.status===0||aResult.status===true){this.fields.data.timezoneList=aResult.data.timezones}else{this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}break;case"3":if(aResult.status===0){this.fields.data.timezone="";this.fields.data.timezoneList=[];lastTimezone="";for(timezone in timezoneList){if(timezoneList.hasOwnProperty(timezone)){if(timezoneList[timezone]&&timezone!==lastTimezone){this.fields.data.timezoneList.push(timezone);lastTimezone=timezone;console.debug("Comparing timezone '"+timezoneList[timezone]+"' ("+timezone+") to selection '"+aResult.data.time_zone+"'");if(!this.fields.data.timezone&&timezoneList[timezone]===aResult.data.time_zone){this.fields.data.timezone=timezone}}}}}else{this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){if(!this.fields.data.timezone){this.fields.data.timezone=this.fields.data.timezoneList[0]}result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},setLocalTimeZoneName:{name:"Updates the current time zone",description:"This method updates the current time zone.",fields:{uuid:null,nbStep:0,mxStep:0,capabilities:null,status:0},call:function(aStep,aResult){var result,configObj,timezone;if(aStep==="0"){this.fields.uuid=aResult.uuid;configObj=aResult.inputList[0];this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;if(typeof configObj.timezone==="string"){this.fields.capabilities=callStack.getCapabilities();if(callStack.isOnHgw()){this.fields.mxStep+=1;callStack.push("api","pcb.Time.setLocalTimeZoneName","1",this,{timezone:configObj.timezone})}else if(this.fields.capabilities.hasTime2){this.fields.mxStep+=1;callStack.push("api","com.softathome.Time.SetLocalTimeZoneName","1",this,{timezone:configObj.timezone})}else if(this.fields.capabilities.hasTime1){for(timezone in timezoneList){if(timezoneList.hasOwnProperty(timezone)){if(configObj.timezone===timezone){this.fields.mxStep+=1;callStack.push("api","com.softathome.System.Time.SetTimeZone","1",this,{time_zone:timezoneList[timezone]});break}}}}}else{console.error("Invalid timezone '"+configObj.timezone+"'");this.fields.mxStep=0}}else{if(aStep==="1"){this.fields.nbStep+=1;if(aResult.status!==0&&aResult.status!==true){this.fields.mxStep=-1;this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}}else{console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},getNtpConfiguration:{name:"Returns the NTP configuration.",description:"This method returns the NTP configuration of the current device.",fields:{uuid:null,nbStep:0,mxStep:2,data:{}},call:function(aStep,aResult){var result,capabilities;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.data={nextUpdateTime:0,serverList:[]};this.fields.nbStep=0;this.fields.mxStep=0;capabilities=callStack.getCapabilities();if(!capabilities.hasConnectionManager){this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.GetSntpSyncTime","1",this)}else{callStack.logMessage("SEM_VALUE_WORK","Missing API com.softathome.Network.Common.GetSntpSyncTime due to ConnectionManager")}this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.GetSntpHostnames","2",this)}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0){this.fields.data.nextUpdateTime=aResult.data.synchro_time}else{callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status===0){this.fields.data.serverList=aResult.data.ntp_servers}else{callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},setNtpConfiguration:{name:"Updates the NTP configuration.",description:"This method updates the NTP configuration of the current device.",fields:{uuid:null,nbStep:0,mxStep:2,data:{}},call:function(aStep,aResult){var result,configObj,capabilities;if(aStep==="0"){this.fields.uuid=aResult.uuid;configObj=aResult.inputList[0];this.fields.status=0;this.fields.data={};this.fields.nbStep=0;this.fields.mxStep=0;capabilities=callStack.getCapabilities();if(!capabilities.hasConnectionManager){if(Object.typeOf(configObj.nextUpdateTime)==="number"){this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.SetSntpSyncTime","1",this,{synchro_time:configObj.nextUpdateTime})}}else{callStack.logMessage("SEM_VALUE_WORK","Missing API com.softathome.Network.Common.GetSntpSyncTime due to ConnectionManager")}if(Object.typeOf(configObj.serverList)==="array"&&configObj.serverList.length>0){this.fields.mxStep+=1;callStack.push("api","com.softathome.Network.Common.SetSntpHostnames","2",this,{ntp_servers:configObj.serverList})}}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status!==0){callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status!==0){callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}}}});