define(["utils/console","engine/callStack"],function(console,callStack){"use strict";return{listRules:{name:"Lists Nat/Pat rules",description:"This method returns the list of all Nat/Pat rules.",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{}},call:function(aStep,aResult){var result,ruleItem={},aRule,listRules,inputObj,listUpnpRules,item;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.data={userRules:[],upnpRules:[]};this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;inputObj={origin:"webui"};callStack.push("api","pcb.Firewall.getPortForwarding","1",this,inputObj)}else{this.fields.nbStep+=1;switch(aStep){case"1":if((aResult.status===0||aResult.status===true)&&!aResult.errors){listRules=aResult.data;for(item in listRules){if(listRules.hasOwnProperty(item)){aRule=listRules[item];if(aRule.Protocol){switch(aRule.Protocol){case"6":aRule.Protocol="tcp";break;case"6,17":aRule.Protocol="both";break;case"7":aRule.Protocol="both";break;case"17":aRule.Protocol="udp";break}}aRule.Id=aRule.Id.substring(6,aRule.Id.length);ruleItem={name:aRule.Id,isEnabled:aRule.Enable,protocol:aRule.Protocol,externalPortRange:aRule.ExternalPort,internalPortRange:aRule.InternalPort,ipAddress:aRule.DestinationIPAddress};this.fields.data.userRules.push(ruleItem)}}inputObj={origin:"upnp"};this.fields.mxStep+=1;callStack.push("api","pcb.Firewall.getPortForwarding","2",this,inputObj)}else{this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status===0||aResult.status===true){listUpnpRules=aResult.data;for(item in listUpnpRules){if(listUpnpRules.hasOwnProperty(item)){aRule=listUpnpRules[item];if(aRule.Protocol){switch(aRule.Protocol){case"6":aRule.Protocol="tcp";break;case"6,17":aRule.Protocol="both";break;case"7":aRule.Protocol="both";break;case"17":aRule.Protocol="udp";break}}aRule.Id=aRule.Id.substring(5,aRule.Id.length);ruleItem={name:aRule.Id,isEnabled:aRule.Enable,protocol:aRule.Protocol,externalPortRange:aRule.ExternalPort,internalPortRange:aRule.InternalPort,ipAddress:aRule.DestinationIPAddress};this.fields.data.upnpRules.push(ruleItem)}}}else{this.fields.status=-1;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}}},addRule:{name:"Adds a new Firewall custom rule",description:"This method adds a new Firewall custom rule.",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{}},call:function(aStep,aResult){var inputArg,inputObj,result,internalPort;if(aStep==="0"){this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.uuid=aResult.uuid;inputArg=aResult.inputList[0];this.fields.inputArg=inputArg;if(Object.typeOf(inputArg.name)==="string"&&Object.typeOf(inputArg.isEnabled)==="boolean"&&Object.typeOf(inputArg.protocol)==="string"&&Object.typeOf(inputArg.ipAddress)==="string"&&Object.typeOf(inputArg.externalPortRange)==="string"&&Object.typeOf(inputArg.internalPortRange)==="string"){if(inputArg.protocol!=="6"&&inputArg.protocol!=="17"&&inputArg.protocol!=="6,17"){switch(inputArg.protocol){case"tcp":inputArg.protocol="6";break;case"both":inputArg.protocol="6,17";break;case"udp":inputArg.protocol="17";break;default:callStack.logMessage("SEM_BAD_ARGS","Error on 'protocol' argument, only 'tcp', 'udp' and 'both' are managed.");break}}internalPort=inputArg.internalPortRange.split("-")[0];inputObj={id:inputArg.name,internalPort:internalPort,externalPort:inputArg.externalPortRange,destinationIPAddress:inputArg.ipAddress,enable:inputArg.isEnabled,persistent:true,protocol:inputArg.protocol,description:inputArg.name,sourceInterface:"data",origin:"webui"};callStack.push("api","pcb.Firewall.setPortForwarding","1",this,inputObj)}}else{this.fields.nbStep+=1;switch(aStep){case"1":console.log(aResult);if(aResult.status===("webui_"+this.fields.inputArg.name).toString()&&!aResult.errors){console.warn("\nWorkaround applied on returned status due to an invalid format.\n");this.fields.mxStep+=1;callStack.push("api","pcb.Firewall.commit","2",this,{})}else{if(aResult.errors){this.fields.data.errors=aResult.errors}this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status!==0&&aResult.status!==true){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}}},deleteRule:{name:"Deletes a Firewall custom rule",description:"This method deletes a Firewall custom rule.",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{}},call:function(aStep,aResult){var result,ruleItem={},listRules,inputObj,item;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.inputArg=aResult.inputList[0];inputObj={origin:"webui"};if(Object.typeOf(this.fields.inputArg.protocol)==="string"&&Object.typeOf(this.fields.inputArg.name)==="string"){if(this.fields.inputArg.protocol!=="6"&&this.fields.inputArg.protocol!=="17"&&this.fields.inputArg.protocol!=="6,17"){switch(this.fields.inputArg.protocol){case"tcp":this.fields.inputArg.protocol="6";break;case"both":this.fields.inputArg.protocol="6,17";break;case"udp":this.fields.inputArg.protocol="17";break;default:this.fields.inputArg.protocol="6,17";callStack.logMessage("SEM_BAD_ARGS","Error on 'protocol' argument, only 'tcp', 'udp' and 'both' are managed.");break}}this.fields.mxStep+=1;callStack.push("api","pcb.Firewall.getPortForwarding","1",this,inputObj)}else{callStack.logMessage("SYN_BAD_ARGS","Wrong type of argument.");this.fields.status=-1;this.fields.mxStep=0}}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){listRules=aResult.data;for(item in listRules){if(listRules.hasOwnProperty(item)){if(listRules[item].Id===("webui_"+this.fields.inputArg.name).toString()&&listRules[item].Protocol===this.fields.inputArg.protocol){ruleItem={name:listRules[item].Id,isEnabled:listRules[item].Enable,protocol:listRules[item].Protocol,externalPortRange:listRules[item].ExternalPort,internalPortRange:listRules[item].InternalPort,origin:listRules[item].Origin,ipAddress:listRules[item].DestinationIPAddress}}}}if(Object.typeOf(this.fields.inputArg.name)==="string"&&Object.typeOf(this.fields.inputArg.protocol)==="string"){inputObj={id:ruleItem.name,destinationIPAddress:ruleItem.ipAddress,origin:ruleItem.origin};this.fields.mxStep+=1;callStack.push("api","pcb.Firewall.deletePortForwarding","2",this,inputObj)}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;callStack.push("api","pcb.Firewall.commit","3",this,{})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"3":if(aResult.status!==0&&aResult.status!==true){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};callStack.popAll("api",result,this.fields.uuid)}}}},setRuleState:{name:"Updates the state of a Nat/Pat rule",description:"This method sets the state of a user defined Nat/Pat rule.",fields:{uuid:null,nbStep:0,mxStep:0,status:0,inputArg:""},call:function(aStep,aResult){var result,ruleItem={},listRules,inputObj,item;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.inputArg=aResult.inputList[0];inputObj={origin:"webui"};callStack.push("api","pcb.Firewall.getPortForwarding","1",this,inputObj)}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){listRules=aResult.data;for(item in listRules){if(listRules.hasOwnProperty(item)){if(listRules[item].Id===("webui_"+this.fields.inputArg.name).toString()){ruleItem={name:listRules[item].Id,isEnabled:listRules[item].Enable,protocol:listRules[item].Protocol,externalPortRange:listRules[item].ExternalPort,internalPortRange:listRules[item].InternalPort,ipAddress:listRules[item].DestinationIPAddress}}}}if(Object.typeOf(this.fields.inputArg.name)==="string"&&Object.typeOf(this.fields.inputArg.isEnabled)==="boolean"){inputObj={id:this.fields.inputArg.name,enable:this.fields.inputArg.isEnabled,internalPort:ruleItem.internalPortRange,externalPort:ruleItem.externalPortRange,destinationIPAddress:ruleItem.ipAddress,protocol:ruleItem.protocol,description:this.fields.inputArg.name,sourceInterface:"data",origin:"webui"};this.fields.mxStep+=1;callStack.push("api","pcb.Firewall.setPortForwarding","2",this,inputObj)}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status===("webui_"+this.fields.inputArg.name).toString()&&!aResult.errors){console.warn("\nWorkaround applied on returned status due to an invalid format.\n");this.fields.mxStep+=1;callStack.push("api","pcb.Firewall.commit","3",this,{})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"3":if(aResult.status!==0&&aResult.status!==true){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};callStack.popAll("api",result,this.fields.uuid)}}}}}});