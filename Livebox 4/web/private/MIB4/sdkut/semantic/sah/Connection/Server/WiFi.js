define(["utils/console","engine/callStack"],function(console,callStack){"use strict";var uniqueFilter=function(value,index,self){return self.indexOf(value)===index},fillWiFiAccessPointList=function(aRadioAccessPointLinkAssociation,aAccessPointList,aVapsObj,aLinkModeHint){var key,accessPointToAdd,current,i,linkTypeAppend,supportedSecurityModesArray,mappedSecurityMode;for(key in aVapsObj){if(aVapsObj.hasOwnProperty(key)){accessPointToAdd={};current=aVapsObj[key];accessPointToAdd.accessPointId=key;accessPointToAdd.ssid=current.SSID;accessPointToAdd.bssid=current.BSSID;accessPointToAdd.isEnabled=current.VAPStatus.toLowerCase()==="up"?true:false;accessPointToAdd.isSsidBroadcasted=current.SSIDAdvertisementEnabled;for(i=0;i<aRadioAccessPointLinkAssociation.length;i+=1){if(key===aRadioAccessPointLinkAssociation[i].accessPointId){accessPointToAdd.frequencyBand=aRadioAccessPointLinkAssociation[i].frequencyBand;accessPointToAdd.radioId=aRadioAccessPointLinkAssociation[i].radioId;linkTypeAppend="WIFI_";if(aRadioAccessPointLinkAssociation[i].frequencyBand.toLowerCase()==="2.4ghz"){linkTypeAppend+="2.4_"}else if(aRadioAccessPointLinkAssociation[i].frequencyBand.toLowerCase()==="5ghz"){linkTypeAppend+="5_"}switch(aLinkModeHint){case"private":linkTypeAppend+="PRIVATE";break;case"guest":linkTypeAppend+="GUEST";break;case"hotspot":if(current.Security.ModeEnabled.toLowerCase()==="none"){linkTypeAppend="WIFI_OPEN_HOTSPOT"}else{linkTypeAppend="WIFI_SECURE_HOTSPOT"}break;default:break}accessPointToAdd.linkType=linkTypeAppend;aRadioAccessPointLinkAssociation[i].linkType=linkTypeAppend;break}}mappedSecurityMode=current.Security.ModeEnabled;accessPointToAdd.securityMode=mappedSecurityMode||"";accessPointToAdd.supportedSecurityModeList=[];supportedSecurityModesArray=current.Security.ModesSupported.split(",");for(i=0;i<supportedSecurityModesArray.length;i=i+1){mappedSecurityMode=supportedSecurityModesArray[i];if(mappedSecurityMode!==false){accessPointToAdd.supportedSecurityModeList.push(mappedSecurityMode)}}accessPointToAdd.securityKeyList={};accessPointToAdd.securityKeyList.wep=current.Security.WEPKey;accessPointToAdd.securityKeyList.wpa=current.Security.KeyPassPhrase;if(current.Security.ModeEnabled.toLowerCase().indexOf("wpa",0)!==-1){accessPointToAdd.securityKey=current.Security.KeyPassPhrase}else if(current.Security.ModeEnabled.toLowerCase().indexOf("wep",0)!==-1){accessPointToAdd.securityKey=current.Security.WEPKey}else{accessPointToAdd.securityKey=""}accessPointToAdd.isMacFilteringActivated=current.MACFiltering.Mode.toLowerCase()==="off"?false:true;if(current.hasOwnProperty("WPS")){accessPointToAdd.pairing={};accessPointToAdd.pairing.isPairingEnabled=current.WPS.Enable;accessPointToAdd.pairing.isPairingInProgress=current.WPS.PairingInProgress;accessPointToAdd.pairing.wpsMode=current.WPS.ConfigMethodsEnabled}aAccessPointList.push(accessPointToAdd)}}},fillHotspotResult=function(inputData,isSecured){var result={};result.isWiFiActivatedOnHotSpot=true;if(inputData.Status.toLowerCase()==="error"){result.hotSpotServiceState="error"}else if(inputData.Status.toLowerCase()==="not_eligible"){result.hotSpotServiceState="not eligible"}else if(inputData.Status.toLowerCase()==="wifi-off"){result.hotSpotServiceState="activated";result.isWiFiActivatedOnHotSpot=false}else if(inputData.Status.toLowerCase()==="activated"){result.hotSpotServiceState="activated"}else if(inputData.Status.toLowerCase()==="deactivated"){result.hotSpotServiceState="deactivated"}result.ssid=inputData.SSID;result.isSecured=isSecured;return result};return{listAccessPoints:{name:"List radios, access points, pairing state according to filter",description:"This method returns a list of radios, access points, their pairing state and settings",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result,radioAccessPointLinkAssociation=[],accessPointList=[],radioList=[],lanVapsObj,guestVapsObj,hotspotVapsObj,radioObj,base,radioCache,key,subkey,subsubkey,radioToAdd,current,filterParameters,radioListBuffer=[],accessPointListBuffer=[],i,j,k;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList[0];callStack.push("api","pcb.NMC.wiFiGet","1",this)}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;callStack.cache.set("configurationMode",aResult.data.ConfigurationMode,function(){callStack.push("api","pcb.NeMo.getVapsConfig","2",this,"lan",{mibs:"wlanvap"})}.bind(this))}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;if(aResult.data){callStack.cache.set("lanVaps",aResult.data,function(){callStack.push("api","pcb.NeMo.getVapsConfig","3",this,"guest",{mibs:"wlanvap"})}.bind(this))}else{callStack.cache.set("lanVaps",{},function(){callStack.push("api","pcb.NeMo.getVapsConfig","3",this,"guest",{mibs:"wlanvap"})}.bind(this))}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"3":this.fields.mxStep+=1;if(aResult.data){callStack.cache.set("guestVaps",aResult.data,function(){if(callStack.getCapabilities().isOrange){callStack.reCall(this,"4",0)}else{callStack.push("api","pcb.NeMo.getVapsConfig","4",this,"hotspot",{mibs:"wlanvap"})}}.bind(this))}else{callStack.cache.set("guestVaps",{},function(){if(callStack.getCapabilities().isOrange){callStack.reCall(this,"4",0)}else{callStack.push("api","pcb.NeMo.getVapsConfig","4",this,"hotspot",{mibs:"wlanvap"})}}.bind(this))}break;case"4":this.fields.mxStep+=1;if(!callStack.getCapabilities().isOrange){if(aResult.data){callStack.cache.set("hotspotVaps",aResult.data,function(){callStack.push("api","pcb.NeMo.getRadioConfig","5",this,"lan",{mibs:"base wlanradio"})}.bind(this))}else{callStack.cache.set("hotspotVaps",{},function(){callStack.push("api","pcb.NeMo.getRadioConfig","5",this,"lan",{mibs:"base wlanradio"})}.bind(this))}}else{callStack.push("api","pcb.NeMo.getRadioConfig","5",this,"lan",{mibs:"base wlanradio"})}break;case"5":if(aResult.status===0||aResult.status===true){if(aResult.data){radioCache=aResult.data}else{radioCache={}}if(typeof callStack.cache.get("lanVaps").wlanvap==="object"){lanVapsObj=callStack.cache.get("lanVaps").wlanvap}if(typeof callStack.cache.get("guestVaps").wlanvap==="object"){guestVapsObj=callStack.cache.get("guestVaps").wlanvap}if(!callStack.getCapabilities().isOrange){if(typeof callStack.cache.get("hotspotVaps").wlanvap==="object"){hotspotVapsObj=callStack.cache.get("hotspotVaps").wlanvap}}if(typeof radioCache.wlanradio==="object"){radioObj=radioCache.wlanradio}if(typeof radioCache.base==="object"){base=radioCache.base}for(key in radioObj){if(radioObj.hasOwnProperty(key)){radioToAdd={};current=radioObj[key];radioToAdd.radioId=key;radioToAdd.isEnabled=current.RadioStatus.toLowerCase()==="up"?true:false;radioToAdd.frequencyBand=current.OperatingFrequencyBand;radioToAdd.channelMode=current.AutoChannelEnable?"auto":"manual";radioToAdd.channelNumber=current.Channel;radioToAdd.supportedChannelList=current.PossibleChannels.split(",");radioToAdd.standard=current.OperatingStandards;radioToAdd.supportedStandardList=current.SupportedStandards.split(",");radioToAdd.bandwidth=current.OperatingChannelBandwidth==="Auto"?"auto":current.OperatingChannelBandwidth;radioToAdd.supportedBandwidthList=current.OperatingFrequencyBand==="5GHz"?["80MHz"]:["20MHz","40MHz","auto"];radioToAdd.accessPointList=[];for(subkey in base){if(base.hasOwnProperty(subkey)){if(subkey===key){for(subsubkey in base[subkey].ULIntf){if(base[subkey].ULIntf.hasOwnProperty(subsubkey)){radioToAdd.accessPointList.push(subsubkey);radioAccessPointLinkAssociation.push({accessPointId:subsubkey,radioId:key,frequencyBand:current.OperatingFrequencyBand,linkMode:"WIFI",linkType:""})}}break}}}radioList.push(radioToAdd)}}fillWiFiAccessPointList(radioAccessPointLinkAssociation,accessPointList,lanVapsObj,"private");fillWiFiAccessPointList(radioAccessPointLinkAssociation,accessPointList,guestVapsObj,"guest");if(!callStack.getCapabilities().isOrange){fillWiFiAccessPointList(radioAccessPointLinkAssociation,accessPointList,hotspotVapsObj,"hotspot")}if(this.fields.initialParameters){filterParameters=this.fields.initialParameters;if(filterParameters.radioIdList){for(i=0;i<radioList.length;i+=1){for(j=0;j<filterParameters.radioIdList.length;j+=1){if(filterParameters.radioIdList[j]===radioList[i].radioId){radioListBuffer.push(radioList[i]);break}}}radioList=radioListBuffer.slice(0);radioListBuffer=[];for(i=0;i<accessPointList.length;i+=1){for(j=0;j<filterParameters.radioIdList.length;j+=1){if(filterParameters.radioIdList[j]===accessPointList[i].radioId){accessPointListBuffer.push(accessPointList[i]);break}}}accessPointList=accessPointListBuffer.slice(0);accessPointListBuffer=[]}if(filterParameters.accessPointList){for(i=0;i<accessPointList.length;i+=1){for(j=0;j<filterParameters.accessPointList.length;j+=1){if(filterParameters.accessPointList[j]===accessPointList[i].accessPointId){accessPointListBuffer.push(accessPointList[i]);break}}}accessPointList=accessPointListBuffer.slice(0);accessPointListBuffer=[];for(i=0;i<radioList.length;i+=1){for(k=0;k<radioList[i].accessPointList.length;k+=1){for(j=0;j<filterParameters.accessPointList.length;j+=1){if(filterParameters.accessPointList[j]===radioList[i].accessPointList[k]){radioListBuffer.push(radioList[i]);break}}if(j<filterParameters.accessPointList.length){break}}}radioList=radioListBuffer.slice(0);radioListBuffer=[]}if(filterParameters.linkTypeList){for(i=0;i<accessPointList.length;i+=1){for(j=0;j<filterParameters.linkTypeList.length;j+=1){if(filterParameters.linkTypeList[j]===accessPointList[i].linkType){accessPointListBuffer.push(accessPointList[i]);break}}}accessPointList=accessPointListBuffer.slice(0);accessPointListBuffer=[]}}this.fields.data={radioUsageMode:callStack.cache.get("configurationMode")?"combined":"standard",radioList:radioList,accessPointList:accessPointList};callStack.cache.set("radioAccessPointLinkAssociation",radioAccessPointLinkAssociation)}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},setRadioUsageMode:{name:"Set radio usage mode",description:"This method sets the radio usage mode",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result,security_key,index;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList[0];if(this.fields.initialParameters){if(typeof this.fields.initialParameters.radioUsageMode==="string"){if(this.fields.initialParameters.radioUsageMode.toLowerCase().indexOf("standard")>-1){callStack.reCall(this,"9",0)}else if(this.fields.initialParameters.radioUsageMode.toLowerCase().indexOf("combined")>-1){callStack.reCall(this,"1",0)}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.nbStep+=1;switch(aStep){case"1":this.fields.mxStep+=1;callStack.push("semantic","sah.Connection.Server.WiFi.listAccessPoints","2",this,{linkTypeList:["WIFI_2.4_PRIVATE","WIFI_5_PRIVATE"]});break;case"2":if(aResult.status===0||aResult.status===true){if(!aResult.data||!aResult.data.hasOwnProperty("accessPointList")||aResult.data.accessPointList.length!==2){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}else{this.fields.mxStep+=1;for(index=0;index<aResult.data.accessPointList.length;index=index+1){if(aResult.data.accessPointList[index].linkType==="WIFI_2.4_PRIVATE"){this.fields.root24=aResult.data.accessPointList[index]}else if(aResult.data.accessPointList[index].linkType==="WIFI_5_PRIVATE"){this.fields.root5=aResult.data.accessPointList[index]}}if(this.fields.root24.securityMode.toLowerCase().indexOf("wep")>-1){security_key=this.fields.root24.securityKeyList.wep}else if(this.fields.root24.securityMode.toLowerCase().indexOf("wpa")>-1){security_key=this.fields.root24.securityKeyList.wpa}else{security_key=""}callStack.push("semantic","sah.Connection.Server.WiFi.configureAccessPoint","3",this,{accessPointId:this.fields.root5.accessPointId,ssid:this.fields.root24.ssid,isSsidBroadcasted:this.fields.root24.isSsidBroadcasted,securityMode:this.fields.root24.securityMode,securityKey:security_key,isMacFilteringActivated:this.fields.root24.isMacFilteringActivated})}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"3":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;callStack.push("semantic","sah.Connection.Server.WiFi.configureWpsPairing","4",this,{accessPointIdList:[this.fields.root5.accessPointId],isPairingEnabled:this.fields.root24.pairing.isPairingEnabled})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"4":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;callStack.push("semantic","sah.Connection.Server.WiFi.getMacFiltering","5",this,{accessPointIdList:[this.fields.root24.accessPointId,this.fields.root5.accessPointId]})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"5":if(aResult.status===0||aResult.status===true){if(aResult.hasOwnProperty("data")){if(aResult.data.hasOwnProperty("accessPointList")){if(aResult.data.accessPointList.length>0){for(index=0;index<aResult.data.accessPointList.length;index=index+1){if(this.fields.root24.accessPointId===aResult.data.accessPointList[index].accessPointId){this.fields.root24mac=aResult.data.accessPointList[index]}else if(this.fields.root5.accessPointId===aResult.data.accessPointList[index].accessPointId){this.fields.root5mac=aResult.data.accessPointList[index]}}this.fields.mxStep+=1;callStack.push("semantic","sah.Connection.Server.WiFi.configureMacFiltering","6",this,{accessPointIdList:[this.fields.root5mac.accessPointId],isActivated:this.fields.root24mac.isActivated,mode:this.fields.root24mac.mode})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"6":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;callStack.push("semantic","sah.Connection.Server.WiFi.deleteMacFilteringEntries","7",this,{accessPointIdList:[this.fields.root5mac.accessPointId],macAddressList:this.fields.root5mac.macAddressList})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"7":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;callStack.push("semantic","sah.Connection.Server.WiFi.addMacFilteringEntries","8",this,{accessPointIdList:[this.fields.root5mac.accessPointId],macAddressList:this.fields.root24mac.macAddressList})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"8":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;callStack.push("api","pcb.NMC.wiFiSet","12",this,{ConfigurationMode:true})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"9":this.fields.mxStep+=1;callStack.push("api","pcb.NMC.wiFiSet","10",this,{ConfigurationMode:false});break;case"10":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;callStack.push("semantic","sah.Connection.Server.WiFi.listAccessPoints","11",this,{linkTypeList:["WIFI_2.4_PRIVATE","WIFI_5_PRIVATE"]})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"11":if(aResult.status===0||aResult.status===true){if(!aResult.data||!aResult.data.hasOwnProperty("accessPointList")||aResult.data.accessPointList.length!==2){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}else{this.fields.mxStep+=1;for(index=0;index<aResult.data.accessPointList.length;index=index+1){if(aResult.data.accessPointList[index].linkType==="WIFI_2.4_PRIVATE"){this.fields.root24=aResult.data.accessPointList[index]}else if(aResult.data.accessPointList[index].linkType==="WIFI_5_PRIVATE"){this.fields.root5=aResult.data.accessPointList[index]}}callStack.push("semantic","sah.Connection.Server.WiFi.configureAccessPoint","12",this,{accessPointId:this.fields.root5.accessPointId,ssid:this.fields.root24.ssid+"_5GHz"})}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"12":if(!(aResult.status===0||aResult.status===true)){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},getStatistics:{name:"List radios and access points statistics according to filter",description:"This method returns a list of radios and access points statistics.",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result,i,j,indexVap,listVaps,isRadioIdAlreadyListed,radioAccessPointLinkAssociation,filterParameters,radioListBuffer=[],accessPointListBuffer=[];if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList[0];this.fields.radioToGetStatsFrom=[];this.fields.intermediateResult={};this.fields.intermediateResult.radioList=[];this.fields.intermediateResult.accessPointList=[];this.fields.intermediateResult.currentAccessPoint={};if(!callStack.cache.get("radioAccessPointLinkAssociation")){callStack.push("semantic","sah.Connection.Server.WiFi.listAccessPoints","1",this,{})}else{listVaps=callStack.cache.get("radioAccessPointLinkAssociation").slice(0);for(indexVap=0;indexVap<listVaps.length;indexVap+=1){if(listVaps[indexVap].linkType.indexOf("PRIVATE")>0){this.fields.radioToGetStatsFrom.push(listVaps[indexVap])}}callStack.reCall(this,"2",0)}}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){listVaps=callStack.cache.get("radioAccessPointLinkAssociation").slice(0);for(indexVap=0;indexVap<listVaps.length;indexVap+=1){if(listVaps[indexVap].linkType.indexOf("PRIVATE")>0){this.fields.radioToGetStatsFrom.push(listVaps[indexVap])}}this.fields.mxStep+=1;callStack.reCall(this,"2",0)}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(this.fields.radioToGetStatsFrom.length>0){this.fields.mxStep+=1;callStack.push("api","pcb.NeMo.getVapsConfig","3",this,this.fields.radioToGetStatsFrom[0].accessPointId,{mibs:"wlanvap"})}else{this.fields.mxStep+=1;callStack.reCall(this,"5",0)}break;case"3":if(aResult.status===0||aResult.status===true){this.fields.intermediateResult.currentAccessPoint={};this.fields.intermediateResult.currentAccessPoint.accessPointId=this.fields.radioToGetStatsFrom[0].accessPointId;this.fields.intermediateResult.currentAccessPoint.linkType=this.fields.radioToGetStatsFrom[0].linkType;this.fields.intermediateResult.currentAccessPoint.radioId=this.fields.radioToGetStatsFrom[0].radioId;this.fields.intermediateResult.currentAccessPoint.activationDuration=aResult.data.wlanvap[this.fields.radioToGetStatsFrom[0].accessPointId].LastChange;this.fields.mxStep+=1;callStack.push("api","pcb.NeMo.getNetDevStats","4",this,this.fields.radioToGetStatsFrom[0].accessPointId,{})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"4":if(aResult.status===0||aResult.status===true){this.fields.intermediateResult.currentAccessPoint.bytesSent=aResult.data.TxBytes;this.fields.intermediateResult.currentAccessPoint.packetsSent=aResult.data.TxPackets;this.fields.intermediateResult.currentAccessPoint.packetsSentDiscarded=aResult.data.TxDropped;this.fields.intermediateResult.currentAccessPoint.bytesReceived=aResult.data.RxBytes;this.fields.intermediateResult.currentAccessPoint.packetsReceived=aResult.data.RxPackets;this.fields.intermediateResult.currentAccessPoint.packetsReceivedDiscarded=aResult.data.RxDropped;this.fields.intermediateResult.accessPointList.push(this.fields.intermediateResult.currentAccessPoint);this.fields.mxStep+=1;this.fields.radioToGetStatsFrom.shift();callStack.reCall(this,"2",0)}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"5":radioAccessPointLinkAssociation=callStack.cache.get("radioAccessPointLinkAssociation").slice(0);for(i=0;i<radioAccessPointLinkAssociation.length;i+=1){isRadioIdAlreadyListed=false;for(j=0;j<this.fields.intermediateResult.radioList.length;j+=1){if(radioAccessPointLinkAssociation[i].radioId===this.fields.intermediateResult.radioList[j].radioId){isRadioIdAlreadyListed=true}}if(!isRadioIdAlreadyListed){this.fields.intermediateResult.radioList.push({radioId:radioAccessPointLinkAssociation[i].radioId,maximumSpeed:"450 Mb/s"})}}if(this.fields.initialParameters){filterParameters=this.fields.initialParameters;if(filterParameters.radioIdList){for(i=0;i<this.fields.intermediateResult.radioList.length;i+=1){for(j=0;j<filterParameters.radioIdList.length;j+=1){if(filterParameters.radioIdList[j]===this.fields.intermediateResult.radioList[i].radioId){radioListBuffer.push(this.fields.intermediateResult.radioList[i])}}}this.fields.intermediateResult.radioList=radioListBuffer}if(filterParameters.accessPointList||filterParameters.linkTypeList){for(i=0;i<this.fields.intermediateResult.accessPointList.length;i+=1){if(filterParameters.accessPointList){for(j=0;j<filterParameters.accessPointList.length;j+=1){if(filterParameters.accessPointList[j]===this.fields.intermediateResult.accessPointList[i].accessPointId){accessPointListBuffer.push(this.fields.intermediateResult.accessPointList[i])}}}if(filterParameters.linkTypeList){for(j=0;j<filterParameters.linkTypeList.length;j+=1){if(filterParameters.linkTypeList[j]===this.fields.intermediateResult.accessPointList[i].linkType){accessPointListBuffer.push(this.fields.intermediateResult.accessPointList[i])}}}}this.fields.intermediateResult.accessPointList=accessPointListBuffer}}this.fields.data={radioList:this.fields.intermediateResult.radioList,accessPointList:this.fields.intermediateResult.accessPointList};break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},getSchedule:{name:"Return the schedule info",description:"This method returns the schedule info used for all radios",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result,intermediateResult=[],completeResult,i;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList[0];callStack.push("api","pcb.Scheduler.getCompleteSchedules","1",this,{type:"WLAN"})}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){if(aResult.data.scheduleInfo[0]){completeResult=aResult.data.scheduleInfo[0].schedule;for(i=0;i<completeResult.length;i+=1){intermediateResult.push({start:completeResult[i].begin,end:completeResult[i].end})}}this.fields.data={scheduleList:intermediateResult}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},setSchedule:{name:"Set the schedule info",description:"This method sets the schedule info used for all radios",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result,i;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList[0];this.fields.scheduleInfoToAdd={};callStack.push("api","pcb.Scheduler.getCompleteSchedules","1",this,{type:"WLAN"})}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;this.fields.scheduleInfoToAdd.base="Weekly";this.fields.scheduleInfoToAdd.def="Enable";this.fields.scheduleInfoToAdd.ID="wl0";this.fields.scheduleInfoToAdd.schedule=[];if(aResult.data.scheduleInfo[0]){this.fields.scheduleInfoToAdd.enable=aResult.data.scheduleInfo[0].enable;this.fields.scheduleInfoToAdd.override=aResult.data.scheduleInfo[0].override}else{this.fields.scheduleInfoToAdd.enable=false;this.fields.scheduleInfoToAdd.override=""}for(i=0;i<this.fields.initialParameters.scheduleList.length;i+=1){this.fields.scheduleInfoToAdd.schedule.push({state:"Disable",begin:this.fields.initialParameters.scheduleList[i].start,end:this.fields.initialParameters.scheduleList[i].end})}callStack.push("api","pcb.Scheduler.addSchedule","2",this,{type:"WLAN",info:this.fields.scheduleInfoToAdd})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status!==0&&aResult.status!==true){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},removeSchedule:{name:"Set the schedule info",description:"This method sets the schedule info used for all radios",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;callStack.push("api","pcb.Scheduler.getCompleteSchedules","1",this,{type:"WLAN"})}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;callStack.push("api","pcb.Scheduler.removeSchedule","2",this,{type:"WLAN",ID:"wl0"})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status!==0&&aResult.status!==true){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},getActivationState:{name:"Get activation state",description:"This method returns the activation state of wifi and wifi scheduler",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList;callStack.push("api","pcb.NMC.wiFiGet","1",this)}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;this.fields.data={isActivated:aResult.data.Status};callStack.push("api","pcb.Scheduler.getCompleteSchedules","2",this,{type:"WLAN"})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status===0||aResult.status===true){this.fields.data.isScheduleOverridden=false;if(aResult.data){if(aResult.data.scheduleInfo[0]){this.fields.data.useSchedule=aResult.data.scheduleInfo[0].enable;if(aResult.data.scheduleInfo[0].override!==""){this.fields.data.useSchedule=false;this.fields.data.isScheduleOverridden=true}}else{this.fields.data.useSchedule=false;this.fields.data.isScheduleOverridden=false}}else{this.fields.data.useSchedule=false;this.fields.data.isScheduleOverridden=false}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},setActivationState:{name:"Set activation state",description:"This method sets the activation state of wifi and wifi scheduler",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList[0];callStack.push("api","pcb.Scheduler.getCompleteSchedules","1",this,{type:"WLAN"})}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){if(aResult.hasOwnProperty("data")){if(aResult.data.hasOwnProperty("scheduleInfo")){if(typeof aResult.data.scheduleInfo[0]!=="undefined"){if(aResult.data.scheduleInfo[0].hasOwnProperty("ID")){if(aResult.data.scheduleInfo[0].ID==="wl0"){this.fields.mxStep+=1;callStack.reCall(this,"3",0)}else{this.fields.mxStep+=1;callStack.push("api","pcb.Scheduler.addSchedule","2",this,{type:"WLAN",info:{base:"Weekly",def:"Enable",ID:"wl0",schedule:[{state:"Disable",begin:0,end:604800}],enable:false,override:""}})}}else{this.fields.mxStep+=1;callStack.push("api","pcb.Scheduler.addSchedule","2",this,{type:"WLAN",info:{base:"Weekly",def:"Enable",ID:"wl0",schedule:[{state:"Disable",begin:0,end:604800}],enable:false,override:""}})}}else{this.fields.mxStep+=1;callStack.push("api","pcb.Scheduler.addSchedule","2",this,{type:"WLAN",info:{base:"Weekly",def:"Enable",ID:"wl0",schedule:[{state:"Disable",begin:0,end:604800}],enable:false,override:""}})}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;callStack.reCall(this,"3",0)}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"3":if(this.fields.initialParameters){if(typeof this.fields.initialParameters.isActivated==="boolean"){this.fields.mxStep+=1;callStack.push("api","pcb.Scheduler.enableSchedule","4",this,{type:"WLAN",ID:"wl0",enable:false})}else if(typeof this.fields.initialParameters.useSchedule==="boolean"){this.fields.mxStep+=1;callStack.push("api","pcb.Scheduler.enableSchedule","5",this,{type:"WLAN",ID:"wl0",enable:this.fields.initialParameters.useSchedule})
}}break;case"4":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;callStack.push("api","pcb.NMC.wiFiSet","5",this,{Enable:this.fields.initialParameters.isActivated})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"5":if(aResult.status!==0&&aResult.status!==true){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},overrideActivationState:{name:"Set wifi schedule override state",description:"This method sets the wifi schedule override state",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{},intermediateResult:{}},call:function(aStep,aResult){var result,aOverride;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;callStack.push("api","pcb.NMC.wiFiGet","1",this)}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){if(aResult.data){this.fields.mxStep+=1;this.fields.intermediateResult.isActivated=aResult.data.Status;callStack.push("api","pcb.Scheduler.getCompleteSchedules","2",this,{type:"WLAN"})}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;this.fields.intermediateResult.isScheduleOverridden=false;if(aResult.data){if(typeof aResult.data.scheduleInfo[0].enable==="boolean"){this.fields.intermediateResult.useSchedule=aResult.data.scheduleInfo[0].enable}if(aResult.data.scheduleInfo[0].ID){this.fields.intermediateResult.scheduleID=aResult.data.scheduleInfo[0].ID}if(aResult.data.scheduleInfo[0].override!==""){this.fields.intermediateResult.isScheduleOverridden=true}}if(this.fields.intermediateResult.isScheduleOverridden===false){if(this.fields.intermediateResult.isActivated){aOverride="Disable"}else{aOverride="Enable"}callStack.push("api","pcb.Scheduler.overrideSchedule","3",this,{type:"WLAN",ID:this.fields.intermediateResult.scheduleID,override:aOverride})}else{callStack.push("api","pcb.Scheduler.overrideSchedule","3",this,{type:"WLAN",ID:this.fields.intermediateResult.scheduleID,override:""})}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"3":if(aResult.status!==0&&aResult.status!==true){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},configureRadio:{name:"Configure radio settings",description:"This method configures radio settings",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result,radioSetting={},radioPenable={},myMibs={};if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList[0];if(typeof this.fields.initialParameters.radioId==="string"){if(typeof this.fields.initialParameters.isEnabled==="boolean"){radioPenable[this.fields.initialParameters.radioId]={};radioPenable[this.fields.initialParameters.radioId].Enable=this.fields.initialParameters.isEnabled?true:false;radioPenable[this.fields.initialParameters.radioId].PersistentEnable=this.fields.initialParameters.isEnabled?true:false;myMibs.penable={};myMibs.penable=radioPenable}if(typeof this.fields.initialParameters.channelMode==="string"){if(this.fields.initialParameters.channelMode.toLowerCase()==="auto"){radioSetting.AutoChannelEnable=true}else if(this.fields.initialParameters.channelMode.toLowerCase()==="manual"){radioSetting.AutoChannelEnable=false;if(typeof this.fields.initialParameters.channelNumber!=="undefined"){radioSetting.Channel=parseInt(this.fields.initialParameters.channelNumber,10).toString()}}}if(typeof this.fields.initialParameters.bandwidth==="string"){if(this.fields.initialParameters.bandwidth.toLowerCase()==="auto"){radioSetting.OperatingChannelBandwidth="Auto"}else{radioSetting.OperatingChannelBandwidth=this.fields.initialParameters.bandwidth}}myMibs.wlanradio={};myMibs.wlanradio[this.fields.initialParameters.radioId]=radioSetting;callStack.push("api","pcb.NeMo.setRadioConfig","1",this,this.fields.initialParameters.radioId,{mibs:myMibs})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status!==0&&aResult.status!==true){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},scanRadioChannel:{name:"Scan for channel on radio with channel mode set on auto",description:"This method scans for channel on radio with channel mode set on auto",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;if(typeof aResult.inputList[0]!=="undefined"&&aResult.inputList[0].hasOwnProperty("radioId")){callStack.push("api","pcb.NeMo.AutoScanRadio","1",this,aResult.inputList[0].radioId,{})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status!==0&&aResult.status!==true){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},configureAccessPoint:{name:"Configure access point settings",description:"This method configures access point settings",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result,ruleCompliant=true,ruleErrorMsg="",retrievedIsPairingEnabled,retrievedSecurityMode,retrievedMacFiltering,retrievedSsidBroadcast,securityModeChanged=false,accessPointSetting={},accessPointPenable={},myMibs={},index,targetIntf;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList[0];this.fields.vapQueue=[];this.fields.isPrivate=false;this.fields.isGuest=false;this.fields.isCombined=false;this.fields.isReconfigurationNeeded=false;if(typeof this.fields.initialParameters.accessPointId==="string"){callStack.push("semantic","sah.Connection.Server.WiFi.listAccessPoints","1",this,{})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.nbStep+=1;switch(aStep){case"1":if((aResult.status===0||aResult.status===true)&&aResult.hasOwnProperty("data")){if(!aResult.data.hasOwnProperty("accessPointList")){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}else{for(index=0;index<aResult.data.accessPointList.length;index=index+1){if(this.fields.initialParameters.accessPointId===aResult.data.accessPointList[index].accessPointId){this.fields.retrievedAccessPointConfiguration={};this.fields.retrievedAccessPointConfiguration=JSON.parse(JSON.stringify(aResult.data.accessPointList[index]));if(aResult.data.accessPointList[index].linkType.toLowerCase().indexOf("wifi_2.4_private")>-1||aResult.data.accessPointList[index].linkType.toLowerCase().indexOf("wifi_5_private")>-1){this.fields.isPrivate=true}else if(aResult.data.accessPointList[index].linkType.toLowerCase().indexOf("wifi_2.4_guest")>-1||aResult.data.accessPointList[index].linkType.toLowerCase().indexOf("wifi_5_guest")>-1){this.fields.isGuest=true}break}}if(aResult.data.radioUsageMode.toLowerCase().indexOf("combined")>-1||this.fields.isGuest){this.fields.isCombined=true}if(this.fields.isPrivate&&this.fields.isCombined){for(index=0;index<aResult.data.accessPointList.length;index=index+1){if(aResult.data.accessPointList[index].linkType.toLowerCase().indexOf("private")>-1){this.fields.vapQueue.push(aResult.data.accessPointList[index].accessPointId)}}}else if(this.fields.isGuest&&this.fields.isCombined){for(index=0;index<aResult.data.accessPointList.length;index=index+1){if(aResult.data.accessPointList[index].linkType.toLowerCase().indexOf("guest")>-1){this.fields.vapQueue.push(aResult.data.accessPointList[index].accessPointId)}}}else{this.fields.vapQueue.push(this.fields.initialParameters.accessPointId)}this.fields.mxStep+=1;callStack.reCall(this,"2",0)}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(this.fields.vapQueue.length>0){retrievedSsidBroadcast=this.fields.retrievedAccessPointConfiguration.isSsidBroadcasted;retrievedSecurityMode=this.fields.retrievedAccessPointConfiguration.securityMode;retrievedIsPairingEnabled=this.fields.retrievedAccessPointConfiguration.pairing.isPairingEnabled;retrievedMacFiltering=this.fields.retrievedAccessPointConfiguration.isMacFilteringActivated?"WhiteList":"Off";if(typeof this.fields.initialParameters.ssid==="string"){accessPointSetting.SSID=this.fields.initialParameters.ssid;this.fields.isReconfigurationNeeded=true}if(typeof this.fields.initialParameters.isEnabled==="boolean"){if(!this.fields.isCombined){myMibs.penable={};for(index=0;index<this.fields.vapQueue.length;index=index+1){accessPointPenable[this.fields.vapQueue[index]]={};accessPointPenable[this.fields.vapQueue[index]].Enable=this.fields.initialParameters.isEnabled?true:false;accessPointPenable[this.fields.vapQueue[index]].PersistentEnable=this.fields.initialParameters.isEnabled?true:false}myMibs.penable=accessPointPenable;this.fields.isReconfigurationNeeded=true}}if(typeof this.fields.initialParameters.isSsidBroadcasted==="boolean"){accessPointSetting.SSIDAdvertisementEnabled=this.fields.initialParameters.isSsidBroadcasted?true:false;retrievedSsidBroadcast=accessPointSetting.SSIDAdvertisementEnabled;this.fields.isReconfigurationNeeded=true}if(typeof this.fields.initialParameters.securityMode==="string"){accessPointSetting.Security={};accessPointSetting.Security.ModeEnabled=this.fields.initialParameters.securityMode;retrievedSecurityMode=accessPointSetting.Security.ModeEnabled;securityModeChanged=true;this.fields.isReconfigurationNeeded=true}if(typeof this.fields.initialParameters.securityKey==="string"){if(!securityModeChanged){accessPointSetting.Security={}}if(retrievedSecurityMode.toLowerCase().indexOf("wpa",0)!==-1){accessPointSetting.Security.KeyPassPhrase=this.fields.initialParameters.securityKey;this.fields.isReconfigurationNeeded=true}else if(retrievedSecurityMode.toLowerCase().indexOf("wep",0)!==-1){accessPointSetting.Security.WEPKey=this.fields.initialParameters.securityKey;this.fields.isReconfigurationNeeded=true}}if(typeof this.fields.initialParameters.isMacFilteringActivated==="boolean"){accessPointSetting.MACFiltering={};accessPointSetting.MACFiltering.Mode=this.fields.initialParameters.isMacFilteringActivated?"WhiteList":"Off";retrievedMacFiltering=accessPointSetting.MACFiltering.Mode;this.fields.isReconfigurationNeeded=true}myMibs.wlanvap={};for(index=0;index<this.fields.vapQueue.length;index=index+1){myMibs.wlanvap[this.fields.vapQueue[index]]=JSON.parse(JSON.stringify(accessPointSetting))}this.fields.mxStep+=1;targetIntf=this.fields.vapQueue[0];if(this.fields.isPrivate){targetIntf="lan"}else if(this.fields.isGuest){targetIntf="guest"}if(this.fields.isReconfigurationNeeded){callStack.push("api","pcb.NeMo.setVapsConfig","3",this,targetIntf,{mibs:myMibs})}else{callStack.reCall(this,"3",0)}}break;case"3":if(typeof aResult==="undefined"||aResult.status===0||aResult.status===true){if(typeof this.fields.initialParameters.isEnabled==="boolean"&&this.fields.isCombined){if(this.fields.isPrivate){this.fields.mxStep+=1;callStack.push("api","pcb.NMC.wiFiSet","4",this,{Enable:this.fields.initialParameters.isEnabled?true:false})}else if(this.fields.isGuest){this.fields.mxStep+=1;callStack.push("api","pcb.NMC.guestSet","4",this,{Enable:this.fields.initialParameters.isEnabled?true:false})}}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"4":if(aResult.status!==0&&aResult.status!==true){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},getMacFiltering:{name:"Get MAC filtering settings of access points",description:"This method returns the MAC filtering settings of access points",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{},intermediateResults:[]},call:function(aStep,aResult){var result,retrievedVaps,i,accessPointListBuffer,vapkey,accessPointToAdd,k;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList[0];this.fields.intermediateResults=[];this.fields.accessPointList=[];if(typeof this.fields.initialParameters!=="undefined"){if(this.fields.initialParameters.hasOwnProperty("accessPointIdList")){this.fields.accessPointList=this.fields.initialParameters.accessPointIdList.slice(0);callStack.reCall(this,"2",0)}else{if(!callStack.cache.get("radioAccessPointLinkAssociation")){callStack.push("semantic","sah.Connection.Server.WiFi.listAccessPoints","1",this,{})}else{retrievedVaps=callStack.cache.get("radioAccessPointLinkAssociation").slice(0);for(i=0;i<retrievedVaps.length;i+=1){if(retrievedVaps[i].linkType.toLowerCase().indexOf("private")>-1){this.fields.accessPointList.push(retrievedVaps[i].accessPointId)}}callStack.reCall(this,"2",0)}}}else{if(!callStack.cache.get("radioAccessPointLinkAssociation")){callStack.push("semantic","sah.Connection.Server.WiFi.listAccessPoints","1",this,{})}else{retrievedVaps=callStack.cache.get("radioAccessPointLinkAssociation").slice(0);for(i=0;i<retrievedVaps.length;i+=1){if(retrievedVaps[i].linkType.toLowerCase().indexOf("private")>-1){this.fields.accessPointList.push(retrievedVaps[i].accessPointId)}}callStack.reCall(this,"2",0)}}}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){retrievedVaps=callStack.cache.get("radioAccessPointLinkAssociation").slice(0);for(i=0;i<retrievedVaps.length;i+=1){if(retrievedVaps[i].linkType.toLowerCase().indexOf("private")>-1){this.fields.accessPointList.push(retrievedVaps[i].accessPointId)}}this.fields.mxStep+=1;callStack.reCall(this,"2",0)}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(this.fields.accessPointList.length>0){this.fields.mxStep+=1;callStack.reCall(this,"3",0)}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"3":if(this.fields.accessPointList.length>0){this.fields.mxStep+=1;callStack.push("api","pcb.NeMo.getVapsConfig","4",this,this.fields.accessPointList[0],{mibs:"wlanvap"})}break;case"4":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;this.fields.accessPointList.shift();if(aResult.data){if(aResult.data.wlanvap){this.fields.intermediateResults.push(aResult.data.wlanvap)}}if(this.fields.accessPointList.length>0){callStack.reCall(this,"3",0)}else{callStack.reCall(this,"5",0)}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"5":accessPointListBuffer=[];for(i=0;i<this.fields.intermediateResults.length;i+=1){for(vapkey in this.fields.intermediateResults[i]){if(this.fields.intermediateResults[i].hasOwnProperty(vapkey)){accessPointToAdd={};accessPointToAdd.accessPointId=vapkey;if(this.fields.intermediateResults[i][vapkey].MACFiltering.Mode.toLowerCase()==="off"){accessPointToAdd.isActivated=false;accessPointToAdd.mode=""}else if(this.fields.intermediateResults[i][vapkey].MACFiltering.Mode.toLowerCase()==="whitelist"){accessPointToAdd.isActivated=true;accessPointToAdd.mode="whiteList"}else{accessPointToAdd.isActivated=true;accessPointToAdd.mode=this.fields.intermediateResults[i][vapkey].MACFiltering.Mode}accessPointToAdd.supportedModeList="whiteList";accessPointToAdd.macAddressList=[];for(k in this.fields.intermediateResults[i][vapkey].MACFiltering.Entry){if(this.fields.intermediateResults[i][vapkey].MACFiltering.Entry.hasOwnProperty(k)){accessPointToAdd.macAddressList.push(this.fields.intermediateResults[i][vapkey].MACFiltering.Entry[k].MACAddress)}}accessPointListBuffer.push(accessPointToAdd)}}}this.fields.data={accessPointList:accessPointListBuffer};break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},configureMacFiltering:{name:"Configure MAC filtering settings of access points",description:"This method configures the MAC filtering settings of access points",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result,myMibs,index,subindex,temp_buffer,num;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList[0];this.fields.accessPointList=[];this.fields.vapQueue=[];this.fields.MACEntries=[];this.fields.isPrivate24=false;this.fields.private24Id="";this.fields.changeMacEntries=false;if(this.fields.initialParameters.hasOwnProperty("accessPointIdList")){this.fields.accessPointIdList=this.fields.initialParameters.accessPointIdList.slice(0);if(this.fields.accessPointIdList.length>0){callStack.push("semantic","sah.Connection.Server.WiFi.listAccessPoints","1",this,{})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.nbStep+=1;switch(aStep){case"1":if((aResult.status===0||aResult.status===true)&&aResult.hasOwnProperty("data")){if(!aResult.data.hasOwnProperty("accessPointList")){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}else{for(index=0;index<this.fields.accessPointIdList.length;index=index+1){this.fields.isPrivate24=false;for(subindex=0;subindex<aResult.data.accessPointList.length;subindex=subindex+1){if(this.fields.accessPointIdList[index]===aResult.data.accessPointList[subindex].accessPointId&&aResult.data.accessPointList[subindex].linkType.toLowerCase().indexOf("wifi_2.4_private")>-1){this.fields.isPrivate24=true;this.fields.private24Id=aResult.data.accessPointList[subindex].accessPointId}break}if(this.fields.isPrivate24&&aResult.data.radioUsageMode.toLowerCase().indexOf("combined")>-1){this.fields.changeMacEntries=true;for(subindex=0;subindex<aResult.data.accessPointList.length;subindex=subindex+1){if(aResult.data.accessPointList[subindex].linkType.toLowerCase().indexOf("private")>-1){this.fields.vapQueue.push(aResult.data.accessPointList[subindex].accessPointId)}}}else{this.fields.vapQueue.push(this.fields.accessPointIdList[index])}}temp_buffer=this.fields.vapQueue.slice(0);this.fields.vapQueue=temp_buffer.filter(uniqueFilter);this.fields.mxStep+=1;if(this.fields.changeMacEntries){callStack.push("semantic","sah.Connection.Server.WiFi.getMacFiltering","2",this,{accessPointIdList:[this.fields.private24Id]})}else{callStack.reCall(this,"3",0)}}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status===0||aResult.status===true){this.fields.MACEntries=aResult.data.accessPointList[0].macAddressList.slice(0);this.fields.mxStep+=1;callStack.reCall(this,"3",0)}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"3":if(this.fields.vapQueue.length>0){this.fields.mxStep+=1;myMibs={};myMibs.wlanvap={};if(this.fields.initialParameters.isActivated===false){myMibs.wlanvap[this.fields.vapQueue[0]]={MACFiltering:{Mode:"Off"}};callStack.push("api","pcb.NeMo.setVapsConfig","5",this,this.fields.vapQueue[0],{mibs:myMibs})}else{if(this.fields.initialParameters.mode==="whiteList"){myMibs.wlanvap[this.fields.vapQueue[0]]={MACFiltering:{Mode:"WhiteList"}};callStack.push("api","pcb.NeMo.setVapsConfig","4",this,this.fields.vapQueue[0],{mibs:myMibs})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}}break;case"4":if(aResult.status===0||aResult.status===true||aResult.status===null){this.fields.mxStep+=1;callStack.push("semantic","sah.Connection.Server.WiFi.configureWpsPairing","5",this,{accessPointIdList:[this.fields.vapQueue[0]],isPairingEnabled:false})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"5":if(aResult.status===0||aResult.status===true||aResult.status===null){if(this.fields.changeMacEntries){myMibs={};myMibs.wlanvap={};myMibs.wlanvap[this.fields.vapQueue[0]]={};myMibs.wlanvap[this.fields.vapQueue[0]].MACFiltering={};myMibs.wlanvap[this.fields.vapQueue[0]].MACFiltering.Entry={};for(index=0;index<this.fields.MACEntries.length;index=index+1){num=index+1;myMibs.wlanvap[this.fields.vapQueue[0]].MACFiltering.Entry[num.toString()]={};myMibs.wlanvap[this.fields.vapQueue[0]].MACFiltering.Entry[num.toString()].MACAddress=this.fields.MACEntries[index]}this.fields.mxStep+=1;callStack.push("api","pcb.NeMo.setVapsConfig","6",this,this.fields.vapQueue[0],{mibs:myMibs})}else{this.fields.mxStep+=1;callStack.reCall(this,"7",0)}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"6":if(aResult.status===0||aResult.status===true||aResult.status===null){this.fields.mxStep+=1;callStack.reCall(this,"7",0)}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"7":if(this.fields.vapQueue.length>0){this.fields.mxStep+=1;this.fields.vapQueue.shift();callStack.reCall(this,"3",0)}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},addMacFilteringEntries:{name:"Add entries for MAC filtering of access points",description:"This method adds entries for the MAC filtering settings of access points",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result,myMibs,j,num;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList[0];if(this.fields.initialParameters.hasOwnProperty("accessPointIdList")){this.fields.accessPointList=this.fields.initialParameters.accessPointIdList.slice(0);callStack.reCall(this,"1",0)}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.nbStep+=1;switch(aStep){case"1":if(this.fields.accessPointList.length>0){this.fields.mxStep+=1;myMibs={};myMibs.wlanvap={};myMibs.wlanvap[this.fields.accessPointList[0]]={};myMibs.wlanvap[this.fields.accessPointList[0]].MACFiltering={};myMibs.wlanvap[this.fields.accessPointList[0]].MACFiltering.Entry={};if(this.fields.initialParameters.macAddressList){for(j=0;j<this.fields.initialParameters.macAddressList.length;j+=1){num=j+1;myMibs.wlanvap[this.fields.accessPointList[0]].MACFiltering.Entry[num.toString()]={};myMibs.wlanvap[this.fields.accessPointList[0]].MACFiltering.Entry[num.toString()].MACAddress=this.fields.initialParameters.macAddressList[j]}callStack.push("api","pcb.NeMo.setVapsConfig","2",this,this.fields.accessPointList[0],{mibs:myMibs})}}break;case"2":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;this.fields.accessPointList.shift();callStack.reCall(this,"1",0)}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},deleteMacFilteringEntries:{name:"Delete entries for MAC filtering of access points",description:"This method deletes entries for the MAC filtering settings of access points",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result,macAddressListToApply,key,i,j,currentMACAddress,currentMACAddressMarkedForDelete,myMibs,num;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList[0];if(this.fields.initialParameters.hasOwnProperty("accessPointIdList")){this.fields.accessPointList=this.fields.initialParameters.accessPointIdList.slice(0);if(this.fields.initialParameters.accessPointIdList.length>0){callStack.reCall(this,"1",0)}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.nbStep+=1;switch(aStep){case"1":if(this.fields.accessPointList.length>0){this.fields.mxStep+=1;this.fields.intermediateResults=[];callStack.push("api","pcb.NeMo.getVapsConfig","2",this,this.fields.accessPointList[0],{mibs:"wlanvap"})}break;case"2":if(aResult.status===0||aResult.status===true){if(aResult.data){if(aResult.data.wlanvap){this.fields.intermediateResults=aResult.data.wlanvap[this.fields.accessPointList[0]].MACFiltering.Entry}}this.fields.mxStep+=1;macAddressListToApply=[];for(key in this.fields.intermediateResults){if(this.fields.intermediateResults.hasOwnProperty(key)){currentMACAddress=this.fields.intermediateResults[key].MACAddress;currentMACAddressMarkedForDelete=false;for(i=0;i<this.fields.initialParameters.macAddressList.length;i+=1){if(currentMACAddress===this.fields.initialParameters.macAddressList[i]){currentMACAddressMarkedForDelete=true;break}}if(!currentMACAddressMarkedForDelete){macAddressListToApply.push(currentMACAddress)}}}myMibs={};myMibs.wlanvap={};myMibs.wlanvap[this.fields.accessPointList[0]]={};myMibs.wlanvap[this.fields.accessPointList[0]].MACFiltering={};myMibs.wlanvap[this.fields.accessPointList[0]].MACFiltering.Entry={};for(j=0;j<macAddressListToApply.length;j+=1){num=j+1;myMibs.wlanvap[this.fields.accessPointList[0]].MACFiltering.Entry[num.toString()]={};myMibs.wlanvap[this.fields.accessPointList[0]].MACFiltering.Entry[num.toString()].MACAddress=macAddressListToApply[j]}callStack.push("api","pcb.NeMo.setVapsConfig","3",this,this.fields.accessPointList[0],{mibs:myMibs})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"3":if(aResult.status===0||aResult.status===true){if(this.fields.accessPointList.length>0){this.fields.mxStep+=1;this.fields.accessPointList.shift();callStack.reCall(this,"1",0)}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},getWpsPairing:{name:"Get wps pairing state",description:"This method returns the wps pairing state",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result,key,index,currentAccessPoint,globalPairingInProgress=false;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;if(typeof aResult.inputList[0]!=="undefined"){this.fields.initialParameters=aResult.inputList[0]}else{this.fields.initialParameters={}}callStack.push("api","pcb.NeMo.getVapsConfig","1",this,"lan",{mibs:"wlanvap"})}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){this.fields.data.accessPointList=[];if(aResult.hasOwnProperty("data")){if(aResult.data.hasOwnProperty("wlanvap")){for(key in aResult.data.wlanvap){if(aResult.data.wlanvap.hasOwnProperty(key)){if(this.fields.initialParameters.hasOwnProperty("accessPointIdList")){if(this.fields.initialParameters.accessPointIdList.length>0){for(index=0;index<this.fields.initialParameters.accessPointIdList.length;index=index+1){globalPairingInProgress=globalPairingInProgress||aResult.data.wlanvap[key].WPS.PairingInProgress;if(key===this.fields.initialParameters.accessPointIdList[index]){currentAccessPoint={};currentAccessPoint.accessPointId=key;currentAccessPoint.isPairingEnabled=aResult.data.wlanvap[key].WPS.Enable;currentAccessPoint.isPairingInProgress=aResult.data.wlanvap[key].WPS.PairingInProgress;currentAccessPoint.wpsMode=aResult.data.wlanvap[key].WPS.ConfigMethodsEnabled;this.fields.data.accessPointList.push(currentAccessPoint);break}}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{currentAccessPoint={};currentAccessPoint.accessPointId=key;currentAccessPoint.isPairingEnabled=aResult.data.wlanvap[key].WPS.Enable;currentAccessPoint.isPairingInProgress=aResult.data.wlanvap[key].WPS.PairingInProgress;currentAccessPoint.wpsMode=aResult.data.wlanvap[key].WPS.ConfigMethodsEnabled;globalPairingInProgress=globalPairingInProgress||aResult.data.wlanvap[key].WPS.PairingInProgress;this.fields.data.accessPointList.push(currentAccessPoint)}}}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}this.fields.data.isPairingInProgress=globalPairingInProgress}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},configureWpsPairing:{name:"Configure wps pairing state",description:"This method configures the wps pairing state.",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result,myMibs,index,subindex,temp_buffer,isPrivate24;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList[0];this.fields.vapQueue=[];if(this.fields.initialParameters.hasOwnProperty("accessPointIdList")){this.fields.accessPointIdList=this.fields.initialParameters.accessPointIdList.slice(0);if(this.fields.accessPointIdList.length>0){callStack.push("semantic","sah.Connection.Server.WiFi.listAccessPoints","1",this,{})
}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.nbStep+=1;switch(aStep){case"1":if((aResult.status===0||aResult.status===true)&&aResult.hasOwnProperty("data")){if(!aResult.data.hasOwnProperty("accessPointList")){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}else{for(index=0;index<this.fields.accessPointIdList.length;index=index+1){isPrivate24=false;for(subindex=0;subindex<aResult.data.accessPointList.length;subindex=subindex+1){if(this.fields.accessPointIdList[index]===aResult.data.accessPointList[subindex].accessPointId&&aResult.data.accessPointList[subindex].linkType.toLowerCase().indexOf("wifi_2.4_private")>-1){isPrivate24=true}break}if(isPrivate24&&aResult.data.radioUsageMode.toLowerCase().indexOf("combined")>-1){for(subindex=0;subindex<aResult.data.accessPointList.length;subindex=subindex+1){if(aResult.data.accessPointList[subindex].linkType.toLowerCase().indexOf("private")>-1){this.fields.vapQueue.push(aResult.data.accessPointList[subindex].accessPointId)}}}else{this.fields.vapQueue.push(this.fields.accessPointIdList[index])}}temp_buffer=this.fields.vapQueue.slice(0);this.fields.vapQueue=temp_buffer.filter(uniqueFilter);this.fields.mxStep+=1;callStack.reCall(this,"2",0)}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(this.fields.vapQueue.length>0){this.fields.mxStep+=1;if(this.fields.initialParameters.hasOwnProperty("isPairingEnabled")){if(this.fields.initialParameters.isPairingEnabled===true){callStack.push("semantic","sah.Connection.Server.WiFi.configureMacFiltering","3",this,{accessPointIdList:[this.fields.vapQueue[0]],isActivated:false})}else{callStack.reCall(this,"4",0)}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}break;case"3":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;callStack.reCall(this,"4",0)}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"4":if(this.fields.vapQueue.length>0){this.fields.mxStep+=1;myMibs={};myMibs.wlanvap={};myMibs.wlanvap[this.fields.vapQueue[0]]={};myMibs.wlanvap[this.fields.vapQueue[0]].WPS={};if(this.fields.initialParameters.hasOwnProperty("isPairingEnabled")){myMibs.wlanvap[this.fields.vapQueue[0]].WPS.Enable=this.fields.initialParameters.isPairingEnabled;callStack.push("api","pcb.NeMo.setVapsConfig","5",this,this.fields.vapQueue[0],{mibs:myMibs})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}break;case"5":if(aResult.status===0||aResult.status===true){if(this.fields.vapQueue.length>0){this.fields.mxStep+=1;this.fields.vapQueue.shift();callStack.reCall(this,"2",0)}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},startWpsPairing:{name:"Start wps pairing",description:"This method starts the wps pairing",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result,myMibs,index,index2;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList[0];this.fields.vapsStack=[];this.fields.vapsStackCopy=[];this.fields.targetVapsStack=[];this.fields.vapsWpsMethodStack={};this.fields.lookForPrivate24=false;this.fields.lookForPrivate5=false;this.fields.private24Found=false;this.fields.private5Found=false;this.fields.anyAccessPointId="";if(this.fields.initialParameters){if(this.fields.initialParameters.hasOwnProperty("accessPointIdList")){this.fields.targetVapsStack=this.fields.initialParameters.accessPointIdList.slice(0)}}callStack.push("semantic","sah.Connection.Server.WiFi.listAccessPoints","1",this,{})}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){if(aResult.hasOwnProperty("data")){if(aResult.data.hasOwnProperty("radioUsageMode")&&aResult.data.hasOwnProperty("accessPointList")){for(index2=0;index2<aResult.data.accessPointList.length;index2=index2+1){this.fields.vapsWpsMethodStack[aResult.data.accessPointList[index2].accessPointId]=aResult.data.accessPointList[index2].pairing.wpsMode}if(aResult.data.radioUsageMode.toLowerCase().indexOf("standard")>-1){this.fields.radioUsageMode="standard";if(this.fields.targetVapsStack.length>0){for(index=0;index<this.fields.targetVapsStack.length;index=index+1){for(index2=0;index2<aResult.data.accessPointList.length;index2=index2+1){if(this.fields.targetVapsStack[index]===aResult.data.accessPointList[index2].accessPointId){if(aResult.data.accessPointList[index2].isEnabled&&aResult.data.accessPointList[index2].pairing.isPairingEnabled){this.fields.vapsStack.push(aResult.data.accessPointList[index2]);this.fields.vapsStackCopy.push(JSON.parse(JSON.stringify(aResult.data.accessPointList[index2])))}}}}}else{for(index2=0;index2<aResult.data.accessPointList.length;index2=index2+1){if(aResult.data.accessPointList[index2].isEnabled&&aResult.data.accessPointList[index2].pairing.isPairingEnabled){this.fields.vapsStack.push(aResult.data.accessPointList[index2]);this.fields.vapsStackCopy.push(JSON.parse(JSON.stringify(aResult.data.accessPointList[index2])))}}}if(this.fields.initialParameters&&this.fields.initialParameters.hasOwnProperty("requirePinCode")){this.fields.wpsMode="selfpin"}else if(this.fields.initialParameters&&this.fields.initialParameters.hasOwnProperty("pinCode")){this.fields.wpsMode="clientpin"}else{this.fields.wpsMode="pushbutton"}if(this.fields.vapsStack.length===0){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}else{this.fields.mxStep+=1;this.fields.anyAccessPointId=this.fields.vapsStack[0].accessPointId;callStack.reCall(this,"2",0)}}else if(aResult.data.radioUsageMode.toLowerCase().indexOf("combined")>-1){this.fields.radioUsageMode="combined";if(this.fields.targetVapsStack.length>0){for(index=0;index<this.fields.targetVapsStack.length;index=index+1){for(index2=0;index2<aResult.data.accessPointList.length;index2=index2+1){if(this.fields.targetVapsStack[index]===aResult.data.accessPointList[index2].accessPointId){if(aResult.data.accessPointList[index2].isEnabled&&aResult.data.accessPointList[index2].pairing.isPairingEnabled){this.fields.vapsStack.push(aResult.data.accessPointList[index2])}if(aResult.data.accessPointList[index2].linkType.indexOf("WIFI_2.4_PRIVATE")>-1){this.fields.lookForPrivate5=true;this.fields.private24Found=true}else if(aResult.data.accessPointList[index2].linkType.indexOf("WIFI_5_PRIVATE")>-1){this.fields.lookForPrivate24=true;this.fields.private5Found=true}}}}for(index2=0;index2<aResult.data.accessPointList.length;index2=index2+1){if(aResult.data.accessPointList[index2].linkType.indexOf("WIFI_2.4_PRIVATE")>-1&&this.fields.lookForPrivate24&&!this.fields.private24Found){this.fields.private24Found=true;if(aResult.data.accessPointList[index2].isEnabled&&aResult.data.accessPointList[index2].pairing.isPairingEnabled){this.fields.vapsStack.push(aResult.data.accessPointList[index2])}}else if(aResult.data.accessPointList[index2].linkType.indexOf("WIFI_5_PRIVATE")>-1&&this.fields.lookForPrivate5&&!this.fields.private5Found){this.fields.private5Found=true;if(aResult.data.accessPointList[index2].isEnabled&&aResult.data.accessPointList[index2].pairing.isPairingEnabled){this.fields.vapsStack.push(aResult.data.accessPointList[index2])}}}}else{for(index2=0;index2<aResult.data.accessPointList.length;index2=index2+1){if(aResult.data.accessPointList[index2].isEnabled&&aResult.data.accessPointList[index2].pairing.isPairingEnabled){this.fields.vapsStack.push(aResult.data.accessPointList[index2])}}}if(this.fields.initialParameters&&this.fields.initialParameters.hasOwnProperty("requirePinCode")){this.fields.wpsMode="selfpin"}else if(this.fields.initialParameters&&this.fields.initialParameters.hasOwnProperty("pinCode")){this.fields.wpsMode="clientpin"}else{this.fields.wpsMode="pushbutton"}if(this.fields.vapsStack.length===0){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}else{this.fields.mxStep+=1;this.fields.anyAccessPointId=this.fields.vapsStack[0].accessPointId;callStack.reCall(this,"4",0)}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(this.fields.vapsStack.length>0){myMibs={};myMibs.wlanvap={};if(this.fields.wpsMode==="selfpin"){myMibs.wlanvap[this.fields.vapsStack[0].accessPointId]={WPS:{ConfigMethodsEnabled:"Keypad,Display,Ethernet"}};if(this.fields.vapsWpsMethodStack[this.fields.vapsStack[0].accessPointId]==="Keypad,Display,Ethernet"){this.fields.mxStep+=1;this.fields.vapsStack.shift();callStack.reCall(this,"2",0)}else{this.fields.mxStep+=1;callStack.push("api","pcb.NeMo.setVapsConfig","3",this,this.fields.vapsStack[0].accessPointId,{mibs:myMibs})}}else{myMibs.wlanvap[this.fields.vapsStack[0].accessPointId]={WPS:{ConfigMethodsEnabled:"PushButton,Label,Ethernet"}};if(this.fields.vapsWpsMethodStack[this.fields.vapsStack[0].accessPointId]==="PushButton,Label,Ethernet"){this.fields.mxStep+=1;this.fields.vapsStack.shift();callStack.reCall(this,"2",0)}else{this.fields.mxStep+=1;callStack.push("api","pcb.NeMo.setVapsConfig","3",this,this.fields.vapsStack[0].accessPointId,{mibs:myMibs})}}}else{this.fields.mxStep+=1;callStack.reCall(this,"4",0)}break;case"3":if(aResult.status===0||aResult.status===true||aResult.status===null){if(this.fields.vapsStack.length>0){this.fields.mxStep+=1;this.fields.vapsStack.shift();callStack.reCall(this,"2",0)}else{this.fields.mxStep+=1;callStack.reCall(this,"4",0)}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"4":if(this.fields.wpsMode==="selfpin"){this.fields.mxStep+=1;callStack.push("api","pcb.NeMo.generateSelfPIN","5",this,this.fields.anyAccessPointId)}else{this.fields.mxStep+=1;callStack.reCall(this,"6",0)}break;case"5":if(aResult.status===0||aResult.status===true){if(aResult.hasOwnProperty("data")){this.fields.data.pinCode=aResult.data}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"6":if(this.fields.radioUsageMode.indexOf("combined")>-1){if(this.fields.wpsMode==="clientpin"){this.fields.mxStep+=1;callStack.push("api","pcb.NMC.wiFiStartPairing","7",this,{clientPIN:this.fields.initialParameters.pinCode})}else if(this.fields.wpsMode==="pushbutton"){this.fields.mxStep+=1;callStack.push("api","pcb.NMC.wiFiStartPairing","7",this,{})}}else if(this.fields.radioUsageMode.indexOf("standard")>-1){this.fields.mxStep+=1;callStack.reCall(this,"8",0)}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"7":if(aResult.status!==0&&aResult.status!==true){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"8":if(this.fields.vapsStackCopy.length>0){this.fields.mxStep+=1;if(this.fields.wpsMode==="clientpin"){callStack.push("api","pcb.NeMo.pushButton","9",this,this.fields.vapsStackCopy[0].accessPointId,{clientPIN:this.fields.initialParameters.pinCode})}else if(this.fields.wpsMode==="pushbutton"){callStack.push("api","pcb.NeMo.pushButton","9",this,this.fields.vapsStackCopy[0].accessPointId,{})}}break;case"9":if(aResult.status===0||aResult.status===true||aResult.status===null){if(this.fields.vapsStackCopy.length>0){this.fields.mxStep+=1;this.fields.vapsStackCopy.shift();callStack.reCall(this,"8",0)}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},stopWpsPairing:{name:"Stop wps pairing",description:"This method stops the wps pairing",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList;callStack.push("api","pcb.NMC.wiFiStopPairing","1",this)}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status!==0&&aResult.status!==true){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},getSpectrumInfo:{name:"List radios spectrum infos according to filter",description:"This method returns a list of radios spectrum infos.",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{},indRadio:0},call:function(aStep,aResult){var result,i,j,radioFoundFlag;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList[0];this.fields.data.radioList=[];this.fields.radioToGetCheck=[];this.fields.intermediateResult={};this.fields.intermediateResult.radioIdList=[];if(this.fields.initialParameters){if(this.fields.initialParameters.hasOwnProperty("radioIdList")){if(this.fields.initialParameters.radioIdList.length>0){this.fields.radioToGetCheck=this.fields.initialParameters.radioIdList.slice(0);if(!callStack.cache.get("radioAccessPointLinkAssociation")){callStack.push("semantic","sah.Connection.Server.WiFi.listAccessPoints","1",this,{})}else{for(i=0;i<callStack.cache.get("radioAccessPointLinkAssociation").length;i+=1){radioFoundFlag=false;for(j=0;j<this.fields.radioToGetCheck.length;j+=1){if(this.fields.radioToGetCheck[j]===callStack.cache.get("radioAccessPointLinkAssociation")[i].radioId){radioFoundFlag=true;break}}if(!radioFoundFlag){this.fields.radioToGetCheck.push(callStack.cache.get("radioAccessPointLinkAssociation")[i].radioId)}}this.fields.indRadio=-1;callStack.reCall(this,"2",0)}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{if(!callStack.cache.get("radioAccessPointLinkAssociation")){callStack.push("semantic","sah.Connection.Server.WiFi.listAccessPoints","1",this,{})}else{for(i=0;i<callStack.cache.get("radioAccessPointLinkAssociation").length;i+=1){radioFoundFlag=false;for(j=0;j<this.fields.radioToGetCheck.length;j+=1){if(this.fields.radioToGetCheck[j]===callStack.cache.get("radioAccessPointLinkAssociation")[i].radioId){radioFoundFlag=true;break}}if(!radioFoundFlag){this.fields.radioToGetCheck.push(callStack.cache.get("radioAccessPointLinkAssociation")[i].radioId)}}this.fields.indRadio=-1;callStack.reCall(this,"2",0)}}}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;radioFoundFlag=false;for(i=0;i<callStack.cache.get("radioAccessPointLinkAssociation").length;i+=1){for(j=0;j<this.fields.radioToGetCheck.length;j+=1){if(this.fields.radioToGetCheck[j]===callStack.cache.get("radioAccessPointLinkAssociation")[i].radioId){radioFoundFlag=true;break}}if(radioFoundFlag){this.fields.indRadio=-1;callStack.reCall(this,"2",0);break}}if(!radioFoundFlag){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":this.fields.indRadio+=1;if(this.fields.indRadio<this.fields.radioToGetCheck.length){this.fields.mxStep+=1;callStack.push("api","pcb.NeMo.getRadioSpectrumInfo","3",this,this.fields.radioToGetCheck[this.fields.indRadio],{update:true})}break;case"3":if(aResult.status===0||aResult.status===true){this.fields.intermediateResult.currentRadio={};this.fields.intermediateResult.currentRadio.radioId=this.fields.radioToGetCheck[this.fields.indRadio];this.fields.intermediateResult.currentRadio.spectrumInfo=[];for(i=0;i<aResult.data.length;i+=1){this.fields.intermediateResult.currentRadio.spectrumInfo.push({channel:aResult.data[i].channel,availability:aResult.data[i].availability,noiseLevel:aResult.data[i].noiselevel,accessPoints:aResult.data[i].accesspoints})}this.fields.data.radioList.push(this.fields.intermediateResult.currentRadio);this.fields.mxStep+=1;callStack.reCall(this,"2",0)}else{this.fields.mxStep+=1;callStack.reCall(this,"2",0)}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},getGuestLimitation:{name:"Gets guest wifi limitation configuration",description:"This method returns the limitation configuration of guest wifi.",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;callStack.push("api","pcb.NMC.guestGet","1",this,{})}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){if(aResult.data){if(typeof aResult.data.BandwidthLimitation==="number"){this.fields.data.bandwidthLimitation=aResult.data.BandwidthLimitation}this.fields.mxStep+=1;callStack.push("api","pcb.NMC.getWlanActivationTimer","2",this,{InterfaceName:"guest"})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status===0||aResult.status===true){if(typeof aResult.data==="number"){this.fields.data.timeRemaining=aResult.data}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},setGuestLimitation:{name:"Sets guest wifi limitation configuration",description:"This method sets the limitation configuration of guest wifi.",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.initialParameters=aResult.inputList[0];if(typeof this.fields.initialParameters.bandwidthLimitation==="undefined"&&typeof this.fields.initialParameters.timeRemaining==="undefined"){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}else{if(typeof this.fields.initialParameters.bandwidthLimitation==="number"){callStack.push("api","pcb.NMC.guestSet","1",this,{BandwidthLimitation:this.fields.initialParameters.bandwidthLimitation})}else{callStack.reCall(this,"2",0)}}}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;callStack.reCall(this,"2",0)}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(typeof this.fields.initialParameters.timeRemaining==="number"){this.fields.mxStep+=1;callStack.push("api","pcb.NMC.setWlanActivationTimer","3",this,{Timeout:this.fields.initialParameters.timeRemaining/3600,InterfaceName:"guest"})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"3":if(aResult.status!==0&&aResult.status!==true){this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}},getHotSpotState:{name:"Gets hotspot status",description:"This method returns status of wifi hotspot.",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{}},call:function(aStep,aResult){var result,wificomSecureStatus;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;callStack.push("api","pcb.Wificom.openModeGetStatus","1",this,{})}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){if(aResult.data){this.fields.wificomOpenStatus=aResult.data;this.fields.mxStep+=1;callStack.push("api","pcb.Wificom.secureModeGetStatus","2",this,{})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status===0||aResult.status===true){wificomSecureStatus=aResult.data;this.fields.data.hostspotList=[];this.fields.data.hostspotList.push(fillHotspotResult(this.fields.wificomOpenStatus,false));this.fields.data.hostspotList.push(fillHotspotResult(wificomSecureStatus,true))}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}}}});