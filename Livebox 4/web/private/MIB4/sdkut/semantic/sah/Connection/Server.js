define(["utils/console","engine/callStack"],function(console,callStack){"use strict";return{getCapabilities:{name:"Get server capabilities, store the results in callstack cache",description:"This method returns a list of available capabilities such as link modes and types",fields:{uuid:null,nbStep:0,mxStep:0,status:0,data:{},initialParameters:{},intermediateResult:{}},call:function(aStep,aResult){var result,ind,wiFiSupportedLinkTypeList,lanObj,guestObj,hotspotObj,wfcObj,wfcSecObj,returnWiFiSupportedLinkTypeList,returnWificomSupportedLinkTypeList,ethernetSupportedLinkModeList;if(aStep==="0"){this.fields.uuid=aResult.uuid;this.fields.status=0;this.fields.nbStep=0;this.fields.mxStep=0;this.fields.mxStep+=1;this.fields.intermediateResult.isEthernetAvailable=false;this.fields.intermediateResult.isDhcpAvailable=false;this.fields.intermediateResult.isWiFiAvailable=false;this.fields.intermediateResult.isWiFiPrivateAvailable=false;this.fields.intermediateResult.isWiFiGuestAvailable=false;callStack.push("api","pcb.Devices.getDevice","1",this,{expression:"self and eth",flags:"down"})}else{this.fields.nbStep+=1;switch(aStep){case"1":if(aResult.status===0||aResult.status===true){this.fields.mxStep+=1;if(aResult.data.length>0){this.fields.intermediateResult.isEthernetAvailable=true}callStack.push("api","pcb.NMC.getLANIP","2",this,{})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"2":if(aResult.status===0||aResult.status===true){if(aResult.data){if(aResult.data.DHCPEnable){this.fields.intermediateResult.isDhcpAvailable=true}}this.fields.mxStep+=1;callStack.push("api","pcb.NeMo.getMIBs","3",this,"lan",{mibs:"base wlanradio wlanvap"})}else{this.fields.status=-1;this.fields.mxStep=0;callStack.logMessage("SEM_SYN_ERROR")}break;case"3":this.fields.mxStep+=1;if(aResult.data){callStack.cache.set("aLanMIBs",aResult.data)}else{callStack.cache.set("aLanMIBs",{})}callStack.push("api","pcb.NeMo.getMIBs","4",this,"guest",{mibs:"base wlanradio wlanvap"});break;case"4":this.fields.mxStep+=1;if(aResult.data){callStack.cache.set("aGuestMIBs",aResult.data)}else{callStack.cache.set("aGuestMIBs",{})}callStack.push("api","pcb.NeMo.getMIBs","5",this,"hotspot",{mibs:"base wlanradio wlanvap"});break;case"5":this.fields.mxStep+=1;if(aResult.data){callStack.cache.set("aHotspotMIBs",aResult.data)}else{callStack.cache.set("aHotspotMIBs",{})}callStack.push("api","pcb.Wificom.openModeGetStatus","6",this,{});break;case"6":this.fields.mxStep+=1;if(aResult.data){callStack.cache.set("aWfcMIBs",aResult.data)}else{callStack.cache.set("aWfcMIBs",{})}callStack.push("api","pcb.Wificom.secureModeGetStatus","7",this,{});break;case"7":this.fields.mxStep+=1;if(aResult.data){callStack.cache.set("aWfcSecMIBs",aResult.data)}else{callStack.cache.set("aWfcSecMIBs",{})}callStack.push("api","pcb.Devices.getDevice","8",this,{expression:"dect and not handset",flags:"down"});break;case"8":this.fields.data.supportedLinkModeList=[];if(aResult.data){for(ind=0;ind<aResult.data.length;ind+=1){if(aResult.data[ind].Key.toLowerCase().indexOf("dect")>-1){this.fields.data.supportedLinkModeList.push({linkMode:"CATIQ2",supportedLinkModeList:[]});break}}}wiFiSupportedLinkTypeList=[];lanObj=callStack.cache.get("aLanMIBs");guestObj=callStack.cache.get("aGuestMIBs");hotspotObj=callStack.cache.get("aHotspotMIBs");wfcObj=callStack.cache.get("aWfcMIBs");wfcSecObj=callStack.cache.get("aWfcSecMIBs");returnWiFiSupportedLinkTypeList=function(aObj,aInterface){var radioKey,vapKey,baseKey,ulIntfKey,k,knownVapsOnCurrentRadio,confirmedVapsOnCurrentRadioAndIntf,frequencyOnCurrentRadio,aResult;aResult=[];for(radioKey in aObj.wlanradio){if(aObj.wlanradio.hasOwnProperty(radioKey)){knownVapsOnCurrentRadio=[];confirmedVapsOnCurrentRadioAndIntf=[];if(aObj.wlanradio[radioKey].OperatingFrequencyBand.toLowerCase()==="2.4ghz"){frequencyOnCurrentRadio="2.4"}else if(aObj.wlanradio[radioKey].OperatingFrequencyBand.toLowerCase()==="5ghz"){frequencyOnCurrentRadio="5"}for(baseKey in aObj.base){if(aObj.base.hasOwnProperty(baseKey)){if(baseKey===radioKey){for(ulIntfKey in aObj.base[baseKey].ULIntf){if(aObj.base[baseKey].ULIntf.hasOwnProperty(ulIntfKey)){knownVapsOnCurrentRadio.push(ulIntfKey)}}}}}for(vapKey in aObj.wlanvap){if(aObj.wlanvap.hasOwnProperty(vapKey)){for(k=0;k<knownVapsOnCurrentRadio.length;k+=1){if(vapKey===knownVapsOnCurrentRadio[k]){if(aInterface==="lan"){aResult.push("WIFI_"+frequencyOnCurrentRadio+"_PRIVATE")}else if(aInterface==="guest"){aResult.push("WIFI_"+frequencyOnCurrentRadio+"_GUEST")}else if(aInterface==="hotspot"){if(aObj.wlanvap[knownVapsOnCurrentRadio[k]].Security.ModeEnabled.toLowerCase()==="none"){aResult.push("WIFI_OPEN_HOTSPOT")}else{aResult.push("WIFI_SECURE_HOTSPOT")}}}}}}}}return aResult};wiFiSupportedLinkTypeList=wiFiSupportedLinkTypeList.concat(returnWiFiSupportedLinkTypeList(lanObj,"lan"));wiFiSupportedLinkTypeList=wiFiSupportedLinkTypeList.concat(returnWiFiSupportedLinkTypeList(guestObj,"guest"));wiFiSupportedLinkTypeList=wiFiSupportedLinkTypeList.concat(returnWiFiSupportedLinkTypeList(hotspotObj,"hotspot"));returnWificomSupportedLinkTypeList=function(aObj,aInterface){var aResult;aResult=[];if(typeof aObj.Enable==="boolean"&&typeof aObj.Status==="string"&&typeof aObj.SSID==="string"){if(aInterface==="wfc"){aResult.push("WIFI_OPEN_HOTSPOT")}else if(aInterface==="wfcsec"){aResult.push("WIFI_SECURE_HOTSPOT")}}return aResult};wiFiSupportedLinkTypeList=wiFiSupportedLinkTypeList.concat(returnWificomSupportedLinkTypeList(wfcObj,"wfc"));wiFiSupportedLinkTypeList=wiFiSupportedLinkTypeList.concat(returnWificomSupportedLinkTypeList(wfcSecObj,"wfcsec"));if(wiFiSupportedLinkTypeList.length>0){this.fields.data.supportedLinkModeList.push({linkMode:"WIFI",supportedLinkModeList:wiFiSupportedLinkTypeList})}if(this.fields.intermediateResult.isEthernetAvailable){if(this.fields.intermediateResult.isDhcpAvailable){ethernetSupportedLinkModeList=["ETHERNET_DHCP"]}else{ethernetSupportedLinkModeList=[]}this.fields.data.supportedLinkModeList.push({linkMode:"ETHERNET",supportedLinkModeList:ethernetSupportedLinkModeList})}break;default:console.warn("Unexpected step '"+aStep+"' in call stack");this.fields.nbStep-=1;break}}if(this.fields.nbStep>=this.fields.mxStep){result={status:this.fields.status};if(this.fields.status===0&&this.fields.data){result.data=this.fields.data}callStack.popAll("api",result,this.fields.uuid)}}}}});