define(["utils/console","utils/basics","lib/stateCtrlInterface"],function(console,basicUtilities,StateCtrlClass){"use strict";function TelevisionStateCtrlClass(aStateId,aStateManager,aSahObj,aViewObj){var fields,globalResult,onViewEvent=function(aEventId,aData){if(aEventId==="ViewUpdated"){console.debug("TelevisionStateCtrlClass: View event '"+aEventId+"' with data "+JSON.stringify(aData))}else if(aEventId==="ViewCancelled"){console.debug("TelevisionStateCtrlClass: View event '"+aEventId+"' with data "+JSON.stringify(aData));this.quit()}else if(aEventId==="ViewSubmitted"){console.debug("TelevisionStateCtrlClass: View event '"+aEventId+"' with data "+JSON.stringify(aData))}else{console.warn("TelevisionStateCtrlClass: Unexpected event '"+aEventId+"'")}};fields={};globalResult={};StateCtrlClass.call(this,aStateId,aStateManager,aSahObj,aViewObj);this.init=function(aCallback){console.debug("TelevisionStateCtrlClass: Initialising state '"+this.getId()+"'");basicUtilities.queue([function(aNext){this.getViewObj().subscribeEvents(this.getId(),onViewEvent.bind(this));this.getViewObj().init(aNext)},function(aNext,aResult){if(!aResult||aResult.status===0){basicUtilities.callback(aCallback,false,0,null)}else{basicUtilities.callback(aCallback,false,-1,null);this.getViewObj().notifyError("TelevisionStateCtrlClass: Initialising state '"+this.getId()+"'","rra0219")}}],this)};this.quit=function(aCallback){console.debug("TelevisionStateCtrlClass: Releasing state '"+this.getId()+"'");basicUtilities.queue([function(aNext){this.getViewObj().quit(aNext)},function(aNext,aResult){if(!aResult||aResult.status===0){basicUtilities.callback(aCallback,false,0,null)}else{basicUtilities.callback(aCallback,false,-1,null);this.getViewObj().notifyError("TelevisionStateCtrlClass: Releasing state '"+this.getId()+"'","rra0220")}}],this)};this.enable=function(aCallback){console.debug("TelevisionStateCtrlClass: Enabling state '"+this.getId()+"'");basicUtilities.queue([function(aNext){this.getViewObj().enable(aNext);this.getTVStatus()},function(aNext,aResult){if(!aResult||aResult.status===0){basicUtilities.callback(aCallback,false,0,null)}else{basicUtilities.callback(aCallback,false,-1,null);this.getViewObj().notifyError("TelevisionStateCtrlClass: Enabling state '"+this.getId()+"'","rra0221")}}],this)};this.disable=function(aCallback){console.debug("TelevisionStateCtrlClass: Disabling state '"+this.getId()+"'");basicUtilities.queue([function(aNext){this.getViewObj().disable(aNext)},function(aNext,aResult){if(!aResult||aResult.status===0){basicUtilities.callback(aCallback,false,0,null)}else{basicUtilities.callback(aCallback,false,-1,null);this.getViewObj().notifyError("TelevisionStateCtrlClass: Disabling state '"+this.getId()+"'","rra0222")}}],this)};this.getTVStatus=function(aCallback){basicUtilities.queue([function(aNext){this.callSahApi("sah.Device.Tv.getServiceState",aNext,null)},function(aNext,aResult){if(!aResult||aResult.status===0){globalResult.service=aResult.data;this.callSahApi("sah.HomeNetwork.NetworkMap.listDevices",aNext,null)}else{this.getViewObj().notifyError("TelevisionStateCtrlClass: internal Error getServiceState failed","rra0224");basicUtilities.callback(aCallback,false,-1,null)}},function(aNext,aResult){if(!aResult||aResult.status===0){globalResult.map=aResult.data;this.getViewObj().displayTVInfo(globalResult);basicUtilities.callback(aCallback,false,0,null)}else{this.getViewObj().notifyError("TelevisionStateCtrlClass: internal Error getDeviceMap failed","rra0225");basicUtilities.callback(aCallback,false,-1,null)}}],this)}}return TelevisionStateCtrlClass});