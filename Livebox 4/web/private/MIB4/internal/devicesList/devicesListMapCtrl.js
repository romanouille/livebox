define(["utils/console","utils/basics","lib/stateCtrlInterface"],function(console,basicUtilities,StateCtrlClass){"use strict";function DevicesListMapCtrlClass(aStateId,aStateManager,aSahObj,aViewObj){var fields={currentData:{getTopology:{},getAccessPoints:{}}},onViewEvent=function(aEventId,aData){if(aEventId==="ViewUpdated"){console.debug("DevicesListMapCtrlClass: View event '"+aEventId+"' with data "+JSON.stringify(aData))}else if(aEventId==="ViewCancelled"){console.debug("DevicesListMapCtrlClass: View event '"+aEventId+"' with data "+JSON.stringify(aData))}else if(aEventId==="ViewSubmitted"){console.debug("DevicesListMapCtrlClass: View event '"+aEventId+"' with data "+JSON.stringify(aData))}else{console.warn("DevicesListMapCtrlClass: Unexpected event '"+aEventId+"'")}};StateCtrlClass.call(this,aStateId,aStateManager,aSahObj,aViewObj);this.init=function(aCallback){console.debug("DevicesListMapCtrlClass: Initialising state '"+this.getId()+"'");basicUtilities.queue([function(aNext){this.getViewObj().subscribeEvents(this.getId(),onViewEvent.bind(this));this.getViewObj().init(aNext)},function(aNext,aResult){if(!aResult||aResult.status===0){basicUtilities.callback(aCallback,false,0,null)}else{basicUtilities.callback(aCallback,false,-1,null);this.getViewObj().notifyError("DevicesListMapCtrlClass: init failed","aba0001")}}],this)};this.quit=function(aCallback){console.debug("DevicesListMapCtrlClass: Releasing state '"+this.getId()+"'");basicUtilities.queue([function(aNext){this.getViewObj().quit(aNext)},function(aNext,aResult){if(!aResult||aResult.status===0){basicUtilities.callback(aCallback,false,0,null)}else{basicUtilities.callback(aCallback,false,-1,null);this.getViewObj().notifyError("DevicesListMapCtrlClass: view quit failed","aba0xxx")}}],this)};this.enable=function(aCallback){console.debug("DevicesListMapCtrlClass: Enabling state '"+this.getId()+"'");basicUtilities.queue([function(aNext){this.listenEvents(aNext)},function(aNext,aResult){if(!aResult||aResult.status===0){this.getAccessPoints(aNext)}else{console.error("DevicesListMapCtrlClass: Internal error");this.getViewObj().notifyError("DevicesListMapCtrlClass: listenEvents failed","aba0xxx")}},function(aNext,aResult){if(!aResult||aResult.status===0){this.getTopology(aNext)}else{console.error("DevicesListMapCtrlClass: Internal error");this.getViewObj().notifyError("DevicesListMapCtrlClass: getAccessPoints failed","aba0xxx")}},function(aNext,aResult){if(!aResult||aResult.status===0){this.getViewObj().fields.currentData=fields.currentData;aNext()}else{console.error("DevicesListMapCtrlClass: Internal error");this.getViewObj().notifyError("DevicesListMapCtrlClass: getTopology failed","aba0xxx")}},function(aNext){this.getViewObj().enable(aNext)},function(aNext,aResult){if(!aResult||aResult.status===0){basicUtilities.callback(aCallback,false,0,null)}else{basicUtilities.callback(aCallback,false,-1,null);this.getViewObj().notifyError("DevicesListMapCtrlClass: view enable failed","aba0xxx")}}],this)};this.disable=function(aCallback){console.debug("DevicesListMapCtrlClass: Disabling state '"+this.getId()+"'");basicUtilities.queue([function(aNext){this.getViewObj().disable(aNext)},function(aNext,aResult){if(!aResult||aResult.status===0){this.unlistenEvents(aNext)}else{console.error("DevicesListMapCtrlClass: Internal error");this.getViewObj().notifyError("DevicesListMapCtrlClass: view disable failed","aba0xxx")}},function(aNext,aResult){if(!aResult||aResult.status===0){basicUtilities.callback(aCallback,false,0,null)}else{basicUtilities.callback(aCallback,false,-1,null);this.getViewObj().notifyError("DevicesListMapCtrlClass: unlistenEvents failed","aba0xxx")}}],this)};this.listenEvents=function(aCallback){basicUtilities.callback(aCallback,false,0,null)};this.unlistenEvents=function(aCallback){basicUtilities.callback(aCallback,false,0,null)};this.getTopology=function(aCallback){basicUtilities.queue([function(aNext){this.callSahApi("sah.HomeNetwork.NetworkMap.getDeviceMap",aNext,{isActive:true})},function(aNext,aResult){if(aResult.status===0){fields.currentData.getTopology=aResult.data;basicUtilities.callback(aCallback,false,0,aResult.data)}else{console.warn("DevicesListMapCtrlClass: Failed to retrieve topology");this.getViewObj().notifyError("DevicesListMapCtrlClass: Failed to retrieve topology","aba0xxx");basicUtilities.callback(aCallback,false,-1,null)}}],this)};this.getAccessPoints=function(aCallback){var index,rootvap;basicUtilities.queue([function(aNext){this.callSahApi("sah.Connection.Server.WiFi.listAccessPoints",aNext,null)},function(aNext,aResult){if(aResult.status===0){if(aResult.hasOwnProperty("data")){fields.currentData.getAccessPoints=aResult.data;if(fields.currentData.getAccessPoints.hasOwnProperty("accessPointList")){for(index=0;index<fields.currentData.getAccessPoints.accessPointList.length;index=index+1){rootvap=fields.currentData.getAccessPoints.accessPointList[index];if(rootvap.linkType==="WIFI_2.4_PRIVATE"){fields.currentData.private24Id=fields.currentData.getAccessPoints.accessPointList[index].accessPointId;fields.currentData.private24IsEnabled=fields.currentData.getAccessPoints.accessPointList[index].isEnabled}else if(rootvap.linkType==="WIFI_5_PRIVATE"){fields.currentData.private5Id=fields.currentData.getAccessPoints.accessPointList[index].accessPointId;fields.currentData.private5IsEnabled=fields.currentData.getAccessPoints.accessPointList[index].isEnabled}else if(rootvap.linkType==="WIFI_2.4_GUEST"){fields.currentData.guest24Id=fields.currentData.getAccessPoints.accessPointList[index].accessPointId;fields.currentData.guest24IsEnabled=fields.currentData.getAccessPoints.accessPointList[index].isEnabled}else if(rootvap.linkType==="WIFI_5_GUEST"){fields.currentData.guest5Id=fields.currentData.getAccessPoints.accessPointList[index].accessPointId;fields.currentData.guest5IsEnabled=fields.currentData.getAccessPoints.accessPointList[index].isEnabled}}}}basicUtilities.callback(aCallback,false,0,fields.currentData.getAccessPoints)}else{console.warn("DevicesListMapCtrlClass: Failed to retrieve access points");this.getViewObj().notifyError("DevicesListMapCtrlClass: Failed to retrieve access points","aba0xxx");basicUtilities.callback(aCallback,false,-1,null)}}],this)}}return DevicesListMapCtrlClass});