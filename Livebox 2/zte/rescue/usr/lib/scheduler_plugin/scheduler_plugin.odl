using "scheduler_plugin.so";

/**
 *
 * New 'generic' scheduling plugin
 * -------------------------------
 * Scheduling only schedules, no specific application knowledge (WIFI,...) is compiled in.
 * On state changes the schedule plugin calls the set_state() RPC in the corresponding plugin 
 * with a unique ID to change the state. 
 *
 */


/**
 * 
 *  Example interactions between a client plugin and the schedule plugin
 *
 *  WIFI PLUGIN                                                                        SCHEDULE PLUGIN             
 *  ===========                                                                        ===============            
 *      --- Scheduler.registerScheduleType("wifi","WIFI",["Enable","Disable"],ULL) -------------> Activate persistent wifi schedules (assume "wl0" schedule was already there)
 *    
 *      <-- WIFI.setState("wl0","Enabled") ----------------------------------------------
 *                     
 *                              ...
 *  
 *      <-- WIFI.setState("wl0","Disabled") ---------------------------------------------
 *  
 *
 *
 *
 *  Example interactions between the scheduler and the webui
 *
 *  WEBUI                                                                                  SCHEDULE PLUGIN             
 *  =====                                                                                  ===============    
 *      --- Scheduler.addSchedule("wifi",{"wl0",true,"weekly","Disabled","", ----------> Enable wl0 on wed, sat + sun
 *               [{ "state": "Enabled", "begin": 3*24*60*60, "end": 4*24*60*60},
 *                { "state": "Enabled", "begin:" 5*24*60*60, "end": 7*24*60*60]})
 *
 *      --- Scheduler.addSchedule("wifi",{"wl1",true,"daily","Enabled","", ------------> Disable wifi on wed, sat + sun
 *               [{ "state": "Disabled", "begin": 3*24*60*60, "end": 4*24*60*60},
 *                { "state": "Disabled", "begin:" 5*24*60*60, "end": 7*24*60*60]})
 *
 *      --- Scheduler.getSchedules("wifi",[]) ------------------------------------------> returns
 *                                                                                         [{"wl0",true,"weekly","Disabled","","Disabled"},
 *                                                                                          {"wl1",true,"Daily","Enabled","Enabled","Enabled"}]
 *
 *      --- Scheduler.getCompleteSchedules("wifi",[],[],[]) ---------------------------> returns
 *                                                                                         [{"wl0",true,"weekly","Disabled","","Disabled",
 *                                                                                           [{"Enabled",3*24*60*60,4*24*60*60},
 *                                                                                            {"Enabled",5*24*60*60,7*24*60*60}]},
 *                                                                                          {"wl1",true,"Daily","Enabled","Enabled","Enabled",
 *                                                                                           [{"Disabled",3*24*60*60,4*24*60*60},
 *                                                                                            {"Disabled",5*24*60*60,7*24*60*60}]}]
 *
 *      --- Scheduler.getSchedule("wifi","wl0",[],[],[]) -------------------------------> returns
 *                                                                                         {"wl0",true,"weekly","Disabled","", "Disabled".
 *                                                                                          [{"Enabled",3*24*60*60,4*24*60*60},
 *                                                                                           {"Enabled",5*24*60*60,7*24*60*60}]}
 *
 *      --- Scheduler.overrideSchedule("wifi", "wl0", "Enabled") -----------------------> Override the schedule and always enable wl0
 *  
 *      --- Scheduler.enableSchedule("wifi", "wl0", false) -----------------------------> Disable the wl0 schedule
 *
 *      --- Scheduler.removeSchedules("wifi", "wl0") -----------------------------------> Remove the wl0 schedule
 *
 *      --- Scheduler.getScheduleTypes([]) ------------------------------------------------> returns ["wifi","tod"]
 *  
 *  
 */


define schedule_entry_t {
  string state;
  uint32 begin;
  uint32 end;
}

/**
 * - ID: unique ID that will be provided as an argument when calling the PCB RPC when a state change occurs
 *       (e.g. "wl0" for WLAN scheduling, "00-11-22-33-44-55" for TOD)
 * - enable: defines if this schedule is enabled
 * - base: daily, weekly, monthly, yearly
 * - def: the default state of this schedule
 * - override: if non-empty, an override is set on this schedule
 */
define schedule_t {
  string ID;
  bool   enable;
  string base;
  string def;
  string override;
  string value;    // not used when adding a schedule, only used when querying schedule data
  list   schedule;
}

object Scheduler {
 /**
  * Register a scheduler type, the function calling this routine should implement
  * the setState() RPC to handle state changes.
  * - type: logical name for this scheduler type
  * - path: Path where the call the setState() and get_state RPC's
  * - states: possible states for this schedule
  * - schedules: list of schedules
  */
  bool registerScheduleType(string type, string path, list states, list schedules);

 /**
  * Unregister a scheduler type, this function will remove all objects relateted to this type
  * - type: logical name for this scheduler type
  */
  bool unregisterScheduleType(string type);

 /**
  * Add a schedule to a registered scheduler
  * - type: schedule type, must correspond with the 'type' in registerScheduleType
  * - info: schedule info
  */
  bool addSchedule(string type, schedule_t info);

 /**
  * Enable/disable the specified schedule
  * - type: schedule type, must correspond with the 'type' in registerScheduleType
  * - ID: unique ID of that schedule
  * - enable: the new state
  */
  bool enableSchedule(string type, string ID, bool enable);

 /**
  * Add a schedule to a registered scheduler
  * - type: schedule type, must correspond with the 'type' in registerScheduleType
  * - ID: unique ID of that schedule
  * - override: override value, this must be a registered  state. In case this string is empty, 
  *             the override is switched off
  */
  bool overrideSchedule(string type, string ID, string override);

 /**
  * Remove the specified schedule(s)
  * - type: schedule type, must correspond with the 'type' in registerScheduleType
  * - ID: array of the current schedule ID's that need to be removed, if empty, all schedules will be removed
  */
  bool removeSchedules(string type, list ID);

 /**
  * Get the registered schedule types
  *  - types: list of strings describing the registered schedule types
  */
  bool getScheduleTypes(out list types);

 /**
  * Get the schedules for the specified schedule type
  * - type: schedule type, must correspond with the 'type' in registerScheduleType
  * - scheduleInfo: list of schedule_t (includes the current value, but not the schedules itself)
  */
  bool getSchedules(string type, out list scheduleInfo);

 /**
  * Get the schedules for the specified schedule type
  * - type: schedule type, must correspond with the 'type' in registerScheduleType
  * - scheduleInfo: list of schedule_t (includes both the current value and the schedule data)
  */
  bool getCompleteSchedules(string type, out list scheduleInfo);

 /**
  * Get the specified schedule
  * - type: schedule type, must correspond with the 'type' in registerScheduleType
  * - ID: unique ID of that schedule
  * - scheduleInfo: list of schedule_t (includes both the current value and the schedule data)
  */
  bool getSchedule(string type, string ID, out schedule_t info);

 /**
  * Simulate the specified schedule
  * - type: schedule type, must correspond with the 'type' in registerScheduleType
  * - ID: unique ID of that schedule
  * - begin: begintime of simulation
  * - end: endtime of simulation
  * returns:
  *  list of strings describing the setState() calls that will occur for the specified schedule
  */
  list simulateSchedule(string type, string ID, datetime begin, datetime end);

 /**
  * Simulate all schedulers
  * - begin: begintime of simulation
  * - end: endtime of simulation
  * returns:
  *  list of strings describing the setState() calls that will occur for the specified schedule
  */
  list simulateSchedules(datetime begin, datetime end);


 /**
  * Scheduler.Types
  *   - wifi { "type": "wifi", "path": "WIFI", "states": [ "Enabled", "Disabled" ]}
  *   - tod  { "type": "tod",  "path": "TOD",  "states": [ "Enabled", "Disabled" ]}
  */
  object Types [] {
    string Type;
    string Path;
    string States;

   /**
    * Scheduler.Schedules
    *  - 1 { "Type": "wifi", "ID": "wl0", "Enable": true, "Base": "Weekly", "Default": "Enabled", "Override": "", "CurrentState": "Enabled" }
    *  - ...
    */
    object Schedules [] {
      string ID;
      bool   Enable;
      string Base;
      string Default;
      string Override;
      string CurrentState;
      datetime NextStateChange;
    }

  }

}

















