var AllTranslations = {};

AllTranslations['en'] =
{
		"general":
	{
		"label":
		{
			"password":"password",
			"login":"login",
			"internet":"Internet",
			"phone":"phone",
			"tv":"TV",
			"info":"info",
			"wifienable":"on",
			"wifidisable":"off",
			"available":"available",
			"unavailable":"unavailable",
			"nonsubscribe":"unknown status",
			"unmanaged":"unknown",
			"help":"help",
			"news":"information",
			"destroy":"delete",
			"enable":"activate",
			"disable":"deactivate",
			"enabled":"activated",
			"disabled":"deactivated",
			"inprogress":"in progress",
			"nodevices":"no device connected",
			"logout":"logout",
			"forgottenpassword":"Password forgotten",
			"forgottenpasswordpopup": {
				"title":"Reset the password",
				"message":"To confirm the reset of the password, type the 4 digits PIN code currently displayed on the screen of your Livebox.",
				"errormessage":"The PIN code is wrong. Check the code displayed on your Livebox screen.<br>Notice that the code will change after 3 errors.",
				"cancelbutton":"cancel",
				"validatebutton":"reset",
				"doneTitle":"Password reset",
				"doneMessage":"The password has been reset: it is now the 8 first characters of the security key printed on the Livebox sticker.",
				"doneCloseButton":"close",
			},
			"usbphone":"livephone",
			"wifi":"WiFi",
			"yes":"yes",
			"no":"no",
			"port":"port",
			"ip":"ip address",
			"url":"url",
			"filename":"file name",
			"legalinfo":"lawful information",
			"days":
			{
				"day":"day",
				"monday":"Monday",
				"tuesday":"Tuesday",
				"wednesday":"Wednesday",
				"thursday":"Thursday",
				"friday":"Friday",
				"saturday":"Saturday",
				"sunday":"Sunday"
			},
			"months":
			{
				"january":"January",
				"february":"February",
				"march":"March",
				"april":"April",
				"may":"May",
				"june":"June",
				"july":"July",
				"august":"August",
				"september":"September",
				"october":"October",
				"november":"November",
				"december":"December"
			},
			"vmenu":
			{
				"home":
				{
					"title":"my network"
				},
				"config":
				{
					"title":"my WiFi",
					"wifi":"WiFi settings",
					"wificom":"Orange WiFi",
					"advancedwifi":"advanced WiFi",
					"wireless":"WiFi network",
					"devices":"my devices"
				},
				"connecteddevices":
				{
					"title":"connected devices"
				},
				"notconnecteddevices":
				{
					"title":"disconnected devices"
				},
				"freeapplications":
				{
					"title":"free applications"
				},
				"datarate":
				{
					"title":"my data rate"
				},
				"files":
				{
					"title":"my files"
				},
				"support":
				{
					"title":"support",
					"assistancelivebox":"my Livebox",
					"backup":"backup configuration",
					"livebox":"Livebox",
					"hotline":"advanced support &<br/> customer support",
					"reset":"factory reset",
					"restart":"restart",
					"restore":"restore configuration",
					"systeminformation":"information system",
					"servicesaccounts":"services accounts management",
					"topology":"home network topology",
					"mapperresult":"result"
				},
				"advconfig":
				{
					"title":"advanced settings",
					"firewall":"firewall configuration",
					"ipv6":"Internet IPv6",
					"network":"network configuration",
					"routing":"routing configuration",
					"phonelineconfig":"phone line configuration"
				},
				"ipphone":
				{
					"title":"my telephone",
					"title#lb28":"my telephone"
				},
				"phonebook":
				{
					"title":"phone book"
				},
				"testphones":
				{
					"title":"test phones"
				},
				"pairphones":
				{
					"title":"pair phones"
				},
				"phonessettings":
				{
					"title":"phones system settings"
				}
			},
			"phonenumber":
			{
				"prefix":"No."
			},
			"ipaddress":"IP address"
		},
		"link":
		{
			"definitions":"&gt; définitions",
			"legalinfo":"legal information"
		},
		"btn":
		{
			"authenticate":"login",
			"backup":"save",
			"restore":"restore",
			"browse":"browse",
			"reset":"factory reset",
			"files":"access to my files",
			"eject":"eject",
			"about":"About",
			"refresh":"refresh",
			"enable":"activate",
			"disable":"deactivate",
			"cancel":"cancel",
			"save":"save",
			"restart":"reboot",
			"relaunch":"relaunch",
			"startagain":"start again",
			"test":"test",
			"findnewestversion":"find a new version",
			"back":"back",
			"customize":"customize",
			"stop":"stop",
			"start":"start",
			"interfaceaccess":
			{
				"fr":"go to orange.fr",
				"pl":"go to configuration pages",
				"mini_fr":"go to orange.fr"
			},
			"interfaceaccessurl":
			{
				"fr":"http://www.orange.fr",
				"pl":"http://livebox",
				"mini_fr":"http://www.orange.fr"
			},
			"extend":"extend",
			"update":"update",
			"reinit":"restart",
			"scan":"scan",
			"add":"add",
			"ok":"ok",
			"yes":"yes",
			"no":"no",
			"valid":"validate",
			"generate":"generate",
			"push":"connect",
			"modify":"modify",
			"search":"search",
			"edit":"edit",
			"continue":"continue",
			"initagain":"restart",
			"launch":"launch",
			"send":"send",
			"retry":"retry",
			"seeagain":"relaunch",
			"reconnect":"reconnect"
		},
		"country":
		{
			"france":"France",
			"belgium":"Belgium",
			"spain":"Spain",
			"unitedkingdom":"England",
			"netherland":"Netherlands",
			"poland":"Poland"
		},
		"device":
		{
			"Device1":"device 1",
			"Device2":"device 2",
			"Device3":"device 3",
			"Device4":"device 4",
			"Device5":"device 5",
			"Device6":"device 6",
			"Device7":"device 7",
			"Device8":"device 8",
			"Device9":"device 9"
		},
		"ipphone":
		{
			"numbertype":
			{
				"home":"Home",
				"mobile":"Mobile",
				"office":"Office"
			}
		}
	},
	"setup":
	{
		"accesstype":
		{
			"label":
			{
				"title":"Internet connection",
				"subtitle":"you are connected for the first time to your Livebox or you just made a factory reset ?<br/>this page allow you to configure your Livebox and to access to Internet",
                "subtitleprefix":"Your Livebox is connected to Orange network and your services are ready to be activated.<br/><br/>",
                "choice2":"<u>To activate your services</u> <br/><b>•Fill hereunder the login and password of your Internet connection, and click on the Register button.</b><br>•Your connection’s login and password are available in the welcome letter received when you have subscribed to your Orange Internet offer.",
                "subtitle_withoutpnp":"Your Livebox is connected to Orange network, you can now activate your services by entering your login and password of your Internet connection.",
				"restore":
				{
					"linklabel":"If you have a backup file for the Livebox, you can",
					"link":"restore the settings"
				},
				"adslparams":"ADSL parameters:",
				"vpvcsection":"VP / VC parameters",
				"wanparams":"VLAN parameters:",
				"vlansection":"VLAN parameters:",
				"offer":"choose the offer you subscribed",
				"howtoinstall":"enter your login and your connection password",
				"section":
				{
					"country":"choose your country:"
				},
				"country":"country",
				"countries":
				{
					"option":
					{
						"select":"Select",
						"luxembourg":"Luxembourg",
						"ivorycoast":"Ivory Coast",
						"republicofmauritius":"Republic of Mauritius",
						"senegal":"Senegal",
						"other":"Other"
					}
				},
				"mode":"select your connection mode :",
				"pppmode":
				{
					"option":
					{
						"pppoe":"PPPoE",
						"pppoevcmux":"PPPoE with encapsulation (VCMUX)",
						"pppoellc":"PPPoE with encapsulation (LLC)",
						"pppoa":"PPPoA",
						"pppoavcmux":"PPPoA with encapsulation (VCMUX)",
						"pppoallc":"PPPoA with encapsulation (LLC)",
						"pppoewe":"PPPoE with encapsulation"
					}
				},
				"login":"connection login",
				"password":"connection password",
				"warning":
				{
					"fr":"your login and password are available in the welcome letter",
					"pl":"your login and password were generated in registration process",
					"mini_fr":"your login and password are available in the welcome letter"
				},
				"broswerswarning":"The current Livebox user interface supports the following browsers; Please be sure that you have one of them :- Internet Explorer : Version IE8 and upper - Mozilla Firefox : Version 3.5 and upper - Chrome : Version 6.0 and upper - Safari : Version 4.0 and upper - Opera : Version 10.00 and upper"
			},
			"mode":
			{
				"radiobutton":
				{
					"ppp":"PPP",
					"dhcp":"DHCP"
				}
			},
			"offer":
			{
				"radiobutton":
				{
					"adsl":"ADSL",
					"fiber":"The fiber",
					"dhcp":"DHCP",
					"ppp":"PPP"
				}
			},
			"error":
			{
				"empty":
				{
					"label":"login and/or password not correct",
					"description":"verify that your login and password are correct"
				},
				"running":
				{
					"label":"authentication",
					"description":"authentication in progress"
				},
				"adsl_link":
				{
					"label":"ADSL error",
					"description":"ADSL not synchronized"
				},
				"ftth_link":
				{
					"label":"Fiber error",
					"description":"Fibre connection not available"
				},
				"ppp_server":
				{
					"label":"PPP error",
					"description":"fail to connect to PPP server"
				},
				"authentication":
				{
					"label":"login and/or password not correct",
					"description":"verify them and enter them again"
				},
				"ppp_timeout":
				{
					"label":"PPP error",
					"description":"no response from PPP server"
				},
				"profile":
				{
					"label":"No contry selected",
					"description":"Please choose your country in the select box"
				}
			}
		},
		"unlockaccess":
		{
			"label":
			{
				"title":"Livebox unlock",
				"subtitle":"Please set the given key to unlock the Livebox",
				"key":"Key"
			},
			"empty":
			{
				"label":"",
				"description":""
			},
			"error":
			{
				"invalid":
				{
					"label":"Error",
					"description":"The key is invalid"
				}
			}
		},
		"accessconfirmation":
		{
			"label":
			{
				"title":"Your Livebox is connected to Internet",
				"subtitle":"Orange proposes you a selection of free applications in order to simplify et to secure your web browsing.",
				"webgui":"You can access to the Livebox settings interface by entering «http://livebox» in the navigation bar of your browser",
				"welcome":"Welcome",
				"install_ok":"You have completed the installation of your Livebox. <br/> We propose now to discover a selection of free software to simplify your Internet use and to secure browsing.",
				"badname1":"You are not",
				"badname2":"Click here",
				"inprogress":"Connection in progress.<br/><br/>Please wait…"
			}
		},
		"configerror":
		{
			"label":
			{
				"title":"Access detection impossible",
				"subtitle":"Check your cable connexion :<br/><br/>- In case you have an ADSL access.<br/>One end of ADSL cable should be connected to xDSL plug of your Livebox, the other end of the cable shoud be connected to the xDSL filter. The filter should be correctly connected to the telephone plug.<br/><br/>- In case you have a fiber access.<br/>One end of Ethernet cable should be connected to the white color plug of your Livebox, the other end of the cable should be connected to the Fibre Optique box. The Fibre Optique box should be turn on.<br/><br/><br/>You did correctly the connexions but you have still the error message?<br/>It is possible that your ADSL or Fibre line is not yet activated correctly, please try again the installation later.",
				"subtitle#lb28":"Check your cable connexion :<br/><br/>- In case you have an ADSL access.<br/>One end of ADSL cable should be connected to xDSL plug of your Livebox, the other end of the cable shoud be connected to the xDSL filter. The filter should be correctly connected to the telephone plug.<br/><br/>- In case you have a fiber access.<br/>One end of Ethernet cable should be connected to the red color plug of your Livebox, the other end of the cable should be connected to the Fibre Optique box. The Fibre Optique box should be turn on.<br/><br/><br/>You did correctly the connexions but you have still the error message?<br/>It is possible that your ADSL or Fibre line is not yet activated correctly, please try again the installation later."
			}
		}
	},
	"home":
	{ 
		"label":
		{
			"help":"To remove your USB device safely, click on the eject button.The current Livebox user interface supports the following browsers; Please be sure that you have one of them :- Internet Explorer : Version IE8 and upper - Mozilla Firefox : Version 3.5 and upper - Chrome : Version 6.0 and upper - Safari : Version 4.0 and upper - Opera : Version 10.00 and upper",
                         
			"title":"devices connected to the Livebox",
			"subtitle":"You will find below the devices which are connected to your Livebox. By clicking on the device icons, you can access to advanced configuration menu.",
			"refresh":"to refresh the home page<br/>click on refresh button",
			"services":"services",
			"wired":"wired network",
			"wireless":"WiFi network",
			"usb":"USB",
			"dect":"High Definition handset",
			"stb":"Set Top Box",
			"stbshort":"Set Top...",
			"officepc":"Office PC",
			"officepcshort":"Office...",
			"nas":"NAS Server",
			"harddrive":"Hard Drive",
			"harddriveshort":"Hard Drive",
			"printer":"Printer",
			"printershort":"Printer",
			"usbdongle":"Smart home dongle",
			"usbdongleshort":"Dongle…",
			"game":"Game console",
			"gameshort":"Game... ",
			"tablet":"Tablet",
			"computer":"Desktop",
			"laptop":"Laptop",
			"laptopshort":"Laptop",
			"notebook":"Notebook",
			"notebookshort":"Notebook",
			"massstorage":"Storage",
			"homelibrary":"Home Library",
			"homelibraryshort":"Home Library",
			"smartphone":"Smartphone",
			"tv":"TV",
			"pc":"PC",
			"liveradio":"Liveradio",
			"liveradioshort":"Liveradio",
			"dectphone":"Handset",
			"liveplugwifi":"Liveplug Wi-Fi",
			"liveplugwifishort":"Liveplug…",
			"squeezebox":"Squeezebox",
			"squeezeboxshort":"Squeezebox",
			"sensorhome":"Home sensor",
			"sensorhomeshort":"Sensor",
			"model":"Model",
			"lastupdate":"Last update",
			"devices":
			{
				"massstorage":
				{
					"title":"USB mass storage",
					"ejected":"You can unplug your USB mass storage",
					"busy":"Your USB mass storage is in use. please try again later",
					"unsupported":"Your USB mass storage is not recognized by the Livebox",
					"invalid":"The format of your USB mass storage is not supported. the Livebox support FAT, FAT32, NTFS, Ext2, Ext3, HFS and HFS+"
				}
			}
		},
		"passwordhelp":
		{
			"label1":"The admin password of the Livebox is now initialized with the first 8 digits of the default <a href='blank.html' onclick='showPopup(); return false;'>security key</a>, if you have not already customized it.",
			"label2":"Warning! The admin password of your Livebox is now composed with the first 8 digits of the default <a href='blank.html' onclick='pwdpopup(); return false;'>WiFi security key</a>."
		},
		"passwordpopup":
		{

"label":"Your default password is composed with the first 8 digits of the WiFi security key indicated on the back of your Livebox.<br/><br/><p style=\"text-align: center;\"><img src=\"images/fr/common/security-key-lb3.png\" /></p>"
		},
		"didyouknow":
		{
			"label":"did you know ?",
			"description":
			{
				"first":"You can access to your content on a USB key or external hard drive connected to the Livebox and share from any computers. We recommand to use the USB port on the left side of the Livebox.",
				"first#lb28":"You can access to your content on a USB key or external hard drive connected to the Livebox and share from any computers. We recommand to use the USB port on the left side of the Livebox.",
				"second":"You can share a USB printer connected to the Livebox on different computers. You can print a document or a photo from any computers.",
				"second#lb28":"You can share a USB printer connected to the Livebox on different computers. You can print a document or a photo from any computers.",
				"third":"You can connect many computers or games consoles by wire on your Livebox (ethernet ports on the back face of the Livebox).",
				"third#lb28":"You can connect many computers or games consoles by wire on your Livebox (ethernet ports on the back face of the Livebox).",
				"fourth":"You can schedule Internet access by day and hour for any computer connected to the Livebox. You can prevent your children to access Internet during some hours.",
				"fourth#lb28":"You can schedule Internet access by day and hour for any computer connected to the Livebox. You can prevent your children to access Internet during some hours.",
				"fiveth":"If you switch off your Livebox by using the on/off button on the left side of the Livebox, you won't have access to any services.",
				"fiveth#lb28":"You can schedule WiFi activation by day and hour from Settings page.",
				"sixth":"You can schedule WiFi activation by day and hour from Settings page.",
				"seventh":"For sharing multimedia content (DLNA mode) from USB mass storage device, your Livebox supports up to 5000 files.",
				"seventh#lb28":"Your Livebox enables you to share your multimedia content saved in your mass storage device on other devices (DNLA mode).",
				"eighth":"Do you know the application <b>my&nbsp;Livebox</b>?<br/><br/>This application allows you to configure your Livebox , as well as diagnose and troubleshoot on your own your Orange services.<br/><br/>You can download <b>my&nbsp;Livebox</b>:<br/>- on <a href=\"http://r.orange.fr/r/Oodc_malivebox_ios\">the App Store</a>, for iPhone, iPod, and iPad<br/>- on <a href=\"http://r.orange.fr/r/Oodc_malivebox_android\">Google Play</a>, for Android smartphones and tablets<br/>- on <a href=\"http://r.orange.fr/r/Oodc_ma_livebox?ref=IHM_Livebox\">the Orange website</a>, for Windows PC<br/><br/>You can install the application <b>my&nbsp;Livebox</b> for smartphones and tablets by directly flashing the code below:<br/><p style=\"text-align: center;\"><img src=\"images/fr/support/malivebox-flashcode.png\" /></p>No reader to read this code?<br/>Type tc3.fr on your mobile!<br/><br/>(*) : list of compatible devices.<br/>- For smartphones:<br/>• iPhone: iOS 5.0 or later<br/> • Android: OS 2.2 or later<br/>- For tablets:<br/>• iPad: iOS 5.0 or later<br/>• Android: OS 2.2 ou higher<br/>- For PC:<br/>• Windows: XP SP3, Vista, 7 and 8<br/>"
			}
		},
		"usb":
		{
			"access":
			{
				"comment":"Fill the path below in your browser to access your files."
			}
		},
		"devicescustomize":
		{
			"label":
			{
				"help":"You can rename your devices in order to identify them easier on your network. ",
				"title":"customize your device",
				"subtitle":"You can customize your device, by modifying it's name and type.",
				"type":
				{
					"title":"define the type of device",
					"computer":"Desktop",
					"laptop":"Laptop",
					"notebook":"Notebook",
					"game":"Game console",
					"mobile":"Smartphone",
					"tv":"TV",
					"liveradio":"LiveRadio",
					"stb":"Set top box",
					"massstorage":"Storage device",
					"printer":"Printer",
					"tablet":"Tablet",
					"dectphone":"Handset",
					"homelibrary":"Home Library",
					"liveplugwifi":"liveplugwifi",
					"squeezebox":"squeezebox",
					"sensorhome":"sensorhome",
					"dongle":"Smart home dongle",
					"ipcamera":"IP camera",
					"ampliAV":"Ampli A/V",
					"femtocell":"Femtocell",
					"homelive":"Homelive",
					"homepoint":"Homepoint",
					"leblocorange":"Le Bloc",
					"TVdongle":"TV dongle"
				},
				"name":
				{
					"title":"name your device",
					"info":"the name of your device is limited to 64 characters",
					"error":
					{
						"length":"limited to 64 characters.",
						"empty":"empty name is forbidden.",
						"notavailable":"this name already exists, please enter a different one."
					}
				}
			},
			"catiq":
			{
				"label":
				{
					"name":
					{
						"info":"the name of your device is limited to 16 characters.",
						"error":
						{
							"length":"limited to 16 characters."
						}
					}
				}
			}
		},
		"authentication":
		{
			"label":
			{
				"title":"Please enter your login and password to continue",
				"subtitle":"Enter your Livebox administration password",
				"login":"login",
				"password":"password"
			},
			"info":
			{
				"comment":"by default your login is \"admin\" and your password is \"admin\""
			},
			"error":
			{
				"empty":"empty login or password",
				"invalid":"invalid login or password"
			}
		}
	},
	"notconnecteddevices":
	{
		"label":
		{
			"title":"devices disconnected from the Livebox",
			"subtitle":"You find below the devices which has been connected at least once on your Livebox, but <u>which are not connected for the moment</u>.",
			"help":"On this page, you can find the devices which were connected at least once on the Livebox, within the last 3 months, but which are not connected currently. The devices which were not connected on the Livebox within the last 3 months are removed automatically from the table. ",
			"deletedevice":"delete device",
			"table":
			{
				"title":"disconnected devices",
				"header":
				{
					"wired":"Cable connection",
					"wireless":"WiFi connection",
					"dect":"High Definition phones",
					"usb":"USB connection"
				}
			}
		}
	},
	"config":
	{
		"wifi":
		{
			"general":
			{
				"label":
				{
					"title":"WiFi",
					"subtitle":"configure WiFi",
					"ssid":"WiFi network name (SSID)",
					"securitykeydisplay":"display the security key on the Livebox screen",
					"status":"WiFi status"
				},
				"link":
				{
					"ssid":"modify",
					"wifischeduling":"define WiFi scheduling"
				},
				"text":
				{
					"help":"<h6>WiFi on/off</h6>if there is no WiFi device in your network, it is recommanded to switch off the WiFi</br></br><h6>WiFi network name (SSID)</h6>you can modify the name of the WiFi to customize it.</br></br>define WiFi scheduling</h6>by default your WiFi is always on. You can schedule days and hours where WiFi is activated by clicking on \"Define WiFi scheduling\""
				},
				"network":
				{
					"title":"network",
					"wifi24ghz":"WiFi 2.4 GHz",
					"wifi5ghz":"WiFi 5 GHz",
					"inwifi24ghz":"in WiFi 2.4 GHz",
					"inwifi5ghz":"in WiFi 5 GHz",
					"bandsactivated":"WiFi bands activated",
					"only24activated":"WiFi 2.4 GHz",
					"bothbandsactivated":"WiFi 2.4 GHz and WiFi 5 GHz",
					"modify":"modify WiFi configuration"
				},
				"definition":
				{
					"ssid":
					{
						"title":"SSID",
						"description":"SSID is the Livebox WiFi network name"
					},
					"canal":
					{
						"title":"channel",
						"description":""
					},
					"security":
					{
						"title":"security key",
						"description":"security key allows to have a securised WiFi access"
					}
				},
				"info":
				{
					"wificom":"If you deactivate WiFi on the Livebox, the mode Orange WiFi will not be available. Would you like to continue ?"
				}
			},
			"ssid":
			{
				"label":
				{
					"title":"WiFi name",
					"subtitle":"you can modify the name (SSID) of the WiFi network of your Livebox",
					"description":"enter the new WiFi name in the field below:",
					"error":
					{
						"invalid":"SSID not valid",
						"length":"SSID to long",
						"orange":"SSID 'orange' is forbiden",
						"orangeprefix":"SSID '",
						"orangesuffix":"' is forbiden."
					},
					"warning":"Warning : All of your devices connected via WiFi to your Livebox will lost their Internet connection. "
				},
				"info":
				{
					"comment":"the WiFi name cannot have more than 32 characters."
				},
				"help":
				{
					"label":
					{
						"wificom":"Please not use the word \"orange\", because it is already booked by your operator for Orange WiFi service."
					}
				}
			},
			"scheduling":
			{
				"label":
				{
					"title":"WiFi planner",
					"subtitle":"you can activate WiFi by choosing day and time slots",
					"enable":"activate WiFi permanently",
					"greenbox":"WiFi is on for time slots displayed in green",
					"redbox":"WiFi is off for time slots displayed in red",
					"alwaysenabled":"permanent WiFi access"
				},
				"text":
				{
					"help":"<h6>WiFi scheduling</h6>you can define WiFi activation/ deactivation time slots in the table below."
				}
			},
			"orange":
			{
				"label":
				{
					"title":"Orange WiFi",
					"subtitle":"",
					"ssid":"Names of Orange WiFi networks (SSID)",
					"status":"Orange WiFi status",
					"wifienable":"Orange WiFi activated",
					"wifidisable":"Orange WiFi deactivated",
                                        "noteligible":"Not eligible",
                                        "wifierror":"Error",
                                        "wifioff":"Wi-Fi Off",
					"manage":"Configure Orange WiFi"
				},
				"info":
				{
					"comment":"to activate or deactivate \"Orange WiFi\" service"
				},
				"text":
				{
					"help":"<h5>Why activate Orange wifi?</h5> « Orange wifi » offers the possibility to access free Internet on the Orange wifi network outside home.Your Livebox broadcasts a new network named « orange » and joins the Orange hotspots community. Your security and usage experience are identical. <br/><br/><h5>How to activate or deactivate Orange wifi? </h5> Activation or deactivation of « Orange wifi » is authorized only from your Internet connection at home. Click on the link above to be connected on Orange portal to manage the function status (Orange.fr > Espace Client > Mon compte Internet > Mes Services).To take into account the modification, you need to switch off and switch on your Livebox. Activation will be effective after few hours (up to 24 hours): you will be therefore able to connect to Orange wifi network outside home.<br/><h5> How to connect to Orange wifi</h5><br/>To connect to Orange wifi from any laptop, mobile or any other WiFi compliant device:1/ choose WiFi network named <span class='basecolor'><b>orange</b></span><br/>2/ use your Orange email and associated password (eg: <span class='basecolor'>name@orange.fr</span>) in the Orange wifi connection page. They are available on your Internet subscription welcome letter"
				},
				"definition":
				{
					"example":
					{
						"title":"",
						"description":""
					}
				}
			},
			"definitions":
			{
				"label":
				{
					"title":"definition",
					"ssid":"SSID",
					"channel":
					{
						"title":"channel",
						"description":""
					},
					"securitykey":"",
					"securitymode":"",
					"macaddress":""
				},
				"description":
				{
					"ssid":""
				}
			}
		},
		"access":
		{
			"scheduling":
			{
				"label":
				{
					"menu":"Internet access restriction",
					"title":"Internet access scheduling",
					"subtitle":"you can restrain Internet access of this device by days and time slots of your choice",
					"selectmode":"select Internet access control mode:",
					"enable":"allow Internet permanently",
					"disable":"block Internet permanently",
					"schedule":"schedule Internet access",
					"alwaysenabled":"allowed permanently",
					"alwaysdisabled":"blocked permanently",
					"greenbox":"Internet access is allowed during time slots in green",
					"redbox":"Internet access is forbidden during time slots in red"
				},
				"text":
				{
					"help":"By default all devices can access to Internet all the time but you can define days and time slots where your devices can access or not by selecting them in the table below."
				}
			}
		},
		"printer":
		{
			"label":
			{
				"title":"printer sharing",
				"subtitle":"Livebox can share a USB printer between differents computers connected"
			},
			"link":
			{
				"more":"&gt; more information",
				"moreurl":
				{
					"fr":"http://assistance.orange.fr/partager-imprimante-usb-avec-livebox-2-47.php",
					"pl":"http://www.orange.pl/kid,4002313550,id,4002317319,title,Livebox-20-konfiguracja-drukarki,article.html",
					"pl#lb28":"http://www.orange.pl/kid,4002313550,id,4002317319,title,Livebox-20-konfiguracja-drukarki,article.html",
					"mini_fr":"http://assistance.orange.fr/partager-imprimante-usb-avec-livebox-2-47.php"
				}
			},
			"info":
			{
				"comment":"<h5>actions to be done:</h5><br/>1- install the USB printer drivers on each computer with CD.<br/><br/>2- connect the printer to your Livebox<br/><br/>3- configure your printer on each computer"
			},
			"text":
			{
				"help":"<h6>USB printer sharing</h6><br/>- it is possible to print a document from any computer<br/>- to follow printing status in progress<br/>- to cancel printing"
			},
			"definition":
			{
				"example":
				{
					"title":"printer",
					"description":"definition"
				}
			}
		}
	},
	"support":
	{
		"ledsstatus":
		{
			"label":
			{
				"title":"leds status",
				"subtitle":"LEDs displayed on this screen correspond to the one visible on the front panel of the Livebox. They provide status on Internet, phone and WiFi services.",
				"subtitle#lb28":"LEDs displayed on this screen correspond to the one visible on the front panel of the Livebox. They provide status on Internet, phone and WiFi services.",
				"led":"led",
				"icon":"led icon",
				"state":"led status",
				"description":"meaning",
				"adsl":"information",
				"phone":"phone",
				"wired":"local network",
				"wireless":"WiFi"
			},
			"text":
			{
				"help":"This page presents the leds status, on the front side of your Livebox. These leds indicate you the status of the following services : Internet, telephone and Wifi.",
				"help#lb28":"This page presents the leds status, on the front side of your Livebox. The leds and screen indicate you the status of the following services : Internet and Wifi.<br/><br/>The \"i\" button indicates Livebox and services status. By pushing the button, the related information will be displayed on the Livebox screen."
			},
			"comment":
			{
				"gray":
				{
					"phone":"you do not have Internet phone service",
					"network":"no data traffic between the Livebox and connected devices",
					"wireless":"WiFi is off"
				},
				"green_solid":
				{
					"adsl":"Internet connection is on",
					"phone":"Internet phone is on and available",
					"wireless":"WiFi is on"
				},
				"green_slow":
				{
					"phone":"phone call in progress",
					"network":"exchange of  data traffic between the Livebox and connected devices",
					"wireless":"easy pairing is on going with a WiFi device"
				},
				"green-fast":
				{
					"phone":"phone call in progress"
				},
				"green_fast":
				{
					"network":"exchange of  data traffic between the Livebox and connected devices",
					"wireless":"easy pairing is on going with a WiFi device"
				},
				"red_fast":
				{
					"adsl":"Livebox  was not able to connect to Internet (not synchronized)"
				},
				"orange_slow":
				{
					"adsl":"Internet connection in progress"
				}
			},
			"definition":
			{
				"example":
				{
					"title":"",
					"description":""
				}
			}
		},
		"phoneringtest":
		{
			"label":
			{
				"help":"",
				"title":"test the Internet phone",
				"service":"Internet phone status",
				"number":"phone number:",
				"nonumber":"no phone number",
				"unknownnumber":"phone number unavailable"
			},
			"info":
			{
				"comment":"to verify phone connected to your Livebox functionning click on \"test\" button."
			}
		},
		"phoneringtestrunning":
		{
			"label":
			{
				"help":"",
				"title":"Internet phone test"
			},
			"info":
			{
				"comment":"the test of the Internet phone connected to your Livebox is in progress.<br/><br/>if the  phone rings, it is correctly connected and available. Clic on \"back\" button.<br/><br/>if the phone does not ring, it might be not correctly plugged. Please verify and click \"start again\"."
			}
		},
		"restart":
		{
			"label":
			{
				"help":"You can reboot your Livebox by using the commands on the page.",
				"title":"reboot the Livebox",
				"subtitle":"you can reboot the Livebox by clicking the button \"reboot\"",
				"warning":"warning !",
				"inprogress":"restart in progress…"
			},
			"info":
			{
				"comment":"during the Livebox boot, all services (Internet, phone and TV) will be unavailable.",
				"question":"Restart?",
				"settopbox":"After reboot your Livebox, you should also restart your STB in order to have a better result."
			}
		},
		"reset":
		{
			"label":
			{
				"help":"",
				"title":"reset the Livebox",
				"subtitle":"you can reset the Livebox by clicking on \"factory reset\". This service erases your personal parameters (identifiers, NAT rules, dynDNS…)",
				"warning":"warning !",
				"inprogress":"reset in progress…"
			},
			"info":
			{
				"comment":"Your personal parameters will be erased. Save them by <a href='/supportBackup.html' >clicking here</a>",
				"question":"Reset?"
			}
		},
		"systeminformation":
		{
			"general":
			{
				"label":
				{
					"help":"",
					"title":"general",
					"status":
					{
						"connected":"connected",
						"synchronized":"synchronized",
						"disconnected":"disconnected",
						"unconfigured":"not configured",
						"authenticating":"authenticating",
						"connecting":"connecting",
						"up":"on",
						"down":"off",
						"unavailable":"unavailable",
						"initializing":"initializing",
						"listening":"listening",
						"durationexample":"02 d 08 h 33 m 11 s"
					},
					"nbmanufacturer":"1.1",
					"nbmodel":"1.2",
					"nbcountry":"1.3",
					"nbserialnumber":"1.4",
					"nbmacaddress":"1.5",
					"nbfirmwareversion":"1.6",
					"nbfirmwareversionft":"1.7",
					"nbdeviceuptime":"1.8",
					"nbsynchrostatus":"1.9",
					"nbipv4constatus":"1.10",
					"nbipv6constatus":"1.11",
					"nbadsllinkstatus":"1.12",
					"nbaccountstatus":"1.13",
					"nbpppusername":"1.14",
					"manufacturer":"manufacturer",
					"model":"model name",
					"country":"country",
					"serialnumber":"serial number",
					"macaddress":"MAC address",
					"firmwareversion":"firmware version",
					"softathome":"SoftAtHome",
					"firmwareversionft":"orange firmware version",
					"deviceuptime":"uptime",
					"synchrostatus":"synchronization status",
					"ipv4constatus":"IPv4 connection status",
					"ipv6constatus":"IPv6 connection status",
					"adsllinkstatus":"DSL status",
					"accountstatus":"account status",
					"pppusername":"PPP login"
				}
			},
			"adsl":
			{
				"label":
				{
					"title":"DSL",
					"dslline":"DSL line status",
					"technical":"Rate and noise margin",
					"quality":"Line quality (errors)",
					"status":
					{
						"up":"on",
						"down":"off",
						"initializing":"Initializing",
						"unavailable":"Unavailable",
						"dateexample":"27th of November 2012, 03 h 23 m 12 s",
						"durationexample":"00 d 11 h 57 m 16 s"
					},
					"nbadsllinkstatus":"2.1",
					"nbsynchromode":"2.2",
					"nbadslsynchrolast":"2.3",
					"nbadslsynchroduration":"2.4",
					"adsllinkstatus":"DSL link status",
					"synchromode":"DSL synchronization mode",
					"adslsynchrolast":"DSL last synchronization",
					"adslsynchroduration":"DSL synchronization uptime",
					"nbatmrateup":"2.5",
					"nbatmratedown":"2.6",
					"nbnoisemargindown":"2.7",
					"atmrateup":"DSL synchronization up",
					"atmratedown":"DSL synchronization down",
					"noisemargindown":"noise margin down",
					"nbeslerrors":"2.8",
					"nbseslerrors":"2.9",
					"eslerrors":"Errored seconds (ES) of downstream (since last synchronization)",
					"seslerrors":"Severely errored seconds (SES) of downstream (since last synchronization)",
					"help":"Downstream (or upstream) DSL synchronization rate :<br/>This is the capacity (including an encapsulation overhead from the IP layer) of the link established between the last Orange Network node and your Livebox (or the other way round for the upstream link). The synchronization rate both depends on the copper line length and the noise conditions.<br/><br/>Errored seconds (ES) :<br/>This is the number of seconds in which some transmission errors occurred. Frequent ES may impact Livebox delivered services.<br/><br/>Severely errored seconds (SES) :<br/>Second in which the transmission is strongly disturbed. Even a single SES can occasionally impact the delivered services."
				},
				"3g":
				{
					"label":
					{
						"status":"",
						"linkstatus":"",
						"operator":"",
						"network":"",
						"wanipaddress":"",
						"maxrateup":"",
						"maxratedown":""
					}
				}
			},
			"wifi":
			{
				"label":
				{
					"help":"System information for WiFI network",
					"title":"wifi",
					"status":
					{
						"up":"on",
						"down":"off",
						"enabled":"on",
						"disabled":"off"
					},
					"nbcurstatus":"4.1",
					"nbmacaddress":"4.2",
					"nbssid":"4.3",
					"nbchannel":"4.4",
					"nbstandard":"4.5",
					"nbmaxbitrate":"4.6",
					"nbencryption":"4.7",
					"nbencryptionoptio":"4.8",
					"nbmacaccesslist":"4.9",
					"nbbytessent":"4.10",
					"nbbytesreceived":"4.11",
					"curstatus":"WiFi status",
					"macaddress":"WiFi MAC address",
					"ssid":"SSID",
					"channel":"channel",
					"standard":"standard",
					"maxbitrate":"maximum speed",
					"encryption":"security",
					"encryptionoption":"security option",
					"macaccesslist":"MAC filtering",
					"bytessent":"bytes send",
					"bytesreceived":"bytes receive"
				}
			},
			"lan":
			{
				"label":
				{
					"help":"System information for local network",
					"title":"LAN",
					"yes":"yes",
					"no":"no",
					"auto":"auto",
					"status":
					{
						"enabled":"on",
						"disabled":"off",
						"durationexample":"00 d 11 h 57 m 16 s"
					}
				},
				"status":
				{
					"link":"link",
					"nolink":"no link"
				},
				"mode":
				{
					"InternetTV":"Internet & TV",
					"internet":"Internet",
					"tv":"TV",
					"internetONT":"FTTH",
					"disable":"off"
				},
				"dhcpv4":
				{
					"label":
					{
						"nbstatus":"5.1",
						"nbstartip":"5.2",
						"nbendip":"5.3",
						"nbnetmask":"5.4",
						"nbleasetime":"5.5",
						"nbgateway":"5.6",
						"nbmac":"5.7",
						"status":"DHCPv4 status",
						"startip":"start IPv4 address",
						"endip":"end IPv4 address",
						"netmask":"IPv4 subnet mask",
						"leasetime":"DHCPv4 lease time",
						"gateway":"DHCPv4 gateway",
						"mac":"MAC address"
					}
				},
				"dhcpv6":
				{
					"label":
					{
						"nbstatus":"5.8",
						"nbguaip":"5.9",
						"nbipv6prefix":"5.10",
						"status":"DHCPv6 status",
						"guaip":"GUA IPv6 address",
						"ipv6prefix":"IPv6 prefix"
					}
				},
				"red":
				{
					"label":
					{
						"nbmode":"5.11",
						"nbstatus":"5.12",
						"nbautoconfig":"5.13",
						"nbmacaddress":"5.14",
						"nbmaxbitrate":"5.15",
						"nbduplexmode":"5.16",
						"title":"ethernet port 1",
						//"title#lb28":"ethernet port 1",
						"mode":"mode",
						"status":"status",
						"autoconfig":"auto configuration",
						"macaddress":"MAC address",
						"maxbitrate":"maximum speed",
						"duplexmode":"duplex mode"
					}
				},
				"yellow":
				{
					"label":
					{
						"nbmode":"5.17",
						"nbstatus":"5.18",
						"nbautoconfig":"5.19",
						"nbmacaddress":"5.20",
						"nbmaxbitrate":"5.21",
						"nbduplexmode":"5.22",
						"title":"ethernet port 2",
						//"title#lb28":"ethernet port 2",
						"mode":"mode",
						"status":"status",
						"autoconfig":"auto configuration",
						"macaddress":"MAC address",
						"maxbitrate":"maximum speed",
						"duplexmode":"duplex mode"
					}
				},
				"green":
				{
					"label":
					{
						"nbmode":"5.23",
						"nbstatus":"5.24",
						"nbautoconfig":"5.25",
						"nbmacaddress":"5.26",
						"nbmaxbitrate":"5.27",
						"nbduplexmode":"5.28",
						"title":"ethernet port 3",
						//"title#lb28":"ethernet port 3",
						"mode":"mode",
						"status":"status",
						"autoconfig":"auto configuration",
						"macaddress":"MAC address",
						"maxbitrate":"maximum speed",
						"duplexmode":"duplex mode"
					}
				},
				"white":
				{
					"label":
					{
						"nbmode":"5.29",
						"nbstatus":"5.30",
						"nbautoconfig":"5.31",
						"nbmacaddress":"5.32",
						"nbmaxbitrate":"5.33",
						"nbduplexmode":"5.34",
						"title":"ethernet port 4",
						//"title#lb28":"ethernet port 4",
						"mode":"mode",
						"status":"status",
						"autoconfig":"auto configuration",
						"macaddress":"MAC address",
						"maxbitrate":"maximum speed",
						"duplexmode":"duplex mode"
					}
				},
				"wan":
				{
					"label":
					{
						"nbmode":"5.35",
						"nbstatus":"5.36",
						"nbautoconfig":"5.37",
						"nbmacaddress":"5.38",
						"nbmaxbitrate":"5.39",
						"nbduplexmode":"5.40",
						"title":"ethernet port WAN",
						"mode":"mode",
						"status":"status",
						"autoconfig":"auto configuration",
						"macaddress":"MAC address",
						"maxbitrate":"maximum speed",
						"duplexmode":"duplex mode"
					}
				}
			},
			"voip":
			{
				"label":
				{
					"help":"System information for Internet phone",
					"title":"VoIP",
					"available":"available",
					"unavailable":"unavailable",
					"status":
					{
						"up":"on",
						"down":"off"
					},
					"nbcurstatus":"6.1",
					"nbphonenumber":"6.2",
					"nbvpvc":"6.3",
					"nbprotocol":"6.4",
					"curstatus":"status",
					"phonenumber":"VoIP phone number",
					"vpvc":"ATM VP/VC or VLAN",
					"protocol":"protocol"
				}
			},
			"usb":
			{
				"label":
				{
					"help":"System information for USB port",
					"title":"USB"
				},
				"first":
				{
					"label":
					{
						"nblinkstatus":"7.1",
						"nbfunc":"7.2",
						"nbvendorId":"7.3",
						"nbmanufacturer":"7.4",
						"nbproductId":"7.5",
						"nbproduct":"7.6",
						"nbserialNumber":"7.7",
						"title":"USB 1",
						"linkstatus":"link status",
						"func":"function",
						"vendorId":"vendor",
						"manufacturer":"manufacturer",
						"productId":"version",
						"product":"product",
						"serialNumber":"serial number"
					}
				},
				"second":
				{
					"label":
					{
						"nblinkstatus":"7.8",
						"nbfunc":"7.9",
						"nbvendorId":"7.10",
						"nbmanufacturer":"7.11",
						"nbproductId":"7.12",
						"nbproduct":"7.13",
						"nbserialNumber":"7.14",
						"title":"USB 2",
						"linkstatus":"link status",
						"func":"function",
						"vendorId":"vendor",
						"manufacturer":"manufacturer",
						"productId":"version",
						"product":"product",
						"serialNumber":"serial number"
					}
				},
				"third":
				{
					"label":
					{
						"nblinkstatus":"7.15",
						"nbfunc":"7.16",
						"nbvendorId":"7.17",
						"nbmanufacturer":"7.18",
						"nbproductId":"7.19",
						"nbproduct":"7.20",
						"nbserialNumber":"7.21",
						"title":"USB 3",
						"linkstatus":"link status",
						"func":"function",
						"vendorId":"vendor",
						"manufacturer":"manufacturer",
						"productId":"version",
						"product":"product",
						"serialNumber":"serial number"
					}
				},
				"func":
				{
					"massstorage":"mass storage",
					"printer":"printer",
					"phone":"livephone",
					"monitoring":"monitoring",
					"undefined":"undefined"
				}
			},
			"tv":
			{
				"label":
				{
					"help":"System information for TV connection",
					"title":"TV",
					"available":"available",
					"unavailable":"unavailable",
					"status":
					{
						"up":"on",
						"down":"off"
					}
				},
				"channel1":
				{
					"label":
					{
						"nbstatus":"8.1",
						"nbvpvc":"8.2",
						"title":"channel 1",
						"status":"status",
						"vpvc":"VP/VC or VLAN",
						"vlan":"VLAN"
					}
				},
				"channel2":
				{
					"label":
					{
						"nbstatus":"8.3",
						"nbvpvc":"8.4",
						"title":"channel 2",
						"status":"status",
						"vpvc":"VP/VC or VLAN",
						"vlan":"VLAN"
					}
				},
				"vod":
				{
					"label":
					{
						"nbstatus":"8.5",
						"nbvpvc":"8.6",
						"title":"VoD",
						"status":"status",
						"vpvc":"VP/VC or VLAN",
						"vlan":"VLAN"
					}
				},
				"zapping":
				{
					"label":
					{
						"nbstatus":"8.7",
						"nbvpvc":"8.8",
						"title":"zapping",
						"status":"status",
						"vpvc":"VP/VC or VLAN",
						"vlan":"VLAN"
					}
				}
			},
			"ftth":
			{
				"label":
				{
					"help":"System information for fiber connection",
					"title":"FTTH",
					"technical":"technical requirements",
					"status":
					{
						"up":"on",
						"down":"off",
						"initializing":"Initializing",
						"unavailable":"Unavailable",
						"dateexample1":"27th of November 2012, 03 h 23 m 12 s",
						"durationexample1":"00 d 11 h 57 m 16 s",
						"dateexample2":"27th of November 2012, 03 h 22 m 44 s",
						"durationexample2":"03 d 14 h 27 m 04 s"
					},
					"nbadsllinkstatus":"2.1",
					"adsllinkstatus":"FTTH link status",
					"nbwanmacaddress":"2.2",
					"wanmacaddress":"WAN MAC address",
					"nbsynchrostatus":"2.3",
					"synchrostatus":"synchronization status",
					"nbadslsynchrolast":"2.4",
					"adslsynchrolast":"FTTH last synchronization",
					"nbadslsynchroduration":"2.5",
					"adslsynchroduration":"FTTH synchronization uptime",
					"nbpppconnectionstatus":"2.6",
					"pppconnectionstatus":"PPP status",
					"nbpppaccountstatus":"2.7",
					"pppaccountstatus":"account status",
					"nbpppusername":"2.8",
					"pppusername":"PPP login",
					"nbpppauthentificationmode":"2.9",
					"pppauthentificationmode":"PPP authentication mode",
					"nbpppconnectionlast":"2.10",
					"pppconnectionlast":"PPP last connection",
					"nbpppconnectionduration":"2.11",
					"pppconnectionduration":"PPP uptime",
					"nbpppprotocoltype":"2.12",
					"pppprotocoltype":"PPP protocol",
					"nbpppconnectionlasterror":"2.13",
					"pppconnectionlasterror":"PPP last connection error",
					"nbpppconnectionlastdisconnect":"2.14",
					"pppconnectionlastdisconnect":"PPP last connection date",
					"nbatmvpvc":"2.15",
					"atmvpvc":"VLAN",
					"nbadslmode":"2.16",
					"adslmode":"mode",
					"nbencapsulation":"2.17",
					"encapsulation":"encapsulation",
					"nbdatapath":"2.18",
					"datapath":"data path",
					"nbmtu":"2.19",
					"mtu":"MTU",
					"nbwanip":"2.20",
					"wanip":"WAN IP address",
					"nbbasip":"2.21",
					"basip":"BAS IP address",
					"nbdnsprimary":"2.22",
					"dnsprimary":"primary DNS",
					"nbdnssecondary":"2.23",
					"dnssecondary":"secondary DNS",
					"nbattenuationup":"1.16",
					"attenuationup":"attenuation up",
					"nbattenuationdown":"1.17",
					"attenuationdown":"attenuation down",
					"nbnoisemarginup":"1.18",
					"noisemarginup":"noise margin up",
					"nbnoisemargindown":"1.19",
					"noisemargindown":"noise margin down",
					"nbmaxrateup":"1.20",
					"maxrateup":"maximum upload rate",
					"nbmaxratedown":"1.21",
					"maxratedown":"maximum download rate",
					"nbatmrateup":"1.22",
					"atmrateup":"synchronization up",
					"nbatmratedown":"1.23",
					"atmratedown":"synchronization down",
					"nbpowerupstream":"1.24",
					"powerupstream":"power stream up",
					"nbpowerdownstream":"1.25",
					"powerdownstream":"power stream down",
					"nbblocksreceived":"1.26",
					"blocksreceived":"packets received",
					"nbblockstransmitted":"1.27",
					"blockstransmitted":"packets transmitted",
					"nberrorslof":"1.28",
					"errorslof":"packets lost",
					"nblinkretrain":"1.29",
					"linkretrain":"link retrain",
					"nberrorsfec":"1.30",
					"errorsfec":"FEC errors (up/down)",
					"nberrorshec":"1.31",
					"errorshec":"HEC errors (up/down)",
					"nberrorscrc":"1.32",
					"errorscrc":"CRC errors (up/down)"
				},
				"3g":
				{
					"label":
					{
						"status":"",
						"linkstatus":"",
						"operator":"",
						"network":"",
						"wanipaddress":"",
						"maxrateup":"",
						"maxratedown":""
					}
				}
			},
			"internet":
			{
				"label":
				{
					"help":"System information for Internet connection",
					"title":"Internet",
					"status":
					{
						"up":"on",
						"down":"off",
						"initializing":"Initializing",
						"unavailable":"Unavailable",
						"dateexample":"27th of November 2012, 03 h 23 m 12 s",
						"durationexample":"00 d 11 h 57 m 16 s"
					},
					"nbpppconnectionstatus":"3.1",
					"nbpppusername":"3.2",
					"nbpppconnectionlast":"3.3",
					"nbpppconnectionduration":"3.4",
					"nbpppprotocoltype":"3.5",
					"nbpppconnectionlasterror":"3.6",
					"nbpppconnectionlastdisconnect":"3.7",
					"nbatmvpvc":"3.8",
					"nbmtu":"3.9",
					"nbwanipv4":"3.10",
					"nbwanipv6":"3.11",
					"nbdnsv4primary":"3.12",
					"nbdnsv4secondary":"3.13",
					"nbdnsv6primary":"3.14",
					"nbdnsv6secondary":"3.15",
					"pppconnectionstatus":"Internet status",
					"pppusername":"login",
					"pppconnectionlast":"last connection",
					"pppconnectionduration":"connection uptime",
					"pppprotocoltype":"protocol",
					"pppconnectionlasterror":"last connection errors",
					"pppconnectionlastdisconnect":"last connection date",
					"atmvpvc":"ATM VP/VC or VLAN",
					"mtu":"MTU",
					"wanipv4":"WAN IPv4 address",
					"wanipv6":"WAN IPv6 address",
					"dnsv4primary":"primary DNSv4 IP",
					"dnsv4secondary":"secondary DNSv4 IP",
					"dnsv6primary":"primary DNSv6 IP",
					"dnsv6secondary":"secondary DNSv6 IP"
				}
			}
		},
		"firmwareupgrade":
		{
			"label":
			{
				"title":"firmware update",
				"subtitle":"to update the firmware, click on the button \"find a new version\"",
				"version":"current firmware:",
				"softathome":"SoftAtHome",
				"duringsearch":"Please wait while searching a new firmware...",
				"nofirmavailable":"There is no new version of the firmware available",
				"whileupgrading":"A new version of firmware is found. Your request of upgrading is taken into account. ",
				"warning":"Warning:"
			},
			"text":
			{
				"help1":"<h6>the firmware can be updated remotely by orange for new services</h6>if an update is available, the download will be automatic.<h6>Please do not switch off Livebox or disconnect DSL cable during upgrade</h6>",
				"help2":"<h6>Firmware error upgrade</h6> an error occured during upgrade procedure. Push on/off button on Livebox and wait Livebox restart. If problem is still present, unplug and replug power supply.",
				"helpbesearch":"<p>Your Livebox will become unavailable during the upgrade process.</p><p>To avoid any risk to damage the Livebox, please do not turn off or unplug the power supply before the upgrade end.</p>"
			},
			"info":
			{
				"question":"Do you want to continue?",
				"searchinprogress":"Searching"
			}
		},
		"backup":
		{
			"label":
			{
				"title":"save the configuration locally",
				"subtitle":"to save the Livebox configuration (login, password, NAT rules, dynDNS...) in a local file, click on the button \"save\".",
				"help":"You can save your settings to a file. If you are forced to reset your Livebox to factory settings, it will be easy to restore your settings using saved file."
			},
			"remote":
			{
				"label":
				{
					"title":"save and restore in the network automatically",
					"subtitle":"In case you change or reinitialize your livebox, retreive your configuration thanks to automatic backup. Be careful if you <br>deactivate the feature, no more backup will be kept on the network.",
					"enable": "Automatic backup :",
					"lastdate" :"Last backup at :",
					"help":"You can save your settings to a file. If you are forced to reset your Livebox to factory settings, it will be easy to restore your settings using saved file."
				}
			}
		},
		"remoteaccess":
		{
			"label":
			{
				"title":"user remote access",
				"subtitle":"you can remotly access to the Livebox settings interface. For easier access, you can configure the dynDNS service.",
				"here":" here",
				"enable":"&nbsp;enable the user remote access",
				"youripaddress":"your current IP address:",
				"yoururl":"your current URL is:",
			        "showpassword":"show password"
			},
			"login":
			{
				"error":
				{
					"label":"not correct",
					"description":"login not correct"
				}
			},
			"password":
			{
				"error":
				{
					"label":"not correct",
					"description":"password not correct"
				}
			},
			"port":
			{
				"error":
				{
					"label":"not correct",
					"description":"port  number not correct"
				}
			},
			"info":
			{
				"comment":"after clicking on \"save\", the URL which allows you to have a remote access will be displayed."
			},
			"text":
			{
				"help":"<h6>you can configure a remote access from Internet to the Livebox settings.</span></h6><br/>You must enter a login and password to access to the Livebox. Remember them because they will be required to access remotely to the Livebox interface.<br/><br/>Your login can't be more than 32 characters and can only contains the characters a to z, A to Z and 0 to 9 (special characters are not supported). Your password must have 8 characters minimum with a number and a special character.</span><br/><br/>The port number is by default 10011 but you can change it with a port betwwen 10000 and 30000."
			},
			"definition":
			{
				"example":
				{
					"title":"",
					"description":""
				}
			},
			"authentication":
			{
				"label":
				{
					"help":"",
					"title":"authentication",
					"subtitle":"enter your remote access login and password",
					"login":"login",
					"password":"password",
					"warning":"remote access to the Livebox"
				},
				"error":
				{
					"title":"login and/or password not correct",
					"description":"verify that your login and password are correct"
				}
			}
		},
		"hotline":
		{
			"label":
			{
				"title":"customer support remote access",
				"subtitle":"you can give temporaly an access to the customer support",
				"duration":
				{
					"title":"time for remote access",
					"first":"0 mn",
					"second":"5 min",
					"third":"10 min",
					"fourth":"15 min"
				}
			},
			"info":
			{
				"comment":"information required for remote access"
			},
			"text":
			{
				"help":"for any support, the temporary acces allows the customer support to access to your Livebox during 15mn.<br/><br/>to start  remote access for customer support, click on \"start\" button. The settings will be displayed. You can give them to the support.<br/> <br/>To deactivate remote access to customer support, click on \"stop\" button."
			}
		},
		"assistancelivebox":
		{
			"label":
			{
				"help":"",
				"title":"my Livebox",
				"subtitle":"my Livebox is an application that lets you control, configure and troubleshoot your Orange Internet services.",
				"description":"With <b>my&nbsp;Livebox</b> you can :<br/>- check your Orange services status : Internet, TV, VoIP phone<br/>- display and manage all the devices connected to your Livebox<br/>- schedule your Livebox Wi-Fi activation by day and hour<br/>- configure Internet access rights for each device connected to your Livebox by defining schedules<br/>- share your Livebox Wi-Fi security key through text messages or QR Code<br/>- self repare your Internet, TV and VoIP phone services without technical knowledge.",
				"url1":"Download <b>my&nbsp;Livebox</b> for smartphones and tablets",
				"url2":"Download <b>my&nbsp;Livebox</b> for PC"	
			}
		}
	},
	"advconfig":
	{
		"wifi":
		{
			"label":
			{
				"title":"Advanced WiFi",
				"subtitle":"advanced WiFi settings",
				"warning":"Be careful, if you modify your WiFi configuration, you will have to pair again your devices.",
				"state":"WiFi status",
				"ssid":"WiFi name (SSID)",
				"broadcast":"broadcast SSID",
				"securitymode":"security mode",
				"securitykey":"security key",
				"nosecurity":"No security",
				"channel":"channel",
				"channelused":"channel used",
				"pairingtitle":"Connect your devices by WiFi",
				"easypairing":"easy WiFi",
				"macfiltering":"MAC filtering",
				"devicesauthorised":"devices allowed to connect by WiFi",
				"td1":"in WiFi 2.4 GHz ",
 				"td2":"in WiFi 5 GHz ",
				"name":"name",
				"ipadress":"IP address",
				"macaddress":"MAC address",
				"othername":"other",
				"editnewmac":"new…",
				"unknownmac":"unknown",
				"wifipushbutton":"WiFi Protected Setup (WPS)",
				"wifipushbutton#lb28":"WiFi Protected Setup (WPS)",
				"wifipairing":"generate a Livebox WPS Pin Code",
				"addclientpush":"connect a device by WPS Push Button",
				"addclientpin":"Type PIN code of &nbsp;&nbsp; WPS &nbsp;equipment",
				"sameconfig":"same configuration for WiFi 5 GHz and 2.4 GHz WiFi",
				"availablewifi":"WiFi band available",
				"info":
				{
					"disable":"enable Wifi to take advantage of Wifi advanced settings"
				}
			},
			"link":
			{
				"scheduling":"define WiFi scheduling",
				"ssid":"modify",
				"securitykey":"modify"
			},
			"text":
			{
				"help":"<h6>security mode</h6><h6>- no security</h6>your WiFi network is open (non recommanded mode). In this case, MAC filtering is activated by default.<h6>- WEP</h6>A 26 hexadecimal characters key is used. Do not allow WiFi n use but only WiFi b/g<h6>- WPA-PSK (TKIP)</h6>key must contain at least 8 characters (alphanumerical and special characters). Do not alllow WiFin use but only WiFi b/g<br/><h6>- WPA2-PSK (AES)</h6>key must contain at least 8 characters (alphanumerical and special characters). <h6>- WPA/WPA2 Mixed</h6>key must contain at least 8 characters (alphanumerical and special characters). Default mode selecting the best mode for your device<br/><br/><h6>- WiFi Protected SetUp (WPS) </h6>Activation of recommanded method to connect WPS certified devices<br/><h6>Generate Livebox PIN code </h6>If you activate this option, by pushing on generate button, you get a Livebox PIN code. Type it on the WPS certified device you wish to connect.<br/><h6>Connect a device by WPSPushButton</h6>Push on \"connect\" button (or briefly on the WiFi button of the Livebox) then on the WPS button of your device.<br/><h6>Type WPS PIN code of your device</h6> PIN code is available on your device (generated or on a sticker). Type it here and click on add to connect it<br/><br/><h6>MAC filtering</h6>When enabling MAC filtering, if you wish to connect a new device to your Livebox, you have to press WiFi pairing button on your Livebox. If MAC filtering is disabled (default case), then any wireless device knowing security key can connect to your Livebox.",
				"help#lb28":"<h6>security mode</h6><h6>- no security</h6>your WiFi network is open (non recommanded mode). In this case, MAC filtering is activated by default.<h6>- WEP</h6>A 26 hexadecimal characters key is used. Do not allow WiFi n use but only WiFi b/g<h6>- WPA-PSK (TKIP)</h6>key must contain at least 8 characters (alphanumerical and special characters). Do not alllow WiFin use but only WiFi b/g<br/><h6>- WPA2-PSK (AES)</h6>key must contain at least 8 characters (alphanumerical and special characters). <h6>- WPA/WPA2 Mixed</h6>key must contain at least 8 characters (alphanumerical and special characters). Default mode selecting the best mode for your device<br/><br/><h6>- WiFi Protected SetUp (WPS) </h6>Activation of recommanded method to connect WPS certified devices<br/><h6>Generate Livebox PIN code </h6>If you activate this option, by pushing on generate button, you get a Livebox PIN code. Type it on the WPS certified device you wish to connect.<br/><h6>Connect a device by WPSPushButton</h6>Push on \"connect\" button (or briefly on the WiFi button of the Livebox) then on the WPS button of your device.<br/><h6>Type WPS PIN code of your device</h6> PIN code is available on your device (generated or on a sticker). Type it here and click on add to connect it<br/><br/><h6>MAC filtering</h6>When enabling MAC filtering, if you wish to connect a new device to your Livebox, you have to press WiFi pairing button on your Livebox. If MAC filtering is disabled (default case), then any wireless device knowing security key can connect to your Livebox."
			},
			"definition":
			{
				"example":
				{
					"title":"",
					"description":""
				}
			},
			"error":
			{
				"wepkey":"invalid key. Must contain 26 characters",
				"presharedkey":"Invalid key. Must contain between 8 and 63 characters",
				"ssid":"Invalid SSID",
				"moden":"WiFi N is not available with this security mode",
				"macaddress":"Invalid MAC address",
				"wpsclientpin":"Invalid Client Pin Code",
				"wpsclientfailed":"This method failed. Push the generate button to get a new PIN code"
			},
			"general":
			{
				"info":
				{
					"wificom":"If you deactivate WiFi on the Livebox, the Orange WiFi mode will not be available anymore. Would you like to continue ?",
					"disabling24ghz":"If you disable the WiFi 2.4 GHz the Orange WiFi service will also disabled. Would you like to continue?",
					"enabling24ghz":"You have chosen to enable the WiFi 2.4 GHz. Would you like to continue?",
					"disabling5ghz":"You have chosen to disable the WiFi 5 GHz. Would you like to continue?",
					"enabling5ghz":"You have chosen to enable the WiFi 5 GHz. Would you like to continue?",
					"ssidmustbedifferent":"You have configured differently the WiFi 2.4 GHz and 5 GHz.<br/>You should assign different SSID names.",
					"confirmation":"You have modified your WiFi configuration, you will have to pair again your devices.",
					"nosecurity1":"Be careful, if you validate, then your WiFi will be no more secured (security mode chosen \"No security\" and MAC filtering is deactivated)!",
					"nosecurity2":"Be careful, if you validate, then your WiFi will be no more secured (security mode chosen \"No security\" and MAC filtering is deactivated)!<br/><br/>You have modified your WiFi configuration, you will have to pair again your devices."
				}
			},
			"securitykey":
			{
				"label":
				{
					"title":"security key",
					"subtitle":"you can modify the security key",
					"warning":"Warning : All of your devices connected via Wifi to your Livebox will lost their Internet connection. "
				},
				"description":"enter the new security key",
				"info":
				{
					"comment":"26 hexadecimals characters if using WEP<br/>between 8 and 63 characters if using WPA/WPA2"
				},
				"error":
				{
					"wep":"wrong WEP key. It must contains a string of 26 Hexadecimal characters (0-9 and A-F).",
					"wpa":"wrong WPA passphrase. It must be longer than 8 characters."
				},
				"help":
				{
					"label":
					{
						"wificom":""
					}
				}
			}
		},
		"firewalladv":
		{
			"label":
			{
				"help":"Warning: The order in which the rules are created has an impact on the firewall behaviour",
				"title":"firewall",
				"subtitle":"firewall customization<br/><br/>on this page you can add customized filtering rules. for novice users, it is recommended to use one of the security levels predefined on the previous page. a bad firewall configuration may prevent you from accessing to the Internet service.",
				"ping":"the ping respond option allows the Livebox to respond to ping request. option activated by default.",
				"pinganswer":"respond to ping",
				"reinit":"reset the firewall rules (back to rule define in the high level)",
				"personalrules":"customized rules",
				"application":"application / service",
				"source":"source<br/>IP<br/>address",
				"mask":"IP<br/>mask<br/>address",
				"sourceport":"source port",
				"destination":"destination<br/>IP<br/>address",
				"destinationport":"destination port",
				"action":"action",
				"order":"order",
				"staticip":"static IP address",
				"protocol":"protocol",
				"accept":"accept",
				"drop":"drop",
				"editnewrule":"new…",
				"bothprotocol":"both"
			},
			"error":
			{
				"description":"invalide description",
				"sourceip":"bad source ip address",
				"sourceipmask":"bad source ip mask",
				"sourceport":"wrong source port. It should be a value between 1 to 65535",
				"sourcerange":"wrong source port. It should be a value between 1 to 65535",
				"destip":"bad destination ip address",
				"destipmask":"bad Destination ip mask",
				"destport":"wrong destination port. It should be a value between 1 to 65535",
				"destrange":"wrong destination port. It should be a value between 1 to 65535",
			        "invalide":"invalid rule."
			},
			"tooltip":
			{
				"sourceport":"<b>source port</b> enter a port value<br/>or a port range (e.g. 200-300)",
				"destinationport":"enter a port value or a port range (ex: 200-300)"
			}
		},
		"firewall":
		{
			"label":
			{
				"help":"TO BE DEFINED",
				"title":"firewall",
				"subtitle":"configure the firewall.<br/><br/>you can configure the protection level of the Livebox. The level by default (medium) is enough and recommanded",
				"offer":"choose the security level",
				"low":"low",
				"medium":"medium",
				"high":"high",
				"customize":"customize",
				"warn":"Applications (ex: LiveMessenger, peer-to-peer applications, games) relying on the NAT-traversal facilities provided by UPnP IGD will not work properly any more.",
				"warnTv":"Warning ! This level of security restricts Orange TV service to live channels only.<br>To access the entire Orange TV service, choose an average or a personalized level. Find the rules of customization on assistance.orange.fr"
			},
			"description":
			{
				"low":"The firewall does not filter anything. Be careful, this level is reserved to advanced users to whom security is not a priority. Note also that even in this mode, a connection iniated from Internet will not be permitted if a NAT/PAT rule is not created on purpose.",
				"medium":"The firewall drops all entering connections. Outcoming traffic is allowed except Netbios services. This mode is the recommended one.",
				"high":"The firewall allows the exit of standard services (www,ftp,mail,news,...) and drops unexpected entering connections. This setting is recommended to have a maximal security level. Warning : incompatible with Unik and other services.",
				"customize":"This profile allows you to customize your firewall. Thus, you can define some specific filtering rules. (Reserved to expert users)."
			},
			"ipv6rules":
			{
				"label":
				{
					"table":
					{
						"title":"IPv6 firewall port(s) opening",
						"header":
						{
							"protocol":"Protocol",
							"device":"Device",
							"ports":"Port",
							"enable":"Enable",
							"delete":"Delete"
						},
						"error":
						{
							"ports":"wrong port(s)"
						}
					}
				}
			}
		},
		"network":
		{
			"natpat":
			{
				"label":
				{
					"title":"network",
					"tab":"NAT/PAT",
					"setup":"NAT/PAT settings",
					"description":"NAT/PAT settings",
					"info":"these rules are needed to authorise a remote communication from Internet to reach a specific device of your LAN. you can also define the ports(s) that this communication will use.<br/><br/>NB: following rules are only applied with IPv4.",
					"warning":"warning : make sure you have not filtered these ports in the firewall.",
					"personaltunes":"customize rules",
					"application":"<b>application / service</b>",
					"internalport":"<b>internal<br/>port</b>",
					"externalport":"<b>external<br/>port</b>",
					"protocol":"<b>protocol</b>",
					"device":"<b>device</b>",
					"bothprotocol":"both",
					"editnewline":"new…",
					"editnewhost":"new…",
					"error":"fields shoud not be empty",
					"error1":"bad port number or range.",
					"error2":"port value is reserved for internal use",
					"error3":"rule already exists",
					"error4":"the new rule conflicts with previous one",
					"error5":"new rule conflicts with a UPnP rule",
					"error6":"Invalid IP address or IP address ouside of the Livebox network",
					"error7":"Impossible to create a NAT rule as the port is reserved for the M2M application",
                                        "error8":"Impossible to create a NAT rule as the port is used by Orange wifi",
                                        "error9":"Impossible to create a NAT rule as the port is used by SSH protocol",
				},
				"text":
				{
					"help":"<h6>What is NAT/PAT ?</h6><br/>some applications require to open specific ports to have a correct funcitonning. It can be some on line games, FTP server, SSH, web...<br/><br/>to allow communication between your device and the distant server or client you must enter a NAT rule specifying the type of application, internal (local network) and external (Internet) ports, protocols and device receiving information."
				},
				"tooltip":
				{
					"externalport":"(e.g. 1000-2000)",
					"internalport":"(e.g. 1000)"
				}
			},
			"dhcp":
			{
				"label":
				{
					"help":"<h6>DHCP</h6><br/>The DHCP server is a feature of the Livebox that automatically assign an IP address to the devices in the home network.<br/><br/>In the \"valid DHCP leases\" section, you can view all devices that automatically receive an address chosen by the server.<br/><br/>It is possible to ask the DHCP server to assign a device an IP address permanently. This is recommended for port forwarding functions available in the &nbsp;<a href='/advConfigNetworkNatPat.html'>NAT/PAT</a>.<br/><br/>Please note that this list does not include the devices on which you have manually assigned an IP address. All your equipment is available on <a href='/'>homepage</a>.",
					"title":"network",
					"subtitle":"the DHCP server of the Livebox allows to attribute an IP address to each device connected to your local network",
					"tab":"DHCP",
					"editnewlease":"new…",
					"setup":"DHCP settings",
					"serveripv4":"IPv4 DHCP server",
					"serveripv6":"IPv6 DHCP server",
					"liveboxip":"Livebox IP address",
					"mask":"LAN subnet mask",
					"startip":"start IP address",
					"endip":"end IP address",
					"info":"you can see the dynamic IP addresses allocated by the DHCP server",
					"dynamicip":"valid DHCP leases",
					"name":"name",
					"ip":"IP address",
					"macaddress":"MAC address",
					"delete":"delete",
					"staticip":"static DHCP leases",
					"ipv4":"IPv4:",
					"ipv6":"IPv6:"
				},
				"info":
				{
					"comment":"you can book a static IP address to each device of you local network. The device will always have the same IP address",
					"disable":"You have chosen to disable the DHCP server, the TV service may not be operational, we advice you not to disable it. Would you like to continue?"
				},
				"error":
				{
					"empty":
					{
						"label":"error",
						"description":"empty field"
					},
					"withinsubnet":"IP Address should be within the subnetwork",
					"withinrange":"IP Address should be within the  DHCP range",
					"reservedip":"This is a reserved IP Address",
					"limitedipaddress":"IP Address should be between Min IP Address and Max IP Address",
					"macaddress":"Bad MAC Address",
					"subnetMask":"Bad SubnetMask",
					"ipaddress":
					{
						"bad":"bad IP address",
						"maxAddress":"Bad End IP address",
						"minAddress":"Bad Start IP address",
						"device":"Modification impossible due to connected devices"
					},
					"usedmacaddress":"MAC address already used",
					"usedipaddress":"IP address already used",
					"conflict":
					{
						"subnet192168128":"current subnetwork is in conflict with 192.168.128.0/24 reserved subnetwork",
						"subnet192168002":"current subnetwork is in conflict with 192.168.2.0/24 reserved subnetwork",
						"subnet192168050":"current subnetwork is in conflict with 192.168.50.0/24 reserved subnetwork"
					},
					"outofrangestaticip":"At least one static IP address is out of DHCP range defined. Please modify the DHCP range or delete the device defined in the static IP address list."
				}
			},
			"dns":
			{
				"label":
				{
					"title":"network",
					"subtitle":"the DNS server is here to convert domain name in IP address.",
					"tab":"DNS",
					"setup":"DNS settings",
					"primaryv4":"primary IPv4 DNS",
					"secondaryv4":"secondary IPv4 DNS",
					"primaryv6":"primary IPv6 DNS",
					"secondaryv6":"secondary IPv6 DNS",
					"info":"you can see all the devices of your local network",
					"localnetwork":"local network devices",
					"name":"name",
					"dnsname":"DNS name",
					"ipaddress":"IP address",
					"ipv4":"IPv4:",
					"ipv6":"IPv6:"
				},
				"text":
				{
					"help":"<h6>DNS</h6>lthe orange DNS servers are configured by default and can not be modify on the Livebox<br/><h6>DNS name in the local network</h6>you can give a name to each device to facilitate their research if you need."
				},
				"error":
				{
					"empty":
					{
						"description":"empty value"
					},
					"length":
					{
						"description":"value limited to 64 characters"
					},
					"invalid":
					{
						"description":"Invalid device name"
					}
				}
			},
			"upnp":
			{
				"label":
				{
					"title":"network",
					"subtitle":"UPnP IGD allows applications to open automatically and forward ports of the access point (useful for instant messaging, online gaming ...).",
					"tab":"UPnP",
					"setup":"UPnP settings",
					"info":"&nbsp;enable UPnP IGD",
					"table":"UPnP IGD rules table",
					"application":"application/service",
					"externport":"external port",
					"internport":"internal port",
					"protocol":"protocol",
					"nameadress":"name / IP address",
					"hostipaddress":"host IP address",
					"ipv4":"IPv4:",
					"ipv6":"IPv6:"
				},
				"warning":"applications that created some NAT rules with UPnP IGD can't work correctly",
				"text":
				{
					"help":"<h6>enable UPnP IGD</h6>UPnP IGD is enabled by default. you can disable it if you want to avoid forwarding ports created automatically by applications.<br/><br/><h6>if you want to disable/enable this service,</h6>do not forget to click \"save\" button."
				}
			},
			"dyndns":
			{
				"label":
				{
					"title":"network",
					"subtitle":"This page enables you to configure the DynDNS service. Use a DynDNS to map a static or dynamic IP address or long URL to an easy to remember subdomain such as mydomain.dyndns.org. Thus you will be able to access to your server on your LAN.",
					"tab":"DynDNS",
					"info":"using DynDNS can be useful if you host a web site, ftp server or any type of server behind the Livebox. You can find it easily with a name like thisiscool.dyndns.org",
					"setup":"DynDNS settings",
					"localnetwork":"",
					"hostname":"full host<br/>name",
					"username":"user name<br/>email",
					"lastupdate":"last update",
					"service":"service",
					"none":"none"
				},
				"text":
				{
					"help":"<h6>service</h6>choose your DynDNS name provider.<br/><br/><h6>host name</h6>choose your domain name.<br/><br/><h6>identifier/e-mail</h6> type user name of your DynDNS account.<br/><br/><h6>password</h6>type your DynDNS account password<br/>"
				},
				"error":"invalid dynDNS server",
				"errorduplicate":"hostname already configured on another service"
			},
			"dmz":
			{
				"label":
				{
					"title":"network",
					"subtitle":"This page enables you to configure a DMZ on a computer. This computer can be reachable from the Internet.",
					"ipv6restrict":"DMZ feature is only possible for devices supporting IPv6.",
					"tab":"DMZ",
					"setup":"DMZ settings",
					"info":"computer DMZ settings",
					"dmz":"DMZ",
					"name":"name",
					"ip":"IP address",
					"macaddress":"MAC address",
					"warning":"you need to associate a static IP address with this device on the DHCP settings",
					"current":"current DMZ is:",
					"nodmz":"no DMZ",
					"staticip":"statique address…",
					"ipv4":"IPv4:",
					"ipv6":"IPv6:"
				},
				"text":
				{
					"help":"<h6>DMZ configuration</h6>all computer ports will be accessible from Internet and rerouted toward computer IP address. <br/><br/>in order to set up a DMZ on your computer, you must associate a static IP address to this computer on the DHCP page. <br/><br/>for IPv6, you can open devices' ports using the <a href='/advConfigFirewall.html'>firewall configuration</a> page."
				},
				"error":
				{
					"ipaddress":
					{
						"bad":"Bad IP Address"
					}
				}
			},
			"ntp":
			{
				"label":
				{
					"help":"",
					"title":"network",
					"subtitle":"configure time zone for the Livebox",
					"tab":"NTP",
					"currentdate":"current date",
					"timezone":"choose time zone"
				}
			}
		},
		"ports":
		{
			"label":
			{
				"title":"ports settings",
				"subtitle":"ethernet settings or TV",
				"nostb":"I have no TV decoder",
				"onesat":"I have a TV by satellite decoder",
				"oneinet#amea":"I have a TV over Internet decoder",
				"srvinet#amea":"I have several TV over Internet decoders",
				"oneinet":"I don't have orange set top box<br />or I have one orange set top box",
				"srvinet":"I have more than one orange set top box",
				"fullrouted":"I have a TV over Internet decoder",
				"bridged":"I have several TV over Internet decoders",
				"info":"I can connect my devices to Internet  and my 2 set top boxes to the eternet ports:",
				"liveboxports":"Livebox ports",
				"computers":"computers",
				"stb":"set top box",
				"sat":"Satellite TV",
				"iptv":"Internet TV",
				"iptv1":"Internet TV 1",
				"iptv2":"Internet TV 2",
				"ftth":"FTTH",
				"automatic":
				{
					"mode":"Automatically"
				},
				"manually":
				{
					"mode":"Manually",
					"bridged":"Bridged",
					"routed":"Routed",
					"disabled":"Disabled"
				},
				"bridged2":"I have more than one Internet set top box",
				"fullrouted2":"I have no set top box or one set top box (Internet TV or satellite TV)"
			},
			"info":
			{
				"comment":"if you have 2 set top boxes, you can not use the \"multimedia access\" to the the Livebox ans set top box"
			},
			"text":
			{
				"help":"<h6>orange TV</h6>it's exclusive channels, video on deman, catch up TV and more !"
			}
		},
		"accesstype":
		{
			"label":
			{
				"title":"Internet connection",
				"subtitle":"This page allows you to change the configuration of your Internet access.",
				"offer":"choose the offer you subscribed",
				"howtoinstall":"enter your login and your connection password",
				"geographicalparams":"geographical parameters :",
				"adslparams":"ADSL parameters :",
				"wanparams":"WAN parameters :",
				"country":"your country :",
				"countries":
				{
					"option":
					{
						"select":"Select",
						"luxembourg":"Luxembourg",
						"ivorycoast":"Ivory Coast",
						"republicofmauritius":"Republic of Mauritius",
						"senegal":"Senegal",
						"other":"Other"
					}
				},
				"mode":"select your connection mode :",
				"pppmode":
				{
					"option":
					{
						"pppoe":"PPPoE",
						"pppoevcmux":"PPPoE with encapsulation (VCMUX)",
						"pppoellc":"PPPoE with encapsulation (LLC)",
						"pppoa":"PPPoA",
						"pppoewe":"PPPoE with encapsulation"
					}
				},
				"vpvcsection":"VP / VC parameters :",
				"vlansection":"VLAN parameters :",
				"section":
				{
					"country":"please select your country :"
				},
				"login":"connection login",
				"password":"connection password",
				"warning":
				{
					"fr":"your login and password are available in the welcome letter",
					"pl":"your login and password were generated in registration process",
					"mini_fr":"your login and password are available in the welcome letter"
				}
			},
			"mode":
			{
				"radiobutton":
				{
					"ppp":"PPP",
					"dhcp":"DHCP"
				}
			},
			"offer":
			{
				"adsl":
				{
					"radiobutton":"DSL"
				},
				"fiber":
				{
					"radiobutton":"The fiber"
				},
				"radiobutton":
				{
					"adsl":"ADSL",
					"fiber":"The fiber",
					"dhcp":"DHCP",
					"ppp":"PPP"
				}
			},
			"error":
			{
				"label":"login and/or password not correct",
				"description":"verify that your login and password are correct",
				"orange":
				{
					"label":"warning",
					"description":"you can not modify your Internet connection settings while \"Orange WiFi\" service is activated\""
				},
				"empty":
				{
					"label":"login and/or password not correct",
					"description":"verify that your login and password are correct"
				},
				"running":
				{
					"label":"authentication",
					"description":"authentication in progress"
				},
				"adsl_link":
				{
					"label":"ADSL error",
					"description":"ADSL not synchronized"
				},
				"ftth_link":
				{
					"label":"FTTH error",
					"description":"FTTH connexion not available"
				},
				"ppp_server":
				{
					"label":"PPP error",
					"description":"failed to connect to PPP server"
				},
				"authentication":
				{
					"label":"error",
					"description":"authentication error"
				},
				"ppp_timeout":
				{
					"label":"PPP error",
					"description":"no response from PPP server"
				},
				"restart":
				{
					"label":"authentication",
					"description":"authentication in progress"
				},
				"profile":
				{
					"label":"No contry selected",
					"description":"Please choose your country in the select box"
				}
			},
			"warning":
			{
				"description":"The modification/validation of your login and password will restart your Livebox."
			},
			"connected":
			{
				"label":"connected",
				"description":"connected"
			},
			"text":
			{
				"help":
				{
					"fr":"<h6>connection type</h6>your Livebox can work on ADSL network and fiber network. only one connexion mode is available at the same time<br/><br/><h6>connection login</h6>this login allows orange to authenticate you as customer and benefit of internet access. it start by fti/ (ex: fti/abcdef12). keep it safe, it could be usefull if you need to configure again your connection.<br/><br/><h6>connection password</h6>your connection login, it's the key to access to internet.",
					"pl":"<h6>connection type</h6>your Livebox can work on ADSL network and fiber network. only one connexion mode is available at the same time<br/><br/><h6>connection login</h6>this login allows network to authenticate you as customer and benefit an internet access. keep it safe, it could be usefull if you need to configure again your connection.<br/><br/><h6>connection password</h6>your connection password, it's the key to access to internet.",
					"mini_fr":"<h6>connection type</h6>your Livebox can work on ADSL network and fiber network. only one connexion mode is available at the same time<br/><br/><h6>connection login</h6>this login allows orange to authenticate you as customer and benefist an internet access. it start by fti/ (ex: fti/abcdef12). keep it safe, it could be usefull if you need to configure again your connection.<br/><br/><h6>connection password</h6>your connection login, it's the key to access to internet."
				}
			},
			"status":
			{
				"connection":
				{
					"label":"authentication",
					"description":"authentication in progress"
				}
			}
		},
		"admin":
		{
			"label":
			{
				"title":"administration",
				"subtitle":"change the Livebox administration password",
				"info":"administration account: admin",
				"password":"current password:",
				"newpassword":"new password:",
				"confirmnewpassword":"confirm the new password:",
				"passwordmodified":"your password has been modified"
			},
			"text":
			{
				"help":"<h6>Livebox administration account</h6>the account login can't be modify.<h6>Livebox administration password</h6>the Livebox administration password allow  you to authenticate to your Livebox. It will be asked each time you connect to the pages settings, support and advanced settings."
			},
			"error":
			{
				"label":
				{
					"currentpassword":"error",
					"newpassword":"error",
					"confirmnewpassword":"error"
				},
				"description":
				{
					"currentpassword":"password not valid",
					"newpassword":"Password not valid. Must contains between 4 and 32 characters",
					"confirmnewpassword":"Passwords are differents",
					"success":"password changed successfully",
					"empty":"empty password"
				}
			}
		},
		"fxo":
		{
			"label":
			{
				"title":"phone line configuration",
				"subtitle":"If phone line is configured as activated, you can receive and make calls using your fix line number on the telephone connected to the Livebox. In case it is deactivated, only Internet line phone calls can be received and initialized via the telephone connected to the Livebox.",
				"activated":"activated",
				"deactivated":"deactivated"
			}
		},
		"ipv6":
		{
			"label":
			{
				"help":"TO BE DEFINED",
				"title":"Internet IPv6 activation",
				"status":"Currently, the status of your IPv6 connectivity is :",
				"prefix":"Your Livebox IPv6 prefix is :",
				"modify":"You can modify the IPV6 connectivity"
			}
		}
	},
	"rescuefirmware":
	{
		"label":
		{
			"title":"rescue firmware",
			"subtitle":"a firmware upgrade is in progress. Time is approximatly between 5 to 15mn. During this time you can't access to Internet. At the end, your Livebox reboot automatically.",
			"offer":"select the offer you subscribed",
			"howtoinstall":"enter your connection login and your password",
			"login":"login",
			"password":"password",
			"warning":"your login and password are available in the welcome letter"
		},
		"offer":
		{
			"radiobutton":
			{
				"adsl":"DSL",
				"fiber":"La fibre"
			}
		},
		"error":
		{
			"label":"warning",
			"description":"do not switch off your Livebox during a firmware upgrade"
		}
	},
	"firmwareupgrade":
	{
		"label":
		{
			"title":"rescue firmware",
			"subtitle":"A firmware upgrade is in progess. During this process, the blue led of your Livebox will blink during 15mn. When it will be finished, your Livebox will reboot automaticaly.<br/>Please do not switch off your Livebox or disconnect the DSL link during the blue led blinking. This upgrade can't be stopped."
		}
	},
	"legal":
	{
		"label":
		{
			"title":"legal information",
			"comment":"The Livebox home gateway uses free or open source licensed software, such as for example the Linux kernel, Busybox and Iptables software all published under the terms and conditions of the <a title='GNU General Public License' href='GPL_EN.txt' target='blank'>GNU General Public License (GNU GPL)</a>. The customer may consult the list of concerned software, their licenses and download their complete and corresponding source code on the following web site: <a title='link to the website opensource.orange.com' href='http://opensource.orange.com' target='_blank'>http://opensource.orange.com</a>. For each version, such information will remain accessible as long as said version is available in the Livebox, and for the next three (3) years starting from the launch of a new software version or from the expiration of the availability of the said version via the Livebox. Prior to use one of these software available on the web site <a title='link to the website opensource.orange.com' href='http://opensource.orange.com' target='_blank'>http://opensource.orange.com</a>, the customer shall acknowledge and accept the terms and conditions of the associated license. Furthermore, the customer acknowledges that these software packages are provided as is without any implied warranty in accordance with the provisions of the applicable license."
		}
	},
	"restoration":
	{
		"label":
		{
			"help":"",
			"title":"restore the configuration",
			"browsfieldlabel":"File name",
			"tryagain":"Select again your configuration file.",
			"stependmsg":"<p>The restoration is in progress. Your Livebox will reboot automatically. Please wait for few minutes…</p><p>Once the restoration is terminated, you will be able to surf on Internet.</p><p>If you want to access again to the interface, type livebox in your browser address bar.</p><p>In case of Livebox exchange:<br/>The WiFi settings to use to connect again by WiFi are those of the previous Livebox (Network name (SSID) and security key).<br/>The already connected devices of the previous Livebox will be connected themselves automatically.</p>"
		},
		"info":
		{
			"comment":"to restore the Livebox configuration, choose the restore file with the \"browse\" button and clic on button \"restore\".",
			"filetype":"<h5>Extention by default of the saved file is \".livebox\".</h5>",
			"credentials":"You don't need to enter your login and password. The device which have already been connected to the Livebox will be re-connected automatically. The parameters (firewall, network, …) will be also restored.",
			"inprogress":"Restore in progress"
		},
		"xhr2":
		{
			"error":
			{
				"label":"error",
				"description":"Browser version not compatible with restore, please use a more recent browser"
			}
		},
		"nofile":
		{
			"error":
			{
				"label":"error",
				"description":"no file to restore"
			}
		},
		"upload":
		{
			"error":
			{
				"label":"error",
				"description":"invalid file"
			}
		}
	},
	"internetblocked":
	{
		"label":
		{
			"title":"Internet access blocked",
			"comment":"Your right to acceed to Internet has been modified and you can not acceed to Internet for the moment. This restriction may has been defined by one of your familly member (not by your operator)."
		}
	},
	"filesbrowser":
	{
		"label":
		{
			"title":"my files",
			"subtitle":"You can browse the files on your mass storage device connected on the USB port of the Livebox",
			"help":"Your Livebox enables you to share your multimedia content saved in your mass storage device on other devices (DNLA mode).",
			"massstorage":"mass storage",
			"copy":"copy",
			"paste":"paste",
			"rename":"rename",
			"download":"download",
			"open":"open"
		}
	},
	"routing":
	{
		"label":
		{
			"help":"TO BE DEFINED",
			"title":"routing",
			"subtitle":"This page enables you to configure a static rounting table.",
			"table":
			{
				"title":"Routing table :",
				"header":
				{
					"dest":"Destination Network",
					"mask":"Destination Network Mask",
					"gateway":"Gateway",
					"enable":"Enable",
					"delete":"Delete"
				},
				"error":
				{
					"dest":"Bad Network IP address",
					"mask":"Bad network mask address",
					"gateway":"Bad gateway IP address"
				}
			},
			"warning":
			{
				"title":"Warning : ",
				"message":"This page is reserved to the specific usage; network knowledge should be required. Some rules defined may impact your Orange services."
			}
		}
	},
	"ipphone":
	{
		"phonebook":
		{
			"label":
			{
				"title":"phone book",
				"subtitle":"You can find and manage your telephone contacts.",
				"search":"Search a contact",
				"tabletitle":"phonebook",
				"firstname":"Name",
				"lastname":"Family Name",
				"number":"Tel number",
				"type":"Type",
				"melody":"Melody",
				"edit":"Edit",
				"synchronise":"Synchronise the contact list with my handsets",
				"addcontact":"Add new contacts",
				"addressbooksynchro":"Synchronization with your Orange address book",
				"error":"The format of what you entered is not correct, please re-enter the value.",
				"help":"On this page, you can manage your phone book. The phone book modified will be updated automatically in your Internet phones. "
			},
			"edit":
			{
				"label":
				{
					"title":"edit a contact",
					"subtitle":"You can modify a contact by entering the new value in the following table.",
					"tabletitle":"edit contact",
					"firstname":"Name",
					"lastname":"Family Name",
					"number":"Tel number",
					"type":"Type",
					"melody":"Melody",
					"listen":"listen",
					"remove":"remove",
					"deletecontact":"Remove",
					"help":"Please click on Save button to validate your modifications"
				}
			},
			"newcontact":
			{
				"label":
				{
					"title":"add a contact",
					"subtitle":"Please fill in the following fields to create a new contact in your phone book.",
					"tabletitle":"new contact",
					"firstname":"Name",
					"lastname":"Family Name",
					"number":"Tel number",
					"type":"Type",
					"melody":"Melody",
					"listen":"listen",
					"help":"To add a new contact in your phone book, please fill in the fields. "
				}
			}
		},
		"pairphones":
		{
			"label":
			{
				"help":"In case of error, please be sure that you don't have more than 3 handsets already in the list; if the case, please dispair one of them, to be able to connect a new one",
				"title":"pair phones",
				"subtitle":"You find hereby the paired phones list:<br/>If you would like to connect a new phone to your Livebox, please click on the « Pair » button.<br/>If you would like to disconnect a phone from your Livebox, please click on « Unpair » link. This change will be applied when your handset will be rebooted next time. ",
				"tabletitle":"paired phones",
				"phoneid":"Phone n°",
				"phonename":"Phone name",
				"edit":"modify",
				"unpair":"unpair",
				"pairnewphone":"Pair new phone",
				"inprogress":"Pairing in progress",
				"error":
				{
					"title":"Error : no new phone can be connected",
					"msg":"No handset was paired, please try again,  by making sure that the handset is in pairing mode and enter correct PIN on handset"
				}
			}
		},
		"phonesettings":
		{
			"label":
			{
				"help":"Your High Definition phone base parameters are displayed on the page. Some of them can be modfied. In case of reset, the default factory settings will be applied.<br/>Note : PIN code will be reset to “0000” and call logs will be erased. ",
				"title":"phone settings",
				"subtitle":"You can find the following parameters for your High Definition phone integrated base of your Livebox",
				"pincodesection":"PIN code modification",
				"pincodedesc":"The current Code Pin is the following. If you want to modify it, please enter a new value and then click on \"modify\" button.",
				"pincode":"PIN code :",
				"pinerror":
				{
					"title":"Not correct",
					"msg":"please enter 4 digital numbers (0~9)."
				},
				"pinwarning":
				{
					"title":"Warning :",
					"msg":"You have modified the PIN code, this new value should be used when you pair a new phone in the future."
				},
				"reset":
				{
					"title":"High Definition phone integrated base reset",
					"desc":"By clicking on this button, you can reset the High Definition phone base of your Livebox. The default factory settings will be applied.<br/>Note : PIN code will be reset to “0000” and call logs will be erased.",
					"btn":"reset"
				},
				"catiq":
				{
					"title":"Cat-iq profile and firmware version of the integrated base",
					"value":"Cat-iq :"
				},
				"firmware":
				{
					"title":"Firmware version :"
				},
				"rfpi":
				{
					"title":"RFPI"
				}
			}
		}
	},
	"servicesaccounts":
	{
		"label":
		{
			"title":"My telephone and TV services accounts management",
			"subtitle":"You can acceed to the online service by clicking on the following links, in order to manage your telephone and TV account. ",
			"voiplink":"Access to telephone web site",
			"tvlink":"Access to Digital TV website",
			"help":"The links enable you to acceed to your services accounts. "
		}
	},
	"gnu":
	{
		"gpl":
		{
			"label":
			{
				"title":"GNU General Public License (GNU GPL)"
			},
			"licence":"GNU GENERAL PUBLIC LICENSE<br/>Table of Contents<br/>GNU GENERAL PUBLIC LICENSE <br/>Preamble <br/>TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION <br/>How to Apply These Terms to Your New Programs<br/><br/>GNU GENERAL PUBLIC LICENSE<br/>Version 2, June 1991 <br/><br/>Copyright (C) 1989, 1991 Free Software Foundation, Inc.  <br/>51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA<br/><br/>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.<br/>Preamble<br/>The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.) You can apply it to your programs, too. <br/>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things. <br/>To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it. <br/>For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. <br/>We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software. <br/>Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations. <br/>Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all. <br/>The precise terms and conditions for copying, distribution and modification follow. <br/>TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION<br/><br/>0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\". <br/>Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does. <br/><br/>1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program. <br/>You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee. <br/><br/>2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions: <br/>a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. <br/>b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. <br/>c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) <br/>These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. <br/>Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program. <br/>In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License. <br/><br/>3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following: <br/>a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, <br/>b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, <br/>c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) <br/>The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable. <br/>If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code. <br/><br/>4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance. <br/><br/>5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it. <br/><br/>6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License. <br/><br/>7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program. <br/>If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances. <br/>It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice. <br/>This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License. <br/><br/>8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License. <br/><br/>9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. <br/>Each version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation. <br/><br/>10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally. <br/><br/>NO WARRANTY<br/>11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. <br/><br/>12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. <br/>END OF TERMS AND CONDITIONS<br/>How to Apply These Terms to Your New Programs<br/>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. <br/>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <br/><br/>one line to give the program's name and an idea of what it does. <br/>Copyright (C) yyyy  name of author <br/><br/>This program is free software; you can redistribute it and/or<br/>modify it under the terms of the GNU General Public License<br/>as published by the Free Software Foundation; either version 2<br/>of the License, or (at your option) any later version.<br/><br/>This program is distributed in the hope that it will be useful,<br/>but WITHOUT ANY WARRANTY; without evn the implied warranty of<br/>MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br/>GNU General Public License for more details.<br/><br/>You should have received a copy of the GNU General Public License<br/>along with this program; if not, write to the Free Software<br/>Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.<br/>Also add information on how to contact you by electronic and paper mail. <br/>If the program is interactive, make it output a short notice like this when it starts in an interactive mode: <br/><br/>Gnomovision version 69, Copyright (C) year name of author <br/>Gnomovision comes with ABSOLUTELY NO WARRANTY; for details<br/>type `show w'.  This is free software, and you are welcome<br/>to redistribute it under certain conditions; type `show c' <br/>for details.<br/>The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than `show w' and `show c'; they could even be mouse-clicks or menu items--whatever suits your program. <br/>You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. Here is a sample; alter the names: <br/><br/>Yoyodyne, Inc., hereby disclaims all copyright<br/>interest in the program `Gnomovision'<br/>(which makes passes at compilers) written <br/>by James Hacker.<br/><br/>signature of Ty Coon, 1 April 1989<br/>Ty Coon, President of Vice<br/>This General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License."
		}
	},
	"freeapplications":
	{
		"label":
		{
			"help":"You will be redirected to the site layout and installation free of Orange's applications. You will be guided throughout your choices.",
			"title":"free applications",
			"content":"Orange offers a selection of free apps to simplify your Internet use and secure browsing.",
			"url":"Download Assistance Livebox"
		},
		"link":
		{
			"more":"Access the website",
			"moreurl":
			{
				"fr":"http://assistance.orange.fr/more.php"
			}
		}
	},
	"mapper":
	{
		"label":
		{
			"help":"You can discover your local domestic network in the Support column.",
			"title":"detailed view of your local network",
			"subtitle":"You can launch a discovery process of your local network and get the detailed view of your network with detailed information on the connections.<br/><br/>To launch the discovery process, you should click on the \"launch\" button.It will kake more than 30 seconds",
			"inprogress":"discovery in progress…"
		},
		"search":
		{
			"failure":
			{
				"label":"error",
				"description":"the discovery has failed"
			}
		}
	},
	"mapperresult":
	{
		"label":
		{
			"help":"You can discover your local domestic network in the Support column.",
			"title":"detailed view of your network",
			"subtitle":"You can send this information to the technical support. If you want to send the information, please accept the following information. <br/>According with the law \"informatique et libertés\" modified on January 6th 1978, you have a right to object and the right to access and rectify data concerning you. You can exercise this right from your Orange agency.Do you agree to allow Orange to collect this information?",
			"refreshtime":"updated ",
			"checkbox":"allow to send",
			"agreementwarning":"You should accept the usage condition",
			"sending":"sending...",
			"sendingsuccess":"success",
			"seeagain":"You can review the previous detailed network view; to do that, click on \"review\" button.",
			"yourdevice":"your device",
			"details":"details",
			"ip":"IP address",
			"mac":"MAC address",
			"status":
			{
				"ok":"connected to the Livebox 3",
				"ko":"detected problem",
				"warning":"TO BE DEFINED"
			}
		},
		"send":
		{
			"failure":
			{
				"label":"error",
				"host":
				{
					"description":"Remote http host is not reachable or available"
				},
				"connectivity":
				{
					"description":"No WAN IP connectivity"
				}
			}
		},
		"connectiontype":
		{
			"ethernet":"Ethernet",
			"wifi":"WiFi",
			"usb":"USB",
			"liveplug":"LivePlug",
			"unknown":"Unknown connection type"
		},
		"item":
		{
			"livebox":"Livebox 3"
		}
	},
	"ssh":
	{
		"label":
		{
			"help":"You can discover your domestic local network in the Support column.",
			"title":"SSH access secured by PKI dongle",
			"subtitle":"Please enter your PIN code",
			"info":
			{
				"connected":"SSH server activated"
			},
			"error":
			{
				"badpincode":"Bad PIN code",
				"badpki":"Invalid PKI key",
				"pkilocked":"PKI key locked"
			}
		}
	},
	"datarate":
	{
		"label":
		{
			"help":"The data rate provided is calculated according  to the synchronization rate of your xDSL access.<br/>The value of the data rate provided by your Livebox may be slightly different from that provided by other means such as Speedtest tools.",
			"title":"my data rate",
			"subtitle":"Here are useful data rate for your ADSL or VDSL Internet access.",
			"date":"date",
			"uploadrate":"upload data rate",
			"downloadrate":"download data rate"
		},
		"link":
		{
			"more":"more information"
		}
	},
        "localfirmwareupgrade":
        {    "label":
                { "title":"Firmware upgrade",
                  "subtitle":"In order to upgrade the Livebox firmware, please select a file from the USB dongle or the local device connected to your Livebox and click on the button validate. ",
                  "usbkeyfile":"USB key file",
                  "pcfile":"Local file"
                }

         }


};


AllTranslations['fr'] =
{
		"general":
	{
		"label":
		{
			"password":"mot de passe",
			"login":"identifiant",
			"internet":"Internet",
			"phone":"téléphonie",
			"tv":"TV",
			"info":"info",
			"wifienable":"activé",
			"wifidisable":"désactivé",
			"available":"disponible",
			"unavailable":"indisponible",
			"nonsubscribe":"statut non reconnu",
			"unmanaged":"inconnu",
			"help":"aide",
			"news":"information",
			"destroy":"supprimer",
			"enable":"activer",
			"disable":"désactiver",
			"enabled":"activé",
			"disabled":"désactivé",
			"inprogress":"en cours",
			"nodevices":"aucun appareil connecté",
			"logout":"déconnexion",
			"forgottenpassword":"Mot de passe oublié",
			"forgottenpasswordpopup": {
				"title":"Réinitialiser le mot de passe",
				"message":"Pour confirmer la réinitialisation du mot de passe, saisissez le code PIN à 4 chiffres qui s'affiche actuellement sur l'écran en façade de votre Livebox.",
				"errormessage":"Le code PIN saisi est erroné. Vérifiez le code affiché sur l'écran en façade de votre Livebox.<br>A noter : ce code PIN change au bout de trois erreurs.",
				"cancelbutton":"annuler",
				"validatebutton":"réinitialiser",
				"doneTitle":"Mot de passe réinitialisé",
				"doneMessage":"Le mot de passe a été réinitialisé : il correspond aux 8 premiers caractères de la clé de sécurité WiFi imprimée sur l'étiquette de la Livebox.",
				"doneCloseButton":"fermer",
			},
			"usbphone":"livephone",
			"wifi":"WiFi",
			"yes":"oui",
			"no":"non",
			"port":"port",
			"ip":"adresse ip",
			"url":"url",
			"filename":"nom du fichier:",
			"legalinfo":"informations légales",
			"days":
			{
				"day":"jour",
				"monday":"lundi",
				"tuesday":"mardi",
				"wednesday":"mercredi",
				"thursday":"jeudi",
				"friday":"vendredi",
				"saturday":"samedi",
				"sunday":"dimanche"
			},
			"months":
			{
				"january":"janvier",
				"february":"février",
				"march":"mars",
				"april":"avril",
				"may":"mai",
				"june":"juin",
				"july":"juillet",
				"august":"ao&ucirc;t",
				"september":"septembre",
				"october":"octobre",
				"november":"novembre",
				"december":"décembre"
			},
			"vmenu":
			{
				"home":
				{
					"title":"mon réseau"
				},
				"config":
				{
					"title":"mon WiFi",
					"wifi":"paramètres WiFi",
					"wificom":"WiFi Partagé",
					"advancedwifi":"WiFi Avancé",
					"wireless":"réseau sans fil",
					"devices":"mes appareils"
				},
				"connecteddevices":
				{
					"title":"équipements connectés"
				},
				"notconnecteddevices":
				{
					"title":"équipements non connectés"
				},
				"freeapplications":
				{
					"title":"applications gratuites"
				},
				"datarate":
				{
					"title":"mon débit"
				},
				"files":
				{
					"title":"mes fichiers"
				},
				"support":
				{
					"title":"assistance",
					"assistancelivebox":"ma Livebox",
					"backup":"sauvegarder ma configuration",
					"livebox":"Livebox",
					"hotline":"assistance avancée &<br/> support client",
					"reset":"ré-initialiser",
					"restart":"redémarrer",
					"restore":"restaurer ma configuration",
					"systeminformation":"informations système",
					"servicesaccounts":"gestion des comptes services",
					"topology":"vue détaillée du réseau local",
					"mapperresult":"résultat"
				},
				"advconfig":
				{
					"title":"configuration avancée",
					"firewall":"configuration pare-feu",
					"ipv6":"Internet IPv6",
					"network":"configuration réseau",
					"routing":"configuration routage",
					"phonelineconfig":"configuration de la ligne téléphonique"
				},
				"ipphone":
				{
					"title":"mon téléphone",
					"title#lb28":"mon téléphone"
				},
				"phonebook":
				{
					"title":"accéder aux contacts"
				},
				"testphones":
				{
					"title":"tester votre téléphone"
				},
				"pairphones":
				{
					"title":"associer vos combinés"
				},
				"phonessettings":
				{
					"title":"paramétrer votre téléphone"
				}
			},
			"phonenumber":
			{
				"prefix":"N°"
			},
			"ipaddress":"Adresse IP"
		},
		"link":
		{
			"definitions":"&gt; définitions",
			"legalinfo":"informations légales"
		},
		"btn":
		{
			"authenticate":"s'identifier",
			"backup":"sauvegarder",
			"restore":"restaurer",
			"browse":"parcourir",
			"reset":"remise à zéro",
			"files":"accéder à mes fichiers",
			"eject":"éjecter",
			"about":"A propos",
			"refresh":"rafraîchir",
			"enable":"activer",
			"disable":"désactiver",
			"cancel":"annuler",
			"save":"enregistrer",
			"restart":"redémarrer",
			"relaunch":"relancer",
			"startagain":"redémarrer",
			"test":"tester",
			"findnewestversion":"rechercher une version plus récente",
			"back":"retour",
			"customize":"personnaliser",
			"stop":"arrêter",
			"start":"démarrer",
			"interfaceaccess":
			{
				"fr":"accéder à orange.fr",
				"pl":"",
				"mini_fr":"accéder à orange.fr"
			},
			"interfaceaccessurl":
			{
				"fr":"http://www.orange.fr",
				"pl":"",
				"mini_fr":"http://www.orange.fr"
			},
			"extend":"prolonger",
			"update":"actualiser",
			"reinit":"relancer",
			"scan":"scanner",
			"add":"ajouter",
			"ok":"ok",
			"yes":"oui",
			"no":"non",
			"valid":"valider",
			"generate":"générer",
			"push":"connecter",
			"modify":"modifier",
			"search":"rechercher",
			"edit":"éditer",
			"continue":"continuer",
			"initagain":"recommencer",
			"launch":"lancer",
			"send":"envoyer",
			"retry":"ré-essayer",
			"seeagain":"revoir",
			"reconnect":"relancer la connexion"
		},
		"country":
		{
			"france":"France",
			"belgium":"Belgique",
			"spain":"Espagne",
			"unitedkingdom":"Royaume-Uni",
			"netherland":"Pays-Bas",
			"poland":"Pologne"
		},
		"device":
		{
			"Device1":"appareil 1",
			"Device2":"appareil 2",
			"Device3":"appareil 3",
			"Device4":"appareil 4",
			"Device5":"appareil 5",
			"Device6":"appareil 6",
			"Device7":"appareil 7",
			"Device8":"appareil 8",
			"Device9":"appareil 9"
		},
		"ipphone":
		{
			"numbertype":
			{
				"home":"Maison",
				"mobile":"Portable",
				"office":"Bureau"
			}
		}
	},
	"setup":
	{
		"accesstype":
		{
			"label":
			{
				"title":"La connexion à Internet",
				"subtitle":"Vous vous connectez pour la première fois à votre Livebox ou vous venez d'effectuer une remise à zéro de celle-ci?<br/>cette page va vous permettre de configurer votre Livebox et d'avoir accès à Internet.",
                "subtitleprefix":"Votre Livebox est connectée au réseau Orange et vos services sont prêts à être activés.<br/><br/>",
                "choice2":"<u>Pour activez vos services</u><br/><b>•Saisissez ci-dessous votre identifiant et votre mot de passe de connexion Internet, cliquez sur le bouton «Enregistrer ».</b><br>•Vos identifiant et mot de passe de connexion se trouvent dans le courrier de bienvenue reçu lors de la souscription à votre offre Internet Orange.",
                "subtitle_withoutpnp":"Votre Livebox est connectée au réseau Orange, vous pouvez maintenant activer vos services en saisissant ci-dessous votre identifiant et votre mot de passe de connexion Internet.",
				"restore":
				{
					"linklabel":"Si vous disposez d'un fichier de sauvegarde de votre Livebox vous pouvez ",
					"link":"restaurer la configuration"
				},
				"adslparams":"paramètres ADSL :",
				"vpvcsection":"paramètres VP / VC :",
				"wanparams":"paramètres WAN :",
				"vlansection":"paramètres VLAN :",
				"offer":"veuillez sélectionner l'offre à laquelle vous avez souscrit:",
				"howtoinstall":"veuillez saisir votre identifiant et votre mot de passe de connexion.",
				"section":
				{
					"country":"veuillez sélectionner votre pays:"
				},
				"country":"pays",
				"countries":
				{
					"option":
					{
						"select":"Selectionnez",
						"luxembourg":"Luxembourg",
						"ivorycoast":"Côte d'Ivoire",
						"republicofmauritius":"Ile Maurice",
						"senegal":"Sénégal",
						"other":"Autre"
					}
				},
				"mode":"sélectionnez votre mode de connexion:",
				"pppmode":
				{
					"option":
					{
						"pppoe":"PPPoE",
						"pppoevcmux":"PPPoE avec encapsulation (VCMUX)",
						"pppoellc":"PPPoE avec encapsulation (LLC)",
						"pppoa":"PPPoA",
						"pppoavcmux":"PPPoA avec encapsulation (VCMUX)",
						"pppoallc":"PPPoA avec encapsulation (LLC)",
						"pppoewe":"PPPoE avec encapsulation"
					}
				},
				"login":"identifiant<br/> de connexion",
				"password":"mot de passe <br/>de connexion",
				"warning":
				{
					"fr":"votre identifiant et votre mot de passe de connexion sont disponibles dans votre lettre de confirmation d'abonnement",
					"pl":"",
					"mini_fr":"votre identifiant et votre mot de passe de connexion sont disponibles dans votre lettre de confirmation d'abonnement"
				},
				"broswerswarning":"Vous pourrez utiliser cette interface utilisateur de la Livebox avec les navigateurs ci-dessous et leurs versions supérieures. Veuillez vous assurer que l'équipement qui utilise cette interface supporte l'un d'entre eux. - Internet Explorer : la version IE8 - Mozilla Firefox : la version 3.5  - Chrome : la version 6.0  - Safari : la version 4.0 - Opera : la version 10.00 "
			},
			"mode":
			{
				"radiobutton":
				{
					"ppp":"PPP",
					"dhcp":"DHCP"
				}
			},
			"offer":
			{
				"radiobutton":
				{
					"adsl":"ADSL",
					"fiber":"La fibre",
					"dhcp":"DHCP",
					"ppp":"PPP"
				}
			},
			"error":
			{
				"empty":
				{
					"label":"saisie incorrecte",
					"description":"vérifiez que vous avez correctement saisi votre identifiant et votre mot de passe de connexion."
				},
				"running":
				{
					"label":"authentification",
					"description":"authentification en cours"
				},
				"adsl_link":
				{
					"label":"problème de connexion ADSL",
					"description":"la détection de la ligne ADSL a échoué. il est possible que votre ligne ADSL ne soit pas encore active et cela peut prendre jusqu'à 15 jours après la signature du contrat."
				},
				"ftth_link":
				{
					"label":"problème de connexion fibre",
					"description":"la détection de la ligne fibre a échoué."
				},
				"ppp_server":
				{
					"label":"erreur PPP",
					"description":"échec de connexion au serveur PPP"
				},
				"authentication":
				{
					"label":"identifiant et/ou mot de passe de connexion incorrect",
					"description":"veuillez les vérifier et les saisir à de nouveau"
				},
				"ppp_timeout":
				{
					"label":"erreur PPP",
					"description":"pas de réponse du serveur PPP"
				},
				"profile":
				{
					"label":"Aucun pays sélectionné",
					"description":"Veuillez choisir un pays dans la liste"
				}
			}
		},
		"unlockaccess":
		{
			"label":
			{
				"title":"Déverrouillage de la Livebox",
				"subtitle":"Veuillez saisir la clé fournie afin de dévérouiller la Livebox",
				"key":"Clé"
			},
			"empty":
			{
				"label":"",
				"description":""
			},
			"error":
			{
				"invalid":
				{
					"label":"Erreur",
					"description":"La clé saisie est invalide"
				}
			}
		},
		"accessconfirmation":
		{
			"label":
			{
				"title":"Votre Livebox est connectée à Internet",
				"subtitle":"Orange vous propose maintenant une s&eacute;lection d'applications gratuites pour simplifier votre usage d'Internet et sécuriser votre navigation.",
				"webgui":"Accédez à l'interface de configuration de votre Livebox en saisissant «http://livebox» dans la barre d'adresse de votre navigateur.",
				"welcome":"Bienvenue",
				"install_ok":"Vous avez terminé l'installation de votre Livebox.<br/>Nous vous proposons maintenant de découvrir une sélection de logiciels gratuits pour simplifier votre usage d'Internet et sécuriser votre navigation.",
				"badname1":"Vous n'êtes pas",
				"badname2":"Cliquer ici",
				"inprogress":"Connexion en cours.<br/><br/>Veuillez patienter…"
			}
		},
		"configerror":
		{
			"label":
			{
				"title":"Détection d'accès impossible",
				"subtitle":"V&eacute;rifiez vos branchements :<br/><br/>- Si vous disposez d'un accès de type ADSL.<br/>Une extrémité du câble ADSL doit être branchée sur la prise xDSL de la Livebox, l'autre extrémité doit être branchée sur le filtre xDSL. Le filtre doit être correctement enfiché dans votre prise téléphonique.<br/><br/>- Si vous disposez d'un accès de type Fibre.<br/>Une extrémité du câble Ethernet doit être branchée à la prise blanche de la Livebox, l'autre extrémité doit être branchée au boitier Fibre Optique. Le boitier Fibre Optique doit être alimenté électriquement.<br/><br/><br/>Vos branchements sont corrects et le message d'erreur persiste?<br/>Il est possible que votre ligne ADSL ou Fibre ne soit pas encore activée, veuillez ré-essayer l'installation ultérieurement.",
				"subtitle#lb28":"V&eacute;rifiez vos branchements :<br/><br/>- Si vous disposez d'un accès de type ADSL.<br/>Une extrémité du câble ADSL doit être branchée sur la prise xDSL de la Livebox, l'autre extrémité doit être branchée sur le filtre xDSL. Le filtre doit être correctement enfiché dans votre prise téléphonique.<br/><br/>- Si vous disposez d'un accès de type Fibre.<br/>Une extrémité du câble Ethernet doit être branchée à la prise rouge de la Livebox, l'autre extrémité doit être branchée au boitier Fibre Optique. Le boitier Fibre Optique doit être alimenté électriquement.<br/><br/><br/>Vos branchements sont corrects et le message d'erreur persiste?<br/>Il est possible que votre ligne ADSL ou Fibre ne soit pas encore activée, veuillez ré-essayer l'installation ultérieurement."
			}
		}
	},
	"home":
	{  
		"label":
		{
			"help":"Pour retirer votre périphérique USB en toute sécurité, Veuillez cliquer sur le bouton éjecter.Vous pourrez utiliser cette interface utilisateur de la Livebox avec les navigateurs ci-dessous et leurs versions supérieures. Veuillez vous assurer que l'équipement qui utilise cette interface supporte l'un d'entre eux. - Internet Explorer : la version IE8 - Mozilla Firefox : la version 3.5  - Chrome : la version 6.0  - Safari : la version 4.0 - Opera : la version 10.00 ",
			"title":"équipements connectés à la Livebox",
			"subtitle":"Vous trouverez ci-dessous les équipements connectés actuellement à votre Livebox. Vous pouvez paramétrer la connexion d'un appareil ou renommer l'équipement en cliquant sur son icône.",
			"refresh":"Pour actualiser l'affichage de vos<br/>appareils connectés, cliquez sur rafraichir",
			"services":"services",
			"wired":"réseau local filaire",
			"wireless":"réseau sans fil",
			"usb":"USB",
			"dect":"Téléphone Haute Définition",
			"stb":"Décodeur TV",
			"stbshort":"Décodeur...",
			"officepc":"PC de bureau",
			"officepcshort":"PC... ",
			"nas":"Serveur NAS",
			"harddrive":"Disque Dur",
			"harddriveshort":"Disque Dur",
			"printer":"Imprimante",
			"printershort":"Imprimante",
			"usbdongle":"Clé USB Bilan Conso Expert",
			"usbdongleshort":"Clé USB Bilan…",
			"game":"Console de jeu",
			"gameshort":"Console... ",
			"tablet":"Tablette",
			"computer":"Ordinateur",
			"laptop":"Ordinateur portable",
			"laptopshort":"Ordinateur... ",
			"notebook":"Notebook",
			"notebookshort":"Notebook",
			"massstorage":"Stockage",
			"homelibrary":"Home Library",
			"homelibraryshort":"Home Library",
			"smartphone":"Smartphone",
			"tv":"TV",
			"pc":"PC",
			"liveradio":"Liveradio",
			"liveradioshort":"Liveradio",
			"dectphone":"Téléphone",
			"liveplugwifi":"Liveplug Wi-Fi",
			"liveplugwifishort":"Liveplug…",
			"squeezebox":"Squeezebox",
			"squeezeboxshort":"Squeezebox",
			"sensorhome":"Détecteur de fumée",
			"sensorhomeshort":"Détecteur",
			"model":"Modèle",
			"lastupdate":"Mise à jour",
			"devices":
			{
				"massstorage":
				{
					"title":"périphérique de stockage USB",
					"ejected":"Vous pouvez retirer votre périphérique de stockage USB en toute sécurité.",
					"busy":"Votre périphérique de stockage USB est en cours d'utilisation, veuillez réessayez ultérieurement.",
					"unsupported":"Votre périphérique de stockage USB n'est pas reconnu par la Livebox.",
					"invalid":"Le format de votre périphérique de stockage USB n'est pas supporté par la Livebox. La Livebox supporte uniquement les formats FAT, FAT32, NTFS, Ext2, Ext3, HFS et HFS+"
				}
			}
		},
"passwordhelp":
		{
			"label1":"Le mot de passe d’administration de la Livebox est initialisé avec les 8 premiers caractères de la <a href='blank.html' onclick='showPopup(); return false;'>clé de sécurité</a> par défaut, si vous ne l'avez pas déjà personnalisé.",
			"label2":"Attention ! Votre mot de passe d’administration de la Livebox est maintenant constitué des 8 premiers caractères de la <a href='blank.html' onclick='pwdpopup(); return false;'>clé de sécurité WiFi</a> par défaut de votre Livebox."
		},
		"passwordpopup":
		{
			"label":"Par défaut, votre mot de passe est constitué des 8 premiers caractères de la clé de sécurité WiFi mentionnée sur l'étiquette placée au dos de votre Livebox.<br/><br/><p style=\"text-align: center;\"><img src=\"images/fr/common/security-key-lb3.png\" /></p>"},
		"didyouknow":
		{
			"label":"le saviez-vous ?",
			"description":
			{
				"first":"Vous pouvez accéder à vos contenus stockés sur une clef USB ou un disque dur externe branché à la Livebox et les partager depuis tout ordinateur de votre réseau.",
				"first#lb28":"Vous pouvez accéder à vos contenus stockés sur une clef USB ou un disque dur externe branché à la Livebox et les partager depuis tout ordinateur de votre réseau.",
				"second":"Vous pouvez partager une imprimante USB entre les différents ordinateurs de la maison pour imprimer un document ou une photo depuis n'importe où.",
				"second#lb28":"Vous pouvez partager une imprimante USB entre les différents ordinateurs de la maison pour imprimer un document ou une photo depuis n'importe où.",
				"third":"Vous pouvez brancher plusieurs ordinateurs ou consoles de jeux en filaire sur votre Livebox (ports ethernet en face arrière).",
				"third#lb28":"Vous pouvez brancher plusieurs ordinateurs ou consoles de jeux en filaire sur votre Livebox (ports ethernet en face arrière).",
				"fourth":"Vous pouvez autoriser l'accès à Internet selon les jours et plages horaires de votre choix sur n'importe quel ordinateur connecté à la Livebox. Pratique si vous ne souhaitez pas que vos enfants accèdent à Internet tard le soir.",
				"fourth#lb28":"Vous pouvez autoriser l'accès à Internet selon les jours et plages horaires de votre choix sur n'importe quel ordinateur connecté à la Livebox. Pratique si vous ne souhaitez pas que vos enfants accèdent à Internet tard le soir.",
				"fiveth":"Si vous &eacute;teignez votre Livebox &agrave; partir du bouton marche/arr&ecirc;t qui se trouve sur la face gauche de la Livebox, vous n'aurez plus accès à vos services.",
				"fiveth#lb28":"Vous pouvez définir les jours et plages horaires d'activation du WiFi de votre Livebox à partir de l'interface de configuration de la Livebox.",
				"sixth":"Vous pouvez définir les jours et plages horaires d'activation du WiFi de votre Livebox à partir de l'interface de configuration de la Livebox.",
				"seventh":"Pour le partage (mode DLNA) des contenus multimedia de votre périphérique de stockage, votre Livebox supporte jusqu'à 5000 fichiers.",
				"seventh#lb28":"Votre Livebox vous permet de partager des contenus multimedia stockés dans votre périphérique de stockage sur d'autres équipements (mode DLNA).",
				"eighth":"Connaissez-vous l’application <b>ma&nbsp;Livebox</b> disponible pour smartphones* et tablettes* ?<br/><br/>Cette application vous permet de configurer votre Livebox, ainsi que de diagnostiquer et de dépanner en toute autonomie vos services Orange.<br/><br/>Vous pouvez télécharger <b>ma&nbsp;Livebox</b> :<br/>- sur <a href=\"https://itunes.apple.com/fr/app/ma-livebox/id445573616?mt=8\">l'App Store</a>, pour iPhone, iPod, et iPad<br/>- sur <a href=\"https://play.google.com/store/apps/details?id=com.orange.mylivebox.fr&hl=fr\">Google Play</a>, pour les smartphones et tablettes Android<br/><br/>Vous pouvez installer l'application <b>ma&nbsp;Livebox</b> en flashant directement depuis votre smartphone ou votre tablette le code ci-après :<br/><p style=\"text-align: center;\"><img src=\"images/fr/support/malivebox-flashcode.png\" /></p>Pas de lecteur pour lire ce code ?<br/>Tapez tc3.fr sur votre mobile !<br/><br/>(*) : liste des équipements compatibles.<br/>- Pour les smartphones :<br/>• iPhone : 3GS, 4, 4S, 5, et iPod touch (3e, 4e et 5e génération) sous iOS 4.3 ou supérieur<br/> • Android : OS 1.6 ou supérieur<br/>- Pour les tablettes :<br/>• iPad : I iOS 4.3 ou supérieur<br/>• Android : OS 1.6 ou supérieur<br/>"
			}
		},
		"usb":
		{
			"access":
			{
				"comment":"Copiez le chemin d'accès ci-dessous dans la barre d'adresse de votre fenêtre d'exploration pour accéder à vos fichiers."
			}
		},
		"devicescustomize":
		{
			"label":
			{
				"help":"Cette page vous permet de renommer vos équipements afin de les identifier plus facilement sur votre réseau.",
				"title":"personnalisez votre équipement",
				"subtitle":"Vous pouvez renommer votre équipement et son type.",
				"type":
				{
					"title":"définissez le type d'équipement",
					"computer":"Ordinateur",
					"laptop":"Ordinateur portable",
					"notebook":"Notebook",
					"game":"Console de jeu",
					"mobile":"Smartphone",
					"tv":"TV",
					"liveradio":"LiveRadio",
					"stb":"Décodeur TV",
					"massstorage":"Périphérique de stockage",
					"printer":"Imprimante",
					"tablet":"Tablette",
					"dectphone":"Téléphone",
					"homelibrary":"Home Library",
					"liveplugwifi":"liveplugwifi",
					"squeezebox":"squeezebox",
					"sensorhome":"sensorhome",
					"dongle":"Dongle Smart home",
					"ipcamera":"Caméra IP",
					"ampliAV":"Ampli A/V",
					"femtocell":"Femtocell",
					"homelive":"Homelive",
					"homepoint":"Homepoint",
					"leblocorange":"Le Bloc",
					"TVdongle":"TV dongle"

				},
				"name":
				{
					"title":"nommez votre appareil",
					"info":"Le nom de votre équipement ne doit pas dépasser 64 caractères.",
					"error":
					{
						"length":"le champ est limité à 64 caractères.",
						"empty":"le champ ne doit pas être vide.",
						"notavailable":"ce nom est déjà utilisé, merci d'en saisir un autre."
					}
				}
			},
			"catiq":
			{
				"label":
				{
					"name":
					{
						"info":"le nom de votre équipement ne doit pas dépasser 16 caractères.",
						"error":
						{
							"length":"le champ est limité à 16 caractères."
						}
					}
				}
			}
		},
		"authentication":
		{
			"label":
			{
				"title":"Identifiez vous pour continuer",
				"subtitle":"Veuillez saisir votre mot de passe<br/>d'administration de la Livebox (en haut de la page)",
				"login":"identifiant",
				"password":"mot de passe"
			},
			"info":
			{
				"comment":"Par défaut votre identifiant est \"admin\" et votre mot de passe est \"admin\""
			},
			"error":
			{
				"empty":"login ou mot de passe vide",
				"invalid":"login ou mot de passe invalide"
			}
		}
	},
	"notconnecteddevices":
	{
		"label":
		{
			"title":"équipements non connectés à la Livebox",
			"subtitle":"Vous trouvez ci-dessous les équipements qui ont déjà été connectés au moins une fois sur votre Livebox, mais <u>qui n'y sont pas connectés actuellement</u>.",
			"help":"Cette page présente les équipements qui ont déjà été connectés à la Livebox au moins une fois lors des trois derniers mois, mais qui ne le sont pas actuellement. Les équipements qui n'ont pas été connectés lors des 3 derniers mois sont supprimés automatiquement de cette table.",
			"deletedevice":"supprimer l'équipement",
			"table":
			{
				"title":"équipements non connectés",
				"header":
				{
					"wired":"Connexion par câble",
					"wireless":"Connexion par WiFi",
					"dect":"Téléphones Haute Définition",
					"usb":"Connexion par USB"
				}
			}
		}
	},
	"config":
	{
		"wifi":
		{
			"general":
			{
				"label":
				{
					"title":"WiFi",
					"subtitle":"Vous pouvez configurer l'accès au WiFi",
					"ssid":"nom du réseau WiFi (SSID)",
					"securitykeydisplay":"afficher la clé de sécurité sur l'écran de la Livebox",
					"status":"état de la connexion WiFi"
				},
				"link":
				{
					"ssid":"modifier",
					"wifischeduling":"définir les plages d'activation du WiFi"
				},
				"text":
				{
					"help":"<h6>Activer/désactiver le WiFi</h6>Si votre réseau n'est muni d'aucun appareil sans fil, il est conseillé de désactiver le WiFi<br/><br/><h6>Nom du réseau WiFi (SSID)</h6>Vous pouvez modifier le nom du réseau WiFi de votre Livebox pour le personnaliser<br/><br/><h6>Définir les plages d'activation de mon WiFi</h6>Par défaut, votre WiFi est activé en permanence (7j/7j et 24h/24h), vous pouvez définir des jours et plages horaires d'activation de votre WiFi en cliquant sur \"définir les plages d'activation du WiFi\""
				},
				"network":
				{
					"title":"réseau",
					"wifi24ghz":"WiFi 2,4 GHz",
					"wifi5ghz":"WiFi 5 GHz",
					"inwifi24ghz":"en WiFi 2,4 GHz",
					"inwifi5ghz":"en WiFi 5 GHz",
					"bandsactivated":"type de WiFi activé",
					"only24activated":"WiFi 2,4 GHz",
					"bothbandsactivated":"WiFi 2,4 GHz et WiFi 5 GHz",
					"modify":"modifier la configuration du WiFi"
				},
				"definition":
				{
					"ssid":
					{
						"title":"SSID",
						"description":"le SSID correspond au nom du réseau WiFi de votre Livebox"
					},
					"canal":
					{
						"title":"CANAL",
						"description":"le WiFi utilise une bande de fréquences specifiques…"
					},
					"security":
					{
						"title":"CLE DE SECURITE",
						"description":"La clé de sécurité permet de sécuriser votre réseau…"
					}
				},
				"info":
				{
					"wificom":"Si vous désactivez le WiFi sur la Livebox, le mode WiFi partagé sera aussi désactivé. Voulez vous continuer?"
				}
			},
			"ssid":
			{
				"label":
				{
					"title":"modifier le nom du réseau WiFi",
					"subtitle":"Vous pouvez modifier le nom du réseau WiFi (SSID) de votre Livebox pour le personnaliser.",
					"description":"Veuillez saisir le nouveau nom du réseau WiFi de votre Livebox dans le champ ci-dessous:",
					"error":
					{
						"invalid":"le SSID est invalide",
						"length":"le SSID est trop long",
						"orange":"Impossible d'utiliser le SSID « orange » car il est déjà utilisé pour le WiFi partagé",
						"orangeprefix":"Impossible d'utiliser le SSID  '",
						"orangesuffix":"'  car il est déjà utilisé pour le WiFi partagé."
					},
					"warning":"Attention: Tous vos équipements connectés en WiFi sur votre Livebox vont perdre leur connexion Internet."
				},
				"info":
				{
					"comment":"Le nom du réseau WiFi ne doit pas dépasser 32 caractères."
				},
				"help":
				{
					"label":
					{
						"wificom":"Veuillez ne pas utiliser le nom \"orange\" car il est déjà utilisé par votre opérateur pour le service WiFi partagé."
					}
				}
			},
			"scheduling":
			{
				"label":
				{
					"title":"planificateur WiFi",
					"subtitle":"vous pouvez planifier l'activation du WiFi de la Livebox selon les jours et plages horaires de votre choix.",
					"enable":"Activer le WiFi en permanence",
					"greenbox":"Le WiFi est activé sur les plages horaires affichées en vert",
					"redbox":"Le WiFi est désactivé sur les plages horaires affichées en rouge",
					"alwaysenabled":"Activé en permanence"
				},
				"text":
				{
					"help":"<h6>Restreindre l'activation du WiFi</h6>Vous pouvez définir les plages horaires de fonctionnement du WiFi en les sélectionnant dans le tableau."
				}
			},
			"orange":
			{
				"label":
				{
					"title":"WiFi partagé",
					"subtitle":"",
					"ssid":"Noms des réseaux WiFi d’Orange (SSID)",
					"status":"Statut WiFi partagé",
					"wifienable":"WiFi partagé activé",
					"wifidisable":"WiFi partagé désactivé",
                                        "noteligible":"Non éligible",
                                        "wifierror":"Erreur",
                                        "wifioff":"Wi-Fi Off",
					"manage":"Gérer l'accès au service WiFi Partagé"
				},
				"info":
				{
					"comment":"Pour que votre Livebox puisse proposer le service WiFi Partagé, il faut activer le WiFi 2,4 GHz de votre Livebox."
				},
				"text":
				{
					"help":"<h5>Pourquoi activer le WiFi partagé?</h5>Le WiFi partagé est un service qui permet l’accès en illimité à Internet sur tout le réseau WiFi d'Orange. Lorsque le WiFi partagé est activé, la Livebox fait partie du réseau des hotspots WiFi d'Orange. La sécurité et le confort d'utilisation de vos services Internet à domicile restent identiques. La Livebox diffuse deux  réseaux WiFi « <b>orange</b> » et « <b>orange autoconnect</b> » permettant la connexion à Internet à des visiteurs. Le réseau «&nbsp;<b>orange autoconnect</b> » propose une connexion automatique à des visiteurs disposant de terminaux compatibles.<br/><br/><h5>Comment activer ou désactiver le WiFi partagé ?</h5>Cliquez sur le lien ci-dessus pour vous connecter à la rubrique «&nbsp;mes services » de votre espace client : orange.fr > espace client > mon compte Internet > mes services.<br/><br/><h5>Comment se connecter au WiFi d'Orange ?</h5>Pour vous connecter au WiFi d'Orange à partir de votre ordinateur portable, de votre tablette, de votre smartphone ou de n'importe quel équipement WiFi:<br/>1/ Sélectionnez le réseau WiFi dont le nom est <b>orange</b><br/>2/ Lancez votre navigateur Internet<br/>3/ identifiez-vous en utilisant simplement votre adresse de messagerie Orange habituelle et votre mot de passe associé (exemple:prénom.nom@orange.fr) dans la page de connexion du WiFi d'Orange."
				},
				"definition":
				{
					"example":
					{
						"title":"ORANGE WiFi",
						"description":"ceci est la definition"
					}
				}
			},
			"definitions":
			{
				"label":
				{
					"title":"définitions",
					"ssid":"SSID",
					"channel":
					{
						"title":"CANAL",
						"description":"le WiFi utilise une bande de fréquences spécifique qui est sous-divisée en canaux. Il y a 13 canaux disponibles."
					},
					"securitykey":"> CLE DE SECURITE < la clé de sécurité permet de sécuriser votre réseau WiFi. Par défaut, elle prend la valeur de la clé WEP indiiquée sur l'étiquette de la Livebox.<br/>La clé WEP est composée de 26 caractères héxadécimaux (chiffres de 0 à 9 et les lettres A, B, C, D, E et F) et est totalement confidentielle.",
					"securitymode":"> MODE DE SECURITE < afin d'empêcher toute personne de pénétrer dans votre réseau sans fil, les connexions WiFi sont cryptées via les protocoles WEP ou WPA. Seuls les terminaux ayant fourni la clé WEP ou WPA de votre Livebox peuvent accéder à votre réseau sans fil.",
					"macaddress":"> ADRESSE MAC < chaque périphérique possède une adresse physique qui lui est propre, appelée adresse MAC. Cette adresse est représentée par 12 chiffres héxadécimaux groupés par paires et séparés par des tirets ou des double-points."
				},
				"description":
				{
					"ssid":"le SSID correspond au nom du réseau WiFi de votre Livebox . il permet d'identifier votre réseau WiFi parmi les différents réseaux WiFi environnants. par défaut, il correspond au nom de votre Livebox et est indiqué sur l'étiquette."
				}
			}
		},
		"access":
		{
			"scheduling":
			{
				"label":
				{
					"menu":"restreindre l'accès à Internet",
					"title":"restriction d'accès à Internet",
					"subtitle":"En cliquant dans ce tableau, vous pouvez définir les plages horaires où vous ne souhaitez pas que cet équipement accède à Internet.",
					"selectmode":"Sélectionnez le mode de contrôle d'accès à Internet :",
					"enable":"Autoriser en permanence",
					"disable":"Bloquer en permanence",
					"schedule":"Planifier l'accès Internet",
					"alwaysenabled":"Autorisé en permanence",
					"alwaysdisabled":"Bloqué en permanence",
					"greenbox":"l'accès à Internet est autorisé sur les plages horaires affichées en vert",
					"redbox":"l'accès à Internet est restreint sur les plages horaires affichées en rouge"
				},
				"text":
				{
					"help":"Par défaut Internet est accessible en permanence (7j/7, 24h/24). Vous pouvez définir les plages de restriction d'accès à Internet sur tous vos appareils en sélectionnant les horaires dans le tableau ci-dessous."
				}
			}
		},
		"printer":
		{
			"label":
			{
				"title":"partager une imprimante",
				"subtitle":"la Livebox vous permet de partager une imprimante USB entre les différents ordinateurs de la maison."
			},
			"link":
			{
				"more":"&gt; en savoir plus",
				"moreurl":
				{
					"fr":"http://assistance.orange.fr/partager-imprimante-usb-avec-livebox-2-47.php",
					"pl":"",
					"pl#lb28":"",
					"mini_fr":"http://assistance.orange.fr/partager-imprimante-usb-avec-livebox-2-47.php"
				}
			},
			"info":
			{
				"comment":"<h5>Voici les grandes étapes que vous devrez réaliser:</h5><br/>1- Installez les pilotes de votre imprimante USB sur chaque ordinateur à l'aide de son CD-rom d'installation.<br/><br/>2- Branchez votre imprimante sur votre Livebox.<br/><br/>3- Déclarez votre imprimante partagée sur chaque ordinateur.<br/><br/>"
			},
			"text":
			{
				"help":"<h6>Partager une imprimante USB</h6></br>- Il est possible d'imprimer un document depuis tout ordinateur de votre réseau<br/>- De suivre l'état des impressions en cours<br/>- D'annuler une impression"
			},
			"definition":
			{
				"example":
				{
					"title":"IMPRIMANTE",
					"description":"ceci est la definition"
				}
			}
		}
	},
	"support":
	{
		"ledsstatus":
		{
			"label":
			{
				"title":"état des voyants",
				"subtitle":"Les voyants affichés sur cette page correspondent à ceux visibles sur la face avant de la Livebox. Ils vous indiquent les états des services de la Livebox. ",
				"subtitle#lb28":"Les voyants affichés sur cette page correspondent à ceux visibles sur la face avant de la Livebox. Ils vous indiquent les états des services de la Livebox. ",
				"led":"voyant",
				"icon":"ic&ocirc;ne<br/>voyant",
				"state":"état du<br/>voyant",
				"description":"signification",
				"adsl":"information",
				"phone":"téléphone par Internet",
				"wired":"réseau local",
				"wireless":"WiFi"
			},
			"text":
			{
				"help":"Cette page présente les états des voyants en face avant de la Livebox. Ces voyants vous informent sur les états des services Internet, téléphonie par Internet et WiFi.",
				"help#lb28":"Cette page présente les états des voyants en face avant de la Livebox. L'écran et les voyants de la Livebox vous renseignent sur les états des services Internet et WiFi.<br/><br/>Le bouton i vous renseigne sur l'état de la Livebox et de ses services. En appuyant sur le bouton i, les informations relatives à l'état de la Livebox s'afficheront à l'écran."
			},
			"comment":
			{
				"gray":
				{
					"phone":"vous ne bénéficiez pas du service téléphone par Internet",
					"network":"aucune information n'est échangée entre la Livebox et les appareils",
					"wireless":"la fonctionnalité WiFi est désactivée"
				},
				"green_solid":
				{
					"adsl":"la Livebox est connect&eacute;e &agrave; Internet",
					"phone":"le téléphone par Internet est activé et disponible",
					"wireless":"la fonctionnalité WiFi est activée"
				},
				"green_slow":
				{
					"phone":"le téléphone relié à la Livebox est décroché ou une communication téléphonique est en cours",
					"network":"des informations sont échangées entre la Livebox et d'autres appareils !!",
					"wireless":"la Livebox en cours d'association facile avec un appareil WiFi"
				},
				"green-fast":
				{
					"phone":"le téléphone relié à la Livebox est décroché ou une communication téléphonique est en cours"
				},
				"green_fast":
				{
					"network":"des informations sont échangées entre la Livebox et d'autres appareils",
					"wireless":"Livebox en cours d'association facile avec un appareil WiFi"
				},
				"red_fast":
				{
					"adsl":"la Livebox n'a pas pu se connecter &agrave Internet (non synchronis&eacute;e)"
				},
				"orange_slow":
				{
					"adsl":"la Livebox est en cours de connexion &agrave; Internet"
				}
			},
			"definition":
			{
				"example":
				{
					"title":"VOYANT",
					"description":"ceci est la definition"
				}
			}
		},
		"phoneringtest":
		{
			"label":
			{
				"help":"",
				"title":"tester le téléphone par Internet",
				"service":"état du téléphone par Internet:",
				"number":"numéro de téléphone: ",
				"nonumber":"aucun numéro assigné",
				"unknownnumber":"numéro non disponible"
			},
			"info":
			{
				"comment":"Pour vérifier le fonctionnement du téléphone branché à votre Livebox<br/>cliquer sur le bouton \"tester\"."
			}
		},
		"phoneringtestrunning":
		{
			"label":
			{
				"help":"",
				"title":"tester le téléphone par Internet"
			},
			"info":
			{
				"comment":"Le téléphone connecté à votre Livebox est en cours de test.<br/><br/>- Si le téléphone sonne, cela confirme qu'il est correctement connecté à la Livebox et qu'il est disponible. Cliquez sur le bouton retour.<br/><br/>- Si le téléphone ne sonne pas, c'est qu'il est sans doute mal connecté. Vérifiez qu'il est correctement branché et cliquez sur redémarrer."
			}
		},
		"restart":
		{
			"label":
			{
				"help":"Vous pouvez redémarrer la Livebox à partir des commandes disponibles sur cette page.",
				"title":"redémarrer la Livebox",
				"subtitle":"Vous pouvez redémarrer la Livebox en cliquant sur le bouton \"redémarrer\"",
				"warning":"Attention !",
				"inprogress":"redémarrage en cours…"
			},
			"info":
			{
				"comment":"Pendant le redémarrage de la Livebox, tous les services (Internet, téléphone par Internet et TV) seront indisponibles.",
				"question":"Voulez-vous continuer ?",
				"settopbox":"Après avoir redémarré votre Livebox, nous vous recommandons de redémarrer votre décodeur TV également pour un fonctionnement optimal."
			}
		},
		"reset":
		{
			"label":
			{
				"help":"",
				"title":"ré-initialiser la Livebox",
				"subtitle":"Vous pouvez ré-initialiser la Livebox en cliquant sur le bouton \"remise à zéro\". Attention cette opération efface tous vos param&egrave;tres personnels (identifiants de connexion, règles de NAT, dynDNS…).",
				"warning":"Attention !",
				"inprogress":"ré-initialisation en cours..."
			},
			"info":
			{
				"comment":"tous vos param&egrave;tres personnels (identifiants de connexion, règles de NAT, dynDNS...) vont être éffacés.<br>Votre Livebox retrouvera le paramétrage par défaut configuré en usine. <br><br>Vous pouvez sauvegarder vos paramètres personnels, en <a href='/supportBackup.html' >cliquant ici</a>. <br><br>La configuration sauvegardée pourra être restaurée après la remise à zéro de votre Livebox.",
				"question":"Voulez-vous continuer ?"
			}
		},
		"systeminformation":
		{
			"general":
			{
				"label":
				{
					"help":"",
					"title":"général",
					"status":
					{
						"connected":"connecté",
						"synchronized":"synchronisé",
						"disconnected":"déconnecté",
						"unconfigured":"non configuré",
						"authenticating":"en cours d'autentification",
						"connecting":"en cours de connexion",
						"up":"actif",
						"down":"inactif",
						"unavailable":"non disponible",
						"initializing":"en cours d'initialisation",
						"listening":"en cours d'écoute",
						"durationexample":"02 j 08 h 33 m 11 s"
					},
					"nbmanufacturer":"1.1",
					"nbmodel":"1.2",
					"nbcountry":"1.3",
					"nbserialnumber":"1.4",
					"nbmacaddress":"1.5",
					"nbfirmwareversion":"1.6",
					"nbfirmwareversionft":"1.7",
					"nbdeviceuptime":"1.8",
					"nbsynchrostatus":"1.9",
					"nbipv4constatus":"1.10",
					"nbipv6constatus":"1.11",
					"nbadsllinkstatus":"1.12",
					"nbaccountstatus":"1.13",
					"nbpppusername":"1.14",
					"manufacturer":"fabricant",
					"model":"modèle",
					"country":"pays",
					"serialnumber":"numéro de série",
					"macaddress":"adresse MAC",
					"firmwareversion":"version de firmware",
					"softathome":"SoftAtHome",
					"firmwareversionft":"version de firmware orange",
					"deviceuptime":"durée de fonctionnement",
					"synchrostatus":"état de synchronisation",
					"ipv4constatus":"état de connexion IPv4",
					"ipv6constatus":"état de connexion IPv6",
					"adsllinkstatus":"état du lien DSL",
					"accountstatus":"statut du compte",
					"pppusername":"identifiant PPP"
				}
			},
			"adsl":
			{
				"label":
				{
					"title":"DSL",
					"dslline":"Etat de la ligne DSL",
					"technical":"Débit et marge au bruit",
					"quality":"Indicateur de qualité de la ligne (erreurs)",
					"status":
					{
						"up":"actif",
						"down":"inactif",
						"initializing":"initialisation",
						"unavailable":"non disponible",
						"dateexample":"27 novembre 2012, 03 h 23 m 12 s",
						"durationexample":"00 j 11 h 57 m 16 s"
					},
					"nbadsllinkstatus":"2.1",
					"nbsynchromode":"2.2",
					"nbadslsynchrolast":"2.3",
					"nbadslsynchroduration":"2.4",
					"adsllinkstatus":"statut du lien DSL",
					"synchromode":"mode de synchronisation DSL",
					"adslsynchrolast":"dernière synchronisation DSL",
					"adslsynchroduration":"durée de la synchronisation DSL",
					"nbatmrateup":"2.5",
					"nbatmratedown":"2.6",
					"nbnoisemargindown":"2.7",
					"atmrateup":"débit de synchronisation DSL montante",
					"atmratedown":"débit de synchronisation DSL descendante",
					"noisemargindown":"marge de bruit liaison descendante",
					"nbeslerrors":"2.8",
					"nbseslerrors":"2.9",
					"eslerrors":"secondes erronées du sens descendant (depuis la dernière synchronisation)",
					"seslerrors":"secondes gravement erronées du sens descendant (depuis la dernière synchronisation)",
					"help":"Débit de synchronisation DSL descendant (ou montant) :<br/>Ce débit correspond à la capacité (incluant un surdébit d’encapsulation par rapport à la couche IP) de la liaison établie entre le dernier équipement du réseau Orange et votre Livebox (ou inversement pour la liaison montante). Ce débit de synchronisation dépend de la longueur de la ligne et des conditions de bruit.<br/><br/>Secondes erronées (ES) :<br/>Ce sont des secondes pendant laquelle quelques erreurs de transmission se sont produites.  Des ES fréquentes peuvent impacter les services délivrés par la Livebox.<br/><br/>Seconde gravement erronée (SES) :<br/>seconde pendant laquelle la transmission est fortement perturbée. Une SES même isolée peut impacter ponctuellement les services."
				},
				"3g":
				{
					"label":
					{
						"status":"",
						"linkstatus":"",
						"operator":"",
						"network":"",
						"wanipaddress":"",
						"maxrateup":"",
						"maxratedown":""
					}
				}
			},
			"wifi":
			{
				"label":
				{
					"help":"Informations système relatives au réseau WiFi",
					"title":"WiFi",
					"status":
					{
						"up":"actif",
						"down":"inactif",
						"enabled":"actif",
						"disabled":"inactif"
					},
					"nbcurstatus":"4.1",
					"nbmacaddress":"4.2",
					"nbssid":"4.3",
					"nbchannel":"4.4",
					"nbstandard":"4.5",
					"nbmaxbitrate":"4.6",
					"nbencryption":"4.7",
					"nbencryptionoptio":"4.8",
					"nbmacaccesslist":"4.9",
					"nbbytessent":"4.10",
					"nbbytesreceived":"4.11",
					"curstatus":"état du WiFi",
					"macaddress":"adresse MAC WiFi",
					"ssid":"SSID",
					"channel":"canal",
					"standard":"standard",
					"maxbitrate":"vitesse maximum",
					"encryption":"sécurité",
					"encryptionoption":"option de sécurité",
					"macaccesslist":"filtrage MAC",
					"bytessent":"octets envoyés",
					"bytesreceived":"octets reçus"
				}
			},
			"lan":
			{
				"label":
				{
					"help":"Informations système relatives au réseau local",
					"title":"LAN",
					"yes":"oui",
					"no":"non",
					"auto":"auto",
					"status":
					{
						"enabled":"actif",
						"disabled":"inactif",
						"durationexample":"00 j 11 h 57 m 16 s"
					}
				},
				"status":
				{
					"link":"lien",
					"nolink":"pas de lien"
				},
				"mode":
				{
					"InternetTV":"Internet & TV",
					"internet":"Internet",
					"tv":"TV",
					"internetONT":"FTTH",
					"disable":"inactif"
				},
				"dhcpv4":
				{
					"label":
					{
						"nbstatus":"5.1",
						"nbstartip":"5.2",
						"nbendip":"5.3",
						"nbnetmask":"5.4",
						"nbleasetime":"5.5",
						"nbgateway":"5.6",
						"nbmac":"5.7",
						"status":"état DHCPv4",
						"startip":"adresse IPv4 de début",
						"endip":"adresse IPv4 de fin",
						"netmask":"masque de sous réseau IPv4",
						"leasetime":"bail DHCPv4",
						"gateway":"passerelle DHCPv4",
						"mac":"adresse MAC"
					}
				},
				"dhcpv6":
				{
					"label":
					{
						"nbstatus":"5.8",
						"nbguaip":"5.9",
						"nbipv6prefix":"5.10",
						"status":"état DHCPv6",
						"guaip":"adresse IPv6 GUA",
						"ipv6prefix":"préfixe IPv6"
					}
				},
				"red":
				{
					"label":
					{
						"nbmode":"5.11",
						"nbstatus":"5.12",
						"nbautoconfig":"5.13",
						"nbmacaddress":"5.14",
						"nbmaxbitrate":"5.15",
						"nbduplexmode":"5.16",
						"title":"port ethernet 1",
						//"title#lb28":"port ethernet 1",
						"mode":"mode",
						"status":"état",
						"autoconfig":"configuration auto",
						"macaddress":"adresse MAC",
						"maxbitrate":"vitesse maximum",
						"duplexmode":"mode duplex"
					}
				},
				"yellow":
				{
					"label":
					{
						"nbmode":"5.17",
						"nbstatus":"5.18",
						"nbautoconfig":"5.19",
						"nbmacaddress":"5.20",
						"nbmaxbitrate":"5.21",
						"nbduplexmode":"5.22",
						"title":"port ethernet 2",
						//"title#lb28":"port ethernet 2",
						"mode":"mode",
						"status":"état",
						"autoconfig":"configuration auto",
						"macaddress":"adresse MAC",
						"maxbitrate":"vitesse maximum",
						"duplexmode":"mode duplex"
					}
				},
				"green":
				{
					"label":
					{
						"nbmode":"5.23",
						"nbstatus":"5.24",
						"nbautoconfig":"5.25",
						"nbmacaddress":"5.26",
						"nbmaxbitrate":"5.27",
						"nbduplexmode":"5.28",
						"title":"port ethernet 3",
						//"title#lb28":"port ethernet 3",
						"mode":"mode",
						"status":"état",
						"autoconfig":"configuration auto",
						"macaddress":"adresse MAC",
						"maxbitrate":"vitesse maximum",
						"duplexmode":"mode duplex"
					}
				},
				"white":
				{
					"label":
					{
						"nbmode":"5.29",
						"nbstatus":"5.30",
						"nbautoconfig":"5.31",
						"nbmacaddress":"5.32",
						"nbmaxbitrate":"5.33",
						"nbduplexmode":"5.34",
						"title":"port ethernet 4",
						//"title#lb28":"port ethernet 4",
						"mode":"mode",
						"status":"état",
						"autoconfig":"configuration auto",
						"macaddress":"adresse MAC",
						"maxbitrate":"vitesse maximum",
						"duplexmode":"mode duplex"
					}
				},
				"wan":
				{
					"label":
					{
						"nbmode":"5.35",
						"nbstatus":"5.36",
						"nbautoconfig":"5.37",
						"nbmacaddress":"5.38",
						"nbmaxbitrate":"5.39",
						"nbduplexmode":"5.40",
						"title":"port ethernet WAN",
						"mode":"mode",
						"status":"état",
						"autoconfig":"configuration auto",
						"macaddress":"adresse MAC",
						"maxbitrate":"vitesse maximum",
						"duplexmode":"mode duplex"
					}
				}
			},
			"voip":
			{
				"label":
				{
					"help":"Informations système relatives au téléphone par Internet",
					"title":"VoIP",
					"available":"disponible",
					"unavailable":"indisponible",
					"status":
					{
						"up":"actif",
						"down":"inactif"
					},
					"nbcurstatus":"6.1",
					"nbphonenumber":"6.2",
					"nbvpvc":"6.3",
					"nbprotocol":"6.4",
					"curstatus":"état",
					"phonenumber":"numéro téléphonique VoIP",
					"vpvc":"ATM VP/VC ou VLAN",
					"protocol":"protocole"
				}
			},
			"usb":
			{
				"label":
				{
					"help":"Informations système relatives au port USB",
					"title":"USB"
				},
				"first":
				{
					"label":
					{
						"nblinkstatus":"7.1",
						"nbfunc":"7.2",
						"nbvendorId":"7.3",
						"nbmanufacturer":"7.4",
						"nbproductId":"7.5",
						"nbproduct":"7.6",
						"nbserialNumber":"7.7",
						"title":"USB 1",
						"linkstatus":"état du lien",
						"func":"fonction",
						"vendorId":"fournisseur",
						"manufacturer":"constructeur",
						"productId":"version",
						"product":"produit",
						"serialNumber":"numéro de série"
					}
				},
				"second":
				{
					"label":
					{
						"nblinkstatus":"7.8",
						"nbfunc":"7.9",
						"nbvendorId":"7.10",
						"nbmanufacturer":"7.11",
						"nbproductId":"7.12",
						"nbproduct":"7.13",
						"nbserialNumber":"7.14",
						"title":"USB 2",
						"linkstatus":"état du lien",
						"func":"fonction",
						"vendorId":"fournisseur",
						"manufacturer":"constructeur",
						"productId":"version",
						"product":"produit",
						"serialNumber":"numéro de série"
					}
				},
				"third":
				{
					"label":
					{
						"nblinkstatus":"7.15",
						"nbfunc":"7.16",
						"nbvendorId":"7.17",
						"nbmanufacturer":"7.18",
						"nbproductId":"7.19",
						"nbproduct":"7.20",
						"nbserialNumber":"7.21",
						"title":"USB 3",
						"linkstatus":"état du lien",
						"func":"fonction",
						"vendorId":"fournisseur",
						"manufacturer":"constructeur",
						"productId":"version",
						"product":"produit",
						"serialNumber":"numéro de série"
					}
				},
				"func":
				{
					"massstorage":"stockage",
					"printer":"imprimante",
					"phone":"livephone",
					"monitoring":"suivi conso",
					"undefined":"non définie"
				}
			},
			"tv":
			{
				"label":
				{
					"help":"Informations système relatives à la connexion TV",
					"title":"TV",
					"available":"disponible",
					"unavailable":"indisponible",
					"status":
					{
						"up":"actif",
						"down":"inactif"
					}
				},
				"channel1":
				{
					"label":
					{
						"nbstatus":"8.1",
						"nbvpvc":"8.2",
						"title":"canal 1",
						"status":"état",
						"vpvc":"VP/VC ou VLAN",
						"vlan":"VLAN"
					}
				},
				"channel2":
				{
					"label":
					{
						"nbstatus":"8.3",
						"nbvpvc":"8.4",
						"title":"canal 2",
						"status":"état",
						"vpvc":"VP/VC ou VLAN",
						"vlan":"VLAN"
					}
				},
				"vod":
				{
					"label":
					{
						"nbstatus":"8.5",
						"nbvpvc":"8.6",
						"title":"vidéo à la demande",
						"status":"état",
						"vpvc":"VP/VC ou VLAN",
						"vlan":"VLAN"
					}
				},
				"zapping":
				{
					"label":
					{
						"nbstatus":"8.7",
						"nbvpvc":"8.8",
						"title":"zapping",
						"status":"état",
						"vpvc":"VP/VC ou VLAN",
						"vlan":"VLAN"
					}
				}
			},
			"ftth":
			{
				"label":
				{
					"help":"Informations système relatives à la fibre",
					"title":"FTTH",
					"technical":"caractéristiques techniques",
					"status":
					{
						"up":"actif",
						"down":"inactif",
						"initializing":"initialisation",
						"unavailable":"non disponible",
						"dateexample1":"27 novembre 2012, 03 h 23 m 12 s",
						"durationexample1":"00 j 11 h 57 m 16 s",
						"dateexample2":"27 novembre 2012, 03 h 22 m 44 s",
						"durationexample2":"03 j 14 h 27 m 04 s"
					},
					"nbadsllinkstatus":"2.1",
					"adsllinkstatus":"statut du lien FTTH",
					"nbwanmacaddress":"2.2",
					"wanmacaddress":"adresse MAC WAN",
					"nbsynchrostatus":"2.3",
					"synchrostatus":"status de synchronisation",
					"nbadslsynchrolast":"2.4",
					"adslsynchrolast":"dernière synchronisation FTTH",
					"nbadslsynchroduration":"2.5",
					"adslsynchroduration":"durée de la synchronisation FTTH",
					"nbpppconnectionstatus":"2.6",
					"pppconnectionstatus":"statut de la connexion PPP",
					"nbpppaccountstatus":"2.7",
					"pppaccountstatus":"statut du compte",
					"nbpppusername":"2.8",
					"pppusername":"PPP nom d'utilisateur",
					"nbpppauthentificationmode":"2.9",
					"pppauthentificationmode":"PPP mode d'authentification",
					"nbpppconnectionlast":"2.10",
					"pppconnectionlast":"PPP dernière connexion",
					"nbpppconnectionduration":"2.11",
					"pppconnectionduration":"PPP durée de la connexion",
					"nbpppprotocoltype":"2.12",
					"pppprotocoltype":"PPP type du protocol",
					"nbpppconnectionlasterror":"2.13",
					"pppconnectionlasterror":"PPP error de la dernière connexion",
					"nbpppconnectionlastdisconnect":"2.14",
					"pppconnectionlastdisconnect":"PPP date de la dernière déconnexion ",
					"nbatmvpvc":"2.15",
					"atmvpvc":"VLAN",
					"nbadslmode":"2.16",
					"adslmode":"mode",
					"nbencapsulation":"2.17",
					"encapsulation":"encapsulation",
					"nbdatapath":"2.18",
					"datapath":"chemin de donnée",
					"nbmtu":"2.19",
					"mtu":"taille MTU",
					"nbwanip":"2.20",
					"wanip":"WAN adresse IP ",
					"nbbasip":"2.21",
					"basip":"BAS adresse IP",
					"nbdnsprimary":"2.22",
					"dnsprimary":"DNS primaire",
					"nbdnssecondary":"2.23",
					"dnssecondary":"DNS secondaire",
					"nbattenuationup":"1.16",
					"attenuationup":"atténuation montante",
					"nbattenuationdown":"1.17",
					"attenuationdown":"atténuation descendente",
					"nbnoisemarginup":"1.18",
					"noisemarginup":"marge de bruit montante",
					"nbnoisemargindown":"1.19",
					"noisemargindown":"marge de bruit descendante",
					"nbmaxrateup":"1.20",
					"maxrateup":"taux montant maximum",
					"nbmaxratedown":"1.21",
					"maxratedown":"taux descendant maximum",
					"nbatmrateup":"1.22",
					"atmrateup":"synchronisation montante",
					"nbatmratedown":"1.23",
					"atmratedown":"synchronisation descendante",
					"nbpowerupstream":"1.24",
					"powerupstream":"puissance du flux montant",
					"nbpowerdownstream":"1.25",
					"powerdownstream":"puissance du flux descendant",
					"nbblocksreceived":"1.26",
					"blocksreceived":"paquets reçus",
					"nbblockstransmitted":"1.27",
					"blockstransmitted":"paquets émis",
					"nberrorslof":"1.28",
					"errorslof":"paquets perdus",
					"nblinkretrain":"1.29",
					"linkretrain":"link retrain",
					"nberrorsfec":"1.30",
					"errorsfec":"erreurs FEC (Up/Down)",
					"nberrorshec":"1.31",
					"errorshec":"erreurs HEC (Up/Down)",
					"nberrorscrc":"1.32",
					"errorscrc":"erreurs CRC (Up/Down)"
				},
				"3g":
				{
					"label":
					{
						"status":"",
						"linkstatus":"",
						"operator":"",
						"network":"",
						"wanipaddress":"",
						"maxrateup":"",
						"maxratedown":""
					}
				}
			},
			"internet":
			{
				"label":
				{
					"help":"Informations système relatives à la connexion Internet",
					"title":"Internet",
					"status":
					{
						"up":"actif",
						"down":"inactif",
						"initializing":"initialisation",
						"unavailable":"non disponible",
						"dateexample":"27 novembre 2012, 03 h 23 m 12 s",
						"durationexample":"00 j 11 h 57 m 16 s"
					},
					"nbpppconnectionstatus":"3.1",
					"nbpppusername":"3.2",
					"nbpppconnectionlast":"3.3",
					"nbpppconnectionduration":"3.4",
					"nbpppprotocoltype":"3.5",
					"nbpppconnectionlasterror":"3.6",
					"nbpppconnectionlastdisconnect":"3.7",
					"nbatmvpvc":"3.8",
					"nbmtu":"3.9",
					"nbwanipv4":"3.10",
					"nbwanipv6":"3.11",
					"nbdnsv4primary":"3.12",
					"nbdnsv4secondary":"3.13",
					"nbdnsv6primary":"3.14",
					"nbdnsv6secondary":"3.15",
					"pppconnectionstatus":"statut de la connexion Internet",
					"pppusername":"nom d'utilisateur",
					"pppconnectionlast":"dernière connexion",
					"pppconnectionduration":"durée de la connexion",
					"pppprotocoltype":"type du protocol",
					"pppconnectionlasterror":"code d'erreur de la dernière connexion",
					"pppconnectionlastdisconnect":"date de la dernière connexion ",
					"atmvpvc":"ATM VP/VC ou VLAN",
					"mtu":"taille MTU",
					"wanipv4":"adresse IPv4 WAN",
					"wanipv6":"adresse IPv6 WAN",
					"dnsv4primary":"adresse IP du DNSv4 primaire",
					"dnsv4secondary":"adresse IP du DNSv4 secondaire",
					"dnsv6primary":"adresse IP du DNSv6 primaire",
					"dnsv6secondary":"adresse IP du DNSv6 secondaire"
				}
			}
		},
		"firmwareupgrade":
		{
			"label":
			{
				"title":"mise à jour du logiciel de la Livebox",
				"subtitle":"Pour mettre à jour le logiciel de la Livebox, cliquez sur le bouton \"rechercher une version plus récente\".",
				"version":"version logicielle courante:",
				"softathome":"SoftAtHome",
				"duringsearch":"Veuillez patienter pendant la recherche d'une nouvelle version logicielle...",
				"nofirmavailable":"Il n'y a pas de version logicielle plus récente disponible",
				"whileupgrading":"Une version plus récente de logiciel de la Livebox est disponible.  Votre demande de mise à jour est prise en compte.",
				"warning":"Attention:"
			},
			"text":
			{
				"help1":"<h6>Le logiciel de votre Livebox est mis &agrave; jour à distance pour que vous bénéficiez des derniers services disponibles. Orange le met à jour régulièrement automatiquement, de nuit, pour ne pas gêner l'utilisation de la Livebox.</h6>Si une mise à jour est disponible, le téléchargement se fera automatiquement. <h6>Ne pas éteindre la Livebox ou retirer  le câble DSL lors d'une mise à jour</h6>",
				"help2":"<h6>Erreur dans la mise à jour</h6> une erreur est survenue pendant une mise à jour: appuyez sur le bouton \"Marche/Arrêt\" de la Livebox puis patientez le temps que la Livebox redémarre. Si la situation perdure, débranchez puis rebranchez électriquement la Livebox.",
				"helpbesearch":"<p>Votre Livebox deviendra indisponible pendant la procédure de mise à jour.</p><p>Pour éviter tout risque de détérioration, veuillez ne pas débrancher votre livebox avant que la procédure de mise à jour soit terminée.</p>"
			},
			"info":
			{
				"question":"Voulez-vous continuer ?",
				"searchinprogress":"Recherche en cours"
			}
		},
		"backup":
		{
			"label":
			{
				"title":"sauvegarder la configuration en local",
				"subtitle":"Vous pouvez sauvegarder vos paramètres personnels (identifiants de connexion, règles de NAT, dynDNS...) pour une utilisation ult&eacute;rieure lors de la restauration de la Livebox.<br><br>Vos paramètres vont être sauvegard&eacute;s dans un fichier sur votre ordinateur.",
				"help":"Vous pouvez sauvegarder vos paramètres et votre configuration. Cette sauvegarde pourra être utilisée ultérieurement en cas de restauration."
			},
			"remote":
			{
				"label":
				{
					"title":"sauvegarder et restaurer automatiquement dans le réseau",
					"subtitle":"En cas de changement de Livebox ou de réinitialisation, vous retrouvez votre configuration personnalisée grâce à la <br>sauvegarde automatique. Attention, en désactivant cette fonction, aucune sauvegarde ne sera conservée dans le réseau.",
					"enable": "Sauvegarde automatique :",
					"lastdate" :"Dernière sauvegarde le :",
					"help":"Vous pouvez sauvegarder vos paramètres et votre configuration. Cette sauvegarde pourra être utilisée ultérieurement en cas de restauration."
				}
			}
		},
		"remoteaccess":
		{
			"label":
			{
				"title":"accès à distance utilisateur",
				"subtitle":"Cette page vous permet d'accéder à distance à l'interface de configuration de la Livebox. Pour un accès plus facile, vous pouvez configurer le service dynDNS",
				"here":" ici",
				"enable":"&nbsp;activer l'administration à distance",
				"youripaddress":"Votre adresse IP est actuellement :",
				"yoururl":"Votre URL est actuellement:",
                                 "showpassword":"visualiser le mot de passe"
			},
			"login":
			{
				"error":
				{
					"label":"saisie incorrecte",
					"description":"Vérifiez que vous avez correctement<br/>saisi votre identifiant."
				}
			},
			"password":
			{
				"error":
				{
					"label":"saisie incorrecte",
					"description":"Vérifiez que vous avez correctement<br/>saisi votre mot de passe."
				}
			},
			"port":
			{
				"error":
				{
					"label":"saisie incorrecte",
					"description":"Vérifiez que vous avez correctement<br/>saisi le numéro de port"
				}
			},
			"info":
			{
				"comment":"Apr&egrave;s avoir cliqu&eacute; sur \"enregistrer\", l'URL permettant d'accéder à distance à l'interface de configuration de la Livebox sera affichée."
			},
			"text":
			{
				"help":"<h6>Cette rubrique vous permet de configurer un acc&egrave;s &agrave; l'interface de configuration de la Livebox depuis Internet.</span></h6><br/>Vous devez saisir un identifiant et un mot de passe d'accès à la Livebox. Retenez-les bien car ils vous seront demandés lorsque vous tenterez d'accéder à distance à votre Livebox.<br/><br/>Votre identifiant ne doit pas dépasser 32 caractères et ne doit comporter que les caractères : a à z, A à Z et 0 à 9 (les caractères spéciaux et accentuations ne sont pas supportés). Votre mot de passe doit compter au minimum 8 caractères dont un chiffre et un caractère spécial.</span><br/><br/>Le numéro de port de votre Livebox est par défaut 10011. vous pouvez toutefois sélectionner un numéro de port entre 10000 et 30000."
			},
			"definition":
			{
				"example":
				{
					"title":"ACCES DISTANT",
					"description":"ceci est la definition"
				}
			},
			"authentication":
			{
				"label":
				{
					"help":"",
					"title":"authentification",
					"subtitle":"Veuillez saisir votre identifiant et votre mot de passe d'accès distant",
					"login":"identifiant",
					"password":"mot de passe",
					"warning":"accès distant à la Livebox"
				},
				"error":
				{
					"title":"saisie incorrecte",
					"description":"Vérifiez que vous avez correctement saisi votre identifiant et votre mot de passe de connexion."
				}
			}
		},
		"hotline":
		{
			"label":
			{
				"title":"accès à distance support client",
				"subtitle":"Cette page vous permet de donner un accès temporaire au support technique Orange.",
				"duration":
				{
					"title":"durée restante pour l'accès à distance:",
					"first":"0 mn",
					"second":"5 min",
					"third":"10 min",
					"fourth":"15 min"
				}
			},
			"info":
			{
				"comment":"Informations requises pour l'accès distant :"
			},
			"text":
			{
				"help":"Pour tout dépannage, l'accès temporaire permet à un téléconseiller du support technique d'accéder temporairement (15 mintutes) et avec votre accord à votre Livebox.<br/> <br/>Pour lancer un accès support client pendant 15 minutes, cliquez sur le bouton \"démarrer\". Les paramètres d'accès à distance vont apparaître à l'écran. communiquez-les uniquement au téléconseiller. <br/> <br/>Pour désactiver l'accès temporaire au support client, cliquer sur le bouton \"arrêter\"."
			}
		},
		"assistancelivebox":
		{
			"label":
			{
				"help":"",
				"title":"ma Livebox",
				"subtitle":"ma Livebox est une application qui vous permet de piloter, configurer et réparer vos services Orange Internet. ",
				"description":"Grâce à <b>ma&nbsp;Livebox</b>, vous pouvez :<br/>- vérifier l'état de bon fonctionnement de vos services Orange : Internet, TV, téléphone sur Internet,<br/>- visualiser et gérer l'ensemble des équipements connectés à votre Livebox,<br/>- gérer les plages horaires d'activation du Wi-Fi de votre Livebox,<br/>- gérer les plages horaires d'accès à Internet pour tous les équipements connectés à votre Livebox,<br/>- partager la clé de sécurité du Wi-Fi de votre Livebox par SMS ou par QR-Code,<br/>- diagnostiquer et dépanner vos services Internet, TV et de téléphone par Internet sans connaissance technique.",
				"url1":"Télécharger <b>ma&nbsp;Livebox</b> pour smartphones et tablettes",
				"url2":"Télécharger <b>ma&nbsp;Livebox</b> pour PC"
			}
		}
	},
	"advconfig":
	{
		"wifi":
		{
			"label":
			{
				"title":"WiFi Avancé",
				"subtitle":"configuration avancée des paramètres WiFi",
				"warning":"Attention, si vous modifiez les paramètres de configuration WiFi, vous devrez appairer de nouveau vos appareils.",
				"state":"état de la connexion WiFi",
				"ssid":"nom du réseau WiFi (SSID)",
				"broadcast":"diffuser le SSID",
				"securitymode":"mode de sécurité",
				"securitykey":"clé de sécurité",
				"nosecurity":"Pas de sécurité",
				"channel":"canal",
				"channelused":"canal utilisé",
				"pairingtitle":"connecter vos appareils en WiFi",
				"easypairing":"WiFi facile",
				"macfiltering":"filtrage MAC",
				"devicesauthorised":"appareils autorisés à se connecter en WiFi à la Livebox",
				"td1":"en WiFi 2.4 GHz ",
 				"td2":"en WiFi 5 GHz ",
				"name":"nom",
				"ipadress":"adresse IP",
				"macaddress":"adresse MAC",
				"othername":"autre",
				"editnewmac":"nouveau …",
				"unknownmac":"inconnu",
				"wifipushbutton":"WiFi Protected Setup (WPS)",
				"wifipushbutton#lb28":"WiFi Protected Setup (WPS)",
				"wifipairing":"générer un code PIN WPS de la Livebox",
				"addclientpush":"connecter un appareil  par WPS Push Button",
				"addclientpin":"saisir le code PIN d'un appareil WPS",
				"sameconfig":"configuration WiFi 5 GHz identique à celle du WiFi 2,4 GHz",
				"availablewifi":"type de WiFi disponible",
				"info":
				{
					"disable":"activez le Wifi pour bénéficier de la configuration avancée du Wifi "
				}
			},
			"link":
			{
				"scheduling":"définir les plages d'activation du WiFi",
				"ssid":"modifier",
				"securitykey":"modifier"
			},
			"text":
			{
				"help":"<h6>Mode de s&eacute;curit&eacute;</h6><h6>- pas de s&eacute;curit&eacute;</h6>Votre r&eacute;seau domestique est ouvert et accessible par tous (mode non recommand&eacute;). Dans ce cas, le filtrage MAC est activé par défaut.<br/><h6>- WEP</h6>Utilisation d'une cl&eacute; de 26 caract&egrave;res hexad&eacute;cimaux.Ne permet pas l'utilisation du WiFi n mais seulement du WiFi b/g<br/><h6>- WPA-PSK (TKIP):</h6>Utilisation d'une cl&eacute; d'au moins 8 caract&egrave;res (alphanum&eacute;rique et caractères sp&eacute;ciaux). Ce mode ne permet pas l'utilisation du WiFi n mais seulement du WiFi b/g<br/><h6>- WPA2-PSK (AES) :</h6>Utilisation d'une cl&eacute; d'au moins 8 caractères (alphanum&eacute;rique et caractères sp&eacute;ciaux).<br/><h6>- WPA/WPA2 Mixed</h6>Mode par d&eacute;faut qui s&eacute;lectionne automatiquement le meilleur mode pour votre appareil <br/><br/><h6>WiFi Protected SetUp (WPS)</h6>Activation de la m&eacute;thode recommand&eacute;e pour connecter les appareils certifi&eacute;s WPS<br/><h6>code PIN WPS de la Livebox</h6>Si vous activez cette option, en appuyant sur le bouton g&eacute;n&eacute;rer, vous obtenez un code PIN Livebox. Saisissez-le sur l'appareil certifi&eacute; WPS que vous souhaitez connecter.<br/><h6>Connecter un appareil par WPS Push Button</h6>Appuyez sur le bouton \"connecter\" (ou bri&egrave;vement sur le bouton WiFi de la Livebox) puis sur le bouton WPS de votre appareil<br/><h6>Saisie du PIN code WPS de votre appareil</h6> Un code PIN est disponible sur votre appareil (g&eacute;n&eacute;r&eacute; ou sur une etiquette). Saisissez le ici et cliquez sur ajouter pour le connecter<br/><br/><h6>filtrage MAC</h6>Lorsque vous activez le filtrage MAC, et si vous voulez autoriser un nouvel appareil &agrave; s'associer en WiFi avec votre Livebox, vous devez saisir son adresse MAC. Si ce filtrage est d&eacute;sactiv&eacute; (par d&eacute;faut), tout appareil qui connait la cl&eacute; de s&eacute;curit&eacute; peut se connecter &agrave; la Livebox.",
				"help#lb28":"<h6>Mode de s&eacute;curit&eacute;</h6><h6>- pas de s&eacute;curit&eacute;</h6>Votre r&eacute;seau domestique est ouvert et accessible par tous (mode non recommand&eacute;). Dans ce cas, le filtrage MAC est activé par défaut.<br/><h6>- WEP</h6>Utilisation d'une cl&eacute; de 26 caract&egrave;res hexad&eacute;cimaux.Ne permet pas l'utilisation du WiFi n mais seulement du WiFi b/g<br/><h6>- WPA-PSK (TKIP):</h6>Utilisation d'une cl&eacute; d'au moins 8 caract&egrave;res (alphanum&eacute;rique et caractères sp&eacute;ciaux). Ce mode ne permet pas l'utilisation du WiFi n mais seulement du WiFi b/g<br/><h6>- WPA2-PSK (AES) :</h6>Utilisation d'une cl&eacute; d'au moins 8 caractères (alphanum&eacute;rique et caractères sp&eacute;ciaux).<br/><h6>- WPA/WPA2 Mixed</h6>Mode par d&eacute;faut qui s&eacute;lectionne automatiquement le meilleur mode pour votre appareil <br/><br/><h6>WiFi Protected SetUp (WPS)</h6>Activation de la m&eacute;thode recommand&eacute;e pour connecter les appareils certifi&eacute;s WPS<br/><h6>code PIN WPS de la Livebox</h6>Si vous activez cette option, en appuyant sur le bouton g&eacute;n&eacute;rer, vous obtenez un code PIN Livebox. Saisissez-le sur l'appareil certifi&eacute; WPS que vous souhaitez connecter.<br/><h6>Connecter un appareil par WPS Push Button</h6>Appuyez sur le bouton \"connecter\" (ou bri&egrave;vement sur le bouton WiFi de la Livebox) puis sur le bouton WPS de votre appareil<br/><h6>Saisie du PIN code WPS de votre appareil</h6> Un code PIN est disponible sur votre appareil (g&eacute;n&eacute;r&eacute; ou sur une etiquette). Saisissez le ici et cliquez sur ajouter pour le connecter<br/><br/><h6>filtrage MAC</h6>Lorsque vous activez le filtrage MAC, et si vous voulez autoriser un nouvel appareil &agrave; s'associer en WiFi avec votre Livebox, vous devez saisir son adresse MAC. Si ce filtrage est d&eacute;sactiv&eacute; (par d&eacute;faut), tout appareil qui connait la cl&eacute; de s&eacute;curit&eacute; peut se connecter &agrave; la Livebox."
			},
			"definition":
			{
				"example":
				{
					"title":"WIFI AVANCE",
					"description":"ceci est la definition"
				}
			},
			"error":
			{
				"wepkey":"clé invalide. Elle doit contenir 26 caractères héxadécimaux",
				"presharedkey":"clé invalide. Elle doit contenir entre 8 et 63 caractères héxadécimaux",
				"ssid":"SSID invalide",
				"moden":"le WiFi N n'est pas disponible<br/>dans ce mode de sécurité",
				"macaddress":"adresse MAC invalide",
				"wpsclientpin":"PIN code client invalide",
				"wpsclientfailed":"Cette méthode a échoué. Appuyez sur le bouton générer pour obtenir un nouveau PIN code"
			},
			"general":
			{
				"info":
				{
					"wificom":"Si vous désactivez le WiFi sur la Livebox, le mode WiFi partagé sera aussi désactivé. Voulez vous continuer?",
					"disabling24ghz":"Si vous désactivez le WiFi 2,4 GHz, le WiFi Partagé sera désactivé également. Confirmez-vous votre choix ?",
					"enabling24ghz":"Vous souhaitez activer le WiFi 2,4 GHz. Confirmez-vous votre choix ?",
					"disabling5ghz":"Vous souhaitez désactiver le WiFi 5 GHz. Confirmez-vous votre choix ?",
					"enabling5ghz":"Vous souhaitez activer le WiFi 5 GHz. Confirmez-vous votre choix ?",
					"ssidmustbedifferent":"Vous avez configuré différemment les WiFi 2,4 GHz et 5 GHz.<br/>Veuillez leur attribuer des noms de réseau (SSID) différents.",
					"confirmation":"Vous avez modifié vos paramètres de connexion WiFi, vous devrez appairer de nouveau vos terminaux.",
					"nosecurity1":"Attention, si vous validez votre WiFi ne sera plus sécurisé (mode de sécurité choisi \"Pas de sécurité\" et filtrage MAC désactivé) !",
					"nosecurity2":"Attention, si vous validez votre WiFi ne sera plus sécurisé (mode de sécurité choisi \"Pas de sécurité\" et filtrage MAC désactivé) !<br/><br/>Vous avez modifié vos paramètres de connexion WiFi, vous devrez appairer de nouveau vos terminaux."
				}
			},
			"securitykey":
			{
				"label":
				{
					"title":"modifier la clé de sécurité de mon réseau",
					"subtitle":"Vous pouvez modifier la clé de sécurité.",
					"warning":"Attention: Tous vos équipements connectés en WiFi sur votre Livebox vont perdre leur connexion Internet."
				},
				"description":"Veuillez saisir la nouvelle clé de sécurité",
				"info":
				{
					"comment":"26 caractères héxadécimaux en mode WEP<br/>entre 8 et 63 caractères pour WPA/WPA2"
				},
				"error":
				{
					"wep":"clé WEP incorrecte. Doit contenir 26 caractères hexadécimaux (0-9 et A-F)",
					"wpa":"clé WPA incorrecte. Doit posséder plus de 8 caractères"
				},
				"help":
				{
					"label":
					{
						"wificom":""
					}
				}
			}
		},
		"firewalladv":
		{
			"label":
			{
				"help":"Avertissement : l'ordre de saisie des règles influence le comportement du pare feu",
				"title":"pare-feu",
				"subtitle":"Configuration personnalis&eacute;e du pare-feu<br/><br/> Vous pouvez ajouter ou supprimer les r&egrave;gles que vous voulez. Attention une mauvaise configuration du pare-feu peut vous emp&ecirc;cher d'acc&eacute;der à Internet ! Pour les utilisateurs non avancés, il est recommandé d'utiliser les niveaux de sécurité définis dans la page précédente.",
				"ping":"l'option réponse au ping autorise la Livebox à répondre aux requêtes de ping (test de l'état de la Livebox sur un réseau). Cette option est activée par défaut.",
				"pinganswer":"répondre au ping",
				"reinit":"réinitialiser les règles du pare-feu (retour aux règles définies dans le niveau élevé)",
				"personalrules":"règles personnalisées",
				"application":"application / service",
				"source":"adresse<br/>IP<br/>source",
				"mask":"masque<br/>adresse<br/>IP",
				"sourceport":"port source",
				"destination":"adresse<br/>IP<br/>destination",
				"destinationport":"port destination",
				"action":"action",
				"order":"ordre",
				"staticip":"adresse IP statique",
				"protocol":"protocole",
				"accept":"accepter",
				"drop":"rejeter",
				"editnewrule":"nouveau…",
				"bothprotocol":"les deux"
			},
			"error":
			{
				"description":"description invalide",
				"sourceip":"ip source invalide",
				"sourceipmask":"masque d'ip source invalide",
				"sourceport":"port source invalide. Valeur entre 1 et 65535",
				"sourcerange":"port source invalide. Valeur entre 1 et 65535",
				"destip":"ip destination invalide",
				"destipmask":"masque d'ip destination invalide",
				"destport":"port destination invalide. Valeur entre 1 et 65535",
				"destrange":"port destination invalide. Valeur entre 1 et 65535",
				"invalide":"rule invalid."
			},
			"tooltip":
			{
				"sourceport":"<b>port source</b> saisir un num&eacute;ro<br/>ou une plage de port (ex: 200-300)",
				"destinationport":"saisir un numéro ou une plage de port (ex: 200-300)"
			}
		},
		"firewall":
		{
			"label":
			{
				"help":"TO BE DEFINED",
				"title":"pare-feu",
				"subtitle":"Configuration du pare-feu (firewall).<br/><br/>vous pouvez configurer le niveau de protection de la Livebox. le niveau par défaut (moyen) est satisfaisant et recommandé.",
				"offer":"choisir le niveau de sécurité",
				"low":"faible",
				"medium":"moyen",
				"high":"élevé",
				"customize":"personnaliser",
				"warn":"Les applications (ex: LiveMessenger, peer-to-peer applications, games) qui reposent sur des règles NAT fournies par UPnP IGD ne fonctionneront plus correctement.",
				"warnTv":"Attention ! Ce niveau de sécurité restreint le service TV d'Orange aux chaînes en direct uniquement.<br>Pour accéder à l'ensemble du service TV d'Orange, choisissez un niveau moyen ou personnalisé. Retrouvez les règles de personnalisation sur assistance.orange.fr"

			},
			"description":
			{
				"low":"Le pare-feu ne filtre rien. Attention, ce niveau est réservé aux utilisateurs avancés pour lesquels la sécurité n'est pas une priorité. Veuillez noter aussi que même dans ce mode une connexion initiée depuis Internet sera rejetée si une règle NAT/PAT correspondante n'a pas été créée.",
				"medium":"Le pare-feu filtre toutes les connexions entrantes. le trafic sortant est autorisé à l'exception des services netbios. Il est recommandé d'utiliser ce mode.",
				"high":"Le pare-feu vous permet d'utiliser les applications standards sur Internet (web, mail, news...) et rejette les connexions entrantes non désirées. Ce choix est recommandé pour disposer d'un niveau de sécurité maximal. Attention : incompatible avec Unik et d'autres services.",
				"customize":"Ce profil vous permet de personnaliser votre pare-feu. vous pouvez ainsi définir des règles de filtrage spécifiques. (réservé aux utilisateurs experts)."
			},
			"ipv6rules":
			{
				"label":
				{
					"table":
					{
						"title":"Ouverture de port(s) dans le firewall IPv6",
						"header":
						{
							"protocol":"Protocole",
							"device":"Appareil",
							"ports":"Port<br/>Saisir un numéro ou une plage de port (ex:200-300) ou laisser vide pour tous les ports",
							"enable":"Activer",
							"delete":"Supprimer"
						},
						"error":
						{
							"ports":"Port(s) incorrect(s)."
						}
					}
				}
			}
		},
		"network":
		{
			"natpat":
			{
				"label":
				{
					"title":"réseau",
					"tab":"NAT/PAT",
					"setup":"Configuration des règles de NAT/PAT.",
					"description":"Configuration NAT/PAT",
					"info":"Les règles NAT/PAT sont nécessaires pour autoriser une communication initiée depuis Internet pour atteindre un appareil spécifique de votre réseau. Vous pouvez aussi définir le(s) port(s) sur lequel cette communication sera acheminée.<br/><br/>NB : les règles NAT/PAT suivantes s'appliquent uniquement à IPv4.",
					"warning":"Assurez-vous de ne pas avoir filtré ces ports dans le pare-feu",
					"personaltunes":"Règles personnalisées",
					"application":"<b>application / service</b>",
					"internalport":"<b>port<br/>interne</b>",
					"externalport":"<b>port<br/>externe</b>",
					"protocol":"<b>protocole</b>",
					"device":"<b>appareil</b>",
					"bothprotocol":"les deux",
					"editnewline":"nouveau…",
					"editnewhost":"nouveau…",
					"error":"Les champs ne doivent pas être vides",
					"error1":"Valeur de port invalide",
					"error2":"La valeur du port externe est une valeur réservée",
					"error3":"La règle existe déja",
					"error4":"la règle est en conflit avec une règle existante",
					"error5":"La nouvelle règle est en conflit avec une règle UPnP",
					"error6":"Adresse IP est invalide ou située en dehors du sous réseau de la Livebox",
					"error7":"Impossible de créer une règle NAT car le port est utilisé par l'application M2M ",
                                        "error8":"Impossible de créer une règle NAT car le port est utilisé par le WiFi partagé",
                                        "error9":"Impossible de créer une règle NAT car le port est utilisé par le protocole SSH "
				},
				"text":
				{
					"help":"<h6>NAT/PAT</h6><br/>Certaines applications nécessitent d'ouvrir des ports spécifiques pour fonctionner correctement. Il peut s'agir de certains jeux en ligne ou de serveurs type FTP, SSH, web...<br/><br/>Pour permettre la communication entre votre appareil et le serveur (ou client) distant, il vous faudra alors configurer une adresse IP statique dans la page <a href='/advConfigNetworkDhcp.html'>DHCP</a> ou fixe sur votre équipement en dehors de la plage du DHCP, puis configurer une règle de NAT en indiquant le type d'application, les ports interne (réseau local) et externe (Internet) ainsi que le protocole et l'appareil qui doit recevoir les informations. "
				},
				"tooltip":
				{
					"externalport":"(ex:1000-2000)",
					"internalport":"(ex:1000)"
				}
			},
			"dhcp":
			{
				"label":
				{
					"help":"<h6>DHCP</h6><br/>Le serveur DHCP est une fonctionnalité de la Livebox qui permet d'assigner automatiquement une adresse IP aux appareils du réseau domestique.<br/><br/>Dans la section \"Baux DHCP valides\", vous pouvez visualiser tous les appareils qui recoivent automatiquement une adresse choisie par le serveur.<br/><br/>Il est possible de demander au serveur DHCP d'assigner à un appareil une adresse IP de manière permanente. Cette opération est recommandée pour les fonctions de redirections de ports disponibles dans l'onglet <a href='/advConfigNetworkNatPat.html'>NAT/PAT</a>.<br/><br/> Attention, cette liste n'inclut pas les appareils sur lesquels vous avez manuellement assigné une adresse IP. L'ensemble de vos appareils est disponible sur la <a href='/'>page d'accueil</a>.",
					"title":"réseau",
					"subtitle":"le serveur DHCP de la Livebox permet d'attribuer une adresse IP à chaque appareil de votre réseau local.",
					"tab":"DHCP",
					"editnewlease":"nouveau…",
					"setup":"configuration DHCP",
					"serveripv4":"serveur DHCP IPv4",
					"serveripv6":"serveur DHCP IPv6",
					"liveboxip":"adresse IP de la Livebox",
					"mask":"masque de sous-réseau du LAN",
					"startip":"adresse IP de début",
					"endip":"adresse IP de fin",
					"info":"Vous pouvez visualiser les adresses IP dynamiques attribuées par le serveur DHCP de la Livebox.",
					"dynamicip":"Baux DHCP valides",
					"name":"nom",
					"ip":"adresse IP",
					"macaddress":"adresse MAC",
					"delete":"supprimer",
					"staticip":"Baux DHCP statiques",
					"ipv4":"IPv4 :",
					"ipv6":"IPv6 :"
				},
				"info":
				{
					"comment":"Vous pouvez r&eacute;server une adresse IP statique &agrave; chaque équipement de votre réseau local. L'équipement aura donc systématiquement la même adresse sur votre réseau local.",
					"disable":"Vous souhaitez désactiver le serveur DHCP. Attention, cette action peut entraîner la perte du service TV. Confirmez-vous votre choix ?"
				},
				"error":
				{
					"empty":
					{
						"label":"erreur",
						"description":"champ vide"
					},
					"withinsubnet":"L'adresse IP doit figurer dans le sous réseau",
					"withinrange":"L'adresse IP doit figurer dans l'intervalle DHCP",
					"reservedip":"Il s'agit d'une adresse IP réservée",
					"limitedipaddress":"L'adresse IP doit figurer dans l'intervalle",
					"macaddress":"mauvaise adresse MAC",
					"subnetMask":"mauvais masque",
					"ipaddress":
					{
						"bad":"mauvaise adresse IP",
						"maxAddress":"mauvaise adresse de fin",
						"minAddress":"mauvaise adresse de début",
						"device":"Modification impossible du fait d'équipements connectés"
					},
					"usedmacaddress":"adresse MAC utilisé",
					"usedipaddress":"adresse IP utilisé",
					"conflict":
					{
						"subnet192168128":"Le sous réseau est en conflit avec le sous réseau réservé 192.168.128.0/24",
						"subnet192168002":"Le sous réseau est en conflit avec le sous réseau réservé 192.168.2.0/24",
						"subnet192168050":"Le sous réseau est en conflit avec le sous réseau réservé 192.168.50.0/24"
					},
					"outofrangestaticip":"Au moins une adresse IP statique est en dehors de l'intervalle DHCP défini. Il faut soit modifier l'intervalle DHCP choisi ou supprimer l'appareil enregistré avec une adresse IP statique. "
				}
			},
			"dns":
			{
				"label":
				{
					"title":"réseau",
					"subtitle":"Le serveur DNS sert à convertir les noms de domaine en adresses IP et inversement.",
					"tab":"DNS",
					"setup":"Configuration DNS",
					"primaryv4":"DNS primaire IPv4",
					"secondaryv4":"DNS secondaire IPv4",
					"primaryv6":"DNS primaire IPv6",
					"secondaryv6":"DNS secondaire IPv6",
					"info":"Vous pouvez visualiser tous les appareils de votre réseau local",
					"localnetwork":"appareils du réseau local",
					"name":"nom",
					"dnsname":"nom DNS",
					"ipaddress":"adresse IP",
					"ipv4":"IPv4 :",
					"ipv6":"IPv6 :"
				},
				"text":
				{
					"help":"<h6>DNS</h6>Les serveurs DNS d'orange sont utilisés par défaut et ne sont pas modifiable sur la Livebox<br/><h6>Noms DNS sur le réseau local</h6>Vous pouvez donner un nom à chacun de vos appareils pour mieux les retrouver si vous en avez besoin."
				},
				"error":
				{
					"empty":
					{
						"description":"valeur vide"
					},
					"length":
					{
						"description":"valeur limitée à 64 caractères"
					},
					"invalid":
					{
						"description":"Nom de périphérique invalide"
					}
				}
			},
			"upnp":
			{
				"label":
				{
					"title":"réseau",
					"subtitle":"La fonction UPnP IGD permet aux applications d'ouvrir des règles NAT/PAT automatiquement en toute sécurité (utile pour messagerie instantanée, jeux en ligne ...) ",
					"tab":"UPnP",
					"setup":"configuration UPnP",
					"info":"&nbsp;activer UPnP IGD",
					"table":"table des règles UPnP IGD",
					"application":"application/service",
					"externport":"port externe",
					"internport":"port interne",
					"protocol":"protocole",
					"nameadress":"nom / adresse IP",
					"hostipaddress":"adresse IP hote",
					"ipv4":"IPv4 :",
					"ipv6":"IPv6 :"
				},
				"warning":"Les applications qui ont créées des règles de NAT via UPnP IGD peuvent ne plus fonctionner correctement",
				"text":
				{
					"help":"<h6>Activer UPnP IGD</h6>Le service UPnP IGD est activé par défaut. Vous pouvez le désactiver si vous ne souhaitez pas que les apllications créent automatiquement des redirections de ports.<br/><br/><h6>Si vous souhaitez désactiver / activer ce service,</h6>n'oubliez pas de cliquer sur le bouton \"enregistrer\" pour que ce changement soit pris en compte."
				}
			},
			"dyndns":
			{
				"label":
				{
					"title":"réseau",
					"subtitle":"Cette page vous permet de configurer une DynDNS. Le service DynDNS vous permet d'attribuer un nom de domaine et d'hôte fixe, facile à mémoriser, à une adresse IP statique ou dynamique ou une longue URL. Ainsi vous pourrez accéder à votre serveur sur votre réseau local.",
					"tab":"DynDNS",
					"info":"Utiliser DynDNS peut s'avérer utile si vous hébergez un site web, un serveur FTP ou tout autre type de serveur derrière votre Livebox. Vous pourrez ainsi le retrouver avec un nom du type monserveur.dyndns.org",
					"setup":"configuration DynDNS",
					"localnetwork":"",
					"hostname":"nom d'h&ocirc;te<br/>complet",
					"username":"nom d'utilisateur<br/>email",
					"lastupdate":"dernière mise à jour",
					"service":"service",
					"none":"aucune"
				},
				"text":
				{
					"help":"<h6>service</h6>Choisissez le fournisseur DynDNS auquel vous avez souscrit le nom DynDNS.<br/><br/><h6>Nom d'hôte</h6>Choisissez votre nom de domaine.<br/><br/><h6>Identifiant / e-mail</h6>Saisissez le nom d'utilisateur correspondant à votre compte DynDNS.<br/><br/><h6>Mot de passe</h6>Saisissez le mot de passe correspondant à votre compte DynDNS<br/>"
				},
				"error":"serveur invalide",
				"errorduplicate":"nom d'hote déjà utilisé par un autre service"
			},
			"dmz":
			{
				"label":
				{
					"title":"réseau",
					"subtitle":"La fonction DMZ permet à un de vos ordinateurs d'être accessible depuis Internet.",
					"ipv6restrict":"ONLY FOR TP",
					"tab":"DMZ",
					"setup":"configuration DMZ",
					"info":"configurer une DMZ sur un ordinateur",
					"dmz":"DMZ",
					"name":"nom",
					"ip":"adresse IP",
					"macaddress":"adresse MAC",
					"warning":"vous devez associer une adresse IP statique à cet appareil dans la page DHCP",
					"current":"la DMZ actuelle est :",
					"nodmz":"aucune",
					"staticip":"adresse statique...",
					"ipv4":"IPv4 :",
					"ipv6":"IPv6 :"
				},
				"text":
				{
					"help":"<h6>Configurer une DMZ</h6>Tous les ports de votre ordinateur seront accessbiles depuis Internet et redirigés vers l'adresse IP de l'équipement. <br/><br/>Pour configurer une DMZ sur votre ordinateur, vous devez associer une adresse IP statique à cet équipement dans la page DHCP. <br/><br/>Pour IPv6, vous pouvez ouvrir les ports pour les appareils dans la page de <a href='/advConfigFirewall.html'>configuration du pare-feu</a>."
				},
				"error":
				{
					"ipaddress":
					{
						"bad":"adresse IP invalide"
					}
				}
			},
			"ntp":
			{
				"label":
				{
					"help":"",
					"title":"réseau",
					"subtitle":"configurer le fuseau horaire de la Livebox",
					"tab":"NTP",
					"currentdate":"date courante: ",
					"timezone":"sélectionner un fuseau horaire:"
				}
			}
		},
		"ports":
		{
			"label":
			{
				"title":"configuration des ports",
				"subtitle":"configuration des ports ethernet pour la TV",
				"nostb":"TO BE DEFINED",
				"onesat":"TO BE DEFINED",
				"oneinet#amea":"TO BE DEFINED",
				"srvinet#amea":"TO BE DEFINED",
				"oneinet":"TO BE DEFINED",
				"srvinet":"TO BE DEFINED",
				"fullrouted":"je n'ai pas de décodeur TV Orange<br />ou j'ai un décodeur TV Orange",
				"bridged":"j'ai plusieurs décodeurs TV Orange",
				"info":"je peux brancher mes appareils à Internet et mes deux décodeurs TV sur les ports Ethernet suivants:",
				"liveboxports":"ports de la Livebox",
				"computers":"ordinateurs",
				"stb":"décodeur tv",
				"sat":"Satellite TV ",
				"iptv":"Internet TV ",
				"iptv1":"Internet TV 1",
				"iptv2":"Internet TV 2",
				"ftth":"FTTH",
				"automatic":
				{
					"mode":"Automatiquement"
				},
				"manually":
				{
					"mode":"Manuellement",
					"bridged":"Bridged",
					"routed":"Routed",
					"disabled":"Désactivé"
				},
				"bridged2":"I have more than one Internet set top box",
				"fullrouted2":"I have no set top box or one set top box (Internet TV or satellite TV)"
			},
			"info":
			{
				"comment":"Si vous avez deux décodeurs TV, vous ne pouvez pas bénéficier du service \"accès multimédia\" de la Livebox et du décodeur TV"
			},
			"text":
			{
				"help":"<h6>La TV par orange</h6>Ce sont des chaines exclusives, des offres de vidéo à la demande, la TV de rattrapage et bien plus encore."
			}
		},
		"accesstype":
		{
			"label":
			{
				"title":"connexion à Internet",
				"subtitle":"Cette page vous permet de modifier la configuration de votre accès à Internet.",


				"subtitle_withoutpnp":"Votre Livebox est connectée au réseau Orange, vous pouvez maintenant activer vos services en saisissant ci-dessous votre identifiant et votre mot de passe de connexion Internet.",

				"offer":"veuillez sélectionner l'offre à laquelle vous avez souscrit:",
				"howtoinstall":"veuillez saisir votre identifiant et votre mot de passe de connexion.",
				"geographicalparams":"paramètres géographiques:",
				"adslparams":"paramètres ADSL:",
				"wanparams":"paramètres WAN:",
				"country":"votre pays:",
				"countries":
				{
					"option":
					{
						"select":"Selectionnez",
						"luxembourg":"Luxembourg",
						"ivorycoast":"Côte d'Ivoire",
						"republicofmauritius":"Ile Maurice",
						"senegal":"Sénégal",
						"other":"Autre"
					}
				},
				"mode":"sélectionnez votre mode de connexion:",
				"pppmode":
				{
					"option":
					{
						"pppoe":"PPPoE",
						"pppoevcmux":"PPPoE avec encapsulation (VCMUX)",
						"pppoellc":"PPPoE avec encapsulation (LLC)",
						"pppoa":"PPPoA",
						"pppoewe":"PPPoE avec encapsulation"
					}
				},
				"vpvcsection":"paramètres VP / VC:",
				"vlansection":"paramètres VLAN:",
				"section":
				{
					"country":"veuillez sélectionner votre pays :"
				},
				"login":"identifiant<br/>de connexion",
				"password":"mot de passe<br/>de connexion",
				"warning":
				{
					"fr":"votre identifiant et votre mot de passe de connexion sont disponibles dans votre lettre de confirmation d'abonnement",
					"pl":"",
					"mini_fr":"votre identifiant et votre mot de passe de connexion sont disponibles dans votre lettre de confirmation d'abonnement"
				}
			},
			"mode":
			{
				"radiobutton":
				{
					"ppp":"PPP",
					"dhcp":"DHCP"
				}
			},
			"offer":
			{
				"adsl":
				{
					"radiobutton":"DSL"
				},
				"fiber":
				{
					"radiobutton":"La fibre"
				},
				"radiobutton":
				{
					"adsl":"ADSL",
					"fiber":"La fibre",
					"dhcp":"DHCP",
					"ppp":"PPP"
				}
			},
			"error":
			{
				"label":"saisie incorrecte",
				"description":"vérifiez que vous avez correctement saisi votre identifiant et votre mot de passe de connexion.",
				"orange":
				{
					"label":"attention",
					"description":"Vous ne pourvez pas modifier vos paramètres de connexion Internet tant que le service 'Orange Wifi' est activé."
				},
				"empty":
				{
					"label":"saisie incorrecte",
					"description":"vérifiez que vous avez correctement saisi votre identifiant et votre mot de passe de connexion."
				},
				"running":
				{
					"label":"authentification",
					"description":"authentification en cours"
				},
				"adsl_link":
				{
					"label":"erreur ADSL",
					"description":"liaison ADSL non disponible"
				},
				"ftth_link":
				{
					"label":"erreur FTTH",
					"description":"liaison FTTH non disponible"
				},
				"ppp_server":
				{
					"label":"erreur PPP",
					"description":"échec de connexion au serveur PPP"
				},
				"authentication":
				{
					"label":"erreur",
					"description":"erreur d'authentification"
				},
				"ppp_timeout":
				{
					"label":"erreur PPP",
					"description":"pas de réponse du serveur PPP"
				},
				"restart":
				{
					"label":"authentification",
					"description":"authentification en cours"
				},
				"profile":
				{
					"label":"Aucun pays sélectionné",
					"description":"Veuillez choisir un pays dans la liste"
				}
			},
			"warning":
			{
				"description":"La modification/enregistrement de votre identification et de votre mot de passe entraînera le redémarrage de votre Livebox."
			},
			"connected":
			{
				"label":"connecté",
				"description":"connecté"
			},
			"text":
			{
				"help":
				{
					"fr":"<h6>type de connexion</h6>votre Livebox est conçue pour fonctionner à la fois sur le réseau ADSL et sur le réseau Fibre. Un seul des modes de connexion est disponible à la fois.<br/><br/><h6>identifiant de connexion</h6>cet identifiant vous identifie en tant que client Orange et vous permet de b&eacute;n&eacute;ficier d'Internet et de tous vos services Orange. Il commence par fti/ (ex: fti/wwpfiz27). Conservez-le pr&eacute;cieusement, il pourra vous servir si vous devez reconfigurer vorte connexion (changement d'ordinateur,...).<br/><br/><h6>mot de passe de connexion</h6>associ&eacute; &agrave; votre identifiant de connexion, il vous permet d'acc&eacute;der &agrave; internet.",
					"pl":"",
					"mini_fr":"<h6>type de connexion</h6>votre Livebox est conçue pour fonctionner à la fois sur le réseau ADSL et sur le réseau Fibre. Un seul des modes de connexion est disponible à la fois.<br/><br/><h6>identifiant de connexion</h6>cet identifiant permet aux serveurs Orange de vous reconnaître en tant que client et vous permet de b&eacute;n&eacute;ficier &agrave; Internet. Il commence par fti/ (ex: fti/wwpfiz27). Conservez-le pr&eacute;cieusement, il pourra vous servir si vous devez reconfigurer vorte connexion (changement d'ordinateur,...).<br/><br/><h6>mot de passe de connexion</h6>associ&eacute; &agrave; votre identifiant de connexion, c'est la \"cl&eacute;\" qui vous ouvre les porte d'internet."
				}
			},
			"status":
			{
				"connection":
				{
					"label":"authentification",
					"description":"authentification en cours"
				}
			}
		},
		"admin":
		{
			"label":
			{
				"title":"administration",
				"subtitle":"modifier le mot de passe d'administration de la Livebox",
				"info":"compte d'administration : admin",
				"password":"mot de passe courant : ",
				"newpassword":"nouveau mot de passe :",
				"confirmnewpassword":"confirmation du nouveau mot de passe : ",
				"passwordmodified":"votre mot de passe a été modifié"
			},
			"text":
			{
				"help":"<h6>Compte d'administration de la Livebox</h6>Le compte d'administration admin n'est pas modifiable. <h6>Mot de passe d'administration de la Livebox</h6>Le mot de passe d'administration de la Livebox vous permet de vous authentifier sur votre Livebox. Il est modifiable et il vous sera demandé à chaque connexion pour accéder aux pages \"configuration\", \"assistance\" et \"configuration avancée\""
			},
			"error":
			{
				"label":
				{
					"currentpassword":"mot de passe invalide",
					"newpassword":"mot de passe invalide",
					"confirmnewpassword":"mot de passe invalide"
				},
				"description":
				{
					"currentpassword":"mot de passe courant invalide",
					"newpassword":"mot de passe invalide. Il doit comporter entre 4 et 32 caractères",
					"confirmnewpassword":"les mots de passe sont différents ",
					"success":"le mot de passe a été changé avec succès",
					"empty":"mot de passe vide"
				}
			}
		},
		"fxo":
		{
			"label":
			{
				"title":"phone line configuration",
				"subtitle":"If phone line is configured as activated, you can receive and make calls using your fix line number on the telephone connected to the Livebox. In case it is deactivated, only Internet line phone calls can be received and initialized via the telephone connected to the Livebox.",
				"activated":"activated",
				"deactivated":"deactivated"
			}
		},
		"ipv6":
		{
			"label":
			{
				"help":"TO BE DEFINED",
				"title":"Activation de l'Internet IPv6",
				"status":"Actuellement, le statut de votre connectivité IPv6 est :",
				"prefix":"Le préfixe de votre Livebox est :",
				"modify":"Vous avez la possibilité de modifier la demande de connectivité IPv6 :"
			}
		}
	},
	"rescuefirmware":
	{
		"label":
		{
			"title":"rescue firmware",
			"subtitle":"une mise à jour du logiciel est en cours dans votre Livebox.  cette mise à jour dure entre 5 et 15 minutes, période durant laquelle vous ne pouvez pas avoir accès à Internet. a la fin de la mise à jour, votre Livebox redémarre automatiquement.",
			"offer":"veuillez sélectionner l'offre à laquelle vous avez souscrit:",
			"howtoinstall":"veuillez saisir votre identifiant et votre mot de passe de connexion.",
			"login":"identifiant<br/>de connexion",
			"password":"mot de passe<br/>de connexion",
			"warning":"votre identifiant et votre mot de passe de connexion sont disponibles dans votre lettre de confirmation d'abonnement"
		},
		"offer":
		{
			"radiobutton":
			{
				"adsl":"DSL",
				"fiber":"La fibre"
			}
		},
		"error":
		{
			"label":"attention",
			"description":"n'éteignez pas votre Livebox durant la mise à jour du logiciel."
		}
	},
	"firmwareupgrade":
	{
		"label":
		{
			"title":"rescue firmware",
			"subtitle":"Une mise à jour du logiciel de la Livebox est en cours d'installation.  Pendant cette procédure, le voyant bleu de votre Livebox va clignoter et vous ne pourrez pas accéder à Internet pendant 15 minutes. Votre Livebox va redémarrer automatiquement.<br/>Merci de ne pas éteindre votre Livebox ou de débrancher le lien DSL tant que le voyant bleu clignote. Cette mise à jour ne peut être arrêtée."
		}
	},
	"legal":
	{
		"label":
		{
			"title":"informations légales",
			"comment":"La passerelle domestique Livebox se base notamment sur des logiciels publiés sous une licence dite libre ou open source, comme par exemple le noyau Linux, Busybox ou Iptables, tous les trois publiés selon les termes de la licence <a title='licence publique générale GNU' href='GPL_FR.txt' target='blank'>GNU General Public License (GNU GPL)</a>. Le client peut consulter la liste des logiciels concernés, leur licence et télécharger leur code source complet et correspondant sur le site web <a title='lien vers le site opensource.orange.com' href='http://opensource.orange.com' target='_blank'>http://opensource.orange.com</a>. Pour chaque version d'un logiciel concerné, le client pourra accéder à l'ensemble de ces informations tant que cette version sera mise à disposition via la Livebox, puis pendant trois (3) ans après la date de déploiement d'une nouvelle version du logiciel ou du terme définitif de la mise à disposition de ladite version via la Livebox. Avant d'utiliser l'un de ces logiciels disponibles sur le site web <a title='lien vers le site opensource.orange.com' href='http://opensource.orange.com' target='_blank'>http://opensource.orange.com</a>, le client devra préalablement prendre connaissance de la licence associée et en accepter les termes et conditions. En outre, le client reconnaît que ces logiciels ne font pas l'objet de garantie conformément aux termes de la licence qui leur est applicable."
		}
	},
	"restoration":
	{
		"label":
		{
			"help":"",
			"title":"restaurer la configuration",
			"browsfieldlabel":"Nom du fichier",
			"tryagain":"Veuillez sélectionner de nouveau votre fichier de restauration.",
			"stependmsg":"<p>La restauration de la configuration est en cours. Votre Livebox va red&eacute;marrer automatiquement. Veuillez patienter quelques minutes…</p><p>Une fois la restauration terminée, vous pourrez naviguer sur Internet.</p><p>Si vous souhaitez de nouveau accéder à l'interface, tapez livebox dans la barre d'adresse de votre navigateur.</p><p>En cas d'échange de Livebox :<br/>Grâce à la restauration, vos équipements se reconnectent automatiquement sur votre nouvelle Livebox.<br/>Pour associer un nouveau périphérique, vous pouvez utiliser l'appairage facile (WPS), ou encore utiliser les paramètres que vous trouverez dans le menu WiFi de votre interface Livebox.</p>"
		},
		"info":
		{
			"comment":"Pour restaurer la configuration de la Livebox, veuillez sélectionner le fichier de restauration avec le bouton \"parcourir\" puis cliquez sur le bouton \"restaurer\".",
			"filetype":"<h5>L'extension par défaut du fichier de sauvegarde est “.livebox”.</h5>",
			"credentials":"Vous n'avez pas besoin de saisir votre identifiant et mot de passe de connexion. Les appareils déjà connectés se reconnecteront automatiquement. Vos autres paramètres (pare feu, réseau…) seront aussi restaurés.",
			"inprogress":"Restauration en cours"
		},
		"xhr2":
		{
			"error":
			{
				"label":"erreur",
				"description":"Version de navigateur non compatible avec la fonction restaurer, merci d'utiliser un navigateur plus récent"
			}
		},
		"nofile":
		{
			"error":
			{
				"label":"erreur",
				"description":"aucun fichier à restaurer"
			}
		},
		"upload":
		{
			"error":
			{
				"label":"erreur",
				"description":"fichier invalide"
			}
		}
	},
	"internetblocked":
	{
		"label":
		{
			"title":"Accès Internet bloqué",
			"comment":"Votre droit d'accès Internet a été modifé et vous n'avez pas d'accès Internet actuellement.<br><br>Cette restriction a été définie probalement par un membre de votre famille (non pas par votre opérateur)."
		}
	},
	"filesbrowser":
	{
		"label":
		{
			"title":"PAGE ONLY FOR TP",
			"subtitle":"PAGE ONLY FOR TP",
			"help":"PAGE ONLY FOR TP",
			"massstorage":"PAGE ONLY FOR TP",
			"copy":"PAGE ONLY FOR TP",
			"paste":"PAGE ONLY FOR TP",
			"rename":"PAGE ONLY FOR TP",
			"download":"PAGE ONLY FOR TP",
			"open":"PAGE ONLY FOR TP"
		}
	},
	"routing":
	{
		"label":
		{
			"help":"TO BE DEFINED",
			"title":"routage",
			"subtitle":"Cette page vous permet de configurer une table de routage statique.",
			"table":
			{
				"title":"Table de routage :",
				"header":
				{
					"dest":"Réseau de destination",
					"mask":"Masque de sous-réseau de destination",
					"gateway":"Passerelle",
					"enable":"Activer",
					"delete":"Supprimer"
				},
				"error":
				{
					"dest":"Adresse IP réseau incorrecte.",
					"mask":"Masque de sous-réseau incorrect.",
					"gateway":"Adresse IP de passerelle incorrecte."
				}
			},
			"warning":
			{
				"title":"Attention : ",
				"message":"La définition des règles de routage est réservée à des usages particuliers nécessitant des connaissances sur les réseaux. Certaines règles définies pourront entrainer un dysfonctionnement de vos services Orange. "
			}
		}
	},
	"ipphone":
	{
		"phonebook":
		{
			"label":
			{
				"title":"mes contacts",
				"subtitle":"Vous pouvez gérer votre carnet d'adresses en ajoutant, modifiant ou supprimant des contacts. La liste des contacts sera mise à jour automatiquement dans vos téléphones par Internet.",
				"search":"Rechercher un contact :",
				"tabletitle":"carnet d'adresses",
				"firstname":"Prénom",
				"lastname":"Nom",
				"number":"Numéro de tél.",
				"type":"Type",
				"melody":"sonnerie",
				"edit":"modifier",
				"synchronise":"Synchronise the contact list with my handsets",
				"addcontact":"Ajouter de nouveaux contacts",
				"addressbooksynchro":"Synchronisation avec vos carnets d'adresses Orange",
				"error":"Le format n'est pas correct, veuiller saisir la valeur au bon format",
				"help":"Cette page va vous permettre de gérer votre carnet d'adresses, d'y ajouter, modifier ou supprimer des contacts, d'associer une sonnerie à chaque contact.<br/>Votre carnet d'adresses est mis à jour automatiquement dans vos téléphones par Internet. "
			},
			"edit":
			{
				"label":
				{
					"title":"Modifier un contact",
					"subtitle":"Vous pouvez modifier les informations relatives à votre contact.",
					"tabletitle":"modifier contact",
					"firstname":"Prénom",
					"lastname":"Nom",
					"number":"Numéro de tél.",
					"type":"Type",
					"melody":"Sonnerie",
					"listen":"écouter",
					"remove":"supprimer",
					"deletecontact":"supprimer",
					"help":"Cliquer sur le bouton pour valider et sauvegarder vos modifications"
				}
			},
			"newcontact":
			{
				"label":
				{
					"title":"ajouter un contact",
					"subtitle":"Remplissez les champs ci-dessous pour créer un nouveau contact dans votre carnet d'adresses.",
					"tabletitle":"nouveau contact",
					"firstname":"Prénom",
					"lastname":"Nom",
					"number":"Numéro de tél.",
					"type":"Type",
					"melody":"sonnerie",
					"listen":"écouter",
					"help":"ajouter un nouveau contact dans votre carnet d'adresse en remplissant les champs. Vous pouvez choisir une sonnerie pour chaque contact."
				}
			}
		},
		"pairphones":
		{
			"label":
			{
				"help":"Vous pouvez associer vos téléphones à partir de l'interface de la Livebox. En cas d'erreur, assurez-vous que vous n'avez pas plus de 3 téléphones dans la liste. Si c'est le cas, vous devez supprimer un des téléphones afin de pouvoir en associer un nouveau.",
				"title":"association des téléphones par Internet",
				"subtitle":"Les téléphones associés à la Livebox sont listés ci-dessous. Si vous souhaitez associer un nouveau téléphone, cliquer sur le bouton « associer ».Si vous souhaitez déconnecter un téléphone de la Livebox, cliquer sur le bouton « supprimer ». Cela prendra effet lors du prochain redémarrage de votre combiné. ",
				"tabletitle":"téléphones associés",
				"phoneid":"N° du téléphone",
				"phonename":"Nom du téléphone",
				"edit":"modifier",
				"unpair":"supprimer",
				"pairnewphone":"associer un nouveau téléphone",
				"inprogress":"association en cours",
				"error":
				{
					"title":"Erreur : aucun nouveau téléphone ne peut être associé. Vous devez supprimer un des téléphones connectés si vous souhaitez connecter un nouveau.",
					"msg":"le téléphone n'a pas été associé, veuillez ré-essayer. Assurez-vous que votre téléphone est en mode association et que vous avez entré le code PIN."
				}
			}
		},
		"phonesettings":
		{
			"label":
			{
				"help":"Les paramètres de la base du téléphone Haute Definition intégrée dans la Livebox sont présentés dans cette page. Certains sont modifiables ou peuvent être ré-initialisés. Lors de la ré-initialisation, les paramètres par défaut seront appliqués.<br/> Nota bene : le code PIN  sera mis à la valeur  \"0000\" et le contenu du journal des appels sera effacé.",
				"title":"paramètres du téléphone",
				"subtitle":"Vous trouverez ci-dessous les paramètres de la base du téléphone Haute Définition intégrée dans la Livebox et relatifs à votre téléphone par Internet. ",
				"pincodesection":"modification du code PIN",
				"pincodedesc":"Le code PIN courant est le suivant. Si vous voulez le modifier, veuillez saisir la nouvelle valeur puis cliquer sur le bouton \"modifier\".",
				"pincode":"Code PIN :",
				"pinerror":
				{
					"title":"Saisie incorrecte",
					"msg":"le code PIN ne peut contenir que 4 chiffres (0~9)."
				},
				"pinwarning":
				{
					"title":"Attention :",
					"msg":"Vous venez de modifier le code PIN, sa nouvelle valeur sera à utiliser lors de l'association d'un nouveau téléphone"
				},
				"reset":
				{
					"title":"ré-initialisation de la base du téléphone Haute Définition de la Livebox",
					"desc":"En cliquant sur le bouton, vous pouvez ré-initialiser la base du téléphone Haute Définition de la Livebox. Les paramètres par défaut seront appliqués.<br/> Nota bene : le code PIN  sera mis à la valeur  “0000” et le contenu du journal des appels sera effacé.",
					"btn":"ré-initialisation"
				},
				"catiq":
				{
					"title":"Version Cat-iq",
					"value":"Cat-iq"
				},
				"firmware":
				{
					"title":"version logicielle de la base"
				},
				"rfpi":
				{
					"title":"RFPI"
				}
			}
		}
	},
	"servicesaccounts":
	{
		"label":
		{
			"title":"Accéder aux comptes des services Téléphone par Internet et TV d'Orange",
			"subtitle":"En cliquant sur les liens suivants, vous pouvez accéder en ligne à vos comptes de services Téléphone et Télévision d'Orange.",
			"voiplink":"Accès à mon compte téléphone par Internet",
			"tvlink":"Accès à mon compte TV d'Orange",
			"help":"Ces liens vous permettent d'accéder à vos comptes téléphone par Internet, TV d'Orange et Internet."
		}
	},
	"gnu":
	{
		"gpl":
		{
			"label":
			{
				"title":"GNU General Public License (GNU GPL)"
			},
			"licence":"Licence Publique Générale GNU<br/>Benjamin Drieu, APRIL (bdrieu@april.org), Mélanie Clément-Fontaine (melanie@amberlab.net), Arnaud Fontaine (arnaud@crao.net), Loïc Dachary (loic@gnu.org), Frédéric Couchet (fcouchet@fsffrance.org). <br/><br/>This is an unofficial translation of the GNU General Public License into French. It was not published by the Free Software Foundation, and does not legally state the distribution terms for software that uses the GNU GPL--only the original English text of the GNU GPL does that. However, we hope that this translation will help French speakers understand the GNU GPL better. <br/>Ceci est une traduction non officielle de la GNU General Public License en français. Elle n'a pas été publiée par la Free Software Foundation, et ne détermine pas les termes de distribution pour les logiciels qui utilisent la GNU GPL, seul le texte anglais original de la GNU GPL déterminent ces termes. Cependant, nous espérons que cette traduction aidera les francophones à mieux comprendre la GNU GPL. <br/><br/>Licence Publique Générale GNU<br/>Les licences de la plupart des logiciels sont conçues pour vous enlever toute liberté de les partager et de les modifier. <br/>A contrario, la Licence Publique Générale est destinée à garantir votre liberté de partager et de modifier les logiciels libres, et à assurer que ces logiciels soient libres pour tous leurs utilisateurs. <br/>La présente Licence Publique Générale s'applique à la plupart des logiciels de la Free Software Foundation, ainsi qu'à tout autre programme pour lequel ses auteurs s'engagent à l'utiliser.<br/>(Certains autres logiciels de la Free Software Foundation sont couverts par la GNU Lesser General Public License à la place.)<br/>Vous pouvez aussi l'appliquer aux programmes qui sont les vôtres.<br/>Quand nous parlons de logiciels libres, nous parlons de liberté, non de prix.<br/>Nos licences publiques générales sont conçues pour vous donner l'assurance d'être libres de distribuer des copies des logiciels libres (et de facturer ce service, si vous le souhaitez), de recevoir le code source ou de pouvoir l'obtenir si vous le souhaitez, de pouvoir modifier les logiciels ou en utiliser des éléments dans de nouveaux programmes libres et de savoir que vous pouvez le faire. <br/>Pour protéger vos droits, il nous est nécessaire d'imposer des limitations qui interdisent à quiconque de vous refuser ces droits ou de vous demander d'y renoncer.<br/>Certaines responsabilités vous incombent en raison de ces limitations si vous distribuez des copies de ces logiciels, ou si vous les modifiez.<br/>Par exemple, si vous distribuez des copies d'un tel programme, à titre gratuit ou contre une rémunération, vous devez accorder aux destinataires tous les droits dont vous disposez. <br/>Vous devez vous assurer qu'eux aussi reçoivent ou puissent disposer du code source.<br/>Et vous devez leur montrer les présentes conditions afin qu'ils aient connaissance de leurs droits.<br/>Nous protégeons vos droits en deux étapes : (1) nous sommes titulaires des droits d'auteur du logiciel, et (2) nous vous délivrons cette licence, qui vous donne l'autorisation légale de copier, distribuer et/ou modifier le logiciel.<br/>En outre, pour la protection de chaque auteur ainsi que la nôtre, nous voulons nous assurer que chacun comprenne que ce logiciel libre ne fait l'objet d'aucune garantie.<br/>Si le logiciel est modifié par quelqu'un d'autre puis transmis à des tiers, nous voulons que les destinataires soient mis au courant que ce qu'ils ont reçu n'est pas le logiciel d'origine, de sorte que tout problème introduit par d'autres ne puisse entacher la réputation de l'auteur originel.<br/>En définitive, un programme libre restera à la merci des brevets de logiciels.<br/>Nous souhaitons éviter le risque que les redistributeurs d'un programme libre fassent des demandes individuelles de licence de brevet, ceci ayant pour effet de rendre le programme propriétaire. <br/>Pour éviter cela, nous établissons clairement que toute licence de brevet doit être concédée de façon à ce que l'usage en soit libre pour tous ou bien qu'aucune licence ne soit concédée.<br/>Les termes exacts et les conditions de copie, distribution et modification sont les suivants:<br/>Conditions de copie, distribution et modification de la Licence Publique Générale GNU.<br/><br/>0. La présente Licence s'applique à tout programme ou tout autre ouvrage contenant un avis, apposé par le titulaire des droits d'auteur, stipulant qu'il peut être distribué au titre des conditions de la présente Licence Publique Générale.<br/>Ci-après, le \"Programme\" désigne l'un quelconque de ces programmes ou ouvrages, et un \"ouvrage fondé sur le Programme\" désigne soit le Programme, soit un ouvrage qui en dérive au titre des lois sur le droit d'auteur : en d'autres termes, un ouvrage contenant le Programme ou une partie de ce dernier, soit à l'identique, soit avec des modifications et/ou traduit dans un autre langage.<br/>(Ci-après, le terme \"modification\" implique, sans s'y réduire, le terme traduction)<br/>Chaque concessionaire sera désigné par \"vous\".<br/>Les activités autres que la copie, la distribution et la modification ne sont pas couvertes par la présente Licence ; elles sont hors de son champ d'application.<br/>L'opération consistant à exécuter le Programme n'est soumise à aucune limitation et les sorties du programme ne sont couvertes que si leur contenu constitue un ouvrage fondé sur le Programme (indépendamment du fait qu'il ait été réalisé par l'exécution du Programme).<br/>La validité de ce qui précède dépend de ce que fait le Programme.<br/>1. Vous pouvez copier et distribuer des copies à l'identique du code source du Programme tel que vous l'avez reçu, sur n'importe quel support, du moment que vous apposiez sur chaque copie, de manière ad hoc et parfaitement visible, l'avis de droit d'auteur adéquat et une exonération de garantie ; que vous gardiez intacts tous les avis faisant référence à la présente Licence et à l'absence de toute garantie ; et que vous fournissiez à tout destinataire du Programme autre que vous-même un exemplaire de la présente Licence en même temps que le Programme.<br/>Vous pouvez faire payer l'acte physique de transmission d'une copie, et vous pouvez, à votre discrétion, proposer une garantie contre rémunération.<br/>2. Vous pouvez modifier votre copie ou des copies du Programme ou n'importe quelle partie de celui-ci, créant ainsi un ouvrage fondé sur le Programme, et copier et distribuer de telles modifications ou ouvrage selon les termes de l'Article 1 ci-dessus, à condition de vous conformer également à chacune des obligations suivantes :<br/>a) Vous devez munir les fichiers modifiés d'avis bien visibles stipulants que vous avez modifié ces fichiers, ainsi que la date de chaque modification ;<br/>b) Vous devez prendre les dispositions nécessaires pour que tout ouvrage que vous distribuez ou publiez, et qui, en totalité ou en partie, contient ou est fondé sur le Programme - ou une partie quelconque de ce dernier - soit concédé comme un tout, à titre gratuit, à n'importe quel tiers, au titre des conditions de la présente Licence.<br/>c) Si le programme modifié lit habituellement des instructions de façon interactive lorsqu'on l'exécute, vous devez, quand il commence son exécution pour ladite utilisation interactive de la manière la plus usuelle, faire en sorte qu'il imprime ou affiche une annonce comprenant un avis de droit d'auteur ad hoc, et un avis stipulant qu'il n'y a pas de garantie (ou bien indiquant que c'est vous qui fournissez la garantie), et que les utilisateurs peuvent redistribuer le programme en respectant les présentes obligations, et expliquant à l'utilisateur comment voir une copie de la présente Licence.<br/>(Exception : si le Programme est lui-même interactif mais n'imprime pas habituellement une telle annonce, votre ouvrage fondé sur le Programme n'est pas obligé d'imprimer une annonce).<br/>Ces obligations s'appliquent à l'ouvrage modifié pris comme un tout. <br/>Si des éléments identifiables de cet ouvrage ne sont pas fondés sur le Programme et peuvent raisonnablement être considérés comme des ouvrages indépendants distincts en eux mêmes, alors la présente Licence et ses conditions ne s'appliquent pas à ces éléments lorsque vous les distribuez en tant qu'ouvrages distincts.<br/>Mais lorsque vous distribuez ces mêmes éléments comme partie d'un tout, lequel constitue un ouvrage fondé sur le Programme, la distribution de ce tout doit être soumise aux conditions de la présente Licence, et les autorisations qu'elle octroie aux autres concessionnaires s'étendent à l'ensemble de l'ouvrage et par conséquent à chaque et toute partie indifférement de qui l'a écrite. <br/>Par conséquent, l'objet du présent article n'est pas de revendiquer des droits ou de contester vos droits sur un ouvrage entièrement écrit par vous; son objet est plutôt d'exercer le droit de contrôler la distribution d'ouvrages dérivés ou d'ouvrages collectifs fondés sur le Programme. <br/>De plus, la simple proximité du Programme avec un autre ouvrage qui n'est pas fondé sur le Programme (ou un ouvrage fondé sur le Programme) sur une partition d'un espace de stockage ou un support de distribution ne place pas cet autre ouvrage dans le champ d'application de la présente Licence. <br/>3. Vous pouvez copier et distribuer le Programme (ou un ouvrage fondé sur lui, selon l'Article 2) sous forme de code objet ou d'exécutable, selon les termes des Articles 1 et 2 ci-dessus, à condition que vous accomplissiez l'un des points suivants :<br/>a) L'accompagner de l'intégralité du code source correspondant, sous une forme lisible par un ordinateur, lequel doit être distribué au titre des termes des Articles 1 et 2 ci-dessus, sur un support habituellement utilisé pour l'échange de logiciels; ou,<br/>b) L'accompagner d'une proposition écrite, valable pendant au moins trois ans, de fournir à tout tiers, à un tarif qui ne soit pas supérieur à ce que vous coûte l'acte physique de réaliser une distribution source, une copie intégrale du code source correspondant sous une forme lisible par un ordinateur, qui sera distribuée au titre des termes des Articles 1 et 2 ci-dessus, sur un support habituellement utilisé pour l'échange de logiciels; ou, <br/>c) L'accompagner des informations reçues par vous concernant la proposition de distribution du code source correspondant. (Cette solution n'est autorisée que dans le cas d'une distribution non commerciale et seulement si vous avez reçu le programme sous forme de code objet ou d'exécutable accompagné d'une telle proposition - en conformité avec le sous-Article b ci-dessus.) <br/>Le code source d'un ouvrage désigne la forme favorite pour travailler à des modifications de cet ouvrage. Pour un ouvrage exécutable, le code source intégral désigne la totalité du code source de la totalité des modules qu'il contient, ainsi que les éventuels fichiers de définition des interfaces qui y sont associés, ainsi que les scripts utilisés pour contrôler la compilation et l'installation de l'exécutable. Cependant, par exception spéciale, le code source distribué n'est pas censé inclure quoi que ce soit de normalement distribué (que ce soit sous forme source ou binaire) avec les composants principaux (compilateur, noyau, et autre) du système d'exploitation sur lequel l'exécutable tourne, à moins que ce composant lui-même n'accompagne l'exécutable. <br/>Si distribuer un exécutable ou un code objet consiste à offrir un accès permettant leur copie depuis un endroit particulier, alors l'offre d'un accès équivalent pour copier le code source depuis le même endroit compte comme une distribution du code source - même si les tiers ne sont pas contraints de copier le source en même temps que le code objet. <br/>4. Vous ne pouvez copier, modifier, concéder en sous-licence, ou distribuer le Programme, sauf tel qu'expressément prévu par la présente Licence. Toute tentative de copier, modifier, concéder en sous-licence, ou distribuer le Programme d'une autre manière est réputée non valable, et met immédiatement fin à vos droits au titre de la présente Licence. Toutefois, les tiers ayant reçu de vous des copies, ou des droits, au titre de la présente Licence ne verront pas leurs autorisations résiliées aussi longtemps que ledits tiers se conforment pleinement à elle. <br/>5. Vous n'êtes pas obligé d'accepter la présente Licence étant donné que vous ne l'avez pas signée. Cependant, rien d'autre ne vous accorde l'autorisation de modifier ou distribuer le Programme ou les ouvrages fondés sur lui. Ces actions sont interdites par la loi si vous n'acceptez pas la présente Licence. En conséquence, en modifiant ou distribuant le Programme (ou un ouvrage quelconque fondé sur le Programme), vous signifiez votre acceptation de la présente Licence en le faisant, et de toutes ses conditions concernant la copie, la distribution ou la modification du Programme ou d'ouvrages fondés sur lui.<br/>6. Chaque fois que vous redistribuez le Programme (ou n'importe quel ouvrage fondé sur le Programme), une licence est automatiquement concédée au destinataire par le concédant originel de la licence, l'autorisant à copier, distribuer ou modifier le Programme, sous réserve des présentes conditions. Vous ne pouvez imposer une quelconque limitation supplémentaire à l'exercice des droits octroyés au titre des présentes par le destinataire. Vous n'avez pas la responsabilité d'imposer le respect de la présente Licence à des tiers. <br/>7. Si, conséquement à une décision de justice ou l'allégation d'une transgression de brevet ou pour toute autre raison (non limitée à un probleme de brevet), des obligations vous sont imposées (que ce soit par jugement, conciliation ou autre) qui contredisent les conditions de la présente Licence, elles ne vous excusent pas des conditions de la présente Licence. Si vous ne pouvez distribuer de manière à satisfaire simultanément vos obligations au titre de la présente Licence et toute autre obligation pertinente, alors il en découle que vous ne pouvez pas du tout distribuer le Programme. Par exemple, si une licence de brevet ne permettait pas une redistribution sans redevance du Programme par tous ceux qui reçoivent une copie directement ou indirectement par votre intermédiaire, alors la seule façon pour vous de satisfaire à la fois à la licence du brevet et à la présente Licence serait de vous abstenir totalement de toute distribution du Programme. <br/>Si une partie quelconque de cet article est tenue pour nulle ou inopposable dans une circonstance particulière quelconque, l'intention est que le reste de l'article s'applique. La totalité de la section s'appliquera dans toutes les autres circonstances.<br/>Cet article n'a pas pour but de vous induire à transgresser un quelconque brevet ou d'autres revendications à un droit de propriété ou à contester la validité de la moindre de ces revendications ; cet article a pour seul objectif de protéger l'intégrité du système de distribution du logiciel libre, qui est mis en oeuvre par la pratique des licenses publiques. De nombreuses personnes ont fait de généreuses contributions au large spectre de logiciels distribués par ce système en se fiant à l'application cohérente de ce système ; il appartient à chaque auteur/donateur de décider si il ou elle veut distribuer du logiciel par l'intermédiaire d'un quelconque autre système et un concessionaire ne peut imposer ce choix. <br/>Cet article a pour but de rendre totalement limpide ce que l'on pense être une conséquence du reste de la présente Licence.<br/>8. Si la distribution et/ou l'utilisation du Programme est limitée dans certains pays que ce soit par des brevets ou par des interfaces soumises au droit d'auteur, le titulaire originel des droits d'auteur qui décide de couvrir le Programme par la présente Licence peut ajouter une limitation géographique de distribution explicite qui exclue ces pays afin que la distribution soit permise seulement dans ou entre les pays qui ne sont pas ainsi exclus. Dans ce cas, la présente Licence incorpore la limitation comme si elle était écrite dans le corps de la présente Licence. <br/>9. La Free Software Foundation peut, de temps à autre, publier des versions révisées et/ou nouvelles de la Licence Publique Générale. De telles nouvelles versios seront similaires à la présente version dans l'esprit mais pourront différer dans le détail pour prendre en compte de nouvelles problématiques ou inquiétudes. <br/>Chaque version possède un numéro de version la distinguant. Si le Programme précise le numéro de version de la présente Licence qui s'y applique et \"une version ultérieure quelconque\", vous avez le choix de suivre les conditions de la présente version ou de toute autre version ultérieure publiée par la Free Software Foundation. Si le Programme ne spécifie aucun numéro de version de la présente Licence, vous pouvez choisir une version quelconque publiée par la Free Software Foundation à quelque moment que ce soit.<br/>10. Si vous souhaitez incorporer des parties du Programme dans d'autres programmes libres dont les conditions de distribution sont différentes, écrivez à l'auteur pour lui en demander l'autorisation. Pour les logiciels dont la Free Software Foundation est titulaire des droits d'auteur, écrivez à la Free Software Foundation ; nous faisons parfois des exceptions dans ce sens. Notre décision sera guidée par le double objectif de préserver le statut libre de tous les dérivés de nos logiciels libres et de promouvoir le partage et la réutilisation des logiciels en général. <br/>ABSENCE DE GARANTIE<br/>11. COMME LA LICENCE DU PROGRAMME EST CONCEDEE A TITRE GRATUIT, AUCUNE GARANTIE NE S'APPLIQUE AU PROGRAMME, DANS LES LIMITES AUTORISEES PAR LA LOI APPLICABLE. SAUF MENTION CONTRAIRE ECRITE, LES TITULAIRES DU DROIT D'AUTEUR ET/OU LES AUTRES PARTIES FOURNISSENT LE PROGRAMME \"EN L'ETAT\", SANS AUCUNE GARANTIE DE QUELQUE NATURE QUE CE SOIT, EXPRESSE OU IMPLICITE, Y COMPRIS, MAIS SANS Y ETRE LIMITE, LES GARANTIES IMPLICITES DE COMMERCIABILITE ET DE LA CONFORMITE A UNE UTILISATION PARTICULIERE. VOUS ASSUMEZ LA TOTALITE DES RISQUES LIES A LA QUALITE ET AUX PERFORMANCES DU PROGRAMME. SI LE PROGRAMME SE REVELAIT DEFECTUEUX, LE COUT DE L'ENTRETIEN, DES REPARATIONS OU DES CORRECTIONS NECESSAIRES VOUS INCOMBENT INTEGRALEMENT.<br/>12. EN AUCUN CAS, SAUF LORSQUE LA LOI APPLICABLE OU UNE CONVENTION ECRITE L'EXIGE, UN TITULAIRE DE DROIT D'AUTEUR QUEL QU'IL SOIT, OU TOUTE PARTIE QUI POURRAIT MODIFIER ET/OU REDISTRIBUER LE PROGRAMME COMME PERMIS CI-DESSUS, NE POURRAIT ETRE TENU POUR RESPONSABLE A VOTRE EGARD DES DOMMAGES, INCLUANT LES DOMMAGES GENERIQUES, SPECIFIQUES, SECONDAIRES OU CONSECUTIFS, RESULTANT DE L'UTILISATION OU DE L'INCAPACITE D'UTILISER LE PROGRAMME (Y COMPRIS, MAIS SANS Y ETRE LIMITE, LA PERTE DE DONNEES, OU LE FAIT QUE DES DONNEES SOIENT RENDUES IMPRECISES, OU LES PERTES EPROUVEES PAR VOUS OU PAR DES TIERS, OU LE FAIT QUE LE PROGRAMME ECHOUE A INTEROPERER AVEC UN AUTRE PROGRAMME QUEL QU'IL SOIT) MEME SI LE DIT TITULAIRE DU DROIT D'AUTEUR OU LE PARTIE CONCERNEE A ETE AVERTI DE L'EVENTUALITE DE TELS DOMMAGES. <br/>FIN DES CONDITIONS<br/>Comment appliquer ces conditions à vos nouveaux programmes<br/>Si vous développez un nouveau programme, et si vous voulez qu'il soit de la plus grande utilité possible pour le public, le meilleur moyen d'y parvenir est d'en faire un logiciel libre que chacun peut redistribuer et modifier au titre des présentes conditions.<br/>Pour ce faire, munissez le programme des avis qui suivent. Le plus sûr est de les ajouter au début de chaque fichier source pour véhiculer le plus efficacement possible l'absence de toute garantie ; chaque fichier devrait aussi contenir au moins la ligne \"copyright\" et une indication de l'endroit où se trouve l'avis complet. <br/>[Une ligne donnant le nom du programme et une courte idée de ce qu'il fait.] Copyright (C) [année] [nom de l'auteur] Ce programme est un logiciel libre ; vous pouvez le redistribuer et/ou le modifier au titre des clauses de la Licence Publique Générale GNU, telle que publiée par la Free Software Foundation ; soit la version 2 de la Licence, ou (à votre discrétion) une version ultérieure quelconque. Ce programme est distribué dans l'espoir qu'il sera utile, mais SANS AUCUNE GARANTIE ; sans même une garantie implicite de COMMERCIABILITE ou DE CONFORMITE A UNE UTILISATION PARTICULIERE. Voir la Licence Publique Générale GNU pour plus de détails. Vous devriez avoir reçu un exemplaire de la Licence Publique Générale GNU avec ce programme ; si ce n'est pas le cas, écrivez à la Free Software Foundation Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.<br/>Ajoutez aussi des informations sur la manière de vous contacter par courrier électronique et courrier postal.<br/>Si le programme est interactif, faites en sorte qu'il affiche un court avis tel que celui-ci lorsqu'il démarre en mode interactif : <br/>Gnomovision version 69, Copyright (C) année nom de l'auteur Gnomovision n'est accompagné d'ABSOLUMENT AUCUNE GARANTIE ; pour plus de détails tapez \"show w\". Ceci est un logiciel libre et vous êtes invité à le redistribuer en respectant certaines obligations ; pour plus de détails tapez \"show c\".<br/>Les instructions hypothétiques \"show w\" et \"show c\" sont supposées montrer les parties ad hoc de la Licence Publique Générale. Bien entendu, les instructions que vous utilisez peuvent porter d'autres noms que \"show w\" et \"show c\" ; elles peuvent même être des clics de souris ou des éléments d'un menu ou tout ce qui convient à votre programme.<br/>Vous devriez aussi obtenir de votre employeur (si vous travaillez en tant que développeur) ou de votre école, si c'est le cas, qu'il (ou elle) signe une \"renonciation aux droits d'auteur\" concernant le programme, si nécessaire. Voici un exemple (changez les noms) : <br/>Yoyodyne, Inc., déclare par la présente renoncer à toute prétention sur les droits d'auteur du programme \"Gnomovision\" (qui fait des avances aux compilateurs) écrit par James Hacker. [signature de Ty Coon], 1er avril 1989 Ty Coon, Président du Vice<br/>La présente Licence Publique Générale n'autorise pas l'incorporation de votre programme dans des programmes propriétaires. Si votre programme est une bibliothèque de sous-programmes, vous pouvez considérer plus utile d'autoriser l'édition de liens d'applications propriétaires avec la bibliothèque. Si c'est ce que vous voulez faire, utilisez la GNU Lesser General Public License au lieu de la présente Licence. <br/>Copyright (C) 2003-2009 FSF France, 12 boulevard Magenta, 75010 Paris, France <br/>La reproduction exacte et la distribution intégrale de cet article sont permises sur n'importe quel support d'archivage, pourvu que cette notice soit préservée. "
		}
	},
	"freeapplications":
	{
		"label":
		{
			"help":"Vous serez redirigés vers le site de présentation et d’installation des applications gratuites d’Orange. Vous serez guidés tout au long de vos choix.",
			"title":"applications gratuites",
			"content":"Orange vous propose une sélection d’applications gratuites pour simplifier votre usage d’Internet et sécuriser votre navigation.",
			"url":"Télécharger Assistance Livebox"
		},
		"link":
		{
			"more":"Accéder au site",
			"moreurl":
			{
				"fr":"http://assistance.orange.fr/more.php"
			}
		}
	},
	"mapper":
	{
		"label":
		{
			"help":"Vous pouvez découvrir votre réseau local domestique dans la rubrique Assistance.",
			"title":"vue détaillée du réseau local",
			"subtitle":"Vous avez la possibilité de lancer un processus de découverte de votre réseau local et d'obtenir ainsi la vue détaillée de votre réseau avec des informations détaillés des connexions.<br/><br/>Pour lancer ce processus de découverte, veuillez appuyer sur le bouton « lancer ». <br/><br/>Ce processus durera plus de 30 secondes.",
			"inprogress":"découverte en cours..."
		},
		"search":
		{
			"failure":
			{
				"label":"erreur",
				"description":"la découverte a échoué"
			}
		}
	},
	"mapperresult":
	{
		"label":
		{
			"help":"Vous pouvez découvrir votre réseau local domestique dans la rubrique Assistance.",
			"title":"vue détaillée du réseau",
			"subtitle":"Vous avez la possibilité d’envoyer cette information réseau au service support technique. Si vous souhaitez envoyer l’information, veuillez accepter l’information suivante.<br/><br/>Conformément à la loi \"informatique et libertés\" du 6 janvier 1978 modifiée, vous disposez d'un droit d’opposition ainsi que d’un droit d'accès et de rectification aux données vous concernant. Vous pouvez exercer ce droit auprès de votre Agence Orange. Acceptez-vous de donner l’autorisation à Orange de collecter ces informations ?",
			"refreshtime":"actualisé à",
			"checkbox":"autoriser cet envoi",
			"agreementwarning":"veuillez accepter la condition d'utilisation.",
			"sending":"envoi en cours...",
			"sendingsuccess":"envoi terminé",
			"seeagain":"Vous pouvez re-voir la vue détaillée du réseau envoyée précédemment ; pour cela, cliquez sur le bouton « revoir »",
			"yourdevice":"votre équipement",
			"details":"détails",
			"ip":"adresse IP",
			"mac":"adresse MAC",
			"status":
			{
				"ok":"connecté à la Livebox 3",
				"ko":"problème détecté",
				"warning":"TO BE DEFINED"
			}
		},
		"send":
		{
			"failure":
			{
				"label":"erreur",
				"host":
				{
					"description":"Serveur http à distance n'est pas joignable / disponible."
				},
				"connectivity":
				{
					"description":"Pas de connexion IP WAN."
				}
			}
		},
		"connectiontype":
		{
			"ethernet":"Ethernet",
			"wifi":"WiFi",
			"usb":"USB",
			"liveplug":"LivePlug",
			"unknown":"Type de connexion inconnu"
		},
		"item":
		{
			"livebox":"Livebox 3"
		}
	},
	"ssh":
	{
		"label":
		{
			"help":"Vous pouvez découvrir votre réseau local domestique dans la rubrique Assistance.",
			"title":"Accès SSH sécurisé par dongle PKI",
			"subtitle":"Veuillez saisir votre code PIN",
			"info":
			{
				"connected":"Serveur SSH activé"
			},
			"error":
			{
				"badpincode":"Code PIN erroné",
				"badpki":"Clé PKI invalide",
				"pkilocked":"Clé PKI verrouillée"
			}
		}
	},
	"datarate":
	{
		"label":
		{
			"help":"Le débit utile est calculé par rapport au débit de synchronisation de votre ligne.<br/>Ce débit peut être légèrement différent de celui fourni par un outil du type Speedtest.",
			"title":"mon débit",
			"subtitle":"Voici les valeurs de débit utile de votre accès Internet ADSL ou VDSL.",
			"date":"date",
			"uploadrate":"débit montant",
			"downloadrate":"débit descendant"
		},
		"link":
		{
			"more":"en savoir plus"
		}
	},
        "localfirmwareupgrade":
        {    "label":
                { "title":"Mise à jour du firmware",
                  "subtitle":"Afin de mettre à jour le logiciel de votre Livebox, veuillez sélectionner le fichier depuis votre clé USB ou le PC connecté à votre Livebox et cliquez sur valider.",
                  "usbkeyfile":"Fichier clé USB",
                  "pcfile":"Fichier local"
                }

         }

        

};

var Translations = AllTranslations["fr"];

var AllVoices = {};

AllVoices['en'] = {
    "general": {
        "popup": {
            "img": {
                "header": "popup header",
                "close": "close popup",
                "footer": "popup footer"
            }
        },
        "waiting": {
            "img": {
                "waiting": "waiting"
            }
        },
        "icon": {
            "error": "error",
            "waiting": "waiting",
            "lb2": "Livebox 3",
            "checkgreen": null,
            "printer": "printer",
            "info": "error",
            "led": {
                "green": null,
                "red": null
            },
            "garbage": "remove",
            "network": "network",
            "refrech": "refresh",
            "sortarrow": "sort"
        },
        "label": {
            "login": null,
            "password": null,
            "port": null,
            "ip": null,
            "url": null
        }
    },
    "accessibility": {
        "fontsize": {
            "img": {
                "decrease": "decrease fontsize",
                "increase": "increase fontsize"
            }
        },
        "contrast": {
            "img": {
                "level1": "contrast level 1",
                "level2": "contrast level 2",
                "level3": "contrast level 3"
            }
        }
    },
    "setup": {
        "accesstype": {
            "offer": {
                "radiobutton": {
                    "adsl": null,
                    "fiber": null
                }
            },
            "label": {
                "login": "connexion login",
                "password": "connexion password",
                "restorefile": "restorefile"
            }
        }
    },
    "home": {
        "devices": {
            "nodevice": {
                "img": {
                    "tip": "no device"
                }
            },
            "info": {
                "img": {
                    "tip": "information"
                }
            },
            "internet": {
                "check": {
                    "green ": "Internet access right autorized",
                    "red": "Internet access right blocked"
                }
            }
        },
        "devicescustomize": {
            "label": {
                "name": {
                    "title": null
                }
            }
        },
        "authentication": {
            "label": {
                "login": "login",
                "password": "enter password"
            }
        }
    },
    "wifi": {
        "device": {
            "orange": null
        },
        "icon": {
            "devices": {
                "orange": null
            }
        }
    },
    "led": {
        "icon": {
            "green": null,
            "red": null,
            "gray": null
        }
    },
    "config": {
        "wifi": {
            "ssid": "Wifi SSID",
            "scheduling": {
                "label": {
                    "enable": null,
                    "disable": null
                }
            }
        },
        "access": {
            "scheduling": {
                "label": {
                    "enable": null,
                    "disable": null,
                    "schedule": null
                }
            }
        }
    },
    "support": {
        "remoteaccess": {
            "label": {
                "enable": null
            },
            "authentication": {
                "label": {
                    "login": "enter login",
                    "password": "enter password"
                }
            }
        },
        "img": {
            "assistance": "Assistance Livebox",
            "ledstatus": {
				"icons-leds-gray": "gray",
				"icons-leds-black": "black",
				"icons-leds-blue": "blue",
				"icons-leds-red": "red",
				"icons-leds-red-alternative-1": "red blinking slow",
				"icons-leds-red-alternative-5": "red blinking quick",
				"icons-leds-green": "green",
				"icons-leds-green-alternative-1": "green blinking slow",
				"icons-leds-green-alternative-5": "green blinking quick",
				"icons-leds-orange": "orange",
				"icons-leds-orange-alternative-1": "orange blinking quick",
				"icons-leds-orange-alternative-5": "orange blinking slow"
			}
        },
        "saverestore": {
            "upload": null
        },
		"url": {
            "assistance": "Download Assistance Livebox (opens in new window)",
            "serviceaccountmanagement": {
				"telephone": "Access to telephone website (opens in new window)",
				"digitaltv": "Access to Digital TV website (opens in new window)"
			}
        }
    },
    "advconfig": {
        "wifi": {
            "label": {
                "securitymode": "select security mode",
                "channel": "select channel",
                "name": null,
                "broadcast": {
                    "enable": null,
                    "disable": null
                },
                "wifipairing": {
                    "selfpin": "generated pin code"
                },
                "addclientpin": null,
                "macaddress": null
            }
        },
        "firewall": {
            "description": {
                "low": null,
                "medium": null,
                "high": null
            },
            "label": {
                "customize": null
            },
            "ipv6rules": {
                "label": {
                    "table": {
                        "header": {
                            "enable": "activate"
                        },
                        "body": {
                            "ports": "enter a port number or a group of port number or just leave it empty",
                            "enable": "activate"
                        }
                    }
                }
            }
        },
        "firewalladv": {
            "label": {
                "bothprotocol": "select protocol",
                "pinganswer": null,
                "souceip": null,
                "souceipmask": null,
                "souceipport": null,
                "destinationip": null,
                "destinationipmask": null,
                "destinationipport": null
            }
        },
        "network": {
            "natpat": {
                "label": {
                    "application": "select applicaton",
                    "protocol": "select protocol",
                    "hostname": "select host name",
                    "customapplication": null,
                    "internalport": null,
                    "externalport": null,
                    "ipaddress": null
                }
            },
            "dhcp": {
                "label": {
                    "serveripv4": {
                        "enable": null,
                        "disable": null
                    },
                    "liveboxip": null,
                    "mask": null,
                    "startip": null,
                    "endip": null,
                    "serveripv6": {
                        "enable": null,
                        "disable": null
                    },
                    "ip": null
                }
            },
            "dns": {
                "label": {
                    "primaryv4": null,
                    "secondaryv4": null,
                    "primaryv6": null,
                    "secondaryv6": null,
                    "dnsname": null
                }
            },
            "upnp": {
                "label": {
                    "info": "information"
                }
            },
            "dyndns": {
                "label": {
                    "hostname": null,
                    "username": null,
                    "password": null
                }
            },
            "dmz": {
                "label": {
                    "name": "select name",
                    "ip": null
                }
            },
            "ntp": {
                "label": {
                    "timezone": null
                }
            }
        },
        "ports": {
            "label": {
                "nostb": "To be defined",
                "onesat": "To be defined",
                "oneinet": "To be defined",
                "srvinet": "To be defined"
            }
        },
        "accesstype": {
            "label": {
                "offer": {
                    "adsl": null,
                    "ethernet": null
                },
                "login": "connexion login",
                "password": "connexion password"
            }
        },
        "admin": {
            "label": {
                "password": null,
                "newpassword": null,
                "confirmnewpassword": null
            }
        }
    },
    "ipphone": {
        "phonebook": {
            "label": {
                "firstname": "enter name",
                "lastname": "enter first name",
                "number": "enter phone number"
            },
            "edit": {
                "label": {
                    "melody": "select melody",
                    "firstname": "enter name",
                    "lastname": "enter first name",
                    "number": "enter phone number"
                }
            },
            "newcontact": {
                "label": {
                    "melody": "select melody",
                    "firstname": "enter name",
                    "lastname": "enter first name",
                    "number": "enter phone number"
                }
            }
        },
        "phonesettings": {
            "label": {
                "pincode": null
            }
        }
    }
};

AllVoices['fr'] ={
    "general": {
        "popup": {
            "img": {
                "header": "popup header",
                "close": "fermer popup",
                "footer": "popup footer"
            }
        },
        "waiting": {
            "img": {
                "waiting": "chargement en cours"
            }
        },
        "icon": {
            "error": "erreur",
            "waiting": "chargement en cours",
            "lb2": "Livebox 2",
            "checkgreen": null,
            "printer": "imprimente",
            "info": "erreur",
            "led": {
                "green": null,
                "red": null
            },
            "garbage": "supprimer",
            "network": "réseau",
            "refrech": "rafraichir",
            "sortarrow": "ordonner"
        },
        "label": {
            "login": null,
            "password": null,
            "port": null,
            "ip": null,
            "url": null
        }
    },
    "accessibility": {
        "fontsize": {
            "img": {
                "decrease": "diminuer la taille de fond",
                "increase": "augmenter la taille de fond"
            }
        },
        "contrast": {
            "img": {
                "level1": "contraste niveau 1",
                "level2": "contraste niveau 2",
                "level3": "contraste niveau 3"
            }
        }
    },
    "setup": {
        "accesstype": {
            "offer": {
                "radiobutton": {
                    "adsl": null,
                    "fiber": null
                }
            },
            "label": {
                "login": "identifiant de connexion",
                "password": "mot de passe de connexion",
                "restorefile": "restaurer le fichier"
            }
        }
    },
    "home": {
        "devices": {
            "nodevice": {
                "img": {
                    "tip": "pas de device"
                }
            },
            "info": {
                "img": {
                    "tip": "information"
                }
            },
            "internet": {
                "check": {
                    "green ": "droit d'access Internet autorisé",
                    "red": "droit d'access Internet bloqué"
                }
            }
        },
        "devicescustomize": {
            "label": {
                "name": {
                    "title": null
                }
            }
        },
        "authentication": {
            "label": {
                "login": "identifiant",
                "password": "saisir le mot de passe"
            }
        }
    },
    "wifi": {
        "device": {
            "orange": null
        },
        "icon": {
            "devices": {
                "orange": null
            }
        }
    },
    "led": {
        "icon": {
            "green": null,
            "red": null,
            "gray": null
        }
    },
    "config": {
        "wifi": {
            "ssid": "Wifi SSID",
            "scheduling": {
                "label": {
                    "enable": null,
                    "disable": null
                }
            }
        },
        "access": {
            "scheduling": {
                "label": {
                    "enable": null,
                    "disable": null,
                    "schedule": null
                }
            }
        }
    },
    "support": {
        "remoteaccess": {
            "label": {
                "enable": null
            },
            "authentication": {
                "label": {
                    "login": "saisir l'identifiant",
                    "password": "saisir le mot de passe"
                }
            }
        },
        "img": {
            "assistance": "Assistance Livebox",
            "ledstatus": {
				"icons-leds-gray": "gris",
				"icons-leds-black": "noir",
				"icons-leds-blue": "bleu",
				"icons-leds-red": "rouge",
				"icons-leds-red-alternative-1": "rouge clignotant lent",
				"icons-leds-red-alternative-5": "rouge clignotant rapide",
				"icons-leds-green": "vert",
				"icons-leds-green-alternative-1": "vert clignotant lent",
				"icons-leds-green-alternative-5": "vert clignotant rapide",
				"icons-leds-orange": "orange",
				"icons-leds-orange-alternative-1": "orange clignotant rapide",
				"icons-leds-orange-alternative-5": "orange clignotant lent"
			}
        },
        "saverestore": {
            "upload": null
        },
        "url": {
            "assistance": "Télécharger Assistance Livebox (nouvelle fenêtre)",
            "serviceaccountmanagement": {
				"telephone": "Accès à mon compte téléphone par Internet (nouvelle fenêtre)",
				"digitaltv": "Accès à mon compte TV d'Orange (nouvelle fenêtre)"
			}
        }
    },
    "advconfig": {
        "wifi": {
            "label": {
                "securitymode": "choisir le mode de sécurité",
                "channel": "choisir le canal ",
                "name": null,
                "broadcast": {
                    "enable": null,
                    "disable": null
                },
                "wifipairing": {
                    "selfpin": "code pin généré"
                },
                "addclientpin": null,
                "macaddress": null
            }
        },
        "firewall": {
            "description": {
                "low": null,
                "medium": null,
                "high": null
            },
            "label": {
                "customize": null
            },
            "ipv6rules": {
                "label": {
                    "table": {
                        "header": {
                            "enable": "activer"
                        },
                        "body": {
                            "ports": "Saisir un numéro ou une plage de port ou laisser vide",
                            "enable": "activer"
                        }
                    }
                }
            }
        },
        "firewalladv": {
            "label": {
                "bothprotocol": "sélectionner le protocole",
                "pinganswer": null,
                "souceip": null,
                "souceipmask": null,
                "souceipport": null,
                "destinationip": null,
                "destinationipmask": null,
                "destinationipport": null
            }
        },
        "network": {
            "natpat": {
                "label": {
                    "application": "sélectionner l'application",
                    "protocol": "sélectionner le protocole",
                    "hostname": "sélectionner le nom de host",
                    "customapplication": null,
                    "internalport": null,
                    "externalport": null,
                    "ipaddress": null
                }
            },
            "dhcp": {
                "label": {
                    "serveripv4": {
                        "enable": null,
                        "disable": null
                    },
                    "liveboxip": null,
                    "mask": null,
                    "startip": null,
                    "endip": null,
                    "serveripv6": {
                        "enable": null,
                        "disable": null
                    },
                    "ip": null
                }
            },
            "dns": {
                "label": {
                    "primaryv4": null,
                    "secondaryv4": null,
                    "primaryv6": null,
                    "secondaryv6": null,
                    "dnsname": null
                }
            },
            "upnp": {
                "label": {
                    "info": "information"
                }
            },
            "dyndns": {
                "label": {
                    "hostname": null,
                    "username": null,
                    "password": null
                }
            },
            "dmz": {
                "label": {
                    "name": "sélectionner le nom",
                    "ip": null
                }
            },
            "ntp": {
                "label": {
                    "timezone": null
                }
            }
        },
        "ports": {
            "label": {
                "nostb": "To be defined",
                "onesat": "To be defined",
                "oneinet": "To be defined",
                "srvinet": "To be defined"
            }
        },
        "accesstype": {
            "label": {
                "offer": {
                    "adsl": null,
                    "ethernet": null
                },
                "login": "identifiant de connexion",
                "password": "mot de passe de connexion"
            }
        },
        "admin": {
            "label": {
                "password": null,
                "newpassword": null,
                "confirmnewpassword": null
            }
        }
    },
    "ipphone": {
        "phonebook": {
            "label": {
                "firstname": "saisir le prénom",
                "lastname": "saisir le nom",
                "number": "saisir le numéro de téléphone"
            },
            "edit": {
                "label": {
                    "melody": "sélectionner une mélodie",
                    "firstname": "saisir le prénom",
                    "lastname": "saisir le nom",
                    "number": "saisir le numéro de téléphone"
                }
            },
            "newcontact": {
                "label": {
                    "melody": "sélectionner une mélodie",
                    "firstname": "saisir le prénom",
                    "lastname": "saisir le nom",
                    "number": "saisir le numéro de téléphone"
                }
            }
        },
        "phonesettings": {
            "label": {
                "pincode": null
            }
        }
    }
};

var Voices = AllVoices["fr"];

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/prototype.js */
/*jslint active: false */
/*  Prototype JavaScript framework, version 1.7
 *  (c) 2005-2010 Sam Stephenson
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://www.prototypejs.org/
 *
 *--------------------------------------------------------------------------*/
var Prototype = {

  Version: '1.7',

  Browser: (function(){
    var ua = navigator.userAgent;
    var isOpera = Object.prototype.toString.call(window.opera) == '[object Opera]';
    return {
      IE:             !!window.attachEvent && !isOpera,
      Opera:          isOpera,
      WebKit:         ua.indexOf('AppleWebKit/') > -1,
      Gecko:          ua.indexOf('Gecko') > -1 && ua.indexOf('KHTML') === -1,
      MobileSafari:   /Apple.*Mobile/.test(ua)
    }
  })(),

  BrowserFeatures: {
    XPath: !!document.evaluate,

    SelectorsAPI: !!document.querySelector,

    ElementExtensions: (function() {
      var constructor = window.Element || window.HTMLElement;
      return !!(constructor && constructor.prototype);
    })(),
    SpecificElementExtensions: (function() {
      if (typeof window.HTMLDivElement !== 'undefined')
        return true;

      var div = document.createElement('div'),
          form = document.createElement('form'),
          isSupported = false;

      if (div['__proto__'] && (div['__proto__'] !== form['__proto__'])) {
        isSupported = true;
      }

      div = form = null;

      return isSupported;
    })()
  },

  ScriptFragment: '<script[^>]*>([\\S\\s]*?)<\/script>',
  JSONFilter: /^\/\*-secure-([\s\S]*)\*\/\s*$/,

  emptyFunction: function() { },

  K: function(x) { return x }
};

if (Prototype.Browser.MobileSafari)
  Prototype.BrowserFeatures.SpecificElementExtensions = false;


var Abstract = { };


var Try = {
  these: function() {
    var returnValue;

    for (var i = 0, length = arguments.length; i < length; i++) {
      var lambda = arguments[i];
      try {
        returnValue = lambda();
        break;
      } catch (e) { }
    }

    return returnValue;
  }
};

/* Based on Alex Arnell's inheritance implementation. */

var Class = (function() {

  var IS_DONTENUM_BUGGY = (function(){
    for (var p in { toString: 1 }) {
      if (p === 'toString') return false;
    }
    return true;
  })();

  function subclass() {};
  function create() {
    var parent = null, properties = $A(arguments);
    if (Object.isFunction(properties[0]))
      parent = properties.shift();

    function klass() {
      this.initialize.apply(this, arguments);
    }

    Object.extend(klass, Class.Methods);
    klass.superclass = parent;
    klass.subclasses = [];

    if (parent) {
      subclass.prototype = parent.prototype;
      klass.prototype = new subclass;
      parent.subclasses.push(klass);
    }

    for (var i = 0, length = properties.length; i < length; i++)
      klass.addMethods(properties[i]);

    if (!klass.prototype.initialize)
      klass.prototype.initialize = Prototype.emptyFunction;

    klass.prototype.constructor = klass;
    return klass;
  }

  function addMethods(source) {
    var ancestor   = this.superclass && this.superclass.prototype,
        properties = Object.keys(source);

    if (IS_DONTENUM_BUGGY) {
      if (source.toString != Object.prototype.toString)
        properties.push("toString");
      if (source.valueOf != Object.prototype.valueOf)
        properties.push("valueOf");
    }

    for (var i = 0, length = properties.length; i < length; i++) {
      var property = properties[i], value = source[property];
      if (ancestor && Object.isFunction(value) &&
          value.argumentNames()[0] == "$super") {
        var method = value;
        value = (function(m) {
          return function() { return ancestor[m].apply(this, arguments); };
        })(property).wrap(method);

        value.valueOf = method.valueOf.bind(method);
        value.toString = method.toString.bind(method);
      }
      this.prototype[property] = value;
    }

    return this;
  }

  return {
    create: create,
    Methods: {
      addMethods: addMethods
    }
  };
})();
(function() {

  var _toString = Object.prototype.toString,
      NULL_TYPE = 'Null',
      UNDEFINED_TYPE = 'Undefined',
      BOOLEAN_TYPE = 'Boolean',
      NUMBER_TYPE = 'Number',
      STRING_TYPE = 'String',
      OBJECT_TYPE = 'Object',
      FUNCTION_CLASS = '[object Function]',
      BOOLEAN_CLASS = '[object Boolean]',
      NUMBER_CLASS = '[object Number]',
      STRING_CLASS = '[object String]',
      ARRAY_CLASS = '[object Array]',
      DATE_CLASS = '[object Date]',
      NATIVE_JSON_STRINGIFY_SUPPORT = window.JSON &&
        typeof JSON.stringify === 'function' &&
        JSON.stringify(0) === '0' &&
        typeof JSON.stringify(Prototype.K) === 'undefined';

  function Type(o) {
    switch(o) {
      case null: return NULL_TYPE;
      case (void 0): return UNDEFINED_TYPE;
    }
    var type = typeof o;
    switch(type) {
      case 'boolean': return BOOLEAN_TYPE;
      case 'number':  return NUMBER_TYPE;
      case 'string':  return STRING_TYPE;
    }
    return OBJECT_TYPE;
  }

  function extend(destination, source) {
    for (var property in source)
      destination[property] = source[property];
    return destination;
  }

  function inspect(object) {
    try {
      if (isUndefined(object)) return 'undefined';
      if (object === null) return 'null';
      return object.inspect ? object.inspect() : String(object);
    } catch (e) {
      if (e instanceof RangeError) return '...';
      throw e;
    }
  }

  function toJSON(value) {
    return Str('', { '': value }, []);
  }

  function Str(key, holder, stack) {
    var value = holder[key],
        type = typeof value;

    if (Type(value) === OBJECT_TYPE && typeof value.toJSON === 'function') {
      value = value.toJSON(key);
    }

    var _class = _toString.call(value);

    switch (_class) {
      case NUMBER_CLASS:
      case BOOLEAN_CLASS:
      case STRING_CLASS:
        value = value.valueOf();
    }

    switch (value) {
      case null: return 'null';
      case true: return 'true';
      case false: return 'false';
    }

    type = typeof value;
    switch (type) {
      case 'string':
        return value.inspect(true);
      case 'number':
        return isFinite(value) ? String(value) : 'null';
      case 'object':

        for (var i = 0, length = stack.length; i < length; i++) {
          if (stack[i] === value) { throw new TypeError(); }
        }
        stack.push(value);

        var partial = [];
        if (_class === ARRAY_CLASS) {
          for (var i = 0, length = value.length; i < length; i++) {
            var str = Str(i, value, stack);
            partial.push(typeof str === 'undefined' ? 'null' : str);
          }
          partial = '[' + partial.join(',') + ']';
        } else {
          var keys = Object.keys(value);
          for (var i = 0, length = keys.length; i < length; i++) {
            var key = keys[i], str = Str(key, value, stack);
            if (typeof str !== "undefined") {
               partial.push(key.inspect(true)+ ':' + str);
             }
          }
          partial = '{' + partial.join(',') + '}';
        }
        stack.pop();
        return partial;
    }
  }

  function stringify(object) {
    return JSON.stringify(object);
  }

  function toQueryString(object) {
    return $H(object).toQueryString();
  }

  function toHTML(object) {
    return object && object.toHTML ? object.toHTML() : String.interpret(object);
  }

  function keys(object) {
    if (Type(object) !== OBJECT_TYPE) { throw new TypeError(); }
    var results = [];
    for (var property in object) {
      if (object.hasOwnProperty(property)) {
        results.push(property);
      }
    }
    return results;
  }

  function values(object) {
    var results = [];
    for (var property in object)
      results.push(object[property]);
    return results;
  }

  function clone(object) {
    return extend({ }, object);
  }

  function isElement(object) {
    return !!(object && object.nodeType == 1);
  }

  function isArray(object) {
    return _toString.call(object) === ARRAY_CLASS;
  }

  var hasNativeIsArray = (typeof Array.isArray == 'function')
    && Array.isArray([]) && !Array.isArray({});

  if (hasNativeIsArray) {
    isArray = Array.isArray;
  }

  function isHash(object) {
    return object instanceof Hash;
  }

  function isFunction(object) {
    return _toString.call(object) === FUNCTION_CLASS;
  }

  function isString(object) {
    return _toString.call(object) === STRING_CLASS;
  }

  function isNumber(object) {
    return _toString.call(object) === NUMBER_CLASS;
  }

  function isDate(object) {
    return _toString.call(object) === DATE_CLASS;
  }

  function isUndefined(object) {
    return typeof object === "undefined";
  }

  extend(Object, {
    extend:        extend,
    inspect:       inspect,
    toJSON:        NATIVE_JSON_STRINGIFY_SUPPORT ? stringify : toJSON,
    toQueryString: toQueryString,
    toHTML:        toHTML,
    keys:          Object.keys || keys,
    values:        values,
    clone:         clone,
    isElement:     isElement,
    isArray:       isArray,
    isHash:        isHash,
    isFunction:    isFunction,
    isString:      isString,
    isNumber:      isNumber,
    isDate:        isDate,
    isUndefined:   isUndefined
  });
})();
Object.extend(Function.prototype, (function() {
  var slice = Array.prototype.slice;

  function update(array, args) {
    var arrayLength = array.length, length = args.length;
    while (length--) array[arrayLength + length] = args[length];
    return array;
  }

  function merge(array, args) {
    array = slice.call(array, 0);
    return update(array, args);
  }

  function argumentNames() {
    var names = this.toString().match(/^[\s\(]*function[^(]*\(([^)]*)\)/)[1]
      .replace(/\/\/.*?[\r\n]|\/\*(?:.|[\r\n])*?\*\//g, '')
      .replace(/\s+/g, '').split(',');
    return names.length == 1 && !names[0] ? [] : names;
  }

  function bind(context) {
    if (arguments.length < 2 && Object.isUndefined(arguments[0])) return this;
    var __method = this, args = slice.call(arguments, 1);
    return function() {
      var a = merge(args, arguments);
      return __method.apply(context, a);
    }
  }

  function bindAsEventListener(context) {
    var __method = this, args = slice.call(arguments, 1);
    return function(event) {
      var a = update([event || window.event], args);
      return __method.apply(context, a);
    }
  }

  function curry() {
    if (!arguments.length) return this;
    var __method = this, args = slice.call(arguments, 0);
    return function() {
      var a = merge(args, arguments);
      return __method.apply(this, a);
    }
  }

  function delay(timeout) {
    var __method = this, args = slice.call(arguments, 1);
    timeout = timeout * 1000;
    return window.setTimeout(function() {
      return __method.apply(__method, args);
    }, timeout);
  }

  function defer() {
    var args = update([0.01], arguments);
    return this.delay.apply(this, args);
  }

  function wrap(wrapper) {
    var __method = this;
    return function() {
      var a = update([__method.bind(this)], arguments);
      return wrapper.apply(this, a);
    }
  }

  function methodize() {
    if (this._methodized) return this._methodized;
    var __method = this;
    return this._methodized = function() {
      var a = update([this], arguments);
      return __method.apply(null, a);
    };
  }

  return {
    argumentNames:       argumentNames,
    bind:                bind,
    bindAsEventListener: bindAsEventListener,
    curry:               curry,
    delay:               delay,
    defer:               defer,
    wrap:                wrap,
    methodize:           methodize
  }
})());



(function(proto) {


  function toISOString() {
    return this.getUTCFullYear() + '-' +
      (this.getUTCMonth() + 1).toPaddedString(2) + '-' +
      this.getUTCDate().toPaddedString(2) + 'T' +
      this.getUTCHours().toPaddedString(2) + ':' +
      this.getUTCMinutes().toPaddedString(2) + ':' +
      this.getUTCSeconds().toPaddedString(2) + 'Z';
  }


  function toJSON() {
    return this.toISOString();
  }

  if (!proto.toISOString) proto.toISOString = toISOString;
  if (!proto.toJSON) proto.toJSON = toJSON;

})(Date.prototype);


RegExp.prototype.match = RegExp.prototype.test;

RegExp.escape = function(str) {
  return String(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
};
var PeriodicalExecuter = Class.create({
  initialize: function(callback, frequency) {
    this.callback = callback;
    this.frequency = frequency;
    this.currentlyExecuting = false;

    this.registerCallback();
  },

  registerCallback: function() {
    this.timer = setInterval(this.onTimerEvent.bind(this), this.frequency * 1000);
  },

  execute: function() {
    this.callback(this);
  },

  stop: function() {
    if (!this.timer) return;
    clearInterval(this.timer);
    this.timer = null;
  },

  onTimerEvent: function() {
    if (!this.currentlyExecuting) {
      try {
        this.currentlyExecuting = true;
        this.execute();
        this.currentlyExecuting = false;
      } catch(e) {
        this.currentlyExecuting = false;
        throw e;
      }
    }
  }
});
Object.extend(String, {
  interpret: function(value) {
    return value == null ? '' : String(value);
  },
  specialChar: {
    '\b': '\\b',
    '\t': '\\t',
    '\n': '\\n',
    '\f': '\\f',
    '\r': '\\r',
    '\\': '\\\\'
  }
});

Object.extend(String.prototype, (function() {
  var NATIVE_JSON_PARSE_SUPPORT = window.JSON &&
    typeof JSON.parse === 'function' &&
    JSON.parse('{"test": true}').test;

  function prepareReplacement(replacement) {
    if (Object.isFunction(replacement)) return replacement;
    var template = new Template(replacement);
    return function(match) { return template.evaluate(match) };
  }

  function gsub(pattern, replacement) {
    var result = '', source = this, match;
    replacement = prepareReplacement(replacement);

    if (Object.isString(pattern))
      pattern = RegExp.escape(pattern);

    if (!(pattern.length || pattern.source)) {
      replacement = replacement('');
      return replacement + source.split('').join(replacement) + replacement;
    }

    while (source.length > 0) {
      if (match = source.match(pattern)) {
        result += source.slice(0, match.index);
        result += String.interpret(replacement(match));
        source  = source.slice(match.index + match[0].length);
      } else {
        result += source, source = '';
      }
    }
    return result;
  }

  function sub(pattern, replacement, count) {
    replacement = prepareReplacement(replacement);
    count = Object.isUndefined(count) ? 1 : count;

    return this.gsub(pattern, function(match) {
      if (--count < 0) return match[0];
      return replacement(match);
    });
  }

  function scan(pattern, iterator) {
    this.gsub(pattern, iterator);
    return String(this);
  }

  function truncate(length, truncation) {
    length = length || 30;
    truncation = Object.isUndefined(truncation) ? '...' : truncation;
    return this.length > length ?
      this.slice(0, length - truncation.length) + truncation : String(this);
  }

  function strip() {
    return this.replace(/^\s+/, '').replace(/\s+$/, '');
  }

  function stripTags() {
    return this.replace(/<\w+(\s+("[^"]*"|'[^']*'|[^>])+)?>|<\/\w+>/gi, '');
  }

  function stripScripts() {
    return this.replace(new RegExp(Prototype.ScriptFragment, 'img'), '');
  }

  function extractScripts() {
    var matchAll = new RegExp(Prototype.ScriptFragment, 'img'),
        matchOne = new RegExp(Prototype.ScriptFragment, 'im');
    return (this.match(matchAll) || []).map(function(scriptTag) {
      return (scriptTag.match(matchOne) || ['', ''])[1];
    });
  }

  function evalScripts() {
    return this.extractScripts().map(function(script) { return eval(script) });
  }

  function escapeHTML() {
    return this.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
  }

  function unescapeHTML() {
    return this.stripTags().replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&amp;/g,'&');
  }


  function toQueryParams(separator) {
    var match = this.strip().match(/([^?#]*)(#.*)?$/);
    if (!match) return { };

    return match[1].split(separator || '&').inject({ }, function(hash, pair) {
      if ((pair = pair.split('='))[0]) {
        var key = decodeURIComponent(pair.shift()),
            value = pair.length > 1 ? pair.join('=') : pair[0];

        if (value != undefined) value = decodeURIComponent(value);

        if (key in hash) {
          if (!Object.isArray(hash[key])) hash[key] = [hash[key]];
          hash[key].push(value);
        }
        else hash[key] = value;
      }
      return hash;
    });
  }

  function toArray() {
    return this.split('');
  }

  function succ() {
    return this.slice(0, this.length - 1) +
      String.fromCharCode(this.charCodeAt(this.length - 1) + 1);
  }

  function times(count) {
    return count < 1 ? '' : new Array(count + 1).join(this);
  }

  function camelize() {
    return this.replace(/-+(.)?/g, function(match, chr) {
      return chr ? chr.toUpperCase() : '';
    });
  }

  function capitalize() {
    return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase();
  }

  function underscore() {
    return this.replace(/::/g, '/')
               .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')
               .replace(/([a-z\d])([A-Z])/g, '$1_$2')
               .replace(/-/g, '_')
               .toLowerCase();
  }

  function dasherize() {
    return this.replace(/_/g, '-');
  }

  function inspect(useDoubleQuotes) {
    var escapedString = this.replace(/[\x00-\x1f\\]/g, function(character) {
      if (character in String.specialChar) {
        return String.specialChar[character];
      }
      return '\\u00' + character.charCodeAt().toPaddedString(2, 16);
    });
    if (useDoubleQuotes) return '"' + escapedString.replace(/"/g, '\\"') + '"';
    return "'" + escapedString.replace(/'/g, '\\\'') + "'";
  }

  function unfilterJSON(filter) {
    return this.replace(filter || Prototype.JSONFilter, '$1');
  }

  function isJSON() {
    var str = this;
    if (str.blank()) return false;
    str = str.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@');
    str = str.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']');
    str = str.replace(/(?:^|:|,)(?:\s*\[)+/g, '');
    return (/^[\],:{}\s]*$/).test(str);
  }

  function evalJSON(sanitize) {
    var json = this.unfilterJSON(),
        cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
    if (cx.test(json)) {
      json = json.replace(cx, function (a) {
        return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
      });
    }
    try {
      if (!sanitize || json.isJSON()) return eval('(' + json + ')');
    } catch (e) { }
    throw new SyntaxError('Badly formed JSON string: ' + this.inspect());
  }

  function parseJSON() {
    var json = this.unfilterJSON();
    return JSON.parse(json);
  }

  function include(pattern) {
    return this.indexOf(pattern) > -1;
  }

  function startsWith(pattern) {
    return this.lastIndexOf(pattern, 0) === 0;
  }

  function endsWith(pattern) {
    var d = this.length - pattern.length;
    return d >= 0 && this.indexOf(pattern, d) === d;
  }

  function empty() {
    return this == '';
  }

  function blank() {
    return /^\s*$/.test(this);
  }

  function interpolate(object, pattern) {
    return new Template(this, pattern).evaluate(object);
  }

  return {
    gsub:           gsub,
    sub:            sub,
    scan:           scan,
    truncate:       truncate,
    strip:          String.prototype.trim || strip,
    stripTags:      stripTags,
    stripScripts:   stripScripts,
    extractScripts: extractScripts,
    evalScripts:    evalScripts,
    escapeHTML:     escapeHTML,
    unescapeHTML:   unescapeHTML,
    toQueryParams:  toQueryParams,
    parseQuery:     toQueryParams,
    toArray:        toArray,
    succ:           succ,
    times:          times,
    camelize:       camelize,
    capitalize:     capitalize,
    underscore:     underscore,
    dasherize:      dasherize,
    inspect:        inspect,
    unfilterJSON:   unfilterJSON,
    isJSON:         isJSON,
    evalJSON:       NATIVE_JSON_PARSE_SUPPORT ? parseJSON : evalJSON,
    include:        include,
    startsWith:     startsWith,
    endsWith:       endsWith,
    empty:          empty,
    blank:          blank,
    interpolate:    interpolate
  };
})());

var Template = Class.create({
  initialize: function(template, pattern) {
    this.template = template.toString();
    this.pattern = pattern || Template.Pattern;
  },

  evaluate: function(object) {
    if (object && Object.isFunction(object.toTemplateReplacements))
      object = object.toTemplateReplacements();

    return this.template.gsub(this.pattern, function(match) {
      if (object == null) return (match[1] + '');

      var before = match[1] || '';
      if (before == '\\') return match[2];

      var ctx = object, expr = match[3],
          pattern = /^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/;

      match = pattern.exec(expr);
      if (match == null) return before;

      while (match != null) {
        var comp = match[1].startsWith('[') ? match[2].replace(/\\\\]/g, ']') : match[1];
        ctx = ctx[comp];
        if (null == ctx || '' == match[3]) break;
        expr = expr.substring('[' == match[3] ? match[1].length : match[0].length);
        match = pattern.exec(expr);
      }

      return before + String.interpret(ctx);
    });
  }
});
Template.Pattern = /(^|.|\r|\n)(#\{(.*?)\})/;

var $break = { };

var Enumerable = (function() {
  function each(iterator, context) {
    var index = 0;
    try {
      this._each(function(value) {
        iterator.call(context, value, index++);
      });
    } catch (e) {
      if (e != $break) throw e;
    }
    return this;
  }

  function eachSlice(number, iterator, context) {
    var index = -number, slices = [], array = this.toArray();
    if (number < 1) return array;
    while ((index += number) < array.length)
      slices.push(array.slice(index, index+number));
    return slices.collect(iterator, context);
  }

  function all(iterator, context) {
    iterator = iterator || Prototype.K;
    var result = true;
    this.each(function(value, index) {
      result = result && !!iterator.call(context, value, index);
      if (!result) throw $break;
    });
    return result;
  }

  function any(iterator, context) {
    iterator = iterator || Prototype.K;
    var result = false;
    this.each(function(value, index) {
      if (result = !!iterator.call(context, value, index))
        throw $break;
    });
    return result;
  }

  function collect(iterator, context) {
    iterator = iterator || Prototype.K;
    var results = [];
    this.each(function(value, index) {
      results.push(iterator.call(context, value, index));
    });
    return results;
  }

  function detect(iterator, context) {
    var result;
    this.each(function(value, index) {
      if (iterator.call(context, value, index)) {
        result = value;
        throw $break;
      }
    });
    return result;
  }

  function findAll(iterator, context) {
    var results = [];
    this.each(function(value, index) {
      if (iterator.call(context, value, index))
        results.push(value);
    });
    return results;
  }

  function grep(filter, iterator, context) {
    iterator = iterator || Prototype.K;
    var results = [];

    if (Object.isString(filter))
      filter = new RegExp(RegExp.escape(filter));

    this.each(function(value, index) {
      if (filter.match(value))
        results.push(iterator.call(context, value, index));
    });
    return results;
  }

  function include(object) {
    if (Object.isFunction(this.indexOf))
      if (this.indexOf(object) != -1) return true;

    var found = false;
    this.each(function(value) {
      if (value == object) {
        found = true;
        throw $break;
      }
    });
    return found;
  }

  function inGroupsOf(number, fillWith) {
    fillWith = Object.isUndefined(fillWith) ? null : fillWith;
    return this.eachSlice(number, function(slice) {
      while(slice.length < number) slice.push(fillWith);
      return slice;
    });
  }

  function inject(memo, iterator, context) {
    this.each(function(value, index) {
      memo = iterator.call(context, memo, value, index);
    });
    return memo;
  }

  function invoke(method) {
    var args = $A(arguments).slice(1);
    return this.map(function(value) {
      return value[method].apply(value, args);
    });
  }

  function max(iterator, context) {
    iterator = iterator || Prototype.K;
    var result;
    this.each(function(value, index) {
      value = iterator.call(context, value, index);
      if (result == null || value >= result)
        result = value;
    });
    return result;
  }

  function min(iterator, context) {
    iterator = iterator || Prototype.K;
    var result;
    this.each(function(value, index) {
      value = iterator.call(context, value, index);
      if (result == null || value < result)
        result = value;
    });
    return result;
  }

  function partition(iterator, context) {
    iterator = iterator || Prototype.K;
    var trues = [], falses = [];
    this.each(function(value, index) {
      (iterator.call(context, value, index) ?
        trues : falses).push(value);
    });
    return [trues, falses];
  }

  function pluck(property) {
    var results = [];
    this.each(function(value) {
      results.push(value[property]);
    });
    return results;
  }

  function reject(iterator, context) {
    var results = [];
    this.each(function(value, index) {
      if (!iterator.call(context, value, index))
        results.push(value);
    });
    return results;
  }

  function sortBy(iterator, context) {
    return this.map(function(value, index) {
      return {
        value: value,
        criteria: iterator.call(context, value, index)
      };
    }).sort(function(left, right) {
      var a = left.criteria, b = right.criteria;
      return a < b ? -1 : a > b ? 1 : 0;
    }).pluck('value');
  }

  function toArray() {
    return this.map();
  }

  function zip() {
    var iterator = Prototype.K, args = $A(arguments);
    if (Object.isFunction(args.last()))
      iterator = args.pop();

    var collections = [this].concat(args).map($A);
    return this.map(function(value, index) {
      return iterator(collections.pluck(index));
    });
  }

  function size() {
    return this.toArray().length;
  }

  function inspect() {
    return '#<Enumerable:' + this.toArray().inspect() + '>';
  }









  return {
    each:       each,
    eachSlice:  eachSlice,
    all:        all,
    every:      all,
    any:        any,
    some:       any,
    collect:    collect,
    map:        collect,
    detect:     detect,
    findAll:    findAll,
    select:     findAll,
    filter:     findAll,
    grep:       grep,
    include:    include,
    member:     include,
    inGroupsOf: inGroupsOf,
    inject:     inject,
    invoke:     invoke,
    max:        max,
    min:        min,
    partition:  partition,
    pluck:      pluck,
    reject:     reject,
    sortBy:     sortBy,
    toArray:    toArray,
    entries:    toArray,
    zip:        zip,
    size:       size,
    inspect:    inspect,
    find:       detect
  };
})();

function $A(iterable) {
  if (!iterable) return [];
  if ('toArray' in Object(iterable)) return iterable.toArray();
  var length = iterable.length || 0, results = new Array(length);
  while (length--) results[length] = iterable[length];
  return results;
}


function $w(string) {
  if (!Object.isString(string)) return [];
  string = string.strip();
  return string ? string.split(/\s+/) : [];
}

Array.from = $A;


(function() {
  var arrayProto = Array.prototype,
      slice = arrayProto.slice,
      _each = arrayProto.forEach; // use native browser JS 1.6 implementation if available

  function each(iterator, context) {
    for (var i = 0, length = this.length >>> 0; i < length; i++) {
      if (i in this) iterator.call(context, this[i], i, this);
    }
  }
  if (!_each) _each = each;

  function clear() {
    this.length = 0;
    return this;
  }

  function first() {
    return this[0];
  }

  function last() {
    return this[this.length - 1];
  }

  function compact() {
    return this.select(function(value) {
      return value != null;
    });
  }

  function flatten() {
    return this.inject([], function(array, value) {
      if (Object.isArray(value))
        return array.concat(value.flatten());
      array.push(value);
      return array;
    });
  }

  function without() {
    var values = slice.call(arguments, 0);
    return this.select(function(value) {
      return !values.include(value);
    });
  }

  function reverse(inline) {
    return (inline === false ? this.toArray() : this)._reverse();
  }

  function uniq(sorted) {
    return this.inject([], function(array, value, index) {
      if (0 == index || (sorted ? array.last() != value : !array.include(value)))
        array.push(value);
      return array;
    });
  }

  function intersect(array) {
    return this.uniq().findAll(function(item) {
      return array.detect(function(value) { return item === value });
    });
  }


  function clone() {
    return slice.call(this, 0);
  }

  function size() {
    return this.length;
  }

  function inspect() {
    return '[' + this.map(Object.inspect).join(', ') + ']';
  }

  function indexOf(item, i) {
    i || (i = 0);
    var length = this.length;
    if (i < 0) i = length + i;
    for (; i < length; i++)
      if (this[i] === item) return i;
    return -1;
  }

  function lastIndexOf(item, i) {
    i = isNaN(i) ? this.length : (i < 0 ? this.length + i : i) + 1;
    var n = this.slice(0, i).reverse().indexOf(item);
    return (n < 0) ? n : i - n - 1;
  }

  function concat() {
    var array = slice.call(this, 0), item;
    for (var i = 0, length = arguments.length; i < length; i++) {
      item = arguments[i];
      if (Object.isArray(item) && !('callee' in item)) {
        for (var j = 0, arrayLength = item.length; j < arrayLength; j++)
          array.push(item[j]);
      } else {
        array.push(item);
      }
    }
    return array;
  }

  Object.extend(arrayProto, Enumerable);

  if (!arrayProto._reverse)
    arrayProto._reverse = arrayProto.reverse;

  Object.extend(arrayProto, {
    _each:     _each,
    clear:     clear,
    first:     first,
    last:      last,
    compact:   compact,
    flatten:   flatten,
    without:   without,
    reverse:   reverse,
    uniq:      uniq,
    intersect: intersect,
    clone:     clone,
    toArray:   clone,
    size:      size,
    inspect:   inspect
  });

  var CONCAT_ARGUMENTS_BUGGY = (function() {
    return [].concat(arguments)[0][0] !== 1;
  })(1,2)

  if (CONCAT_ARGUMENTS_BUGGY) arrayProto.concat = concat;

  if (!arrayProto.indexOf) arrayProto.indexOf = indexOf;
  if (!arrayProto.lastIndexOf) arrayProto.lastIndexOf = lastIndexOf;
})();
function $H(object) {
  return new Hash(object);
};

var Hash = Class.create(Enumerable, (function() {
  function initialize(object) {
    this._object = Object.isHash(object) ? object.toObject() : Object.clone(object);
  }


  function _each(iterator) {
    for (var key in this._object) {
      var value = this._object[key], pair = [key, value];
      pair.key = key;
      pair.value = value;
      iterator(pair);
    }
  }

  function set(key, value) {
    return this._object[key] = value;
  }

  function get(key) {
    if (this._object[key] !== Object.prototype[key])
      return this._object[key];
  }

  function unset(key) {
    var value = this._object[key];
    delete this._object[key];
    return value;
  }

  function toObject() {
    return Object.clone(this._object);
  }



  function keys() {
    return this.pluck('key');
  }

  function values() {
    return this.pluck('value');
  }

  function index(value) {
    var match = this.detect(function(pair) {
      return pair.value === value;
    });
    return match && match.key;
  }

  function merge(object) {
    return this.clone().update(object);
  }

  function update(object) {
    return new Hash(object).inject(this, function(result, pair) {
      result.set(pair.key, pair.value);
      return result;
    });
  }

  function toQueryPair(key, value) {
    if (Object.isUndefined(value)) return key;
    return key + '=' + encodeURIComponent(String.interpret(value));
  }

  function toQueryString() {
    return this.inject([], function(results, pair) {
      var key = encodeURIComponent(pair.key), values = pair.value;

      if (values && typeof values == 'object') {
        if (Object.isArray(values)) {
          var queryValues = [];
          for (var i = 0, len = values.length, value; i < len; i++) {
            value = values[i];
            queryValues.push(toQueryPair(key, value));
          }
          return results.concat(queryValues);
        }
      } else results.push(toQueryPair(key, values));
      return results;
    }).join('&');
  }

  function inspect() {
    return '#<Hash:{' + this.map(function(pair) {
      return pair.map(Object.inspect).join(': ');
    }).join(', ') + '}>';
  }

  function clone() {
    return new Hash(this);
  }

  return {
    initialize:             initialize,
    _each:                  _each,
    set:                    set,
    get:                    get,
    unset:                  unset,
    toObject:               toObject,
    toTemplateReplacements: toObject,
    keys:                   keys,
    values:                 values,
    index:                  index,
    merge:                  merge,
    update:                 update,
    toQueryString:          toQueryString,
    inspect:                inspect,
    toJSON:                 toObject,
    clone:                  clone
  };
})());

Hash.from = $H;
Object.extend(Number.prototype, (function() {
  function toColorPart() {
    return this.toPaddedString(2, 16);
  }

  function succ() {
    return this + 1;
  }

  function times(iterator, context) {
    $R(0, this, true).each(iterator, context);
    return this;
  }

  function toPaddedString(length, radix) {
    var string = this.toString(radix || 10);
    return '0'.times(length - string.length) + string;
  }

  function abs() {
    return Math.abs(this);
  }

  function round() {
    return Math.round(this);
  }

  function ceil() {
    return Math.ceil(this);
  }

  function floor() {
    return Math.floor(this);
  }

  return {
    toColorPart:    toColorPart,
    succ:           succ,
    times:          times,
    toPaddedString: toPaddedString,
    abs:            abs,
    round:          round,
    ceil:           ceil,
    floor:          floor
  };
})());

function $R(start, end, exclusive) {
  return new ObjectRange(start, end, exclusive);
}

var ObjectRange = Class.create(Enumerable, (function() {
  function initialize(start, end, exclusive) {
    this.start = start;
    this.end = end;
    this.exclusive = exclusive;
  }

  function _each(iterator) {
    var value = this.start;
    while (this.include(value)) {
      iterator(value);
      value = value.succ();
    }
  }

  function include(value) {
    if (value < this.start)
      return false;
    if (this.exclusive)
      return value < this.end;
    return value <= this.end;
  }

  return {
    initialize: initialize,
    _each:      _each,
    include:    include
  };
})());



var Ajax = {
  getTransport: function() {
    return Try.these(
      function() {return new XMLHttpRequest()},
      function() {return new ActiveXObject('Msxml2.XMLHTTP')},
      function() {return new ActiveXObject('Microsoft.XMLHTTP')}
    ) || false;
  },

  activeRequestCount: 0
};

Ajax.Responders = {
  responders: [],

  _each: function(iterator) {
    this.responders._each(iterator);
  },

  register: function(responder) {
    if (!this.include(responder))
      this.responders.push(responder);
  },

  unregister: function(responder) {
    this.responders = this.responders.without(responder);
  },

  dispatch: function(callback, request, transport, json) {
    this.each(function(responder) {
      if (Object.isFunction(responder[callback])) {
        try {
          responder[callback].apply(responder, [request, transport, json]);
        } catch (e) { }
      }
    });
  }
};

Object.extend(Ajax.Responders, Enumerable);

Ajax.Responders.register({
  onCreate:   function() { Ajax.activeRequestCount++ },
  onComplete: function() { Ajax.activeRequestCount-- }
});
Ajax.Base = Class.create({
  initialize: function(options) {
    this.options = {
      method:       'post',
      asynchronous: true,
      contentType:  'application/x-www-form-urlencoded',
      encoding:     'UTF-8',
      parameters:   '',
      evalJSON:     true,
      evalJS:       true
    };
    Object.extend(this.options, options || { });

    this.options.method = this.options.method.toLowerCase();

    if (Object.isHash(this.options.parameters))
      this.options.parameters = this.options.parameters.toObject();
  }
});
Ajax.Request = Class.create(Ajax.Base, {
  _complete: false,

  initialize: function($super, url, options) {
    $super(options);
    this.transport = Ajax.getTransport();
    this.request(url);
  },

  request: function(url) {
    this.url = url;
    this.method = this.options.method;
    var params = Object.isString(this.options.parameters) ?
          this.options.parameters :
          Object.toQueryString(this.options.parameters);

    if (!['get', 'post'].include(this.method)) {
      params += (params ? '&' : '') + "_method=" + this.method;
      this.method = 'post';
    }

    if (params && this.method === 'get') {
      this.url += (this.url.include('?') ? '&' : '?') + params;
    }

    this.parameters = params.toQueryParams();

    try {
      var response = new Ajax.Response(this);
      if (this.options.onCreate) this.options.onCreate(response);
      Ajax.Responders.dispatch('onCreate', this, response);

      this.transport.open(this.method.toUpperCase(), this.url,
        this.options.asynchronous);

      if (this.options.asynchronous) this.respondToReadyState.bind(this).defer(1);

      this.transport.onreadystatechange = this.onStateChange.bind(this);
      this.setRequestHeaders();

      this.body = this.method == 'post' ? (this.options.postBody || params) : null;
      this.transport.send(this.body);

      /* Force Firefox to handle ready state 4 for synchronous requests */
      if (!this.options.asynchronous && this.transport.overrideMimeType)
        this.onStateChange();

    }
    catch (e) {
      this.dispatchException(e);
    }
  },

  onStateChange: function() {
    var readyState = this.transport.readyState;
    if (readyState > 1 && !((readyState == 4) && this._complete))
      this.respondToReadyState(this.transport.readyState);
  },

  setRequestHeaders: function() {
    var headers = {
      'X-Requested-With': 'XMLHttpRequest',
      'X-Prototype-Version': Prototype.Version,
      'Accept': 'text/javascript, text/html, application/xml, text/xml, */*'
    };

    if (this.method == 'post') {
      headers['Content-type'] = this.options.contentType +
        (this.options.encoding ? '; charset=' + this.options.encoding : '');

      /* Force "Connection: close" for older Mozilla browsers to work
       * around a bug where XMLHttpRequest sends an incorrect
       * Content-length header. See Mozilla Bugzilla #246651.
       */
      if (this.transport.overrideMimeType &&
          (navigator.userAgent.match(/Gecko\/(\d{4})/) || [0,2005])[1] < 2005)
            headers['Connection'] = 'close';
    }

    if (typeof this.options.requestHeaders == 'object') {
      var extras = this.options.requestHeaders;

      if (Object.isFunction(extras.push))
        for (var i = 0, length = extras.length; i < length; i += 2)
          headers[extras[i]] = extras[i+1];
      else
        $H(extras).each(function(pair) { headers[pair.key] = pair.value });
    }

    for (var name in headers)
      this.transport.setRequestHeader(name, headers[name]);
  },

  success: function() {
    var status = this.getStatus();
    return !status || (status >= 200 && status < 300) || status == 304;
  },

  getStatus: function() {
    try {
      if (this.transport.status === 1223) return 204;
      return this.transport.status || 0;
    } catch (e) { return 0 }
  },

  respondToReadyState: function(readyState) {
    var state = Ajax.Request.Events[readyState], response = new Ajax.Response(this);

    if (state == 'Complete') {
      try {
        this._complete = true;
        (this.options['on' + response.status]
         || this.options['on' + (this.success() ? 'Success' : 'Failure')]
         || Prototype.emptyFunction)(response, response.headerJSON);
      } catch (e) {
        this.dispatchException(e);
      }

      var contentType = response.getHeader('Content-type');
      if (this.options.evalJS == 'force'
          || (this.options.evalJS && this.isSameOrigin() && contentType
          && contentType.match(/^\s*(text|application)\/(x-)?(java|ecma)script(;.*)?\s*$/i)))
        this.evalResponse();
    }

    try {
      (this.options['on' + state] || Prototype.emptyFunction)(response, response.headerJSON);
      Ajax.Responders.dispatch('on' + state, this, response, response.headerJSON);
    } catch (e) {
      this.dispatchException(e);
    }

    if (state == 'Complete') {
      this.transport.onreadystatechange = Prototype.emptyFunction;
    }
  },

  isSameOrigin: function() {
    var m = this.url.match(/^\s*https?:\/\/[^\/]*/);
    return !m || (m[0] == '#{protocol}//#{domain}#{port}'.interpolate({
      protocol: location.protocol,
      domain: document.domain,
      port: location.port ? ':' + location.port : ''
    }));
  },

  getHeader: function(name) {
    try {
      return this.transport.getResponseHeader(name) || null;
    } catch (e) { return null; }
  },

  evalResponse: function() {
    try {
      return eval((this.transport.responseText || '').unfilterJSON());
    } catch (e) {
      this.dispatchException(e);
    }
  },

  dispatchException: function(exception) {
    (this.options.onException || Prototype.emptyFunction)(this, exception);
    Ajax.Responders.dispatch('onException', this, exception);
  }
});

Ajax.Request.Events =
  ['Uninitialized', 'Loading', 'Loaded', 'Interactive', 'Complete'];








Ajax.Response = Class.create({
  initialize: function(request){
    this.request = request;
    var transport  = this.transport  = request.transport,
        readyState = this.readyState = transport.readyState;

    if ((readyState > 2 && !Prototype.Browser.IE) || readyState == 4) {
      this.status       = this.getStatus();
      this.statusText   = this.getStatusText();
      this.responseText = String.interpret(transport.responseText);
      this.headerJSON   = this._getHeaderJSON();
    }

    if (readyState == 4) {
      var xml = transport.responseXML;
      this.responseXML  = Object.isUndefined(xml) ? null : xml;
      this.responseJSON = this._getResponseJSON();
    }
  },

  status:      0,

  statusText: '',

  getStatus: Ajax.Request.prototype.getStatus,

  getStatusText: function() {
    try {
      return this.transport.statusText || '';
    } catch (e) { return '' }
  },

  getHeader: Ajax.Request.prototype.getHeader,

  getAllHeaders: function() {
    try {
      return this.getAllResponseHeaders();
    } catch (e) { return null }
  },

  getResponseHeader: function(name) {
    return this.transport.getResponseHeader(name);
  },

  getAllResponseHeaders: function() {
    return this.transport.getAllResponseHeaders();
  },

  _getHeaderJSON: function() {
    var json = this.getHeader('X-JSON');
    if (!json) return null;
    json = decodeURIComponent(escape(json));
    try {
      return json.evalJSON(this.request.options.sanitizeJSON ||
        !this.request.isSameOrigin());
    } catch (e) {
      this.request.dispatchException(e);
    }
  },

  _getResponseJSON: function() {
    var options = this.request.options;
    if (!options.evalJSON || (options.evalJSON != 'force' &&
      !(this.getHeader('Content-type') || '').include('application/json')) ||
        this.responseText.blank())
          return null;
    try {
      return this.responseText.evalJSON(options.sanitizeJSON ||
        !this.request.isSameOrigin());
    } catch (e) {
      this.request.dispatchException(e);
    }
  }
});

Ajax.Updater = Class.create(Ajax.Request, {
  initialize: function($super, container, url, options) {
    this.container = {
      success: (container.success || container),
      failure: (container.failure || (container.success ? null : container))
    };

    options = Object.clone(options);
    var onComplete = options.onComplete;
    options.onComplete = (function(response, json) {
      this.updateContent(response.responseText);
      if (Object.isFunction(onComplete)) onComplete(response, json);
    }).bind(this);

    $super(url, options);
  },

  updateContent: function(responseText) {
    var receiver = this.container[this.success() ? 'success' : 'failure'],
        options = this.options;

    if (!options.evalScripts) responseText = responseText.stripScripts();

    if (receiver = $(receiver)) {
      if (options.insertion) {
        if (Object.isString(options.insertion)) {
          var insertion = { }; insertion[options.insertion] = responseText;
          receiver.insert(insertion);
        }
        else options.insertion(receiver, responseText);
      }
      else receiver.update(responseText);
    }
  }
});

Ajax.PeriodicalUpdater = Class.create(Ajax.Base, {
  initialize: function($super, container, url, options) {
    $super(options);
    this.onComplete = this.options.onComplete;

    this.frequency = (this.options.frequency || 2);
    this.decay = (this.options.decay || 1);

    this.updater = { };
    this.container = container;
    this.url = url;

    this.start();
  },

  start: function() {
    this.options.onComplete = this.updateComplete.bind(this);
    this.onTimerEvent();
  },

  stop: function() {
    this.updater.options.onComplete = undefined;
    clearTimeout(this.timer);
    (this.onComplete || Prototype.emptyFunction).apply(this, arguments);
  },

  updateComplete: function(response) {
    if (this.options.decay) {
      this.decay = (response.responseText == this.lastText ?
        this.decay * this.options.decay : 1);

      this.lastText = response.responseText;
    }
    this.timer = this.onTimerEvent.bind(this).delay(this.decay * this.frequency);
  },

  onTimerEvent: function() {
    this.updater = new Ajax.Updater(this.container, this.url, this.options);
  }
});


function $(element) {
  if (arguments.length > 1) {
    for (var i = 0, elements = [], length = arguments.length; i < length; i++)
      elements.push($(arguments[i]));
    return elements;
  }
  if (Object.isString(element))
    element = document.getElementById(element);
  return Element.extend(element);
}

if (Prototype.BrowserFeatures.XPath) {
  document._getElementsByXPath = function(expression, parentElement) {
    var results = [];
    var query = document.evaluate(expression, $(parentElement) || document,
      null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
    for (var i = 0, length = query.snapshotLength; i < length; i++)
      results.push(Element.extend(query.snapshotItem(i)));
    return results;
  };
}

/*--------------------------------------------------------------------------*/

if (!Node) var Node = { };

if (!Node.ELEMENT_NODE) {
  Object.extend(Node, {
    ELEMENT_NODE: 1,
    ATTRIBUTE_NODE: 2,
    TEXT_NODE: 3,
    CDATA_SECTION_NODE: 4,
    ENTITY_REFERENCE_NODE: 5,
    ENTITY_NODE: 6,
    PROCESSING_INSTRUCTION_NODE: 7,
    COMMENT_NODE: 8,
    DOCUMENT_NODE: 9,
    DOCUMENT_TYPE_NODE: 10,
    DOCUMENT_FRAGMENT_NODE: 11,
    NOTATION_NODE: 12
  });
}



(function(global) {
  function shouldUseCache(tagName, attributes) {
    if (tagName === 'select') return false;
    if ('type' in attributes) return false;
    return true;
  }

  var HAS_EXTENDED_CREATE_ELEMENT_SYNTAX = (function(){
    try {
      var el = document.createElement('<input name="x">');
      return el.tagName.toLowerCase() === 'input' && el.name === 'x';
    }
    catch(err) {
      return false;
    }
  })();

  var element = global.Element;

  global.Element = function(tagName, attributes) {
    attributes = attributes || { };
    tagName = tagName.toLowerCase();
    var cache = Element.cache;

    if (HAS_EXTENDED_CREATE_ELEMENT_SYNTAX && attributes.name) {
      tagName = '<' + tagName + ' name="' + attributes.name + '">';
      delete attributes.name;
      return Element.writeAttribute(document.createElement(tagName), attributes);
    }

    if (!cache[tagName]) cache[tagName] = Element.extend(document.createElement(tagName));

    var node = shouldUseCache(tagName, attributes) ?
     cache[tagName].cloneNode(false) : document.createElement(tagName);

    return Element.writeAttribute(node, attributes);
  };

  Object.extend(global.Element, element || { });
  if (element) global.Element.prototype = element.prototype;

})(this);

Element.idCounter = 1;
Element.cache = { };

Element._purgeElement = function(element) {
  var uid = element._prototypeUID;
  if (uid) {
    Element.stopObserving(element);
    element._prototypeUID = void 0;
    delete Element.Storage[uid];
  }
}

Element.Methods = {
  visible: function(element) {
    return $(element).style.display != 'none';
  },

  toggle: function(element) {
    element = $(element);
    Element[Element.visible(element) ? 'hide' : 'show'](element);
    return element;
  },

  hide: function(element) {
    element = $(element);
    element.style.display = 'none';
    return element;
  },

  show: function(element) {
    element = $(element);
    element.style.display = '';
    return element;
  },

  remove: function(element) {
    element = $(element);
    element.parentNode.removeChild(element);
    return element;
  },

  update: (function(){

    var SELECT_ELEMENT_INNERHTML_BUGGY = (function(){
      var el = document.createElement("select"),
          isBuggy = true;
      el.innerHTML = "<option value=\"test\">test</option>";
      if (el.options && el.options[0]) {
        isBuggy = el.options[0].nodeName.toUpperCase() !== "OPTION";
      }
      el = null;
      return isBuggy;
    })();

    var TABLE_ELEMENT_INNERHTML_BUGGY = (function(){
      try {
        var el = document.createElement("table");
        if (el && el.tBodies) {
          el.innerHTML = "<tbody><tr><td>test</td></tr></tbody>";
          var isBuggy = typeof el.tBodies[0] == "undefined";
          el = null;
          return isBuggy;
        }
      } catch (e) {
        return true;
      }
    })();

    var LINK_ELEMENT_INNERHTML_BUGGY = (function() {
      try {
        var el = document.createElement('div');
        el.innerHTML = "<link>";
        var isBuggy = (el.childNodes.length === 0);
        el = null;
        return isBuggy;
      } catch(e) {
        return true;
      }
    })();

    var ANY_INNERHTML_BUGGY = SELECT_ELEMENT_INNERHTML_BUGGY ||
     TABLE_ELEMENT_INNERHTML_BUGGY || LINK_ELEMENT_INNERHTML_BUGGY;

    var SCRIPT_ELEMENT_REJECTS_TEXTNODE_APPENDING = (function () {
      var s = document.createElement("script"),
          isBuggy = false;
      try {
        s.appendChild(document.createTextNode(""));
        isBuggy = !s.firstChild ||
          s.firstChild && s.firstChild.nodeType !== 3;
      } catch (e) {
        isBuggy = true;
      }
      s = null;
      return isBuggy;
    })();


    function update(element, content) {
      element = $(element);
      var purgeElement = Element._purgeElement;

      var descendants = element.getElementsByTagName('*'),
       i = descendants.length;
      while (i--) purgeElement(descendants[i]);

      if (content && content.toElement)
        content = content.toElement();

      if (Object.isElement(content))
        return element.update().insert(content);

      content = Object.toHTML(content);

      var tagName = element.tagName.toUpperCase();

      if (tagName === 'SCRIPT' && SCRIPT_ELEMENT_REJECTS_TEXTNODE_APPENDING) {
        element.text = content;
        return element;
      }

      if (ANY_INNERHTML_BUGGY) {
        if (tagName in Element._insertionTranslations.tags) {
          while (element.firstChild) {
            element.removeChild(element.firstChild);
          }
          Element._getContentFromAnonymousElement(tagName, content.stripScripts())
            .each(function(node) {
              element.appendChild(node)
            });
        } else if (LINK_ELEMENT_INNERHTML_BUGGY && Object.isString(content) && content.indexOf('<link') > -1) {
          while (element.firstChild) {
            element.removeChild(element.firstChild);
          }
          var nodes = Element._getContentFromAnonymousElement(tagName, content.stripScripts(), true);
          nodes.each(function(node) { element.appendChild(node) });
        }
        else {
          element.innerHTML = content.stripScripts();
        }
      }
      else {
        element.innerHTML = content.stripScripts();
      }

      content.evalScripts.bind(content).defer();
      return element;
    }

    return update;
  })(),

  replace: function(element, content) {
    element = $(element);
    if (content && content.toElement) content = content.toElement();
    else if (!Object.isElement(content)) {
      content = Object.toHTML(content);
      var range = element.ownerDocument.createRange();
      range.selectNode(element);
      content.evalScripts.bind(content).defer();
      content = range.createContextualFragment(content.stripScripts());
    }
    element.parentNode.replaceChild(content, element);
    return element;
  },

  insert: function(element, insertions) {
    element = $(element);

    if (Object.isString(insertions) || Object.isNumber(insertions) ||
        Object.isElement(insertions) || (insertions && (insertions.toElement || insertions.toHTML)))
          insertions = {bottom:insertions};

    var content, insert, tagName, childNodes;

    for (var position in insertions) {
      content  = insertions[position];
      position = position.toLowerCase();
      insert = Element._insertionTranslations[position];

      if (content && content.toElement) content = content.toElement();
      if (Object.isElement(content)) {
        insert(element, content);
        continue;
      }

      content = Object.toHTML(content);

      tagName = ((position == 'before' || position == 'after')
        ? element.parentNode : element).tagName.toUpperCase();

      childNodes = Element._getContentFromAnonymousElement(tagName, content.stripScripts());

      if (position == 'top' || position == 'after') childNodes.reverse();
      childNodes.each(insert.curry(element));

      content.evalScripts.bind(content).defer();
    }

    return element;
  },

  wrap: function(element, wrapper, attributes) {
    element = $(element);
    if (Object.isElement(wrapper))
      $(wrapper).writeAttribute(attributes || { });
    else if (Object.isString(wrapper)) wrapper = new Element(wrapper, attributes);
    else wrapper = new Element('div', wrapper);
    if (element.parentNode)
      element.parentNode.replaceChild(wrapper, element);
    wrapper.appendChild(element);
    return wrapper;
  },

  inspect: function(element) {
    element = $(element);
    var result = '<' + element.tagName.toLowerCase();
    $H({'id': 'id', 'className': 'class'}).each(function(pair) {
      var property = pair.first(),
          attribute = pair.last(),
          value = (element[property] || '').toString();
      if (value) result += ' ' + attribute + '=' + value.inspect(true);
    });
    return result + '>';
  },

  recursivelyCollect: function(element, property, maximumLength) {
    element = $(element);
    maximumLength = maximumLength || -1;
    var elements = [];

    while (element = element[property]) {
      if (element.nodeType == 1)
        elements.push(Element.extend(element));
      if (elements.length == maximumLength)
        break;
    }

    return elements;
  },

  ancestors: function(element) {
    return Element.recursivelyCollect(element, 'parentNode');
  },

  descendants: function(element) {
    return Element.select(element, "*");
  },

  firstDescendant: function(element) {
    element = $(element).firstChild;
    while (element && element.nodeType != 1) element = element.nextSibling;
    return $(element);
  },

  immediateDescendants: function(element) {
    var results = [], child = $(element).firstChild;
    while (child) {
      if (child.nodeType === 1) {
        results.push(Element.extend(child));
      }
      child = child.nextSibling;
    }
    return results;
  },

  previousSiblings: function(element, maximumLength) {
    return Element.recursivelyCollect(element, 'previousSibling');
  },

  nextSiblings: function(element) {
    return Element.recursivelyCollect(element, 'nextSibling');
  },

  siblings: function(element) {
    element = $(element);
    return Element.previousSiblings(element).reverse()
      .concat(Element.nextSiblings(element));
  },

  match: function(element, selector) {
    element = $(element);
    if (Object.isString(selector))
      return Prototype.Selector.match(element, selector);
    return selector.match(element);
  },

  up: function(element, expression, index) {
    element = $(element);
    if (arguments.length == 1) return $(element.parentNode);
    var ancestors = Element.ancestors(element);
    return Object.isNumber(expression) ? ancestors[expression] :
      Prototype.Selector.find(ancestors, expression, index);
  },

  down: function(element, expression, index) {
    element = $(element);
    if (arguments.length == 1) return Element.firstDescendant(element);
    return Object.isNumber(expression) ? Element.descendants(element)[expression] :
      Element.select(element, expression)[index || 0];
  },

  previous: function(element, expression, index) {
    element = $(element);
    if (Object.isNumber(expression)) index = expression, expression = false;
    if (!Object.isNumber(index)) index = 0;

    if (expression) {
      return Prototype.Selector.find(element.previousSiblings(), expression, index);
    } else {
      return element.recursivelyCollect("previousSibling", index + 1)[index];
    }
  },

  next: function(element, expression, index) {
    element = $(element);
    if (Object.isNumber(expression)) index = expression, expression = false;
    if (!Object.isNumber(index)) index = 0;

    if (expression) {
      return Prototype.Selector.find(element.nextSiblings(), expression, index);
    } else {
      var maximumLength = Object.isNumber(index) ? index + 1 : 1;
      return element.recursivelyCollect("nextSibling", index + 1)[index];
    }
  },


  select: function(element) {
    element = $(element);
    var expressions = Array.prototype.slice.call(arguments, 1).join(', ');
    return Prototype.Selector.select(expressions, element);
  },

  adjacent: function(element) {
    element = $(element);
    var expressions = Array.prototype.slice.call(arguments, 1).join(', ');
    return Prototype.Selector.select(expressions, element.parentNode).without(element);
  },

  identify: function(element) {
    element = $(element);
    var id = Element.readAttribute(element, 'id');
    if (id) return id;
    do { id = 'anonymous_element_' + Element.idCounter++ } while ($(id));
    Element.writeAttribute(element, 'id', id);
    return id;
  },

  readAttribute: function(element, name) {
    element = $(element);
    if (Prototype.Browser.IE) {
      var t = Element._attributeTranslations.read;
      if (t.values[name]) return t.values[name](element, name);
      if (t.names[name]) name = t.names[name];
      if (name.include(':')) {
        return (!element.attributes || !element.attributes[name]) ? null :
         element.attributes[name].value;
      }
    }
    return element.getAttribute(name);
  },

  writeAttribute: function(element, name, value) {
    element = $(element);
    var attributes = { }, t = Element._attributeTranslations.write;

    if (typeof name == 'object') attributes = name;
    else attributes[name] = Object.isUndefined(value) ? true : value;

    for (var attr in attributes) {
      name = t.names[attr] || attr;
      value = attributes[attr];
      if (t.values[attr]) name = t.values[attr](element, value);
      if (value === false || value === null)
        element.removeAttribute(name);
      else if (value === true)
        element.setAttribute(name, name);
      else element.setAttribute(name, value);
    }
    return element;
  },

  getHeight: function(element) {
    return Element.getDimensions(element).height;
  },

  getWidth: function(element) {
    return Element.getDimensions(element).width;
  },

  classNames: function(element) {
    return new Element.ClassNames(element);
  },

  hasClassName: function(element, className) {
    if (!(element = $(element))) return;
    var elementClassName = element.className;
    return (elementClassName.length > 0 && (elementClassName == className ||
      new RegExp("(^|\\s)" + className + "(\\s|$)").test(elementClassName)));
  },

  addClassName: function(element, className) {
    if (!(element = $(element))) return;
    if (!Element.hasClassName(element, className))
      element.className += (element.className ? ' ' : '') + className;
    return element;
  },

  removeClassName: function(element, className) {
    if (!(element = $(element))) return;
    element.className = element.className.replace(
      new RegExp("(^|\\s+)" + className + "(\\s+|$)"), ' ').strip();
    return element;
  },

  toggleClassName: function(element, className) {
    if (!(element = $(element))) return;
    return Element[Element.hasClassName(element, className) ?
      'removeClassName' : 'addClassName'](element, className);
  },

  cleanWhitespace: function(element) {
    element = $(element);
    var node = element.firstChild;
    while (node) {
      var nextNode = node.nextSibling;
      if (node.nodeType == 3 && !/\S/.test(node.nodeValue))
        element.removeChild(node);
      node = nextNode;
    }
    return element;
  },

  empty: function(element) {
    return $(element).innerHTML.blank();
  },

  descendantOf: function(element, ancestor) {
    element = $(element), ancestor = $(ancestor);

    if (element.compareDocumentPosition)
      return (element.compareDocumentPosition(ancestor) & 8) === 8;

    if (ancestor.contains)
      return ancestor.contains(element) && ancestor !== element;

    while (element = element.parentNode)
      if (element == ancestor) return true;

    return false;
  },

  scrollTo: function(element) {
    element = $(element);
    var pos = Element.cumulativeOffset(element);
    window.scrollTo(pos[0], pos[1]);
    return element;
  },

  getStyle: function(element, style) {
    element = $(element);
    style = style == 'float' ? 'cssFloat' : style.camelize();
    var value = element.style[style];
    if (!value || value == 'auto') {
      var css = document.defaultView.getComputedStyle(element, null);
      value = css ? css[style] : null;
    }
    if (style == 'opacity') return value ? parseFloat(value) : 1.0;
    return value == 'auto' ? null : value;
  },

  getOpacity: function(element) {
    return $(element).getStyle('opacity');
  },

  setStyle: function(element, styles) {
    element = $(element);
    var elementStyle = element.style, match;
    if (Object.isString(styles)) {
      element.style.cssText += ';' + styles;
      return styles.include('opacity') ?
        element.setOpacity(styles.match(/opacity:\s*(\d?\.?\d*)/)[1]) : element;
    }
    for (var property in styles)
      if (property == 'opacity') element.setOpacity(styles[property]);
      else
        elementStyle[(property == 'float' || property == 'cssFloat') ?
          (Object.isUndefined(elementStyle.styleFloat) ? 'cssFloat' : 'styleFloat') :
            property] = styles[property];

    return element;
  },

  setOpacity: function(element, value) {
    element = $(element);
    element.style.opacity = (value == 1 || value === '') ? '' :
      (value < 0.00001) ? 0 : value;
    return element;
  },

  makePositioned: function(element) {
    element = $(element);
    var pos = Element.getStyle(element, 'position');
    if (pos == 'static' || !pos) {
      element._madePositioned = true;
      element.style.position = 'relative';
      if (Prototype.Browser.Opera) {
        element.style.top = 0;
        element.style.left = 0;
      }
    }
    return element;
  },

  undoPositioned: function(element) {
    element = $(element);
    if (element._madePositioned) {
      element._madePositioned = undefined;
      element.style.position =
        element.style.top =
        element.style.left =
        element.style.bottom =
        element.style.right = '';
    }
    return element;
  },

  makeClipping: function(element) {
    element = $(element);
    if (element._overflow) return element;
    element._overflow = Element.getStyle(element, 'overflow') || 'auto';
    if (element._overflow !== 'hidden')
      element.style.overflow = 'hidden';
    return element;
  },

  undoClipping: function(element) {
    element = $(element);
    if (!element._overflow) return element;
    element.style.overflow = element._overflow == 'auto' ? '' : element._overflow;
    element._overflow = null;
    return element;
  },

  clonePosition: function(element, source) {
    var options = Object.extend({
      setLeft:    true,
      setTop:     true,
      setWidth:   true,
      setHeight:  true,
      offsetTop:  0,
      offsetLeft: 0
    }, arguments[2] || { });

    source = $(source);
    var p = Element.viewportOffset(source), delta = [0, 0], parent = null;

    element = $(element);

    if (Element.getStyle(element, 'position') == 'absolute') {
      parent = Element.getOffsetParent(element);
      delta = Element.viewportOffset(parent);
    }

    if (parent == document.body) {
      delta[0] -= document.body.offsetLeft;
      delta[1] -= document.body.offsetTop;
    }

    if (options.setLeft)   element.style.left  = (p[0] - delta[0] + options.offsetLeft) + 'px';
    if (options.setTop)    element.style.top   = (p[1] - delta[1] + options.offsetTop) + 'px';
    if (options.setWidth)  element.style.width = source.offsetWidth + 'px';
    if (options.setHeight) element.style.height = source.offsetHeight + 'px';
    return element;
  }
};

Object.extend(Element.Methods, {
  getElementsBySelector: Element.Methods.select,

  childElements: Element.Methods.immediateDescendants
});

Element._attributeTranslations = {
  write: {
    names: {
      className: 'class',
      htmlFor:   'for'
    },
    values: { }
  }
};

if (Prototype.Browser.Opera) {
  Element.Methods.getStyle = Element.Methods.getStyle.wrap(
    function(proceed, element, style) {
      switch (style) {
        case 'height': case 'width':
          if (!Element.visible(element)) return null;

          var dim = parseInt(proceed(element, style), 10);

          if (dim !== element['offset' + style.capitalize()])
            return dim + 'px';

          var properties;
          if (style === 'height') {
            properties = ['border-top-width', 'padding-top',
             'padding-bottom', 'border-bottom-width'];
          }
          else {
            properties = ['border-left-width', 'padding-left',
             'padding-right', 'border-right-width'];
          }
          return properties.inject(dim, function(memo, property) {
            var val = proceed(element, property);
            return val === null ? memo : memo - parseInt(val, 10);
          }) + 'px';
        default: return proceed(element, style);
      }
    }
  );

  Element.Methods.readAttribute = Element.Methods.readAttribute.wrap(
    function(proceed, element, attribute) {
      if (attribute === 'title') return element.title;
      return proceed(element, attribute);
    }
  );
}

else if (Prototype.Browser.IE) {
  Element.Methods.getStyle = function(element, style) {
    element = $(element);
    style = (style == 'float' || style == 'cssFloat') ? 'styleFloat' : style.camelize();
    var value = element.style[style];
    if (!value && element.currentStyle) value = element.currentStyle[style];

    if (style == 'opacity') {
      if (value = (element.getStyle('filter') || '').match(/alpha\(opacity=(.*)\)/))
        if (value[1]) return parseFloat(value[1]) / 100;
      return 1.0;
    }

    if (value == 'auto') {
      if ((style == 'width' || style == 'height') && (element.getStyle('display') != 'none'))
        return element['offset' + style.capitalize()] + 'px';
      return null;
    }
    return value;
  };

  Element.Methods.setOpacity = function(element, value) {
    function stripAlpha(filter){
      return filter.replace(/alpha\([^\)]*\)/gi,'');
    }
    element = $(element);
    var currentStyle = element.currentStyle;
    if ((currentStyle && !currentStyle.hasLayout) ||
      (!currentStyle && element.style.zoom == 'normal'))
        element.style.zoom = 1;

    var filter = element.getStyle('filter'), style = element.style;
    if (value == 1 || value === '') {
      (filter = stripAlpha(filter)) ?
        style.filter = filter : style.removeAttribute('filter');
      return element;
    } else if (value < 0.00001) value = 0;
    style.filter = stripAlpha(filter) +
      'alpha(opacity=' + (value * 100) + ')';
    return element;
  };

  Element._attributeTranslations = (function(){

    var classProp = 'className',
        forProp = 'for',
        el = document.createElement('div');

    el.setAttribute(classProp, 'x');

    if (el.className !== 'x') {
      el.setAttribute('class', 'x');
      if (el.className === 'x') {
        classProp = 'class';
      }
    }
    el = null;

    el = document.createElement('label');
    el.setAttribute(forProp, 'x');
    if (el.htmlFor !== 'x') {
      el.setAttribute('htmlFor', 'x');
      if (el.htmlFor === 'x') {
        forProp = 'htmlFor';
      }
    }
    el = null;

    return {
      read: {
        names: {
          'class':      classProp,
          'className':  classProp,
          'for':        forProp,
          'htmlFor':    forProp
        },
        values: {
          _getAttr: function(element, attribute) {
            return element.getAttribute(attribute);
          },
          _getAttr2: function(element, attribute) {
            return element.getAttribute(attribute, 2);
          },
          _getAttrNode: function(element, attribute) {
            var node = element.getAttributeNode(attribute);
            return node ? node.value : "";
          },
          _getEv: (function(){

            var el = document.createElement('div'), f;
            el.onclick = Prototype.emptyFunction;
            var value = el.getAttribute('onclick');

            if (String(value).indexOf('{') > -1) {
              f = function(element, attribute) {
                attribute = element.getAttribute(attribute);
                if (!attribute) return null;
                attribute = attribute.toString();
                attribute = attribute.split('{')[1];
                attribute = attribute.split('}')[0];
                return attribute.strip();
              };
            }
            else if (value === '') {
              f = function(element, attribute) {
                attribute = element.getAttribute(attribute);
                if (!attribute) return null;
                return attribute.strip();
              };
            }
            el = null;
            return f;
          })(),
          _flag: function(element, attribute) {
            return $(element).hasAttribute(attribute) ? attribute : null;
          },
          style: function(element) {
            return element.style.cssText.toLowerCase();
          },
          title: function(element) {
            return element.title;
          }
        }
      }
    }
  })();

  Element._attributeTranslations.write = {
    names: Object.extend({
      cellpadding: 'cellPadding',
      cellspacing: 'cellSpacing'
    }, Element._attributeTranslations.read.names),
    values: {
      checked: function(element, value) {
        element.checked = !!value;
      },

      style: function(element, value) {
        element.style.cssText = value ? value : '';
      }
    }
  };

  Element._attributeTranslations.has = {};

  $w('colSpan rowSpan vAlign dateTime accessKey tabIndex ' +
      'encType maxLength readOnly longDesc frameBorder').each(function(attr) {
    Element._attributeTranslations.write.names[attr.toLowerCase()] = attr;
    Element._attributeTranslations.has[attr.toLowerCase()] = attr;
  });

  (function(v) {
    Object.extend(v, {
      href:        v._getAttr2,
      src:         v._getAttr2,
      type:        v._getAttr,
      action:      v._getAttrNode,
      disabled:    v._flag,
      checked:     v._flag,
      readonly:    v._flag,
      multiple:    v._flag,
      onload:      v._getEv,
      onunload:    v._getEv,
      onclick:     v._getEv,
      ondblclick:  v._getEv,
      onmousedown: v._getEv,
      onmouseup:   v._getEv,
      onmouseover: v._getEv,
      onmousemove: v._getEv,
      onmouseout:  v._getEv,
      onfocus:     v._getEv,
      onblur:      v._getEv,
      onkeypress:  v._getEv,
      onkeydown:   v._getEv,
      onkeyup:     v._getEv,
      onsubmit:    v._getEv,
      onreset:     v._getEv,
      onselect:    v._getEv,
      onchange:    v._getEv
    });
  })(Element._attributeTranslations.read.values);

  if (Prototype.BrowserFeatures.ElementExtensions) {
    (function() {
      function _descendants(element) {
        var nodes = element.getElementsByTagName('*'), results = [];
        for (var i = 0, node; node = nodes[i]; i++)
          if (node.tagName !== "!") // Filter out comment nodes.
            results.push(node);
        return results;
      }

      Element.Methods.down = function(element, expression, index) {
        element = $(element);
        if (arguments.length == 1) return element.firstDescendant();
        return Object.isNumber(expression) ? _descendants(element)[expression] :
          Element.select(element, expression)[index || 0];
      }
    })();
  }

}

else if (Prototype.Browser.Gecko && /rv:1\.8\.0/.test(navigator.userAgent)) {
  Element.Methods.setOpacity = function(element, value) {
    element = $(element);
    element.style.opacity = (value == 1) ? 0.999999 :
      (value === '') ? '' : (value < 0.00001) ? 0 : value;
    return element;
  };
}

else if (Prototype.Browser.WebKit) {
  Element.Methods.setOpacity = function(element, value) {
    element = $(element);
    element.style.opacity = (value == 1 || value === '') ? '' :
      (value < 0.00001) ? 0 : value;

    if (value == 1)
      if (element.tagName.toUpperCase() == 'IMG' && element.width) {
        element.width++; element.width--;
      } else try {
        var n = document.createTextNode(' ');
        element.appendChild(n);
        element.removeChild(n);
      } catch (e) { }

    return element;
  };
}

if ('outerHTML' in document.documentElement) {
  Element.Methods.replace = function(element, content) {
    element = $(element);

    if (content && content.toElement) content = content.toElement();
    if (Object.isElement(content)) {
      element.parentNode.replaceChild(content, element);
      return element;
    }

    content = Object.toHTML(content);
    var parent = element.parentNode, tagName = parent.tagName.toUpperCase();

    if (Element._insertionTranslations.tags[tagName]) {
      var nextSibling = element.next(),
          fragments = Element._getContentFromAnonymousElement(tagName, content.stripScripts());
      parent.removeChild(element);
      if (nextSibling)
        fragments.each(function(node) { parent.insertBefore(node, nextSibling) });
      else
        fragments.each(function(node) { parent.appendChild(node) });
    }
    else element.outerHTML = content.stripScripts();

    content.evalScripts.bind(content).defer();
    return element;
  };
}

Element._returnOffset = function(l, t) {
  var result = [l, t];
  result.left = l;
  result.top = t;
  return result;
};

Element._getContentFromAnonymousElement = function(tagName, html, force) {
  var div = new Element('div'),
      t = Element._insertionTranslations.tags[tagName];

  var workaround = false;
  if (t) workaround = true;
  else if (force) {
    workaround = true;
    t = ['', '', 0];
  }

  if (workaround) {
    div.innerHTML = '&nbsp;' + t[0] + html + t[1];
    div.removeChild(div.firstChild);
    for (var i = t[2]; i--; ) {
      div = div.firstChild;
    }
  }
  else {
    div.innerHTML = html;
  }
  return $A(div.childNodes);
};

Element._insertionTranslations = {
  before: function(element, node) {
    element.parentNode.insertBefore(node, element);
  },
  top: function(element, node) {
    element.insertBefore(node, element.firstChild);
  },
  bottom: function(element, node) {
    element.appendChild(node);
  },
  after: function(element, node) {
    element.parentNode.insertBefore(node, element.nextSibling);
  },
  tags: {
    TABLE:  ['<table>',                '</table>',                   1],
    TBODY:  ['<table><tbody>',         '</tbody></table>',           2],
    TR:     ['<table><tbody><tr>',     '</tr></tbody></table>',      3],
    TD:     ['<table><tbody><tr><td>', '</td></tr></tbody></table>', 4],
    SELECT: ['<select>',               '</select>',                  1]
  }
};

(function() {
  var tags = Element._insertionTranslations.tags;
  Object.extend(tags, {
    THEAD: tags.TBODY,
    TFOOT: tags.TBODY,
    TH:    tags.TD
  });
})();

Element.Methods.Simulated = {
  hasAttribute: function(element, attribute) {
    attribute = Element._attributeTranslations.has[attribute] || attribute;
    var node = $(element).getAttributeNode(attribute);
    return !!(node && node.specified);
  }
};

Element.Methods.ByTag = { };

Object.extend(Element, Element.Methods);

(function(div) {

  if (!Prototype.BrowserFeatures.ElementExtensions && div['__proto__']) {
    window.HTMLElement = { };
    window.HTMLElement.prototype = div['__proto__'];
    Prototype.BrowserFeatures.ElementExtensions = true;
  }

  div = null;

})(document.createElement('div'));

Element.extend = (function() {

  function checkDeficiency(tagName) {
    if (typeof window.Element != 'undefined') {
      var proto = window.Element.prototype;
      if (proto) {
        var id = '_' + (Math.random()+'').slice(2),
            el = document.createElement(tagName);
        proto[id] = 'x';
        var isBuggy = (el[id] !== 'x');
        delete proto[id];
        el = null;
        return isBuggy;
      }
    }
    return false;
  }

  function extendElementWith(element, methods) {
    for (var property in methods) {
      var value = methods[property];
      if (Object.isFunction(value) && !(property in element))
        element[property] = value.methodize();
    }
  }

  var HTMLOBJECTELEMENT_PROTOTYPE_BUGGY = checkDeficiency('object');

  if (Prototype.BrowserFeatures.SpecificElementExtensions) {
    if (HTMLOBJECTELEMENT_PROTOTYPE_BUGGY) {
      return function(element) {
        if (element && typeof element._extendedByPrototype == 'undefined') {
          var t = element.tagName;
          if (t && (/^(?:object|applet|embed)$/i.test(t))) {
            extendElementWith(element, Element.Methods);
            extendElementWith(element, Element.Methods.Simulated);
            extendElementWith(element, Element.Methods.ByTag[t.toUpperCase()]);
          }
        }
        return element;
      }
    }
    return Prototype.K;
  }

  var Methods = { }, ByTag = Element.Methods.ByTag;

  var extend = Object.extend(function(element) {
    if (!element || typeof element._extendedByPrototype != 'undefined' ||
        element.nodeType != 1 || element == window) return element;

    var methods = Object.clone(Methods),
        tagName = element.tagName.toUpperCase();

    if (ByTag[tagName]) Object.extend(methods, ByTag[tagName]);

    extendElementWith(element, methods);

    element._extendedByPrototype = Prototype.emptyFunction;
    return element;

  }, {
    refresh: function() {
      if (!Prototype.BrowserFeatures.ElementExtensions) {
        Object.extend(Methods, Element.Methods);
        Object.extend(Methods, Element.Methods.Simulated);
      }
    }
  });

  extend.refresh();
  return extend;
})();

if (document.documentElement.hasAttribute) {
  Element.hasAttribute = function(element, attribute) {
    return element.hasAttribute(attribute);
  };
}
else {
  Element.hasAttribute = Element.Methods.Simulated.hasAttribute;
}

Element.addMethods = function(methods) {
  var F = Prototype.BrowserFeatures, T = Element.Methods.ByTag;

  if (!methods) {
    Object.extend(Form, Form.Methods);
    Object.extend(Form.Element, Form.Element.Methods);
    Object.extend(Element.Methods.ByTag, {
      "FORM":     Object.clone(Form.Methods),
      "INPUT":    Object.clone(Form.Element.Methods),
      "SELECT":   Object.clone(Form.Element.Methods),
      "TEXTAREA": Object.clone(Form.Element.Methods),
      "BUTTON":   Object.clone(Form.Element.Methods)
    });
  }

  if (arguments.length == 2) {
    var tagName = methods;
    methods = arguments[1];
  }

  if (!tagName) Object.extend(Element.Methods, methods || { });
  else {
    if (Object.isArray(tagName)) tagName.each(extend);
    else extend(tagName);
  }

  function extend(tagName) {
    tagName = tagName.toUpperCase();
    if (!Element.Methods.ByTag[tagName])
      Element.Methods.ByTag[tagName] = { };
    Object.extend(Element.Methods.ByTag[tagName], methods);
  }

  function copy(methods, destination, onlyIfAbsent) {
    onlyIfAbsent = onlyIfAbsent || false;
    for (var property in methods) {
      var value = methods[property];
      if (!Object.isFunction(value)) continue;
      if (!onlyIfAbsent || !(property in destination))
        destination[property] = value.methodize();
    }
  }

  function findDOMClass(tagName) {
    var klass;
    var trans = {
      "OPTGROUP": "OptGroup", "TEXTAREA": "TextArea", "P": "Paragraph",
      "FIELDSET": "FieldSet", "UL": "UList", "OL": "OList", "DL": "DList",
      "DIR": "Directory", "H1": "Heading", "H2": "Heading", "H3": "Heading",
      "H4": "Heading", "H5": "Heading", "H6": "Heading", "Q": "Quote",
      "INS": "Mod", "DEL": "Mod", "A": "Anchor", "IMG": "Image", "CAPTION":
      "TableCaption", "COL": "TableCol", "COLGROUP": "TableCol", "THEAD":
      "TableSection", "TFOOT": "TableSection", "TBODY": "TableSection", "TR":
      "TableRow", "TH": "TableCell", "TD": "TableCell", "FRAMESET":
      "FrameSet", "IFRAME": "IFrame"
    };
    if (trans[tagName]) klass = 'HTML' + trans[tagName] + 'Element';
    if (window[klass]) return window[klass];
    klass = 'HTML' + tagName + 'Element';
    if (window[klass]) return window[klass];
    klass = 'HTML' + tagName.capitalize() + 'Element';
    if (window[klass]) return window[klass];

    var element = document.createElement(tagName),
        proto = element['__proto__'] || element.constructor.prototype;

    element = null;
    return proto;
  }

  var elementPrototype = window.HTMLElement ? HTMLElement.prototype :
   Element.prototype;

  if (F.ElementExtensions) {
    copy(Element.Methods, elementPrototype);
    copy(Element.Methods.Simulated, elementPrototype, true);
  }

  if (F.SpecificElementExtensions) {
    for (var tag in Element.Methods.ByTag) {
      var klass = findDOMClass(tag);
      if (Object.isUndefined(klass)) continue;
      copy(T[tag], klass.prototype);
    }
  }

  Object.extend(Element, Element.Methods);
  delete Element.ByTag;

  if (Element.extend.refresh) Element.extend.refresh();
  Element.cache = { };
};


document.viewport = {

  getDimensions: function() {
    return { width: this.getWidth(), height: this.getHeight() };
  },

  getScrollOffsets: function() {
    return Element._returnOffset(
      window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft,
      window.pageYOffset || document.documentElement.scrollTop  || document.body.scrollTop);
  }
};

(function(viewport) {
  var B = Prototype.Browser, doc = document, element, property = {};

  function getRootElement() {
    if (B.WebKit && !doc.evaluate)
      return document;

    if (B.Opera && window.parseFloat(window.opera.version()) < 9.5)
      return document.body;

    return document.documentElement;
  }

  function define(D) {
    if (!element) element = getRootElement();

    property[D] = 'client' + D;

    viewport['get' + D] = function() { return element[property[D]] };
    return viewport['get' + D]();
  }

  viewport.getWidth  = define.curry('Width');

  viewport.getHeight = define.curry('Height');
})(document.viewport);


Element.Storage = {
  UID: 1
};

Element.addMethods({
  getStorage: function(element) {
    if (!(element = $(element))) return;

    var uid;
    if (element === window) {
      uid = 0;
    } else {
      if (typeof element._prototypeUID === "undefined")
        element._prototypeUID = Element.Storage.UID++;
      uid = element._prototypeUID;
    }

    if (!Element.Storage[uid])
      Element.Storage[uid] = $H();

    return Element.Storage[uid];
  },

  store: function(element, key, value) {
    if (!(element = $(element))) return;

    if (arguments.length === 2) {
      Element.getStorage(element).update(key);
    } else {
      Element.getStorage(element).set(key, value);
    }

    return element;
  },

  retrieve: function(element, key, defaultValue) {
    if (!(element = $(element))) return;
    var hash = Element.getStorage(element), value = hash.get(key);

    if (Object.isUndefined(value)) {
      hash.set(key, defaultValue);
      value = defaultValue;
    }

    return value;
  },

  clone: function(element, deep) {
    if (!(element = $(element))) return;
    var clone = element.cloneNode(deep);
    clone._prototypeUID = void 0;
    if (deep) {
      var descendants = Element.select(clone, '*'),
          i = descendants.length;
      while (i--) {
        descendants[i]._prototypeUID = void 0;
      }
    }
    return Element.extend(clone);
  },

  purge: function(element) {
    if (!(element = $(element))) return;
    var purgeElement = Element._purgeElement;

    purgeElement(element);

    var descendants = element.getElementsByTagName('*'),
     i = descendants.length;

    while (i--) purgeElement(descendants[i]);

    return null;
  }
});

(function() {

  function toDecimal(pctString) {
    var match = pctString.match(/^(\d+)%?$/i);
    if (!match) return null;
    return (Number(match[1]) / 100);
  }

  function getPixelValue(value, property, context) {
    var element = null;
    if (Object.isElement(value)) {
      element = value;
      value = element.getStyle(property);
    }

    if (value === null) {
      return null;
    }

    if ((/^(?:-)?\d+(\.\d+)?(px)?$/i).test(value)) {
      return window.parseFloat(value);
    }

    var isPercentage = value.include('%'), isViewport = (context === document.viewport);

    if (/\d/.test(value) && element && element.runtimeStyle && !(isPercentage && isViewport)) {
      var style = element.style.left, rStyle = element.runtimeStyle.left;
      element.runtimeStyle.left = element.currentStyle.left;
      element.style.left = value || 0;
      value = element.style.pixelLeft;
      element.style.left = style;
      element.runtimeStyle.left = rStyle;

      return value;
    }

    if (element && isPercentage) {
      context = context || element.parentNode;
      var decimal = toDecimal(value);
      var whole = null;
      var position = element.getStyle('position');

      var isHorizontal = property.include('left') || property.include('right') ||
       property.include('width');

      var isVertical =  property.include('top') || property.include('bottom') ||
        property.include('height');

      if (context === document.viewport) {
        if (isHorizontal) {
          whole = document.viewport.getWidth();
        } else if (isVertical) {
          whole = document.viewport.getHeight();
        }
      } else {
        if (isHorizontal) {
          whole = $(context).measure('width');
        } else if (isVertical) {
          whole = $(context).measure('height');
        }
      }

      return (whole === null) ? 0 : whole * decimal;
    }

    return 0;
  }

  function toCSSPixels(number) {
    if (Object.isString(number) && number.endsWith('px')) {
      return number;
    }
    return number + 'px';
  }

  function isDisplayed(element) {
    var originalElement = element;
    while (element && element.parentNode) {
      var display = element.getStyle('display');
      if (display === 'none') {
        return false;
      }
      element = $(element.parentNode);
    }
    return true;
  }

  var hasLayout = Prototype.K;
  if ('currentStyle' in document.documentElement) {
    hasLayout = function(element) {
      if (!element.currentStyle.hasLayout) {
        element.style.zoom = 1;
      }
      return element;
    };
  }

  function cssNameFor(key) {
    if (key.include('border')) key = key + '-width';
    return key.camelize();
  }

  Element.Layout = Class.create(Hash, {
    initialize: function($super, element, preCompute) {
      $super();
      this.element = $(element);

      Element.Layout.PROPERTIES.each( function(property) {
        this._set(property, null);
      }, this);

      if (preCompute) {
        this._preComputing = true;
        this._begin();
        Element.Layout.PROPERTIES.each( this._compute, this );
        this._end();
        this._preComputing = false;
      }
    },

    _set: function(property, value) {
      return Hash.prototype.set.call(this, property, value);
    },

    set: function(property, value) {
      throw "Properties of Element.Layout are read-only.";
    },

    get: function($super, property) {
      var value = $super(property);
      return value === null ? this._compute(property) : value;
    },

    _begin: function() {
      if (this._prepared) return;

      var element = this.element;
      if (isDisplayed(element)) {
        this._prepared = true;
        return;
      }

      var originalStyles = {
        position:   element.style.position   || '',
        width:      element.style.width      || '',
        visibility: element.style.visibility || '',
        display:    element.style.display    || ''
      };

      element.store('prototype_original_styles', originalStyles);

      var position = element.getStyle('position'),
       width = element.getStyle('width');

      if (width === "0px" || width === null) {
        element.style.display = 'block';
        width = element.getStyle('width');
      }

      var context = (position === 'fixed') ? document.viewport :
       element.parentNode;

      element.setStyle({
        position:   'absolute',
        visibility: 'hidden',
        display:    'block'
      });

      var positionedWidth = element.getStyle('width');

      var newWidth;
      if (width && (positionedWidth === width)) {
        newWidth = getPixelValue(element, 'width', context);
      } else if (position === 'absolute' || position === 'fixed') {
        newWidth = getPixelValue(element, 'width', context);
      } else {
        var parent = element.parentNode, pLayout = $(parent).getLayout();

        newWidth = pLayout.get('width') -
         this.get('margin-left') -
         this.get('border-left') -
         this.get('padding-left') -
         this.get('padding-right') -
         this.get('border-right') -
         this.get('margin-right');
      }

      element.setStyle({ width: newWidth + 'px' });

      this._prepared = true;
    },

    _end: function() {
      var element = this.element;
      var originalStyles = element.retrieve('prototype_original_styles');
      element.store('prototype_original_styles', null);
      element.setStyle(originalStyles);
      this._prepared = false;
    },

    _compute: function(property) {
      var COMPUTATIONS = Element.Layout.COMPUTATIONS;
      if (!(property in COMPUTATIONS)) {
        throw "Property not found.";
      }

      return this._set(property, COMPUTATIONS[property].call(this, this.element));
    },

    toObject: function() {
      var args = $A(arguments);
      var keys = (args.length === 0) ? Element.Layout.PROPERTIES :
       args.join(' ').split(' ');
      var obj = {};
      keys.each( function(key) {
        if (!Element.Layout.PROPERTIES.include(key)) return;
        var value = this.get(key);
        if (value != null) obj[key] = value;
      }, this);
      return obj;
    },

    toHash: function() {
      var obj = this.toObject.apply(this, arguments);
      return new Hash(obj);
    },

    toCSS: function() {
      var args = $A(arguments);
      var keys = (args.length === 0) ? Element.Layout.PROPERTIES :
       args.join(' ').split(' ');
      var css = {};

      keys.each( function(key) {
        if (!Element.Layout.PROPERTIES.include(key)) return;
        if (Element.Layout.COMPOSITE_PROPERTIES.include(key)) return;

        var value = this.get(key);
        if (value != null) css[cssNameFor(key)] = value + 'px';
      }, this);
      return css;
    },

    inspect: function() {
      return "#<Element.Layout>";
    }
  });

  Object.extend(Element.Layout, {
    PROPERTIES: $w('height width top left right bottom border-left border-right border-top border-bottom padding-left padding-right padding-top padding-bottom margin-top margin-bottom margin-left margin-right padding-box-width padding-box-height border-box-width border-box-height margin-box-width margin-box-height'),

    COMPOSITE_PROPERTIES: $w('padding-box-width padding-box-height margin-box-width margin-box-height border-box-width border-box-height'),

    COMPUTATIONS: {
      'height': function(element) {
        if (!this._preComputing) this._begin();

        var bHeight = this.get('border-box-height');
        if (bHeight <= 0) {
          if (!this._preComputing) this._end();
          return 0;
        }

        var bTop = this.get('border-top'),
         bBottom = this.get('border-bottom');

        var pTop = this.get('padding-top'),
         pBottom = this.get('padding-bottom');

        if (!this._preComputing) this._end();

        return bHeight - bTop - bBottom - pTop - pBottom;
      },

      'width': function(element) {
        if (!this._preComputing) this._begin();

        var bWidth = this.get('border-box-width');
        if (bWidth <= 0) {
          if (!this._preComputing) this._end();
          return 0;
        }

        var bLeft = this.get('border-left'),
         bRight = this.get('border-right');

        var pLeft = this.get('padding-left'),
         pRight = this.get('padding-right');

        if (!this._preComputing) this._end();

        return bWidth - bLeft - bRight - pLeft - pRight;
      },

      'padding-box-height': function(element) {
        var height = this.get('height'),
         pTop = this.get('padding-top'),
         pBottom = this.get('padding-bottom');

        return height + pTop + pBottom;
      },

      'padding-box-width': function(element) {
        var width = this.get('width'),
         pLeft = this.get('padding-left'),
         pRight = this.get('padding-right');

        return width + pLeft + pRight;
      },

      'border-box-height': function(element) {
        if (!this._preComputing) this._begin();
        var height = element.offsetHeight;
        if (!this._preComputing) this._end();
        return height;
      },

      'border-box-width': function(element) {
        if (!this._preComputing) this._begin();
        var width = element.offsetWidth;
        if (!this._preComputing) this._end();
        return width;
      },

      'margin-box-height': function(element) {
        var bHeight = this.get('border-box-height'),
         mTop = this.get('margin-top'),
         mBottom = this.get('margin-bottom');

        if (bHeight <= 0) return 0;

        return bHeight + mTop + mBottom;
      },

      'margin-box-width': function(element) {
        var bWidth = this.get('border-box-width'),
         mLeft = this.get('margin-left'),
         mRight = this.get('margin-right');

        if (bWidth <= 0) return 0;

        return bWidth + mLeft + mRight;
      },

      'top': function(element) {
        var offset = element.positionedOffset();
        return offset.top;
      },

      'bottom': function(element) {
        var offset = element.positionedOffset(),
         parent = element.getOffsetParent(),
         pHeight = parent.measure('height');

        var mHeight = this.get('border-box-height');

        return pHeight - mHeight - offset.top;
      },

      'left': function(element) {
        var offset = element.positionedOffset();
        return offset.left;
      },

      'right': function(element) {
        var offset = element.positionedOffset(),
         parent = element.getOffsetParent(),
         pWidth = parent.measure('width');

        var mWidth = this.get('border-box-width');

        return pWidth - mWidth - offset.left;
      },

      'padding-top': function(element) {
        return getPixelValue(element, 'paddingTop');
      },

      'padding-bottom': function(element) {
        return getPixelValue(element, 'paddingBottom');
      },

      'padding-left': function(element) {
        return getPixelValue(element, 'paddingLeft');
      },

      'padding-right': function(element) {
        return getPixelValue(element, 'paddingRight');
      },

      'border-top': function(element) {
        return getPixelValue(element, 'borderTopWidth');
      },

      'border-bottom': function(element) {
        return getPixelValue(element, 'borderBottomWidth');
      },

      'border-left': function(element) {
        return getPixelValue(element, 'borderLeftWidth');
      },

      'border-right': function(element) {
        return getPixelValue(element, 'borderRightWidth');
      },

      'margin-top': function(element) {
        return getPixelValue(element, 'marginTop');
      },

      'margin-bottom': function(element) {
        return getPixelValue(element, 'marginBottom');
      },

      'margin-left': function(element) {
        return getPixelValue(element, 'marginLeft');
      },

      'margin-right': function(element) {
        return getPixelValue(element, 'marginRight');
      }
    }
  });

  if ('getBoundingClientRect' in document.documentElement) {
    Object.extend(Element.Layout.COMPUTATIONS, {
      'right': function(element) {
        var parent = hasLayout(element.getOffsetParent());
        var rect = element.getBoundingClientRect(),
         pRect = parent.getBoundingClientRect();

        return (pRect.right - rect.right).round();
      },

      'bottom': function(element) {
        var parent = hasLayout(element.getOffsetParent());
        var rect = element.getBoundingClientRect(),
         pRect = parent.getBoundingClientRect();

        return (pRect.bottom - rect.bottom).round();
      }
    });
  }

  Element.Offset = Class.create({
    initialize: function(left, top) {
      this.left = left.round();
      this.top  = top.round();

      this[0] = this.left;
      this[1] = this.top;
    },

    relativeTo: function(offset) {
      return new Element.Offset(
        this.left - offset.left,
        this.top  - offset.top
      );
    },

    inspect: function() {
      return "#<Element.Offset left: #{left} top: #{top}>".interpolate(this);
    },

    toString: function() {
      return "[#{left}, #{top}]".interpolate(this);
    },

    toArray: function() {
      return [this.left, this.top];
    }
  });

  function getLayout(element, preCompute) {
    return new Element.Layout(element, preCompute);
  }

  function measure(element, property) {
    return $(element).getLayout().get(property);
  }

  function getDimensions(element) {
    element = $(element);
    var display = Element.getStyle(element, 'display');

    if (display && display !== 'none') {
      return { width: element.offsetWidth, height: element.offsetHeight };
    }

    var style = element.style;
    var originalStyles = {
      visibility: style.visibility,
      position:   style.position,
      display:    style.display
    };

    var newStyles = {
      visibility: 'hidden',
      display:    'block'
    };

    if (originalStyles.position !== 'fixed')
      newStyles.position = 'absolute';

    Element.setStyle(element, newStyles);

    var dimensions = {
      width:  element.offsetWidth,
      height: element.offsetHeight
    };

    Element.setStyle(element, originalStyles);

    return dimensions;
  }

  function getOffsetParent(element) {
    element = $(element);

    if (isDocument(element) || isDetached(element) || isBody(element) || isHtml(element))
      return $(document.body);

    var isInline = (Element.getStyle(element, 'display') === 'inline');
    if (!isInline && element.offsetParent) return $(element.offsetParent);

    while ((element = element.parentNode) && element !== document.body) {
      if (Element.getStyle(element, 'position') !== 'static') {
        return isHtml(element) ? $(document.body) : $(element);
      }
    }

    return $(document.body);
  }


  function cumulativeOffset(element) {
    element = $(element);
    var valueT = 0, valueL = 0;
    if (element.parentNode) {
      do {
        valueT += element.offsetTop  || 0;
        valueL += element.offsetLeft || 0;
        element = element.offsetParent;
      } while (element);
    }
    return new Element.Offset(valueL, valueT);
  }

  function positionedOffset(element) {
    element = $(element);

    var layout = element.getLayout();

    var valueT = 0, valueL = 0;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      element = element.offsetParent;
      if (element) {
        if (isBody(element)) break;
        var p = Element.getStyle(element, 'position');
        if (p !== 'static') break;
      }
    } while (element);

    valueL -= layout.get('margin-top');
    valueT -= layout.get('margin-left');

    return new Element.Offset(valueL, valueT);
  }

  function cumulativeScrollOffset(element) {
    var valueT = 0, valueL = 0;
    do {
      valueT += element.scrollTop  || 0;
      valueL += element.scrollLeft || 0;
      element = element.parentNode;
    } while (element);
    return new Element.Offset(valueL, valueT);
  }

  function viewportOffset(forElement) {
    element = $(element);
    var valueT = 0, valueL = 0, docBody = document.body;

    var element = forElement;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      if (element.offsetParent == docBody &&
        Element.getStyle(element, 'position') == 'absolute') break;
    } while (element = element.offsetParent);

    element = forElement;
    do {
      if (element != docBody) {
        valueT -= element.scrollTop  || 0;
        valueL -= element.scrollLeft || 0;
      }
    } while (element = element.parentNode);
    return new Element.Offset(valueL, valueT);
  }

  function absolutize(element) {
    element = $(element);

    if (Element.getStyle(element, 'position') === 'absolute') {
      return element;
    }

    var offsetParent = getOffsetParent(element);
    var eOffset = element.viewportOffset(),
     pOffset = offsetParent.viewportOffset();

    var offset = eOffset.relativeTo(pOffset);
    var layout = element.getLayout();

    element.store('prototype_absolutize_original_styles', {
      left:   element.getStyle('left'),
      top:    element.getStyle('top'),
      width:  element.getStyle('width'),
      height: element.getStyle('height')
    });

    element.setStyle({
      position: 'absolute',
      top:    offset.top + 'px',
      left:   offset.left + 'px',
      width:  layout.get('width') + 'px',
      height: layout.get('height') + 'px'
    });

    return element;
  }

  function relativize(element) {
    element = $(element);
    if (Element.getStyle(element, 'position') === 'relative') {
      return element;
    }

    var originalStyles =
     element.retrieve('prototype_absolutize_original_styles');

    if (originalStyles) element.setStyle(originalStyles);
    return element;
  }

  if (Prototype.Browser.IE) {
    getOffsetParent = getOffsetParent.wrap(
      function(proceed, element) {
        element = $(element);

        if (isDocument(element) || isDetached(element) || isBody(element) || isHtml(element))
          return $(document.body);

        var position = element.getStyle('position');
        if (position !== 'static') return proceed(element);

        element.setStyle({ position: 'relative' });
        var value = proceed(element);
        element.setStyle({ position: position });
        return value;
      }
    );

    positionedOffset = positionedOffset.wrap(function(proceed, element) {
      element = $(element);
      if (!element.parentNode) return new Element.Offset(0, 0);
      var position = element.getStyle('position');
      if (position !== 'static') return proceed(element);

      var offsetParent = element.getOffsetParent();
      if (offsetParent && offsetParent.getStyle('position') === 'fixed')
        hasLayout(offsetParent);

      element.setStyle({ position: 'relative' });
      var value = proceed(element);
      element.setStyle({ position: position });
      return value;
    });
  } else if (Prototype.Browser.Webkit) {
    cumulativeOffset = function(element) {
      element = $(element);
      var valueT = 0, valueL = 0;
      do {
        valueT += element.offsetTop  || 0;
        valueL += element.offsetLeft || 0;
        if (element.offsetParent == document.body)
          if (Element.getStyle(element, 'position') == 'absolute') break;

        element = element.offsetParent;
      } while (element);

      return new Element.Offset(valueL, valueT);
    };
  }


  Element.addMethods({
    getLayout:              getLayout,
    measure:                measure,
    getDimensions:          getDimensions,
    getOffsetParent:        getOffsetParent,
    cumulativeOffset:       cumulativeOffset,
    positionedOffset:       positionedOffset,
    cumulativeScrollOffset: cumulativeScrollOffset,
    viewportOffset:         viewportOffset,
    absolutize:             absolutize,
    relativize:             relativize
  });

  function isBody(element) {
    return element.nodeName.toUpperCase() === 'BODY';
  }

  function isHtml(element) {
    return element.nodeName.toUpperCase() === 'HTML';
  }

  function isDocument(element) {
    return element.nodeType === Node.DOCUMENT_NODE;
  }

  function isDetached(element) {
    return element !== document.body &&
     !Element.descendantOf(element, document.body);
  }

  if ('getBoundingClientRect' in document.documentElement) {
    Element.addMethods({
      viewportOffset: function(element) {
        element = $(element);
        if (isDetached(element)) return new Element.Offset(0, 0);

        var rect = element.getBoundingClientRect(),
         docEl = document.documentElement;
        return new Element.Offset(rect.left - docEl.clientLeft,
         rect.top - docEl.clientTop);
      }
    });
  }
})();
window.$$ = function() {
  var expression = $A(arguments).join(', ');
  return Prototype.Selector.select(expression, document);
};

Prototype.Selector = (function() {

  function select() {
    throw new Error('Method "Prototype.Selector.select" must be defined.');
  }

  function match() {
    throw new Error('Method "Prototype.Selector.match" must be defined.');
  }

  function find(elements, expression, index) {
    index = index || 0;
    var match = Prototype.Selector.match, length = elements.length, matchIndex = 0, i;

    for (i = 0; i < length; i++) {
      if (match(elements[i], expression) && index == matchIndex++) {
        return Element.extend(elements[i]);
      }
    }
  }

  function extendElements(elements) {
    for (var i = 0, length = elements.length; i < length; i++) {
      Element.extend(elements[i]);
    }
    return elements;
  }


  var K = Prototype.K;

  return {
    select: select,
    match: match,
    find: find,
    extendElements: (Element.extend === K) ? K : extendElements,
    extendElement: Element.extend
  };
})();
Prototype._original_property = window.Sizzle;
/*!
 * Sizzle CSS Selector Engine - v1.0
 *  Copyright 2009, The Dojo Foundation
 *  Released under the MIT, BSD, and GPL Licenses.
 *  More information: http://sizzlejs.com/
 */
(function(){

var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
	done = 0,
	toString = Object.prototype.toString,
	hasDuplicate = false,
	baseHasDuplicate = true;

[0, 0].sort(function(){
	baseHasDuplicate = false;
	return 0;
});

var Sizzle = function(selector, context, results, seed) {
	results = results || [];
	var origContext = context = context || document;

	if ( context.nodeType !== 1 && context.nodeType !== 9 ) {
		return [];
	}

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	var parts = [], m, set, checkSet, check, mode, extra, prune = true, contextXML = isXML(context),
		soFar = selector;

	while ( (chunker.exec(""), m = chunker.exec(soFar)) !== null ) {
		soFar = m[3];

		parts.push( m[1] );

		if ( m[2] ) {
			extra = m[3];
			break;
		}
	}

	if ( parts.length > 1 && origPOS.exec( selector ) ) {
		if ( parts.length === 2 && Expr.relative[ parts[0] ] ) {
			set = posProcess( parts[0] + parts[1], context );
		} else {
			set = Expr.relative[ parts[0] ] ?
				[ context ] :
				Sizzle( parts.shift(), context );

			while ( parts.length ) {
				selector = parts.shift();

				if ( Expr.relative[ selector ] )
					selector += parts.shift();

				set = posProcess( selector, set );
			}
		}
	} else {
		if ( !seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
				Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1]) ) {
			var ret = Sizzle.find( parts.shift(), context, contextXML );
			context = ret.expr ? Sizzle.filter( ret.expr, ret.set )[0] : ret.set[0];
		}

		if ( context ) {
			var ret = seed ?
				{ expr: parts.pop(), set: makeArray(seed) } :
				Sizzle.find( parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML );
			set = ret.expr ? Sizzle.filter( ret.expr, ret.set ) : ret.set;

			if ( parts.length > 0 ) {
				checkSet = makeArray(set);
			} else {
				prune = false;
			}

			while ( parts.length ) {
				var cur = parts.pop(), pop = cur;

				if ( !Expr.relative[ cur ] ) {
					cur = "";
				} else {
					pop = parts.pop();
				}

				if ( pop == null ) {
					pop = context;
				}

				Expr.relative[ cur ]( checkSet, pop, contextXML );
			}
		} else {
			checkSet = parts = [];
		}
	}

	if ( !checkSet ) {
		checkSet = set;
	}

	if ( !checkSet ) {
		throw "Syntax error, unrecognized expression: " + (cur || selector);
	}

	if ( toString.call(checkSet) === "[object Array]" ) {
		if ( !prune ) {
			results.push.apply( results, checkSet );
		} else if ( context && context.nodeType === 1 ) {
			for ( var i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && contains(context, checkSet[i])) ) {
					results.push( set[i] );
				}
			}
		} else {
			for ( var i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && checkSet[i].nodeType === 1 ) {
					results.push( set[i] );
				}
			}
		}
	} else {
		makeArray( checkSet, results );
	}

	if ( extra ) {
		Sizzle( extra, origContext, results, seed );
		Sizzle.uniqueSort( results );
	}

	return results;
};

Sizzle.uniqueSort = function(results){
	if ( sortOrder ) {
		hasDuplicate = baseHasDuplicate;
		results.sort(sortOrder);

		if ( hasDuplicate ) {
			for ( var i = 1; i < results.length; i++ ) {
				if ( results[i] === results[i-1] ) {
					results.splice(i--, 1);
				}
			}
		}
	}

	return results;
};

Sizzle.matches = function(expr, set){
	return Sizzle(expr, null, null, set);
};

Sizzle.find = function(expr, context, isXML){
	var set, match;

	if ( !expr ) {
		return [];
	}

	for ( var i = 0, l = Expr.order.length; i < l; i++ ) {
		var type = Expr.order[i], match;

		if ( (match = Expr.leftMatch[ type ].exec( expr )) ) {
			var left = match[1];
			match.splice(1,1);

			if ( left.substr( left.length - 1 ) !== "\\" ) {
				match[1] = (match[1] || "").replace(/\\/g, "");
				set = Expr.find[ type ]( match, context, isXML );
				if ( set != null ) {
					expr = expr.replace( Expr.match[ type ], "" );
					break;
				}
			}
		}
	}

	if ( !set ) {
		set = context.getElementsByTagName("*");
	}

	return {set: set, expr: expr};
};

Sizzle.filter = function(expr, set, inplace, not){
	var old = expr, result = [], curLoop = set, match, anyFound,
		isXMLFilter = set && set[0] && isXML(set[0]);

	while ( expr && set.length ) {
		for ( var type in Expr.filter ) {
			if ( (match = Expr.match[ type ].exec( expr )) != null ) {
				var filter = Expr.filter[ type ], found, item;
				anyFound = false;

				if ( curLoop == result ) {
					result = [];
				}

				if ( Expr.preFilter[ type ] ) {
					match = Expr.preFilter[ type ]( match, curLoop, inplace, result, not, isXMLFilter );

					if ( !match ) {
						anyFound = found = true;
					} else if ( match === true ) {
						continue;
					}
				}

				if ( match ) {
					for ( var i = 0; (item = curLoop[i]) != null; i++ ) {
						if ( item ) {
							found = filter( item, match, i, curLoop );
							var pass = not ^ !!found;

							if ( inplace && found != null ) {
								if ( pass ) {
									anyFound = true;
								} else {
									curLoop[i] = false;
								}
							} else if ( pass ) {
								result.push( item );
								anyFound = true;
							}
						}
					}
				}

				if ( found !== undefined ) {
					if ( !inplace ) {
						curLoop = result;
					}

					expr = expr.replace( Expr.match[ type ], "" );

					if ( !anyFound ) {
						return [];
					}

					break;
				}
			}
		}

		if ( expr == old ) {
			if ( anyFound == null ) {
				throw "Syntax error, unrecognized expression: " + expr;
			} else {
				break;
			}
		}

		old = expr;
	}

	return curLoop;
};

var Expr = Sizzle.selectors = {
	order: [ "ID", "NAME", "TAG" ],
	match: {
		ID: /#((?:[\w\u00c0-\uFFFF-]|\\.)+)/,
		CLASS: /\.((?:[\w\u00c0-\uFFFF-]|\\.)+)/,
		NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF-]|\\.)+)['"]*\]/,
		ATTR: /\[\s*((?:[\w\u00c0-\uFFFF-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,
		TAG: /^((?:[\w\u00c0-\uFFFF\*-]|\\.)+)/,
		CHILD: /:(only|nth|last|first)-child(?:\((even|odd|[\dn+-]*)\))?/,
		POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^-]|$)/,
		PSEUDO: /:((?:[\w\u00c0-\uFFFF-]|\\.)+)(?:\((['"]*)((?:\([^\)]+\)|[^\2\(\)]*)+)\2\))?/
	},
	leftMatch: {},
	attrMap: {
		"class": "className",
		"for": "htmlFor"
	},
	attrHandle: {
		href: function(elem){
			return elem.getAttribute("href");
		}
	},
	relative: {
		"+": function(checkSet, part, isXML){
			var isPartStr = typeof part === "string",
				isTag = isPartStr && !/\W/.test(part),
				isPartStrNotTag = isPartStr && !isTag;

			if ( isTag && !isXML ) {
				part = part.toUpperCase();
			}

			for ( var i = 0, l = checkSet.length, elem; i < l; i++ ) {
				if ( (elem = checkSet[i]) ) {
					while ( (elem = elem.previousSibling) && elem.nodeType !== 1 ) {}

					checkSet[i] = isPartStrNotTag || elem && elem.nodeName === part ?
						elem || false :
						elem === part;
				}
			}

			if ( isPartStrNotTag ) {
				Sizzle.filter( part, checkSet, true );
			}
		},
		">": function(checkSet, part, isXML){
			var isPartStr = typeof part === "string";

			if ( isPartStr && !/\W/.test(part) ) {
				part = isXML ? part : part.toUpperCase();

				for ( var i = 0, l = checkSet.length; i < l; i++ ) {
					var elem = checkSet[i];
					if ( elem ) {
						var parent = elem.parentNode;
						checkSet[i] = parent.nodeName === part ? parent : false;
					}
				}
			} else {
				for ( var i = 0, l = checkSet.length; i < l; i++ ) {
					var elem = checkSet[i];
					if ( elem ) {
						checkSet[i] = isPartStr ?
							elem.parentNode :
							elem.parentNode === part;
					}
				}

				if ( isPartStr ) {
					Sizzle.filter( part, checkSet, true );
				}
			}
		},
		"": function(checkSet, part, isXML){
			var doneName = done++, checkFn = dirCheck;

			if ( !/\W/.test(part) ) {
				var nodeCheck = part = isXML ? part : part.toUpperCase();
				checkFn = dirNodeCheck;
			}

			checkFn("parentNode", part, doneName, checkSet, nodeCheck, isXML);
		},
		"~": function(checkSet, part, isXML){
			var doneName = done++, checkFn = dirCheck;

			if ( typeof part === "string" && !/\W/.test(part) ) {
				var nodeCheck = part = isXML ? part : part.toUpperCase();
				checkFn = dirNodeCheck;
			}

			checkFn("previousSibling", part, doneName, checkSet, nodeCheck, isXML);
		}
	},
	find: {
		ID: function(match, context, isXML){
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);
				return m ? [m] : [];
			}
		},
		NAME: function(match, context, isXML){
			if ( typeof context.getElementsByName !== "undefined" ) {
				var ret = [], results = context.getElementsByName(match[1]);

				for ( var i = 0, l = results.length; i < l; i++ ) {
					if ( results[i].getAttribute("name") === match[1] ) {
						ret.push( results[i] );
					}
				}

				return ret.length === 0 ? null : ret;
			}
		},
		TAG: function(match, context){
			return context.getElementsByTagName(match[1]);
		}
	},
	preFilter: {
		CLASS: function(match, curLoop, inplace, result, not, isXML){
			match = " " + match[1].replace(/\\/g, "") + " ";

			if ( isXML ) {
				return match;
			}

			for ( var i = 0, elem; (elem = curLoop[i]) != null; i++ ) {
				if ( elem ) {
					if ( not ^ (elem.className && (" " + elem.className + " ").indexOf(match) >= 0) ) {
						if ( !inplace )
							result.push( elem );
					} else if ( inplace ) {
						curLoop[i] = false;
					}
				}
			}

			return false;
		},
		ID: function(match){
			return match[1].replace(/\\/g, "");
		},
		TAG: function(match, curLoop){
			for ( var i = 0; curLoop[i] === false; i++ ){}
			return curLoop[i] && isXML(curLoop[i]) ? match[1] : match[1].toUpperCase();
		},
		CHILD: function(match){
			if ( match[1] == "nth" ) {
				var test = /(-?)(\d*)n((?:\+|-)?\d*)/.exec(
					match[2] == "even" && "2n" || match[2] == "odd" && "2n+1" ||
					!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);

				match[2] = (test[1] + (test[2] || 1)) - 0;
				match[3] = test[3] - 0;
			}

			match[0] = done++;

			return match;
		},
		ATTR: function(match, curLoop, inplace, result, not, isXML){
			var name = match[1].replace(/\\/g, "");

			if ( !isXML && Expr.attrMap[name] ) {
				match[1] = Expr.attrMap[name];
			}

			if ( match[2] === "~=" ) {
				match[4] = " " + match[4] + " ";
			}

			return match;
		},
		PSEUDO: function(match, curLoop, inplace, result, not){
			if ( match[1] === "not" ) {
				if ( ( chunker.exec(match[3]) || "" ).length > 1 || /^\w/.test(match[3]) ) {
					match[3] = Sizzle(match[3], null, null, curLoop);
				} else {
					var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);
					if ( !inplace ) {
						result.push.apply( result, ret );
					}
					return false;
				}
			} else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( match[0] ) ) {
				return true;
			}

			return match;
		},
		POS: function(match){
			match.unshift( true );
			return match;
		}
	},
	filters: {
		enabled: function(elem){
			return elem.disabled === false && elem.type !== "hidden";
		},
		disabled: function(elem){
			return elem.disabled === true;
		},
		checked: function(elem){
			return elem.checked === true;
		},
		selected: function(elem){
			elem.parentNode.selectedIndex;
			return elem.selected === true;
		},
		parent: function(elem){
			return !!elem.firstChild;
		},
		empty: function(elem){
			return !elem.firstChild;
		},
		has: function(elem, i, match){
			return !!Sizzle( match[3], elem ).length;
		},
		header: function(elem){
			return /h\d/i.test( elem.nodeName );
		},
		text: function(elem){
			return "text" === elem.type;
		},
		radio: function(elem){
			return "radio" === elem.type;
		},
		checkbox: function(elem){
			return "checkbox" === elem.type;
		},
		file: function(elem){
			return "file" === elem.type;
		},
		password: function(elem){
			return "password" === elem.type;
		},
		submit: function(elem){
			return "submit" === elem.type;
		},
		image: function(elem){
			return "image" === elem.type;
		},
		reset: function(elem){
			return "reset" === elem.type;
		},
		button: function(elem){
			return "button" === elem.type || elem.nodeName.toUpperCase() === "BUTTON";
		},
		input: function(elem){
			return /input|select|textarea|button/i.test(elem.nodeName);
		}
	},
	setFilters: {
		first: function(elem, i){
			return i === 0;
		},
		last: function(elem, i, match, array){
			return i === array.length - 1;
		},
		even: function(elem, i){
			return i % 2 === 0;
		},
		odd: function(elem, i){
			return i % 2 === 1;
		},
		lt: function(elem, i, match){
			return i < match[3] - 0;
		},
		gt: function(elem, i, match){
			return i > match[3] - 0;
		},
		nth: function(elem, i, match){
			return match[3] - 0 == i;
		},
		eq: function(elem, i, match){
			return match[3] - 0 == i;
		}
	},
	filter: {
		PSEUDO: function(elem, match, i, array){
			var name = match[1], filter = Expr.filters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );
			} else if ( name === "contains" ) {
				return (elem.textContent || elem.innerText || "").indexOf(match[3]) >= 0;
			} else if ( name === "not" ) {
				var not = match[3];

				for ( var i = 0, l = not.length; i < l; i++ ) {
					if ( not[i] === elem ) {
						return false;
					}
				}

				return true;
			}
		},
		CHILD: function(elem, match){
			var type = match[1], node = elem;
			switch (type) {
				case 'only':
				case 'first':
					while ( (node = node.previousSibling) )  {
						if ( node.nodeType === 1 ) return false;
					}
					if ( type == 'first') return true;
					node = elem;
				case 'last':
					while ( (node = node.nextSibling) )  {
						if ( node.nodeType === 1 ) return false;
					}
					return true;
				case 'nth':
					var first = match[2], last = match[3];

					if ( first == 1 && last == 0 ) {
						return true;
					}

					var doneName = match[0],
						parent = elem.parentNode;

					if ( parent && (parent.sizcache !== doneName || !elem.nodeIndex) ) {
						var count = 0;
						for ( node = parent.firstChild; node; node = node.nextSibling ) {
							if ( node.nodeType === 1 ) {
								node.nodeIndex = ++count;
							}
						}
						parent.sizcache = doneName;
					}

					var diff = elem.nodeIndex - last;
					if ( first == 0 ) {
						return diff == 0;
					} else {
						return ( diff % first == 0 && diff / first >= 0 );
					}
			}
		},
		ID: function(elem, match){
			return elem.nodeType === 1 && elem.getAttribute("id") === match;
		},
		TAG: function(elem, match){
			return (match === "*" && elem.nodeType === 1) || elem.nodeName === match;
		},
		CLASS: function(elem, match){
			return (" " + (elem.className || elem.getAttribute("class")) + " ")
				.indexOf( match ) > -1;
		},
		ATTR: function(elem, match){
			var name = match[1],
				result = Expr.attrHandle[ name ] ?
					Expr.attrHandle[ name ]( elem ) :
					elem[ name ] != null ?
						elem[ name ] :
						elem.getAttribute( name ),
				value = result + "",
				type = match[2],
				check = match[4];

			return result == null ?
				type === "!=" :
				type === "=" ?
				value === check :
				type === "*=" ?
				value.indexOf(check) >= 0 :
				type === "~=" ?
				(" " + value + " ").indexOf(check) >= 0 :
				!check ?
				value && result !== false :
				type === "!=" ?
				value != check :
				type === "^=" ?
				value.indexOf(check) === 0 :
				type === "$=" ?
				value.substr(value.length - check.length) === check :
				type === "|=" ?
				value === check || value.substr(0, check.length + 1) === check + "-" :
				false;
		},
		POS: function(elem, match, i, array){
			var name = match[2], filter = Expr.setFilters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );
			}
		}
	}
};

var origPOS = Expr.match.POS;

for ( var type in Expr.match ) {
	Expr.match[ type ] = new RegExp( Expr.match[ type ].source + /(?![^\[]*\])(?![^\(]*\))/.source );
	Expr.leftMatch[ type ] = new RegExp( /(^(?:.|\r|\n)*?)/.source + Expr.match[ type ].source );
}

var makeArray = function(array, results) {
	array = Array.prototype.slice.call( array, 0 );

	if ( results ) {
		results.push.apply( results, array );
		return results;
	}

	return array;
};

try {
	Array.prototype.slice.call( document.documentElement.childNodes, 0 );

} catch(e){
	makeArray = function(array, results) {
		var ret = results || [];

		if ( toString.call(array) === "[object Array]" ) {
			Array.prototype.push.apply( ret, array );
		} else {
			if ( typeof array.length === "number" ) {
				for ( var i = 0, l = array.length; i < l; i++ ) {
					ret.push( array[i] );
				}
			} else {
				for ( var i = 0; array[i]; i++ ) {
					ret.push( array[i] );
				}
			}
		}

		return ret;
	};
}

var sortOrder;

if ( document.documentElement.compareDocumentPosition ) {
	sortOrder = function( a, b ) {
		if ( !a.compareDocumentPosition || !b.compareDocumentPosition ) {
			if ( a == b ) {
				hasDuplicate = true;
			}
			return 0;
		}

		var ret = a.compareDocumentPosition(b) & 4 ? -1 : a === b ? 0 : 1;
		if ( ret === 0 ) {
			hasDuplicate = true;
		}
		return ret;
	};
} else if ( "sourceIndex" in document.documentElement ) {
	sortOrder = function( a, b ) {
		if ( !a.sourceIndex || !b.sourceIndex ) {
			if ( a == b ) {
				hasDuplicate = true;
			}
			return 0;
		}

		var ret = a.sourceIndex - b.sourceIndex;
		if ( ret === 0 ) {
			hasDuplicate = true;
		}
		return ret;
	};
} else if ( document.createRange ) {
	sortOrder = function( a, b ) {
		if ( !a.ownerDocument || !b.ownerDocument ) {
			if ( a == b ) {
				hasDuplicate = true;
			}
			return 0;
		}

		var aRange = a.ownerDocument.createRange(), bRange = b.ownerDocument.createRange();
		aRange.setStart(a, 0);
		aRange.setEnd(a, 0);
		bRange.setStart(b, 0);
		bRange.setEnd(b, 0);
		var ret = aRange.compareBoundaryPoints(Range.START_TO_END, bRange);
		if ( ret === 0 ) {
			hasDuplicate = true;
		}
		return ret;
	};
}

(function(){
	var form = document.createElement("div"),
		id = "script" + (new Date).getTime();
	form.innerHTML = "<a name='" + id + "'/>";

	var root = document.documentElement;
	root.insertBefore( form, root.firstChild );

	if ( !!document.getElementById( id ) ) {
		Expr.find.ID = function(match, context, isXML){
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);
				return m ? m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ? [m] : undefined : [];
			}
		};

		Expr.filter.ID = function(elem, match){
			var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
			return elem.nodeType === 1 && node && node.nodeValue === match;
		};
	}

	root.removeChild( form );
	root = form = null; // release memory in IE
})();

(function(){

	var div = document.createElement("div");
	div.appendChild( document.createComment("") );

	if ( div.getElementsByTagName("*").length > 0 ) {
		Expr.find.TAG = function(match, context){
			var results = context.getElementsByTagName(match[1]);

			if ( match[1] === "*" ) {
				var tmp = [];

				for ( var i = 0; results[i]; i++ ) {
					if ( results[i].nodeType === 1 ) {
						tmp.push( results[i] );
					}
				}

				results = tmp;
			}

			return results;
		};
	}

	div.innerHTML = "<a href='#'></a>";
	if ( div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
			div.firstChild.getAttribute("href") !== "#" ) {
		Expr.attrHandle.href = function(elem){
			return elem.getAttribute("href", 2);
		};
	}

	div = null; // release memory in IE
})();

if ( document.querySelectorAll ) (function(){
	var oldSizzle = Sizzle, div = document.createElement("div");
	div.innerHTML = "<p class='TEST'></p>";

	if ( div.querySelectorAll && div.querySelectorAll(".TEST").length === 0 ) {
		return;
	}

	Sizzle = function(query, context, extra, seed){
		context = context || document;

		if ( !seed && context.nodeType === 9 && !isXML(context) ) {
			try {
				return makeArray( context.querySelectorAll(query), extra );
			} catch(e){}
		}

		return oldSizzle(query, context, extra, seed);
	};

	for ( var prop in oldSizzle ) {
		Sizzle[ prop ] = oldSizzle[ prop ];
	}

	div = null; // release memory in IE
})();

if ( document.getElementsByClassName && document.documentElement.getElementsByClassName ) (function(){
	var div = document.createElement("div");
	div.innerHTML = "<div class='test e'></div><div class='test'></div>";

	if ( div.getElementsByClassName("e").length === 0 )
		return;

	div.lastChild.className = "e";

	if ( div.getElementsByClassName("e").length === 1 )
		return;

	Expr.order.splice(1, 0, "CLASS");
	Expr.find.CLASS = function(match, context, isXML) {
		if ( typeof context.getElementsByClassName !== "undefined" && !isXML ) {
			return context.getElementsByClassName(match[1]);
		}
	};

	div = null; // release memory in IE
})();

function dirNodeCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	var sibDir = dir == "previousSibling" && !isXML;
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];
		if ( elem ) {
			if ( sibDir && elem.nodeType === 1 ){
				elem.sizcache = doneName;
				elem.sizset = i;
			}
			elem = elem[dir];
			var match = false;

			while ( elem ) {
				if ( elem.sizcache === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 && !isXML ){
					elem.sizcache = doneName;
					elem.sizset = i;
				}

				if ( elem.nodeName === cur ) {
					match = elem;
					break;
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

function dirCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	var sibDir = dir == "previousSibling" && !isXML;
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];
		if ( elem ) {
			if ( sibDir && elem.nodeType === 1 ) {
				elem.sizcache = doneName;
				elem.sizset = i;
			}
			elem = elem[dir];
			var match = false;

			while ( elem ) {
				if ( elem.sizcache === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 ) {
					if ( !isXML ) {
						elem.sizcache = doneName;
						elem.sizset = i;
					}
					if ( typeof cur !== "string" ) {
						if ( elem === cur ) {
							match = true;
							break;
						}

					} else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {
						match = elem;
						break;
					}
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

var contains = document.compareDocumentPosition ?  function(a, b){
	return a.compareDocumentPosition(b) & 16;
} : function(a, b){
	return a !== b && (a.contains ? a.contains(b) : true);
};

var isXML = function(elem){
	return elem.nodeType === 9 && elem.documentElement.nodeName !== "HTML" ||
		!!elem.ownerDocument && elem.ownerDocument.documentElement.nodeName !== "HTML";
};

var posProcess = function(selector, context){
	var tmpSet = [], later = "", match,
		root = context.nodeType ? [context] : context;

	while ( (match = Expr.match.PSEUDO.exec( selector )) ) {
		later += match[0];
		selector = selector.replace( Expr.match.PSEUDO, "" );
	}

	selector = Expr.relative[selector] ? selector + "*" : selector;

	for ( var i = 0, l = root.length; i < l; i++ ) {
		Sizzle( selector, root[i], tmpSet );
	}

	return Sizzle.filter( later, tmpSet );
};


window.Sizzle = Sizzle;

})();

;(function(engine) {
  var extendElements = Prototype.Selector.extendElements;

  function select(selector, scope) {
    return extendElements(engine(selector, scope || document));
  }

  function match(element, selector) {
    return engine.matches(selector, [element]).length == 1;
  }

  Prototype.Selector.engine = engine;
  Prototype.Selector.select = select;
  Prototype.Selector.match = match;
})(Sizzle);

window.Sizzle = Prototype._original_property;
delete Prototype._original_property;

var Form = {
  reset: function(form) {
    form = $(form);
    form.reset();
    return form;
  },

  serializeElements: function(elements, options) {
    if (typeof options != 'object') options = { hash: !!options };
    else if (Object.isUndefined(options.hash)) options.hash = true;
    var key, value, submitted = false, submit = options.submit, accumulator, initial;

    if (options.hash) {
      initial = {};
      accumulator = function(result, key, value) {
        if (key in result) {
          if (!Object.isArray(result[key])) result[key] = [result[key]];
          result[key].push(value);
        } else result[key] = value;
        return result;
      };
    } else {
      initial = '';
      accumulator = function(result, key, value) {
        return result + (result ? '&' : '') + encodeURIComponent(key) + '=' + encodeURIComponent(value);
      }
    }

    return elements.inject(initial, function(result, element) {
      if (!element.disabled && element.name) {
        key = element.name; value = $(element).getValue();
        if (value != null && element.type != 'file' && (element.type != 'submit' || (!submitted &&
            submit !== false && (!submit || key == submit) && (submitted = true)))) {
          result = accumulator(result, key, value);
        }
      }
      return result;
    });
  }
};

Form.Methods = {
  serialize: function(form, options) {
    return Form.serializeElements(Form.getElements(form), options);
  },

  getElements: function(form) {
    var elements = $(form).getElementsByTagName('*'),
        element,
        arr = [ ],
        serializers = Form.Element.Serializers;
    for (var i = 0; element = elements[i]; i++) {
      arr.push(element);
    }
    return arr.inject([], function(elements, child) {
      if (serializers[child.tagName.toLowerCase()])
        elements.push(Element.extend(child));
      return elements;
    })
  },

  getInputs: function(form, typeName, name) {
    form = $(form);
    var inputs = form.getElementsByTagName('input');

    if (!typeName && !name) return $A(inputs).map(Element.extend);

    for (var i = 0, matchingInputs = [], length = inputs.length; i < length; i++) {
      var input = inputs[i];
      if ((typeName && input.type != typeName) || (name && input.name != name))
        continue;
      matchingInputs.push(Element.extend(input));
    }

    return matchingInputs;
  },

  disable: function(form) {
    form = $(form);
    Form.getElements(form).invoke('disable');
    return form;
  },

  enable: function(form) {
    form = $(form);
    Form.getElements(form).invoke('enable');
    return form;
  },

  findFirstElement: function(form) {
    var elements = $(form).getElements().findAll(function(element) {
      return 'hidden' != element.type && !element.disabled;
    });
    var firstByIndex = elements.findAll(function(element) {
      return element.hasAttribute('tabIndex') && element.tabIndex >= 0;
    }).sortBy(function(element) { return element.tabIndex }).first();

    return firstByIndex ? firstByIndex : elements.find(function(element) {
      return /^(?:input|select|textarea)$/i.test(element.tagName);
    });
  },

  focusFirstElement: function(form) {
    form = $(form);
    var element = form.findFirstElement();
    if (element) element.activate();
    return form;
  },

  request: function(form, options) {
    form = $(form), options = Object.clone(options || { });

    var params = options.parameters, action = form.readAttribute('action') || '';
    if (action.blank()) action = window.location.href;
    options.parameters = form.serialize(true);

    if (params) {
      if (Object.isString(params)) params = params.toQueryParams();
      Object.extend(options.parameters, params);
    }

    if (form.hasAttribute('method') && !options.method)
      options.method = form.method;

    return new Ajax.Request(action, options);
  }
};

/*--------------------------------------------------------------------------*/


Form.Element = {
  focus: function(element) {
    $(element).focus();
    return element;
  },

  select: function(element) {
    $(element).select();
    return element;
  }
};

Form.Element.Methods = {

  serialize: function(element) {
    element = $(element);
    if (!element.disabled && element.name) {
      var value = element.getValue();
      if (value != undefined) {
        var pair = { };
        pair[element.name] = value;
        return Object.toQueryString(pair);
      }
    }
    return '';
  },

  getValue: function(element) {
    element = $(element);
    var method = element.tagName.toLowerCase();
    return Form.Element.Serializers[method](element);
  },

  setValue: function(element, value) {
    element = $(element);
    var method = element.tagName.toLowerCase();
    Form.Element.Serializers[method](element, value);
    return element;
  },

  clear: function(element) {
    $(element).value = '';
    return element;
  },

  present: function(element) {
    return $(element).value != '';
  },

  activate: function(element) {
    element = $(element);
    try {
      element.focus();
      if (element.select && (element.tagName.toLowerCase() != 'input' ||
          !(/^(?:button|reset|submit)$/i.test(element.type))))
        element.select();
    } catch (e) { }
    return element;
  },

  disable: function(element) {
    element = $(element);
    element.disabled = true;
    return element;
  },

  enable: function(element) {
    element = $(element);
    element.disabled = false;
    return element;
  }
};

/*--------------------------------------------------------------------------*/

var Field = Form.Element;

var $F = Form.Element.Methods.getValue;

/*--------------------------------------------------------------------------*/

Form.Element.Serializers = (function() {
  function input(element, value) {
    switch (element.type.toLowerCase()) {
      case 'checkbox':
      case 'radio':
        return inputSelector(element, value);
      default:
        return valueSelector(element, value);
    }
  }

  function inputSelector(element, value) {
    if (Object.isUndefined(value))
      return element.checked ? element.value : null;
    else element.checked = !!value;
  }

  function valueSelector(element, value) {
    if (Object.isUndefined(value)) return element.value;
    else element.value = value;
  }

  function select(element, value) {
    if (Object.isUndefined(value))
      return (element.type === 'select-one' ? selectOne : selectMany)(element);

    var opt, currentValue, single = !Object.isArray(value);
    for (var i = 0, length = element.length; i < length; i++) {
      opt = element.options[i];
      currentValue = this.optionValue(opt);
      if (single) {
        if (currentValue == value) {
          opt.selected = true;
          return;
        }
      }
      else opt.selected = value.include(currentValue);
    }
  }

  function selectOne(element) {
    var index = element.selectedIndex;
    return index >= 0 ? optionValue(element.options[index]) : null;
  }

  function selectMany(element) {
    var values, length = element.length;
    if (!length) return null;

    for (var i = 0, values = []; i < length; i++) {
      var opt = element.options[i];
      if (opt.selected) values.push(optionValue(opt));
    }
    return values;
  }

  function optionValue(opt) {
    return Element.hasAttribute(opt, 'value') ? opt.value : opt.text;
  }

  return {
    input:         input,
    inputSelector: inputSelector,
    textarea:      valueSelector,
    select:        select,
    selectOne:     selectOne,
    selectMany:    selectMany,
    optionValue:   optionValue,
    button:        valueSelector
  };
})();

/*--------------------------------------------------------------------------*/


Abstract.TimedObserver = Class.create(PeriodicalExecuter, {
  initialize: function($super, element, frequency, callback) {
    $super(callback, frequency);
    this.element   = $(element);
    this.lastValue = this.getValue();
  },

  execute: function() {
    var value = this.getValue();
    if (Object.isString(this.lastValue) && Object.isString(value) ?
        this.lastValue != value : String(this.lastValue) != String(value)) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  }
});

Form.Element.Observer = Class.create(Abstract.TimedObserver, {
  getValue: function() {
    return Form.Element.getValue(this.element);
  }
});

Form.Observer = Class.create(Abstract.TimedObserver, {
  getValue: function() {
    return Form.serialize(this.element);
  }
});

/*--------------------------------------------------------------------------*/

Abstract.EventObserver = Class.create({
  initialize: function(element, callback) {
    this.element  = $(element);
    this.callback = callback;

    this.lastValue = this.getValue();
    if (this.element.tagName.toLowerCase() == 'form')
      this.registerFormCallbacks();
    else
      this.registerCallback(this.element);
  },

  onElementEvent: function() {
    var value = this.getValue();
    if (this.lastValue != value) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  },

  registerFormCallbacks: function() {
    Form.getElements(this.element).each(this.registerCallback, this);
  },

  registerCallback: function(element) {
    if (element.type) {
      switch (element.type.toLowerCase()) {
        case 'checkbox':
        case 'radio':
          Event.observe(element, 'click', this.onElementEvent.bind(this));
          break;
        default:
          Event.observe(element, 'change', this.onElementEvent.bind(this));
          break;
      }
    }
  }
});

Form.Element.EventObserver = Class.create(Abstract.EventObserver, {
  getValue: function() {
    return Form.Element.getValue(this.element);
  }
});

Form.EventObserver = Class.create(Abstract.EventObserver, {
  getValue: function() {
    return Form.serialize(this.element);
  }
});
(function() {

  var Event = {
    KEY_BACKSPACE: 8,
    KEY_TAB:       9,
    KEY_RETURN:   13,
    KEY_ESC:      27,
    KEY_LEFT:     37,
    KEY_UP:       38,
    KEY_RIGHT:    39,
    KEY_DOWN:     40,
    KEY_DELETE:   46,
    KEY_HOME:     36,
    KEY_END:      35,
    KEY_PAGEUP:   33,
    KEY_PAGEDOWN: 34,
    KEY_INSERT:   45,

    cache: {}
  };

  var docEl = document.documentElement;
  var MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED = 'onmouseenter' in docEl
    && 'onmouseleave' in docEl;



  var isIELegacyEvent = function(event) { return false; };

  if (window.attachEvent) {
    if (window.addEventListener) {
      isIELegacyEvent = function(event) {
        return !(event instanceof window.Event);
      };
    } else {
      isIELegacyEvent = function(event) { return true; };
    }
  }

  var _isButton;

  function _isButtonForDOMEvents(event, code) {
    return event.which ? (event.which === code + 1) : (event.button === code);
  }

  var legacyButtonMap = { 0: 1, 1: 4, 2: 2 };
  function _isButtonForLegacyEvents(event, code) {
    return event.button === legacyButtonMap[code];
  }

  function _isButtonForWebKit(event, code) {
    switch (code) {
      case 0: return event.which == 1 && !event.metaKey;
      case 1: return event.which == 2 || (event.which == 1 && event.metaKey);
      case 2: return event.which == 3;
      default: return false;
    }
  }

  if (window.attachEvent) {
    if (!window.addEventListener) {
      _isButton = _isButtonForLegacyEvents;
    } else {
      _isButton = function(event, code) {
        return isIELegacyEvent(event) ? _isButtonForLegacyEvents(event, code) :
         _isButtonForDOMEvents(event, code);
      }
    }
  } else if (Prototype.Browser.WebKit) {
    _isButton = _isButtonForWebKit;
  } else {
    _isButton = _isButtonForDOMEvents;
  }

  function isLeftClick(event)   { return _isButton(event, 0) }

  function isMiddleClick(event) { return _isButton(event, 1) }

  function isRightClick(event)  { return _isButton(event, 2) }

  function element(event) {
    event = Event.extend(event);

    var node = event.target, type = event.type,
     currentTarget = event.currentTarget;

    if (currentTarget && currentTarget.tagName) {
      if (type === 'load' || type === 'error' ||
        (type === 'click' && currentTarget.tagName.toLowerCase() === 'input'
          && currentTarget.type === 'radio'))
            node = currentTarget;
    }

    if (node.nodeType == Node.TEXT_NODE)
      node = node.parentNode;

    return Element.extend(node);
  }

  function findElement(event, expression) {
    var element = Event.element(event);

    if (!expression) return element;
    while (element) {
      if (Object.isElement(element) && Prototype.Selector.match(element, expression)) {
        return Element.extend(element);
      }
      element = element.parentNode;
    }
  }

  function pointer(event) {
    return { x: pointerX(event), y: pointerY(event) };
  }

  function pointerX(event) {
    var docElement = document.documentElement,
     body = document.body || { scrollLeft: 0 };

    return event.pageX || (event.clientX +
      (docElement.scrollLeft || body.scrollLeft) -
      (docElement.clientLeft || 0));
  }

  function pointerY(event) {
    var docElement = document.documentElement,
     body = document.body || { scrollTop: 0 };

    return  event.pageY || (event.clientY +
       (docElement.scrollTop || body.scrollTop) -
       (docElement.clientTop || 0));
  }


  function stop(event) {
    Event.extend(event);
    event.preventDefault();
    event.stopPropagation();

    event.stopped = true;
  }


  Event.Methods = {
    isLeftClick:   isLeftClick,
    isMiddleClick: isMiddleClick,
    isRightClick:  isRightClick,

    element:     element,
    findElement: findElement,

    pointer:  pointer,
    pointerX: pointerX,
    pointerY: pointerY,

    stop: stop
  };

  var methods = Object.keys(Event.Methods).inject({ }, function(m, name) {
    m[name] = Event.Methods[name].methodize();
    return m;
  });

  if (window.attachEvent) {
    function _relatedTarget(event) {
      var element;
      switch (event.type) {
        case 'mouseover':
        case 'mouseenter':
          element = event.fromElement;
          break;
        case 'mouseout':
        case 'mouseleave':
          element = event.toElement;
          break;
        default:
          return null;
      }
      return Element.extend(element);
    }

    var additionalMethods = {
      stopPropagation: function() { this.cancelBubble = true },
      preventDefault:  function() { this.returnValue = false },
      inspect: function() { return '[object Event]' }
    };

    Event.extend = function(event, element) {
      if (!event) return false;

      if (!isIELegacyEvent(event)) return event;

      if (event._extendedByPrototype) return event;
      event._extendedByPrototype = Prototype.emptyFunction;

      var pointer = Event.pointer(event);

      Object.extend(event, {
        target: event.srcElement || element,
        relatedTarget: _relatedTarget(event),
        pageX:  pointer.x,
        pageY:  pointer.y
      });

      Object.extend(event, methods);
      Object.extend(event, additionalMethods);

      return event;
    };
  } else {
    Event.extend = Prototype.K;
  }

  if (window.addEventListener) {
    Event.prototype = window.Event.prototype || document.createEvent('HTMLEvents').__proto__;
    Object.extend(Event.prototype, methods);
  }

  function _createResponder(element, eventName, handler) {
    var registry = Element.retrieve(element, 'prototype_event_registry');

    if (Object.isUndefined(registry)) {
      CACHE.push(element);
      registry = Element.retrieve(element, 'prototype_event_registry', $H());
    }

    var respondersForEvent = registry.get(eventName);
    if (Object.isUndefined(respondersForEvent)) {
      respondersForEvent = [];
      registry.set(eventName, respondersForEvent);
    }

    if (respondersForEvent.pluck('handler').include(handler)) return false;

    var responder;
    if (eventName.include(":")) {
      responder = function(event) {
        if (Object.isUndefined(event.eventName))
          return false;

        if (event.eventName !== eventName)
          return false;

        Event.extend(event, element);
        handler.call(element, event);
      };
    } else {
      if (!MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED &&
       (eventName === "mouseenter" || eventName === "mouseleave")) {
        if (eventName === "mouseenter" || eventName === "mouseleave") {
          responder = function(event) {
            Event.extend(event, element);

            var parent = event.relatedTarget;
            while (parent && parent !== element) {
              try { parent = parent.parentNode; }
              catch(e) { parent = element; }
            }

            if (parent === element) return;

            handler.call(element, event);
          };
        }
      } else {
        responder = function(event) {
          Event.extend(event, element);
          handler.call(element, event);
        };
      }
    }

    responder.handler = handler;
    respondersForEvent.push(responder);
    return responder;
  }

  function _destroyCache() {
    for (var i = 0, length = CACHE.length; i < length; i++) {
      Event.stopObserving(CACHE[i]);
      CACHE[i] = null;
    }
  }

  var CACHE = [];

  if (Prototype.Browser.IE)
    window.attachEvent('onunload', _destroyCache);

  if (Prototype.Browser.WebKit)
    window.addEventListener('unload', Prototype.emptyFunction, false);


  var _getDOMEventName = Prototype.K,
      translations = { mouseenter: "mouseover", mouseleave: "mouseout" };

  if (!MOUSEENTER_MOUSELEAVE_EVENTS_SUPPORTED) {
    _getDOMEventName = function(eventName) {
      return (translations[eventName] || eventName);
    };
  }

  function observe(element, eventName, handler) {
    element = $(element);

    var responder = _createResponder(element, eventName, handler);

    if (!responder) return element;

    if (eventName.include(':')) {
      if (element.addEventListener)
        element.addEventListener("dataavailable", responder, false);
      else {
        element.attachEvent("ondataavailable", responder);
        element.attachEvent("onlosecapture", responder);
      }
    } else {
      var actualEventName = _getDOMEventName(eventName);

      if (element.addEventListener)
        element.addEventListener(actualEventName, responder, false);
      else
        element.attachEvent("on" + actualEventName, responder);
    }

    return element;
  }

  function stopObserving(element, eventName, handler) {
    element = $(element);

    var registry = Element.retrieve(element, 'prototype_event_registry');
    if (!registry) return element;

    if (!eventName) {
      registry.each( function(pair) {
        var eventName = pair.key;
        stopObserving(element, eventName);
      });
      return element;
    }

    var responders = registry.get(eventName);
    if (!responders) return element;

    if (!handler) {
      responders.each(function(r) {
        stopObserving(element, eventName, r.handler);
      });
      return element;
    }

    var i = responders.length, responder;
    while (i--) {
      if (responders[i].handler === handler) {
        responder = responders[i];
        break;
      }
    }
    if (!responder) return element;

    if (eventName.include(':')) {
      if (element.removeEventListener)
        element.removeEventListener("dataavailable", responder, false);
      else {
        element.detachEvent("ondataavailable", responder);
        element.detachEvent("onlosecapture", responder);
      }
    } else {
      var actualEventName = _getDOMEventName(eventName);
      if (element.removeEventListener)
        element.removeEventListener(actualEventName, responder, false);
      else
        element.detachEvent('on' + actualEventName, responder);
    }

    registry.set(eventName, responders.without(responder));

    return element;
  }

  function fire(element, eventName, memo, bubble) {
    element = $(element);

    if (Object.isUndefined(bubble))
      bubble = true;

    if (element == document && document.createEvent && !element.dispatchEvent)
      element = document.documentElement;

    var event;
    if (document.createEvent) {
      event = document.createEvent('HTMLEvents');
      event.initEvent('dataavailable', bubble, true);
    } else {
      event = document.createEventObject();
      event.eventType = bubble ? 'ondataavailable' : 'onlosecapture';
    }

    event.eventName = eventName;
    event.memo = memo || { };

    if (document.createEvent)
      element.dispatchEvent(event);
    else
      element.fireEvent(event.eventType, event);

    return Event.extend(event);
  }

  Event.Handler = Class.create({
    initialize: function(element, eventName, selector, callback) {
      this.element   = $(element);
      this.eventName = eventName;
      this.selector  = selector;
      this.callback  = callback;
      this.handler   = this.handleEvent.bind(this);
    },

    start: function() {
      Event.observe(this.element, this.eventName, this.handler);
      return this;
    },

    stop: function() {
      Event.stopObserving(this.element, this.eventName, this.handler);
      return this;
    },

    handleEvent: function(event) {
      var element = Event.findElement(event, this.selector);
      if (element) this.callback.call(this.element, event, element);
    }
  });

  function on(element, eventName, selector, callback) {
    element = $(element);
    if (Object.isFunction(selector) && Object.isUndefined(callback)) {
      callback = selector, selector = null;
    }

    return new Event.Handler(element, eventName, selector, callback).start();
  }

  Object.extend(Event, Event.Methods);

  Object.extend(Event, {
    fire:          fire,
    observe:       observe,
    stopObserving: stopObserving,
    on:            on
  });

  Element.addMethods({
    fire:          fire,

    observe:       observe,

    stopObserving: stopObserving,

    on:            on
  });

  Object.extend(document, {
    fire:          fire.methodize(),

    observe:       observe.methodize(),

    stopObserving: stopObserving.methodize(),

    on:            on.methodize(),

    loaded:        false
  });

  if (window.Event) Object.extend(window.Event, Event);
  else window.Event = Event;
})();

(function() {
  /* Support for the DOMContentLoaded event is based on work by Dan Webb,
     Matthias Miller, Dean Edwards, John Resig, and Diego Perini. */

  var timer;

  function fireContentLoadedEvent() {
    if (document.loaded) return;
    if (timer) window.clearTimeout(timer);
    document.loaded = true;
    document.fire('dom:loaded');
  }

  function checkReadyState() {
    if (document.readyState === 'complete') {
      document.stopObserving('readystatechange', checkReadyState);
      fireContentLoadedEvent();
    }
  }

  function pollDoScroll() {
    try { document.documentElement.doScroll('left'); }
    catch(e) {
      timer = pollDoScroll.defer();
      return;
    }
    fireContentLoadedEvent();
  }

  if (document.addEventListener) {
    document.addEventListener('DOMContentLoaded', fireContentLoadedEvent, false);
  } else {
    document.observe('readystatechange', checkReadyState);
    if (window == top)
      timer = pollDoScroll.defer();
  }

  Event.observe(window, 'load', fireContentLoadedEvent);
})();

Element.addMethods();

/*------------------------------- DEPRECATED -------------------------------*/

Hash.toQueryString = Object.toQueryString;

var Toggle = { display: Element.toggle };

Element.Methods.childOf = Element.Methods.descendantOf;

var Insertion = {
  Before: function(element, content) {
    return Element.insert(element, {before:content});
  },

  Top: function(element, content) {
    return Element.insert(element, {top:content});
  },

  Bottom: function(element, content) {
    return Element.insert(element, {bottom:content});
  },

  After: function(element, content) {
    return Element.insert(element, {after:content});
  }
};

var $continue = new Error('"throw $continue" is deprecated, use "return" instead');

var Position = {
  includeScrollOffsets: false,

  prepare: function() {
    this.deltaX =  window.pageXOffset
                || document.documentElement.scrollLeft
                || document.body.scrollLeft
                || 0;
    this.deltaY =  window.pageYOffset
                || document.documentElement.scrollTop
                || document.body.scrollTop
                || 0;
  },

  within: function(element, x, y) {
    if (this.includeScrollOffsets)
      return this.withinIncludingScrolloffsets(element, x, y);
    this.xcomp = x;
    this.ycomp = y;
    this.offset = Element.cumulativeOffset(element);

    return (y >= this.offset[1] &&
            y <  this.offset[1] + element.offsetHeight &&
            x >= this.offset[0] &&
            x <  this.offset[0] + element.offsetWidth);
  },

  withinIncludingScrolloffsets: function(element, x, y) {
    var offsetcache = Element.cumulativeScrollOffset(element);

    this.xcomp = x + offsetcache[0] - this.deltaX;
    this.ycomp = y + offsetcache[1] - this.deltaY;
    this.offset = Element.cumulativeOffset(element);

    return (this.ycomp >= this.offset[1] &&
            this.ycomp <  this.offset[1] + element.offsetHeight &&
            this.xcomp >= this.offset[0] &&
            this.xcomp <  this.offset[0] + element.offsetWidth);
  },

  overlap: function(mode, element) {
    if (!mode) return 0;
    if (mode == 'vertical')
      return ((this.offset[1] + element.offsetHeight) - this.ycomp) /
        element.offsetHeight;
    if (mode == 'horizontal')
      return ((this.offset[0] + element.offsetWidth) - this.xcomp) /
        element.offsetWidth;
  },


  cumulativeOffset: Element.Methods.cumulativeOffset,

  positionedOffset: Element.Methods.positionedOffset,

  absolutize: function(element) {
    Position.prepare();
    return Element.absolutize(element);
  },

  relativize: function(element) {
    Position.prepare();
    return Element.relativize(element);
  },

  realOffset: Element.Methods.cumulativeScrollOffset,

  offsetParent: Element.Methods.getOffsetParent,

  page: Element.Methods.viewportOffset,

  clone: function(source, target, options) {
    options = options || { };
    return Element.clonePosition(target, source, options);
  }
};

/*--------------------------------------------------------------------------*/

if (!document.getElementsByClassName) document.getElementsByClassName = function(instanceMethods){
  function iter(name) {
    return name.blank() ? null : "[contains(concat(' ', @class, ' '), ' " + name + " ')]";
  }

  instanceMethods.getElementsByClassName = Prototype.BrowserFeatures.XPath ?
  function(element, className) {
    className = className.toString().strip();
    var cond = /\s/.test(className) ? $w(className).map(iter).join('') : iter(className);
    return cond ? document._getElementsByXPath('.//*' + cond, element) : [];
  } : function(element, className) {
    className = className.toString().strip();
    var elements = [], classNames = (/\s/.test(className) ? $w(className) : null);
    if (!classNames && !className) return elements;

    var nodes = $(element).getElementsByTagName('*');
    className = ' ' + className + ' ';

    for (var i = 0, child, cn; child = nodes[i]; i++) {
      if (child.className && (cn = ' ' + child.className + ' ') && (cn.include(className) ||
          (classNames && classNames.all(function(name) {
            return !name.toString().blank() && cn.include(' ' + name + ' ');
          }))))
        elements.push(Element.extend(child));
    }
    return elements;
  };

  return function(className, parentElement) {
    return $(parentElement || document.body).getElementsByClassName(className);
  };
}(Element.Methods);

/*--------------------------------------------------------------------------*/

Element.ClassNames = Class.create();
Element.ClassNames.prototype = {
  initialize: function(element) {
    this.element = $(element);
  },

  _each: function(iterator) {
    this.element.className.split(/\s+/).select(function(name) {
      return name.length > 0;
    })._each(iterator);
  },

  set: function(className) {
    this.element.className = className;
  },

  add: function(classNameToAdd) {
    if (this.include(classNameToAdd)) return;
    this.set($A(this).concat(classNameToAdd).join(' '));
  },

  remove: function(classNameToRemove) {
    if (!this.include(classNameToRemove)) return;
    this.set($A(this).without(classNameToRemove).join(' '));
  },

  toString: function() {
    return $A(this).join(' ');
  }
};

Object.extend(Element.ClassNames.prototype, Enumerable);

/*--------------------------------------------------------------------------*/

(function() {
  window.Selector = Class.create({
    initialize: function(expression) {
      this.expression = expression.strip();
    },

    findElements: function(rootElement) {
      return Prototype.Selector.select(this.expression, rootElement);
    },

    match: function(element) {
      return Prototype.Selector.match(element, this.expression);
    },

    toString: function() {
      return this.expression;
    },

    inspect: function() {
      return "#<Selector: " + this.expression + ">";
    }
  });

  Object.extend(Selector, {
    matchElements: function(elements, expression) {
      var match = Prototype.Selector.match,
          results = [];

      for (var i = 0, length = elements.length; i < length; i++) {
        var element = elements[i];
        if (match(element, expression)) {
          results.push(Element.extend(element));
        }
      }
      return results;
    },

    findElement: function(elements, expression, index) {
      index = index || 0;
      var matchIndex = 0, element;
      for (var i = 0, length = elements.length; i < length; i++) {
        element = elements[i];
        if (Prototype.Selector.match(element, expression) && index === matchIndex++) {
          return Element.extend(element);
        }
      }
    },

    findChildElements: function(element, expressions) {
      var selector = expressions.toArray().join(', ');
      return Prototype.Selector.select(selector, element || document);
    }
  });
})();
/*jslint active: true */
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/utils/effects.js */

// script.aculo.us effects.js v1.8.3, Thu Oct 08 11:23:33 +0200 2009

// Copyright (c) 2005-2009 Thomas Fuchs (http://script.aculo.us, http://mir.aculo.us)
// Contributors:
//  Justin Palmer (http://encytemedia.com/)
//  Mark Pilgrim (http://diveintomark.org/)
//  Martin Bialasinki
//
// script.aculo.us is freely distributable under the terms of an MIT-style license.
// For details, see the script.aculo.us web site: http://script.aculo.us/

// converts rgb() and #xxx to #xxxxxx format,
// returns self (or first argument) if not convertable
String.prototype.parseColor = function() {
  var color = '#';
  if (this.slice(0,4) == 'rgb(') {
    var cols = this.slice(4,this.length-1).split(',');
    var i=0; do { color += parseInt(cols[i]).toColorPart() } while (++i<3);
  } else {
    if (this.slice(0,1) == '#') {
      if (this.length==4) for(var i=1;i<4;i++) color += (this.charAt(i) + this.charAt(i)).toLowerCase();
      if (this.length==7) color = this.toLowerCase();
    }
  }
  return (color.length==7 ? color : (arguments[0] || this));
};

/*--------------------------------------------------------------------------*/

Element.collectTextNodes = function(element) {
  return $A($(element).childNodes).collect( function(node) {
    return (node.nodeType==3 ? node.nodeValue :
      (node.hasChildNodes() ? Element.collectTextNodes(node) : ''));
  }).flatten().join('');
};

Element.collectTextNodesIgnoreClass = function(element, className) {
  return $A($(element).childNodes).collect( function(node) {
    return (node.nodeType==3 ? node.nodeValue :
      ((node.hasChildNodes() && !Element.hasClassName(node,className)) ?
        Element.collectTextNodesIgnoreClass(node, className) : ''));
  }).flatten().join('');
};

Element.setContentZoom = function(element, percent) {
  element = $(element);
  element.setStyle({fontSize: (percent/100) + 'em'});
  if (Prototype.Browser.WebKit) window.scrollBy(0,0);
  return element;
};

Element.getInlineOpacity = function(element){
  return $(element).style.opacity || '';
};

Element.forceRerendering = function(element) {
  try {
    element = $(element);
    var n = document.createTextNode(' ');
    element.appendChild(n);
    element.removeChild(n);
  } catch(e) { }
};

/*--------------------------------------------------------------------------*/

var Effect = {
  _elementDoesNotExistError: {
    name: 'ElementDoesNotExistError',
    message: 'The specified DOM element does not exist, but is required for this effect to operate'
  },
  Transitions: {
    linear: Prototype.K,
    sinoidal: function(pos) {
      return (-Math.cos(pos*Math.PI)/2) + .5;
    },
    reverse: function(pos) {
      return 1-pos;
    },
    flicker: function(pos) {
      var pos = ((-Math.cos(pos*Math.PI)/4) + .75) + Math.random()/4;
      return pos > 1 ? 1 : pos;
    },
    wobble: function(pos) {
      return (-Math.cos(pos*Math.PI*(9*pos))/2) + .5;
    },
    pulse: function(pos, pulses) {
      return (-Math.cos((pos*((pulses||5)-.5)*2)*Math.PI)/2) + .5;
    },
    spring: function(pos) {
      return 1 - (Math.cos(pos * 4.5 * Math.PI) * Math.exp(-pos * 6));
    },
    none: function(pos) {
      return 0;
    },
    full: function(pos) {
      return 1;
    }
  },
  DefaultOptions: {
    duration:   1.0,   // seconds
    fps:        100,   // 100= assume 66fps max.
    sync:       false, // true for combining
    from:       0.0,
    to:         1.0,
    delay:      0.0,
    queue:      'parallel'
  },
  tagifyText: function(element) {
    var tagifyStyle = 'position:relative';
    if (Prototype.Browser.IE) tagifyStyle += ';zoom:1';

    element = $(element);
    $A(element.childNodes).each( function(child) {
      if (child.nodeType==3) {
        child.nodeValue.toArray().each( function(character) {
          element.insertBefore(
            new Element('span', {style: tagifyStyle}).update(
              character == ' ' ? String.fromCharCode(160) : character),
              child);
        });
        Element.remove(child);
      }
    });
  },
  multiple: function(element, effect) {
    var elements;
    if (((typeof element == 'object') ||
        Object.isFunction(element)) &&
       (element.length))
      elements = element;
    else
      elements = $(element).childNodes;

    var options = Object.extend({
      speed: 0.1,
      delay: 0.0
    }, arguments[2] || { });
    var masterDelay = options.delay;

    $A(elements).each( function(element, index) {
      new effect(element, Object.extend(options, { delay: index * options.speed + masterDelay }));
    });
  },
  PAIRS: {
    'slide':  ['SlideDown','SlideUp'],
    'blind':  ['BlindDown','BlindUp'],
    'appear': ['Appear','Fade']
  },
  toggle: function(element, effect, options) {
    element = $(element);
    effect  = (effect || 'appear').toLowerCase();
    
    return Effect[ Effect.PAIRS[ effect ][ element.visible() ? 1 : 0 ] ](element, Object.extend({
      queue: { position:'end', scope:(element.id || 'global'), limit: 1 }
    }, options || {}));
  }
};

Effect.DefaultOptions.transition = Effect.Transitions.sinoidal;

/* ------------- core effects ------------- */

Effect.ScopedQueue = Class.create(Enumerable, {
  initialize: function() {
    this.effects  = [];
    this.interval = null;
  },
  _each: function(iterator) {
    this.effects._each(iterator);
  },
  add: function(effect) {
    var timestamp = new Date().getTime();

    var position = Object.isString(effect.options.queue) ?
      effect.options.queue : effect.options.queue.position;

    switch(position) {
      case 'front':
        // move unstarted effects after this effect
        this.effects.findAll(function(e){ return e.state=='idle' }).each( function(e) {
            e.startOn  += effect.finishOn;
            e.finishOn += effect.finishOn;
          });
        break;
      case 'with-last':
        timestamp = this.effects.pluck('startOn').max() || timestamp;
        break;
      case 'end':
        // start effect after last queued effect has finished
        timestamp = this.effects.pluck('finishOn').max() || timestamp;
        break;
    }

    effect.startOn  += timestamp;
    effect.finishOn += timestamp;

    if (!effect.options.queue.limit || (this.effects.length < effect.options.queue.limit))
      this.effects.push(effect);

    if (!this.interval)
      this.interval = setInterval(this.loop.bind(this), 15);
  },
  remove: function(effect) {
    this.effects = this.effects.reject(function(e) { return e==effect });
    if (this.effects.length == 0) {
      clearInterval(this.interval);
      this.interval = null;
    }
  },
  loop: function() {
    var timePos = new Date().getTime();
    for(var i=0, len=this.effects.length;i<len;i++)
      this.effects[i] && this.effects[i].loop(timePos);
  }
});

Effect.Queues = {
  instances: $H(),
  get: function(queueName) {
    if (!Object.isString(queueName)) return queueName;

    return this.instances.get(queueName) ||
      this.instances.set(queueName, new Effect.ScopedQueue());
  }
};
Effect.Queue = Effect.Queues.get('global');

Effect.Base = Class.create({
  position: null,
  start: function(options) {
    if (options && options.transition === false) options.transition = Effect.Transitions.linear;
    this.options      = Object.extend(Object.extend({ },Effect.DefaultOptions), options || { });
    this.currentFrame = 0;
    this.state        = 'idle';
    this.startOn      = this.options.delay*1000;
    this.finishOn     = this.startOn+(this.options.duration*1000);
    this.fromToDelta  = this.options.to-this.options.from;
    this.totalTime    = this.finishOn-this.startOn;
    this.totalFrames  = this.options.fps*this.options.duration;

    this.render = (function() {
      function dispatch(effect, eventName) {
        if (effect.options[eventName + 'Internal'])
          effect.options[eventName + 'Internal'](effect);
        if (effect.options[eventName])
          effect.options[eventName](effect);
      }

      return function(pos) {
        if (this.state === "idle") {
          this.state = "running";
          dispatch(this, 'beforeSetup');
          if (this.setup) this.setup();
          dispatch(this, 'afterSetup');
        }
        if (this.state === "running") {
          pos = (this.options.transition(pos) * this.fromToDelta) + this.options.from;
          this.position = pos;
          dispatch(this, 'beforeUpdate');
          if (this.update) this.update(pos);
          dispatch(this, 'afterUpdate');
        }
      };
    })();

    this.event('beforeStart');
    if (!this.options.sync)
      Effect.Queues.get(Object.isString(this.options.queue) ?
        'global' : this.options.queue.scope).add(this);
  },
  loop: function(timePos) {
    if (timePos >= this.startOn) {
      if (timePos >= this.finishOn) {
        this.render(1.0);
        this.cancel();
        this.event('beforeFinish');
        if (this.finish) this.finish();
        this.event('afterFinish');
        return;
      }
      var pos   = (timePos - this.startOn) / this.totalTime,
          frame = (pos * this.totalFrames).round();
      if (frame > this.currentFrame) {
        this.render(pos);
        this.currentFrame = frame;
      }
    }
  },
  cancel: function() {
    if (!this.options.sync)
      Effect.Queues.get(Object.isString(this.options.queue) ?
        'global' : this.options.queue.scope).remove(this);
    this.state = 'finished';
  },
  event: function(eventName) {
    if (this.options[eventName + 'Internal']) this.options[eventName + 'Internal'](this);
    if (this.options[eventName]) this.options[eventName](this);
  },
  inspect: function() {
    var data = $H();
    for(property in this)
      if (!Object.isFunction(this[property])) data.set(property, this[property]);
    return '#<Effect:' + data.inspect() + ',options:' + $H(this.options).inspect() + '>';
  }
});

Effect.Parallel = Class.create(Effect.Base, {
  initialize: function(effects) {
    this.effects = effects || [];
    this.start(arguments[1]);
  },
  update: function(position) {
    this.effects.invoke('render', position);
  },
  finish: function(position) {
    this.effects.each( function(effect) {
      effect.render(1.0);
      effect.cancel();
      effect.event('beforeFinish');
      if (effect.finish) effect.finish(position);
      effect.event('afterFinish');
    });
  }
});

Effect.Tween = Class.create(Effect.Base, {
  initialize: function(object, from, to) {
    object = Object.isString(object) ? $(object) : object;
    var args = $A(arguments), method = args.last(),
      options = args.length == 5 ? args[3] : null;
    this.method = Object.isFunction(method) ? method.bind(object) :
      Object.isFunction(object[method]) ? object[method].bind(object) :
      function(value) { object[method] = value };
    this.start(Object.extend({ from: from, to: to }, options || { }));
  },
  update: function(position) {
    this.method(position);
  }
});

Effect.Event = Class.create(Effect.Base, {
  initialize: function() {
    this.start(Object.extend({ duration: 0 }, arguments[0] || { }));
  },
  update: Prototype.emptyFunction
});

Effect.Opacity = Class.create(Effect.Base, {
  initialize: function(element) {
    this.element = $(element);
    if (!this.element) throw(Effect._elementDoesNotExistError);
    // make this work on IE on elements without 'layout'
    if (Prototype.Browser.IE && (!this.element.currentStyle.hasLayout))
      this.element.setStyle({zoom: 1});
    var options = Object.extend({
      from: this.element.getOpacity() || 0.0,
      to:   1.0
    }, arguments[1] || { });
    this.start(options);
  },
  update: function(position) {
    this.element.setOpacity(position);
  }
});

Effect.Move = Class.create(Effect.Base, {
  initialize: function(element) {
    this.element = $(element);
    if (!this.element) throw(Effect._elementDoesNotExistError);
    var options = Object.extend({
      x:    0,
      y:    0,
      mode: 'relative'
    }, arguments[1] || { });
    this.start(options);
  },
  setup: function() {
    this.element.makePositioned();
    this.originalLeft = parseFloat(this.element.getStyle('left') || '0');
    this.originalTop  = parseFloat(this.element.getStyle('top')  || '0');
    if (this.options.mode == 'absolute') {
      this.options.x = this.options.x - this.originalLeft;
      this.options.y = this.options.y - this.originalTop;
    }
  },
  update: function(position) {
    this.element.setStyle({
      left: (this.options.x  * position + this.originalLeft).round() + 'px',
      top:  (this.options.y  * position + this.originalTop).round()  + 'px'
    });
  }
});

// for backwards compatibility
Effect.MoveBy = function(element, toTop, toLeft) {
  return new Effect.Move(element,
    Object.extend({ x: toLeft, y: toTop }, arguments[3] || { }));
};

Effect.Scale = Class.create(Effect.Base, {
  initialize: function(element, percent) {
    this.element = $(element);
    if (!this.element) throw(Effect._elementDoesNotExistError);
    var options = Object.extend({
      scaleX: true,
      scaleY: true,
      scaleContent: true,
      scaleFromCenter: false,
      scaleMode: 'box',        // 'box' or 'contents' or { } with provided values
      scaleFrom: 100.0,
      scaleTo:   percent
    }, arguments[2] || { });
    this.start(options);
  },
  setup: function() {
    this.restoreAfterFinish = this.options.restoreAfterFinish || false;
    this.elementPositioning = this.element.getStyle('position');

    this.originalStyle = { };
    ['top','left','width','height','fontSize'].each( function(k) {
      this.originalStyle[k] = this.element.style[k];
    }.bind(this));

    this.originalTop  = this.element.offsetTop;
    this.originalLeft = this.element.offsetLeft;

    var fontSize = this.element.getStyle('font-size') || '100%';
    ['em','px','%','pt'].each( function(fontSizeType) {
      if (fontSize.indexOf(fontSizeType)>0) {
        this.fontSize     = parseFloat(fontSize);
        this.fontSizeType = fontSizeType;
      }
    }.bind(this));

    this.factor = (this.options.scaleTo - this.options.scaleFrom)/100;

    this.dims = null;
    if (this.options.scaleMode=='box')
      this.dims = [this.element.offsetHeight, this.element.offsetWidth];
    if (/^content/.test(this.options.scaleMode))
      this.dims = [this.element.scrollHeight, this.element.scrollWidth];
    if (!this.dims)
      this.dims = [this.options.scaleMode.originalHeight,
                   this.options.scaleMode.originalWidth];
  },
  update: function(position) {
    var currentScale = (this.options.scaleFrom/100.0) + (this.factor * position);
    if (this.options.scaleContent && this.fontSize)
      this.element.setStyle({fontSize: this.fontSize * currentScale + this.fontSizeType });
    this.setDimensions(this.dims[0] * currentScale, this.dims[1] * currentScale);
  },
  finish: function(position) {
    if (this.restoreAfterFinish) this.element.setStyle(this.originalStyle);
  },
  setDimensions: function(height, width) {
    var d = { };
    if (this.options.scaleX) d.width = width.round() + 'px';
    if (this.options.scaleY) d.height = height.round() + 'px';
    if (this.options.scaleFromCenter) {
      var topd  = (height - this.dims[0])/2;
      var leftd = (width  - this.dims[1])/2;
      if (this.elementPositioning == 'absolute') {
        if (this.options.scaleY) d.top = this.originalTop-topd + 'px';
        if (this.options.scaleX) d.left = this.originalLeft-leftd + 'px';
      } else {
        if (this.options.scaleY) d.top = -topd + 'px';
        if (this.options.scaleX) d.left = -leftd + 'px';
      }
    }
    this.element.setStyle(d);
  }
});

Effect.Highlight = Class.create(Effect.Base, {
  initialize: function(element) {
    this.element = $(element);
    if (!this.element) throw(Effect._elementDoesNotExistError);
    var options = Object.extend({ startcolor: '#ffff99' }, arguments[1] || { });
    this.start(options);
  },
  setup: function() {
    // Prevent executing on elements not in the layout flow
    if (this.element.getStyle('display')=='none') { this.cancel(); return; }
    // Disable background image during the effect
    this.oldStyle = { };
    if (!this.options.keepBackgroundImage) {
      this.oldStyle.backgroundImage = this.element.getStyle('background-image');
      this.element.setStyle({backgroundImage: 'none'});
    }
    if (!this.options.endcolor)
      this.options.endcolor = this.element.getStyle('background-color').parseColor('#ffffff');
    if (!this.options.restorecolor)
      this.options.restorecolor = this.element.getStyle('background-color');
    // init color calculations
    this._base  = $R(0,2).map(function(i){ return parseInt(this.options.startcolor.slice(i*2+1,i*2+3),16) }.bind(this));
    this._delta = $R(0,2).map(function(i){ return parseInt(this.options.endcolor.slice(i*2+1,i*2+3),16)-this._base[i] }.bind(this));
  },
  update: function(position) {
    this.element.setStyle({backgroundColor: $R(0,2).inject('#',function(m,v,i){
      return m+((this._base[i]+(this._delta[i]*position)).round().toColorPart()); }.bind(this)) });
  },
  finish: function() {
    this.element.setStyle(Object.extend(this.oldStyle, {
      backgroundColor: this.options.restorecolor
    }));
  }
});

Effect.ScrollTo = function(element) {
  var options = arguments[1] || { },
  scrollOffsets = document.viewport.getScrollOffsets(),
  elementOffsets = $(element).cumulativeOffset();

  if (options.offset) elementOffsets[1] += options.offset;

  return new Effect.Tween(null,
    scrollOffsets.top,
    elementOffsets[1],
    options,
    function(p){ scrollTo(scrollOffsets.left, p.round()); }
  );
};

/* ------------- combination effects ------------- */

Effect.Fade = function(element) {
  element = $(element);
  var oldOpacity = element.getInlineOpacity();
  var options = Object.extend({
    from: element.getOpacity() || 1.0,
    to:   0.0,
    afterFinishInternal: function(effect) {
      if (effect.options.to!=0) return;
      effect.element.hide().setStyle({opacity: oldOpacity});
    }
  }, arguments[1] || { });
  return new Effect.Opacity(element,options);
};

Effect.Appear = function(element) {
  element = $(element);
  var options = Object.extend({
  from: (element.getStyle('display') == 'none' ? 0.0 : element.getOpacity() || 0.0),
  to:   1.0,
  // force Safari to render floated elements properly
  afterFinishInternal: function(effect) {
    effect.element.forceRerendering();
  },
  beforeSetup: function(effect) {
    effect.element.setOpacity(effect.options.from).show();
  }}, arguments[1] || { });
  return new Effect.Opacity(element,options);
};

Effect.Puff = function(element) {
  element = $(element);
  var oldStyle = {
    opacity: element.getInlineOpacity(),
    position: element.getStyle('position'),
    top:  element.style.top,
    left: element.style.left,
    width: element.style.width,
    height: element.style.height
  };
  return new Effect.Parallel(
   [ new Effect.Scale(element, 200,
      { sync: true, scaleFromCenter: true, scaleContent: true, restoreAfterFinish: true }),
     new Effect.Opacity(element, { sync: true, to: 0.0 } ) ],
     Object.extend({ duration: 1.0,
      beforeSetupInternal: function(effect) {
        Position.absolutize(effect.effects[0].element);
      },
      afterFinishInternal: function(effect) {
         effect.effects[0].element.hide().setStyle(oldStyle); }
     }, arguments[1] || { })
   );
};

Effect.BlindUp = function(element) {
  element = $(element);
  element.makeClipping();
  return new Effect.Scale(element, 0,
    Object.extend({ scaleContent: false,
      scaleX: false,
      restoreAfterFinish: true,
      afterFinishInternal: function(effect) {
        effect.element.hide().undoClipping();
      }
    }, arguments[1] || { })
  );
};

Effect.BlindDown = function(element) {
  element = $(element);
  var elementDimensions = element.getDimensions();
  return new Effect.Scale(element, 100, Object.extend({
    scaleContent: false,
    scaleX: false,
    scaleFrom: 0,
    scaleMode: {originalHeight: elementDimensions.height, originalWidth: elementDimensions.width},
    restoreAfterFinish: true,
    afterSetup: function(effect) {
      effect.element.makeClipping().setStyle({height: '0px'}).show();
    },
    afterFinishInternal: function(effect) {
      effect.element.undoClipping();
    }
  }, arguments[1] || { }));
};

Effect.SwitchOff = function(element) {
  element = $(element);
  var oldOpacity = element.getInlineOpacity();
  return new Effect.Appear(element, Object.extend({
    duration: 0.4,
    from: 0,
    transition: Effect.Transitions.flicker,
    afterFinishInternal: function(effect) {
      new Effect.Scale(effect.element, 1, {
        duration: 0.3, scaleFromCenter: true,
        scaleX: false, scaleContent: false, restoreAfterFinish: true,
        beforeSetup: function(effect) {
          effect.element.makePositioned().makeClipping();
        },
        afterFinishInternal: function(effect) {
          effect.element.hide().undoClipping().undoPositioned().setStyle({opacity: oldOpacity});
        }
      });
    }
  }, arguments[1] || { }));
};

Effect.DropOut = function(element) {
  element = $(element);
  var oldStyle = {
    top: element.getStyle('top'),
    left: element.getStyle('left'),
    opacity: element.getInlineOpacity() };
  return new Effect.Parallel(
    [ new Effect.Move(element, {x: 0, y: 100, sync: true }),
      new Effect.Opacity(element, { sync: true, to: 0.0 }) ],
    Object.extend(
      { duration: 0.5,
        beforeSetup: function(effect) {
          effect.effects[0].element.makePositioned();
        },
        afterFinishInternal: function(effect) {
          effect.effects[0].element.hide().undoPositioned().setStyle(oldStyle);
        }
      }, arguments[1] || { }));
};

Effect.Shake = function(element) {
  element = $(element);
  var options = Object.extend({
    distance: 20,
    duration: 0.5
  }, arguments[1] || {});
  var distance = parseFloat(options.distance);
  var split = parseFloat(options.duration) / 10.0;
  var oldStyle = {
    top: element.getStyle('top'),
    left: element.getStyle('left') };
    return new Effect.Move(element,
      { x:  distance, y: 0, duration: split, afterFinishInternal: function(effect) {
    new Effect.Move(effect.element,
      { x: -distance*2, y: 0, duration: split*2,  afterFinishInternal: function(effect) {
    new Effect.Move(effect.element,
      { x:  distance*2, y: 0, duration: split*2,  afterFinishInternal: function(effect) {
    new Effect.Move(effect.element,
      { x: -distance*2, y: 0, duration: split*2,  afterFinishInternal: function(effect) {
    new Effect.Move(effect.element,
      { x:  distance*2, y: 0, duration: split*2,  afterFinishInternal: function(effect) {
    new Effect.Move(effect.element,
      { x: -distance, y: 0, duration: split, afterFinishInternal: function(effect) {
        effect.element.undoPositioned().setStyle(oldStyle);
  }}); }}); }}); }}); }}); }});
};

Effect.SlideDown = function(element) {
  element = $(element).cleanWhitespace();
  // SlideDown need to have the content of the element wrapped in a container element with fixed height!
  var oldInnerBottom = element.down().getStyle('bottom');
  var elementDimensions = element.getDimensions();
  return new Effect.Scale(element, 100, Object.extend({
    scaleContent: false,
    scaleX: false,
    scaleFrom: window.opera ? 0 : 1,
    scaleMode: {originalHeight: elementDimensions.height, originalWidth: elementDimensions.width},
    restoreAfterFinish: true,
    afterSetup: function(effect) {
      effect.element.makePositioned();
      effect.element.down().makePositioned();
      if (window.opera) effect.element.setStyle({top: ''});
      effect.element.makeClipping().setStyle({height: '0px'}).show();
    },
    afterUpdateInternal: function(effect) {
      effect.element.down().setStyle({bottom:
        (effect.dims[0] - effect.element.clientHeight) + 'px' });
    },
    afterFinishInternal: function(effect) {
      effect.element.undoClipping().undoPositioned();
      effect.element.down().undoPositioned().setStyle({bottom: oldInnerBottom}); }
    }, arguments[1] || { })
  );
};

Effect.SlideUp = function(element) {
  element = $(element).cleanWhitespace();
  var oldInnerBottom = element.down().getStyle('bottom');
  var elementDimensions = element.getDimensions();
  return new Effect.Scale(element, window.opera ? 0 : 1,
   Object.extend({ scaleContent: false,
    scaleX: false,
    scaleMode: 'box',
    scaleFrom: 100,
    scaleMode: {originalHeight: elementDimensions.height, originalWidth: elementDimensions.width},
    restoreAfterFinish: true,
    afterSetup: function(effect) {
      effect.element.makePositioned();
      effect.element.down().makePositioned();
      if (window.opera) effect.element.setStyle({top: ''});
      effect.element.makeClipping().show();
    },
    afterUpdateInternal: function(effect) {
      effect.element.down().setStyle({bottom:
        (effect.dims[0] - effect.element.clientHeight) + 'px' });
    },
    afterFinishInternal: function(effect) {
      effect.element.hide().undoClipping().undoPositioned();
      effect.element.down().undoPositioned().setStyle({bottom: oldInnerBottom});
    }
   }, arguments[1] || { })
  );
};

// Bug in opera makes the TD containing this element expand for a instance after finish
Effect.Squish = function(element) {
  return new Effect.Scale(element, window.opera ? 1 : 0, {
    restoreAfterFinish: true,
    beforeSetup: function(effect) {
      effect.element.makeClipping();
    },
    afterFinishInternal: function(effect) {
      effect.element.hide().undoClipping();
    }
  });
};

Effect.Grow = function(element) {
  element = $(element);
  var options = Object.extend({
    direction: 'center',
    moveTransition: Effect.Transitions.sinoidal,
    scaleTransition: Effect.Transitions.sinoidal,
    opacityTransition: Effect.Transitions.full
  }, arguments[1] || { });
  var oldStyle = {
    top: element.style.top,
    left: element.style.left,
    height: element.style.height,
    width: element.style.width,
    opacity: element.getInlineOpacity() };

  var dims = element.getDimensions();
  var initialMoveX, initialMoveY;
  var moveX, moveY;

  switch (options.direction) {
    case 'top-left':
      initialMoveX = initialMoveY = moveX = moveY = 0;
      break;
    case 'top-right':
      initialMoveX = dims.width;
      initialMoveY = moveY = 0;
      moveX = -dims.width;
      break;
    case 'bottom-left':
      initialMoveX = moveX = 0;
      initialMoveY = dims.height;
      moveY = -dims.height;
      break;
    case 'bottom-right':
      initialMoveX = dims.width;
      initialMoveY = dims.height;
      moveX = -dims.width;
      moveY = -dims.height;
      break;
    case 'center':
      initialMoveX = dims.width / 2;
      initialMoveY = dims.height / 2;
      moveX = -dims.width / 2;
      moveY = -dims.height / 2;
      break;
  }

  return new Effect.Move(element, {
    x: initialMoveX,
    y: initialMoveY,
    duration: 0.01,
    beforeSetup: function(effect) {
      effect.element.hide().makeClipping().makePositioned();
    },
    afterFinishInternal: function(effect) {
      new Effect.Parallel(
        [ new Effect.Opacity(effect.element, { sync: true, to: 1.0, from: 0.0, transition: options.opacityTransition }),
          new Effect.Move(effect.element, { x: moveX, y: moveY, sync: true, transition: options.moveTransition }),
          new Effect.Scale(effect.element, 100, {
            scaleMode: { originalHeight: dims.height, originalWidth: dims.width },
            sync: true, scaleFrom: window.opera ? 1 : 0, transition: options.scaleTransition, restoreAfterFinish: true})
        ], Object.extend({
             beforeSetup: function(effect) {
               effect.effects[0].element.setStyle({height: '0px'}).show();
             },
             afterFinishInternal: function(effect) {
               effect.effects[0].element.undoClipping().undoPositioned().setStyle(oldStyle);
             }
           }, options)
      );
    }
  });
};

Effect.Shrink = function(element) {
  element = $(element);
  var options = Object.extend({
    direction: 'center',
    moveTransition: Effect.Transitions.sinoidal,
    scaleTransition: Effect.Transitions.sinoidal,
    opacityTransition: Effect.Transitions.none
  }, arguments[1] || { });
  var oldStyle = {
    top: element.style.top,
    left: element.style.left,
    height: element.style.height,
    width: element.style.width,
    opacity: element.getInlineOpacity() };

  var dims = element.getDimensions();
  var moveX, moveY;

  switch (options.direction) {
    case 'top-left':
      moveX = moveY = 0;
      break;
    case 'top-right':
      moveX = dims.width;
      moveY = 0;
      break;
    case 'bottom-left':
      moveX = 0;
      moveY = dims.height;
      break;
    case 'bottom-right':
      moveX = dims.width;
      moveY = dims.height;
      break;
    case 'center':
      moveX = dims.width / 2;
      moveY = dims.height / 2;
      break;
  }

  return new Effect.Parallel(
    [ new Effect.Opacity(element, { sync: true, to: 0.0, from: 1.0, transition: options.opacityTransition }),
      new Effect.Scale(element, window.opera ? 1 : 0, { sync: true, transition: options.scaleTransition, restoreAfterFinish: true}),
      new Effect.Move(element, { x: moveX, y: moveY, sync: true, transition: options.moveTransition })
    ], Object.extend({
         beforeStartInternal: function(effect) {
           effect.effects[0].element.makePositioned().makeClipping();
         },
         afterFinishInternal: function(effect) {
           effect.effects[0].element.hide().undoClipping().undoPositioned().setStyle(oldStyle); }
       }, options)
  );
};

Effect.Pulsate = function(element) {
  element = $(element);
  var options    = arguments[1] || { },
    oldOpacity = element.getInlineOpacity(),
    transition = options.transition || Effect.Transitions.linear,
    reverser   = function(pos){
      return 1 - transition((-Math.cos((pos*(options.pulses||5)*2)*Math.PI)/2) + .5);
    };

  return new Effect.Opacity(element,
    Object.extend(Object.extend({  duration: 2.0, from: 0,
      afterFinishInternal: function(effect) { effect.element.setStyle({opacity: oldOpacity}); }
    }, options), {transition: reverser}));
};

Effect.Fold = function(element) {
  element = $(element);
  var oldStyle = {
    top: element.style.top,
    left: element.style.left,
    width: element.style.width,
    height: element.style.height };
  element.makeClipping();
  return new Effect.Scale(element, 5, Object.extend({
    scaleContent: false,
    scaleX: false,
    afterFinishInternal: function(effect) {
    new Effect.Scale(element, 1, {
      scaleContent: false,
      scaleY: false,
      afterFinishInternal: function(effect) {
        effect.element.hide().undoClipping().setStyle(oldStyle);
      } });
  }}, arguments[1] || { }));
};

Effect.Morph = Class.create(Effect.Base, {
  initialize: function(element) {
    this.element = $(element);
    if (!this.element) throw(Effect._elementDoesNotExistError);
    var options = Object.extend({
      style: { }
    }, arguments[1] || { });

    if (!Object.isString(options.style)) this.style = $H(options.style);
    else {
      if (options.style.include(':'))
        this.style = options.style.parseStyle();
      else {
        this.element.addClassName(options.style);
        this.style = $H(this.element.getStyles());
        this.element.removeClassName(options.style);
        var css = this.element.getStyles();
        this.style = this.style.reject(function(style) {
          return style.value == css[style.key];
        });
        options.afterFinishInternal = function(effect) {
          effect.element.addClassName(effect.options.style);
          effect.transforms.each(function(transform) {
            effect.element.style[transform.style] = '';
          });
        };
      }
    }
    this.start(options);
  },

  setup: function(){
    function parseColor(color){
      if (!color || ['rgba(0, 0, 0, 0)','transparent'].include(color)) color = '#ffffff';
      color = color.parseColor();
      return $R(0,2).map(function(i){
        return parseInt( color.slice(i*2+1,i*2+3), 16 );
      });
    }
    this.transforms = this.style.map(function(pair){
      var property = pair[0], value = pair[1], unit = null;

      if (value.parseColor('#zzzzzz') != '#zzzzzz') {
        value = value.parseColor();
        unit  = 'color';
      } else if (property == 'opacity') {
        value = parseFloat(value);
        if (Prototype.Browser.IE && (!this.element.currentStyle.hasLayout))
          this.element.setStyle({zoom: 1});
      } else if (Element.CSS_LENGTH.test(value)) {
          var components = value.match(/^([\+\-]?[0-9\.]+)(.*)$/);
          value = parseFloat(components[1]);
          unit = (components.length == 3) ? components[2] : null;
      }

      var originalValue = this.element.getStyle(property);
      return {
        style: property.camelize(),
        originalValue: unit=='color' ? parseColor(originalValue) : parseFloat(originalValue || 0),
        targetValue: unit=='color' ? parseColor(value) : value,
        unit: unit
      };
    }.bind(this)).reject(function(transform){
      return (
        (transform.originalValue == transform.targetValue) ||
        (
          transform.unit != 'color' &&
          (isNaN(transform.originalValue) || isNaN(transform.targetValue))
        )
      );
    });
  },
  update: function(position) {
    var style = { }, transform, i = this.transforms.length;
    while(i--)
      style[(transform = this.transforms[i]).style] =
        transform.unit=='color' ? '#'+
          (Math.round(transform.originalValue[0]+
            (transform.targetValue[0]-transform.originalValue[0])*position)).toColorPart() +
          (Math.round(transform.originalValue[1]+
            (transform.targetValue[1]-transform.originalValue[1])*position)).toColorPart() +
          (Math.round(transform.originalValue[2]+
            (transform.targetValue[2]-transform.originalValue[2])*position)).toColorPart() :
        (transform.originalValue +
          (transform.targetValue - transform.originalValue) * position).toFixed(3) +
            (transform.unit === null ? '' : transform.unit);
    this.element.setStyle(style, true);
  }
});

Effect.Transform = Class.create({
  initialize: function(tracks){
    this.tracks  = [];
    this.options = arguments[1] || { };
    this.addTracks(tracks);
  },
  addTracks: function(tracks){
    tracks.each(function(track){
      track = $H(track);
      var data = track.values().first();
      this.tracks.push($H({
        ids:     track.keys().first(),
        effect:  Effect.Morph,
        options: { style: data }
      }));
    }.bind(this));
    return this;
  },
  play: function(){
    return new Effect.Parallel(
      this.tracks.map(function(track){
        var ids = track.get('ids'), effect = track.get('effect'), options = track.get('options');
        var elements = [$(ids) || $$(ids)].flatten();
        return elements.map(function(e){ return new effect(e, Object.extend({ sync:true }, options)) });
      }).flatten(),
      this.options
    );
  }
});

Element.CSS_PROPERTIES = $w(
  'backgroundColor backgroundPosition borderBottomColor borderBottomStyle ' +
  'borderBottomWidth borderLeftColor borderLeftStyle borderLeftWidth ' +
  'borderRightColor borderRightStyle borderRightWidth borderSpacing ' +
  'borderTopColor borderTopStyle borderTopWidth bottom clip color ' +
  'fontSize fontWeight height left letterSpacing lineHeight ' +
  'marginBottom marginLeft marginRight marginTop markerOffset maxHeight '+
  'maxWidth minHeight minWidth opacity outlineColor outlineOffset ' +
  'outlineWidth paddingBottom paddingLeft paddingRight paddingTop ' +
  'right textIndent top width wordSpacing zIndex');

Element.CSS_LENGTH = /^(([\+\-]?[0-9\.]+)(em|ex|px|in|cm|mm|pt|pc|\%))|0$/;

String.__parseStyleElement = document.createElement('div');
String.prototype.parseStyle = function(){
  var style, styleRules = $H();
  if (Prototype.Browser.WebKit)
    style = new Element('div',{style:this}).style;
  else {
    String.__parseStyleElement.innerHTML = '<div style="' + this + '"></div>';
    style = String.__parseStyleElement.childNodes[0].style;
  }

  Element.CSS_PROPERTIES.each(function(property){
    if (style[property]) styleRules.set(property, style[property]);
  });

  if (Prototype.Browser.IE && this.include('opacity'))
    styleRules.set('opacity', this.match(/opacity:\s*((?:0|1)?(?:\.\d*)?)/)[1]);

  return styleRules;
};

if (document.defaultView && document.defaultView.getComputedStyle) {
  Element.getStyles = function(element) {
    var css = document.defaultView.getComputedStyle($(element), null);
    return Element.CSS_PROPERTIES.inject({ }, function(styles, property) {
      styles[property] = css[property];
      return styles;
    });
  };
} else {
  Element.getStyles = function(element) {
    element = $(element);
    var css = element.currentStyle, styles;
    styles = Element.CSS_PROPERTIES.inject({ }, function(results, property) {
      results[property] = css[property];
      return results;
    });
    if (!styles.opacity) styles.opacity = element.getOpacity();
    return styles;
  };
}

Effect.Methods = {
  morph: function(element, style) {
    element = $(element);
    new Effect.Morph(element, Object.extend({ style: style }, arguments[2] || { }));
    return element;
  },
  visualEffect: function(element, effect, options) {
    element = $(element);
    var s = effect.dasherize().camelize(), klass = s.charAt(0).toUpperCase() + s.substring(1);
    new Effect[klass](element, options);
    return element;
  },
  highlight: function(element, options) {
    element = $(element);
    new Effect.Highlight(element, options);
    return element;
  }
};

$w('fade appear grow shrink fold blindUp blindDown slideUp slideDown '+
  'pulsate shake puff squish switchOff dropOut').each(
  function(effect) {
    Effect.Methods[effect] = function(element, options){
      element = $(element);
      Effect[effect.charAt(0).toUpperCase() + effect.substring(1)](element, options);
      return element;
    };
  }
);

$w('getInlineOpacity forceRerendering setContentZoom collectTextNodes collectTextNodesIgnoreClass getStyles').each(
  function(f) { Effect.Methods[f] = Element[f]; }
);

Element.addMethods(Effect.Methods);

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/utils/carousel.packed.js */

/*jslint active: false */
/*  Prototype-UI, version trunk
 *
 *  Prototype-UI is freely distributable under the terms of an MIT-style license.
 *  For details, see the PrototypeUI web site: http://www.prototype-ui.com/
 *
 *--------------------------------------------------------------------------*/

if(typeof Prototype == 'undefined')
  throw("Prototype-UI library require Prototype library >= 1.6.0");

if (Prototype.Browser.WebKit) {
  Prototype.Browser.WebKitVersion = parseFloat(navigator.userAgent.match(/AppleWebKit\/([\d\.\+]*)/)[1]);
  Prototype.Browser.Safari2 = (Prototype.Browser.WebKitVersion < 420);
}

if (Prototype.Browser.IE) {
  Prototype.Browser.IEVersion = parseFloat(navigator.appVersion.split(';')[1].strip().split(' ')[1]);
  Prototype.Browser.IE6 =  Prototype.Browser.IEVersion == 6;
  Prototype.Browser.IE7 =  Prototype.Browser.IEVersion == 7;
}

Prototype.falseFunction = function() { return false };
Prototype.trueFunction  = function() { return true  };

/*
Namespace: UI

  Introduction:
    Prototype-UI is a library of user interface components based on the Prototype framework.
    Its aim is to easilly improve user experience in web applications.

    It also provides utilities to help developers.

  Guideline:
    - Prototype conventions are followed
    - Everything should be unobstrusive
    - All components are themable with CSS stylesheets, various themes are provided

  Warning:
    Prototype-UI is still under deep development, this release is targeted to developers only.
    All interfaces are subjects to changes, suggestions are welcome.

    DO NOT use it in production for now.

  Authors:
    - Sébastien Gruhier, <http://www.xilinus.com>
    - Samuel Lebeau, <http://gotfresh.info>
*/

var UI = {
  Abstract: { },
  Ajax: { }
};
Object.extend(Class.Methods, {
  extend: Object.extend.methodize(),

  addMethods: Class.Methods.addMethods.wrap(function(proceed, source) {
    // ensure we are not trying to add null or undefined
    if (!source) return this;

    // no callback, vanilla way
    if (!source.hasOwnProperty('methodsAdded'))
      return proceed(source);

    var callback = source.methodsAdded;
    delete source.methodsAdded;
    proceed(source);
    callback.call(source, this);
    source.methodsAdded = callback;

    return this;
  }),

  addMethod: function(name, lambda) {
    var methods = {};
    methods[name] = lambda;
    return this.addMethods(methods);
  },

  method: function(name) {
    return this.prototype[name].valueOf();
  },

  classMethod: function() {
    $A(arguments).flatten().each(function(method) {
      this[method] = (function() {
        return this[method].apply(this, arguments);
      }).bind(this.prototype);
    }, this);
    return this;
  },

  // prevent any call to this method
  undefMethod: function(name) {
    this.prototype[name] = undefined;
    return this;
  },

  // remove the class' own implementation of this method
  removeMethod: function(name) {
    delete this.prototype[name];
    return this;
  },

  aliasMethod: function(newName, name) {
    this.prototype[newName] = this.prototype[name];
    return this;
  },

  aliasMethodChain: function(target, feature) {
    feature = feature.camelcase();

    this.aliasMethod(target+"Without"+feature, target);
    this.aliasMethod(target, target+"With"+feature);

    return this;
  }
});
Object.extend(Number.prototype, {
  // Snap a number to a grid
  snap: function(round) {
    return parseInt(round == 1 ? this : (this / round).floor() * round);
  }
});
/*
Interface: String

*/

Object.extend(String.prototype, {
  camelcase: function() {
    var string = this.dasherize().camelize();
    return string.charAt(0).toUpperCase() + string.slice(1);
  },

  /*
    Method: makeElement
      toElement is unfortunately already taken :/

      Transforms html string into an extended element or null (when failed)

      > '<li><a href="#">some text</a></li>'.makeElement(); // => LI href#
      > '<img src="foo" id="bar" /><img src="bar" id="bar" />'.makeElement(); // => IMG#foo (first one)

    Returns:
      Extended element

  */
  makeElement: function() {
    var wrapper = new Element('div'); wrapper.innerHTML = this;
    return wrapper.down();
  }
});
Object.extend(Array.prototype, {
  empty: function() {
    return !this.length;
  },

  extractOptions: function() {
    return this.last().constructor === Object ? this.pop() : { };
  },

  removeAt: function(index) {
    var object = this[index];
    this.splice(index, 1);
    return object;
  },

  remove: function(object) {
    var index;
    while ((index = this.indexOf(object)) != -1)
      this.removeAt(index);
    return object;
  },

  insert: function(index) {
    var args = $A(arguments);
    args.shift();
    this.splice.apply(this, [ index, 0 ].concat(args));
    return this;
  }
});
Element.addMethods({
  getScrollDimensions: function(element) {
    return {
      width:  element.scrollWidth,
      height: element.scrollHeight
    }
  },

  getScrollOffset: function(element) {
    return Element._returnOffset(element.scrollLeft, element.scrollTop);
  },

  setScrollOffset: function(element, offset) {
    element = $(element);
    if (arguments.length == 3)
      offset = { left: offset, top: arguments[2] };
    element.scrollLeft = offset.left;
    element.scrollTop  = offset.top;
    return element;
  },

  // returns "clean" numerical style (without "px") or null if style can not be resolved
  // or is not numeric
  getNumStyle: function(element, style) {
    var value = parseFloat($(element).getStyle(style));
    return isNaN(value) ? null : value;
  },

  // by Tobie Langel (http://tobielangel.com/2007/5/22/prototype-quick-tip)
  appendText: function(element, text) {
    element = $(element);
    text = String.interpret(text);
    element.appendChild(document.createTextNode(text));
    return element;
  }
});

document.whenReady = function(callback) {
  if (document.loaded)
    callback.call(document);
  else
    document.observe('dom:loaded', callback);
};

Object.extend(document.viewport, {
  // Alias this method for consistency
  getScrollOffset: document.viewport.getScrollOffsets,

  setScrollOffset: function(offset) {
    Element.setScrollOffset(Prototype.Browser.WebKit ? document.body : document.documentElement, offset);
  },

  getScrollDimensions: function() {
    return Element.getScrollDimensions(Prototype.Browser.WebKit ? document.body : document.documentElement);
  }
});
/*
Interface: UI.Options
  Mixin to handle *options* argument in initializer pattern.

  TODO: find a better example than Circle that use an imaginary Point function,
        this example should be used in tests too.

  It assumes class defines a property called *options*, containing
  default options values.

  Instances hold their own *options* property after a first call to <setOptions>.

  Example:
    > var Circle = Class.create(UI.Options, {
    >
    >   // default options
    >   options: {
    >     radius: 1,
    >     origin: Point(0, 0)
    >   },
    >
    >   // common usage is to call setOptions in initializer
    >   initialize: function(options) {
    >     this.setOptions(options);
    >   }
    > });
    >
    > var circle = new Circle({ origin: Point(1, 4) });
    >
    > circle.options
    > // => { radius: 1, origin: Point(1,4) }

  Accessors:
    There are builtin methods to automatically write options accessors. All those
    methods can take either an array of option names nor option names as arguments.
    Notice that those methods won't override an accessor method if already present.

     * <optionsGetter> creates getters
     * <optionsSetter> creates setters
     * <optionsAccessor> creates both getters and setters

    Common usage is to invoke them on a class to create accessors for all instances
    of this class.
    Invoking those methods on a class has the same effect as invoking them on the class prototype.
    See <classMethod> for more details.

    Example:
    > // Creates getter and setter for the "radius" options of circles
    > Circle.optionsAccessor('radius');
    >
    > circle.setRadius(4);
    > // 4
    >
    > circle.getRadius();
    > // => 4 (circle.options.radius)

  Inheritance support:
    Subclasses can refine default *options* values, after a first instance call on setOptions,
    *options* attribute will hold all default options values coming from the inheritance hierarchy.
*/

(function() {
  UI.Options = {
    methodsAdded: function(klass) {
      klass.classMethod($w(' setOptions allOptions optionsGetter optionsSetter optionsAccessor '));
    },

    // Group: Methods

    /*
      Method: setOptions
        Extends object's *options* property with the given object
    */
    setOptions: function(options) {
      if (!this.hasOwnProperty('options'))
        this.options = this.allOptions();

      this.options = Object.extend(this.options, options || {});
    },

    /*
      Method: allOptions
        Computes the complete default options hash made by reverse extending all superclasses
        default options.

        > Widget.prototype.allOptions();
    */
    allOptions: function() {
      var superclass = this.constructor.superclass, ancestor = superclass && superclass.prototype;
      return (ancestor && ancestor.allOptions) ?
          Object.extend(ancestor.allOptions(), this.options) :
          Object.clone(this.options);
    },

    /*
      Method: optionsGetter
        Creates default getters for option names given as arguments.
        With no argument, creates getters for all option names.
    */
    optionsGetter: function() {
      addOptionsAccessors(this, arguments, false);
    },

    /*
      Method: optionsSetter
        Creates default setters for option names given as arguments.
        With no argument, creates setters for all option names.
    */
    optionsSetter: function() {
      addOptionsAccessors(this, arguments, true);
    },

    /*
      Method: optionsAccessor
        Creates default getters/setters for option names given as arguments.
        With no argument, creates accessors for all option names.
    */
    optionsAccessor: function() {
      this.optionsGetter.apply(this, arguments);
      this.optionsSetter.apply(this, arguments);
    }
  };

  // Internal
  function addOptionsAccessors(receiver, names, areSetters) {
    names = $A(names).flatten();

    if (names.empty())
      names = Object.keys(receiver.allOptions());

    names.each(function(name) {
      var accessorName = (areSetters ? 'set' : 'get') + name.camelcase();

      receiver[accessorName] = receiver[accessorName] || (areSetters ?
        // Setter
        function(value) { return this.options[name] = value } :
        // Getter
        function()      { return this.options[name]         });
    });
  }
})();
/*
  Class: UI.Carousel

  Main class to handle a carousel of elements in a page. A carousel :
    * could be vertical or horizontal
    * works with liquid layout
    * is designed by CSS

  Assumptions:
    * Elements should be from the same size

  Example:
    > ...
    > <div id="horizontal_carousel">
    >   <div class="previous_button"></div>
    >   <div class="container">
    >     <ul>
    >       <li> What ever you like</li>
    >     </ul>
    >   </div>
    >   <div class="next_button"></div>
    > </div>
    > <script>
    > new UI.Carousel("horizontal_carousel");
    > </script>
    > ...
*/
UI.Carousel = Class.create(UI.Options, {
  // Group: Options
  options: {
	// Property: direction
	//   Can be horizontal or vertical, horizontal by default
    direction               : "horizontal",

    // Property: previousButton
    //   Selector of previous button inside carousel element, ".previous_button" by default,
    //   set it to false to ignore previous button
    previousButton          : ".previous_button",

    // Property: nextButton
    //   Selector of next button inside carousel element, ".next_button" by default,
    //   set it to false to ignore next button
    nextButton              : ".next_button",

    // Property: container
    //   Selector of carousel container inside carousel element, ".container" by default,
    container               : ".container",

    // Property: scrollInc
    //   Define the maximum number of elements that gonna scroll each time, auto by default
    scrollInc               : "auto",

    // Property: disabledButtonSuffix
    //   Define the suffix classanme used when a button get disabled, to '_disabled' by default
    //   Previous button classname will be previous_button_disabled
    disabledButtonSuffix : '_disabled',

    // Property: overButtonSuffix
    //   Define the suffix classanme used when a button has a rollover status, '_over' by default
    //   Previous button classname will be previous_button_over
    overButtonSuffix : '_over'
  },

  /*
    Group: Attributes

      Property: element
        DOM element containing the carousel

      Property: id
        DOM id of the carousel's element

      Property: container
        DOM element containing the carousel's elements

      Property: elements
        Array containing the carousel's elements as DOM elements

      Property: previousButton
        DOM id of the previous button

      Property: nextButton
        DOM id of the next button

      Property: posAttribute
        Define if the positions are from left or top

      Property: dimAttribute
        Define if the dimensions are horizontal or vertical

      Property: elementSize
        Size of each element, it's an integer

      Property: nbVisible
        Number of visible elements, it's a float

      Property: animating
        Define whether the carousel is in animation or not
  */

  /*
    Group: Events
      List of events fired by a carousel

      Notice: Carousel custom events are automatically namespaced in "carousel:" (see Prototype custom events).

      Examples:
        This example will observe all carousels
        > document.observe('carousel:scroll:ended', function(event) {
        >   alert("Carousel with id " + event.memo.carousel.id + " has just been scrolled");
        > });

        This example will observe only this carousel
        > new UI.Carousel('horizontal_carousel').observe('scroll:ended', function(event) {
        >   alert("Carousel with id " + event.memo.carousel.id + " has just been scrolled");
        > });

      Property: previousButton:enabled
        Fired when the previous button has just been enabled

      Property: previousButton:disabled
        Fired when the previous button has just been disabled

      Property: nextButton:enabled
        Fired when the next button has just been enabled

      Property: nextButton:disabled
        Fired when the next button has just been disabled

      Property: scroll:started
        Fired when a scroll has just started

      Property: scroll:ended
        Fired when a scroll has been done,
        memo.shift = number of elements scrolled, it's a float

      Property: sizeUpdated
        Fired when the carousel size has just been updated.
        Tips: memo.carousel.currentSize() = the new carousel size
  */

  // Group: Constructor

  /*
    Method: initialize
      Constructor function, should not be called directly

    Parameters:
      element - DOM element
      options - (Hash) list of optional parameters

    Returns:
      this
  */
  initialize: function(element, options) {
    this.setOptions(options);
    this.element = $(element);
    this.id = this.element.id;
    this.container   = this.element.down(this.options.container).firstDescendant();
    this.elements    = this.container.childElements();
    this.previousButton = this.options.previousButton == false ? null : this.element.down(this.options.previousButton);
    this.nextButton = this.options.nextButton == false ? null : this.element.down(this.options.nextButton);

    this.posAttribute = (this.options.direction == "horizontal" ? "left" : "top");
    this.dimAttribute = (this.options.direction == "horizontal" ? "width" : "height");

    this.elementSize = this.computeElementSize();
    this.nbVisible = this.currentSize() / this.elementSize;

    var scrollInc = this.options.scrollInc;
    if (scrollInc == "auto")
      scrollInc = Math.floor(this.nbVisible);
    [ this.previousButton, this.nextButton ].each(function(button) {
      if (!button) return;
      var className = (button == this.nextButton ? "next_button" : "previous_button") + this.options.overButtonSuffix;
      button.clickHandler = this.scroll.bind(this, (button == this.nextButton ? -1 : 1) * scrollInc * this.elementSize);
      button.observe("click", button.clickHandler)
            .observe("mouseover", function() {button.addClassName(className)}.bind(this))
            .observe("mouseout",  function() {button.removeClassName(className)}.bind(this));
    }, this);
    this.updateButtons();
  },

  // Group: Destructor

  /*
    Method: destroy
      Cleans up DOM and memory
  */
  destroy: function($super) {
    [ this.previousButton, this.nextButton ].each(function(button) {
      if (!button) return;
        button.stopObserving("click", button.clickHandler);
    }, this);
	  this.element.remove();
	  this.fire('destroyed');
  },

  // Group: Event handling

  /*
    Method: fire
      Fires a carousel custom event automatically namespaced in "carousel:" (see Prototype custom events).
      The memo object contains a "carousel" property referring to the carousel.

    Example:
      > document.observe('carousel:scroll:ended', function(event) {
      >   alert("Carousel with id " + event.memo.carousel.id + " has just been scrolled");
      > });

    Parameters:
      eventName - an event name
      memo      - a memo object

    Returns:
      fired event
  */
  fire: function(eventName, memo) {
    memo = memo || { };
    memo.carousel = this;
    return this.element.fire('carousel:' + eventName, memo);
  },

  /*
    Method: observe
      Observe a carousel event with a handler function automatically bound to the carousel

    Parameters:
      eventName - an event name
      handler   - a handler function

    Returns:
      this
  */
  observe: function(eventName, handler) {
    this.element.observe('carousel:' + eventName, handler.bind(this));
    return this;
  },

  /*
    Method: stopObserving
      Unregisters a carousel event, it must take the same parameters as this.observe (see Prototype stopObserving).

    Parameters:
      eventName - an event name
      handler   - a handler function

    Returns:
      this
  */
  stopObserving: function(eventName, handler) {
	  this.element.stopObserving('carousel:' + eventName, handler);
	  return this;
  },

  // Group: Actions

  /*
    Method: checkScroll
      Check scroll position to avoid unused space at right or bottom

    Parameters:
      position       - position to check
      updatePosition - should the container position be updated ? true/false

    Returns:
      position
  */
  checkScroll: function(position, updatePosition) {
    if (position > 0)
      position = 0;
    else {
      var limit = this.elements.last().positionedOffset()[this.posAttribute] + this.elementSize;
      var carouselSize = this.currentSize();

      if (position + limit < carouselSize)
        position += carouselSize - (position + limit);
      position = Math.min(position, 0);
    }
    if (updatePosition)
      this.container.style[this.posAttribute] = position + "px";

    return position;
  },

  /*
    Method: scroll
      Scrolls carousel from maximum deltaPixel

    Parameters:
      deltaPixel - a float

    Returns:
      this
  */
  scroll: function(deltaPixel) {
    if (this.animating)
      return this;

    // Compute new position
    var position =  this.currentPosition() + deltaPixel;

    // Check bounds
    position = this.checkScroll(position, false);

    // Compute shift to apply
    deltaPixel = position - this.currentPosition();
    if (deltaPixel != 0) {
      this.animating = true;
      this.fire("scroll:started");

      var that = this;
      // Move effects
      this.container.morph("opacity:0.5", {duration: 0.2, afterFinish: function() {
        that.container.morph(that.posAttribute + ": " + position + "px", {
          duration: 0.4,
          delay: 0.2,
          afterFinish: function() {
            that.container.morph("opacity:1", {
              duration: 0.2,
              afterFinish: function() {
                that.animating = false;
                that.updateButtons()
                  .fire("scroll:ended", { shift: deltaPixel / that.currentSize() });
              }
            });
          }
        });
      }});
    }
    return this;
  },

  /*
    Method: scrollTo
      Scrolls carousel, so that element with specified index is the left-most.
      This method is convenient when using carousel in a tabbed navigation.
      Clicking on first tab should scroll first container into view, clicking on a fifth - fifth one, etc.
      Indexing starts with 0.

    Parameters:
      Index of an element which will be a left-most visible in the carousel

    Returns:
      this
  */
  scrollTo: function(index) {
    if (this.animating || index < 0 || index > this.elements.length || index == this.currentIndex() || isNaN(parseInt(index)))
      return this;
    return this.scroll((this.currentIndex() - index) * this.elementSize);
  },

  /*
    Method: updateButtons
      Update buttons status to enabled or disabled
      Them status is defined by classNames and fired as carousel's custom events

    Returns:
      this
  */
  updateButtons: function() {
	  this.updatePreviousButton();
    this.updateNextButton();
    return this;
  },

  updatePreviousButton: function() {
    var position = this.currentPosition();
    var previousClassName = "previous_button" + this.options.disabledButtonSuffix;

    if (this.previousButton.hasClassName(previousClassName) && position != 0) {
      this.previousButton.removeClassName(previousClassName);
      this.fire('previousButton:enabled');
    }
    if (!this.previousButton.hasClassName(previousClassName) && position == 0) {
	    this.previousButton.addClassName(previousClassName);
      this.fire('previousButton:disabled');
    }
  },

  updateNextButton: function() {
    var lastPosition = this.currentLastPosition();
    var size = this.currentSize();
    var nextClassName = "next_button" + this.options.disabledButtonSuffix;

    if (this.nextButton.hasClassName(nextClassName) && lastPosition != size) {
      this.nextButton.removeClassName(nextClassName);
      this.fire('nextButton:enabled');
    }
    if (!this.nextButton.hasClassName(nextClassName) && lastPosition == size) {
	    this.nextButton.addClassName(nextClassName);
      this.fire('nextButton:disabled');
    }
  },

  // Group: Size and Position

  /*
    Method: computeElementSize
      Return elements size in pixel, height or width depends on carousel orientation.

    Returns:
      an integer value
  */
  computeElementSize: function() {
    return this.elements.first().getDimensions()[this.dimAttribute];
  },

  /*
    Method: currentIndex
      Returns current visible index of a carousel.
      For example, a horizontal carousel with image #3 on left will return 3 and with half of image #3 will return 3.5
      Don't forget that the first image have an index 0

    Returns:
      a float value
  */
  currentIndex: function() {
    return - this.currentPosition() / this.elementSize;
  },

  /*
    Method: currentLastPosition
      Returns the current position from the end of the last element. This value is in pixel.

    Returns:
      an integer value, if no images a present it will return 0
  */
  currentLastPosition: function() {
    if (this.container.childElements().empty())
      return 0;
    return this.currentPosition() +
           this.elements.last().positionedOffset()[this.posAttribute] +
           this.elementSize;
  },

  /*
    Method: currentPosition
      Returns the current position in pixel.
      Tips: To get the position in elements use currentIndex()

    Returns:
      an integer value
  */
  currentPosition: function() {
    return this.container.getNumStyle(this.posAttribute);
  },

  /*
    Method: currentSize
      Returns the current size of the carousel in pixel

    Returns:
      Carousel's size in pixel
  */
  currentSize: function() {
    return this.container.parentNode.getDimensions()[this.dimAttribute];
  },

  /*
    Method: updateSize
      Should be called if carousel size has been changed (usually called with a liquid layout)

    Returns:
      this
  */
  updateSize: function() {
    this.nbVisible = this.currentSize() / this.elementSize;
    var scrollInc = this.options.scrollInc;
    if (scrollInc == "auto")
      scrollInc = Math.floor(this.nbVisible);

    [ this.previousButton, this.nextButton ].each(function(button) {
      if (!button) return;
      button.stopObserving("click", button.clickHandler);
      button.clickHandler = this.scroll.bind(this, (button == this.nextButton ? -1 : 1) * scrollInc * this.elementSize);
      button.observe("click", button.clickHandler);
    }, this);

    this.checkScroll(this.currentPosition(), true);
    this.updateButtons().fire('sizeUpdated');
    return this;
  }
});
/*
  Class: UI.Ajax.Carousel

  Gives the AJAX power to carousels. An AJAX carousel :
    * Use AJAX to add new elements on the fly

  Example:
    > new UI.Ajax.Carousel("horizontal_carousel",
    >   {url: "get-more-elements", elementSize: 250});
*/
UI.Ajax.Carousel = Class.create(UI.Carousel, {
  // Group: Options
  //
  //   Notice:
  //     It also include of all carousel's options
  options: {
	// Property: elementSize
	//   Required, it define the size of all elements
    elementSize : -1,

	// Property: url
	//   Required, it define the URL used by AJAX carousel to request new elements details
    url         : null
  },

  /*
    Group: Attributes

      Notice:
        It also include of all carousel's attributes

      Property: elementSize
        Size of each elements, it's an integer

      Property: endIndex
        Index of the last loaded element

      Property: hasMore
        Flag to define if there's still more elements to load

      Property: requestRunning
        Define whether a request is processing or not

      Property: updateHandler
        Callback to update carousel, usually used after request success

      Property: url
        URL used to request additional elements
  */

  /*
    Group: Events
      List of events fired by an AJAX carousel, it also include of all carousel's custom events

      Property: request:started
        Fired when the request has just started

      Property: request:ended
        Fired when the request has succeed
  */

  // Group: Constructor

  /*
    Method: initialize
      Constructor function, should not be called directly

    Parameters:
      element - DOM element
      options - (Hash) list of optional parameters

    Returns:
      this
  */
  initialize: function($super, element, options) {
    if (!options.url)
      throw("url option is required for UI.Ajax.Carousel");
    if (!options.elementSize)
      throw("elementSize option is required for UI.Ajax.Carousel");

    $super(element, options);

    this.endIndex = 0;
    this.hasMore  = true;

    // Cache handlers
    this.updateHandler = this.update.bind(this);
    this.updateAndScrollHandler = function(nbElements, transport, json) {
	    this.update(transport, json);
	    this.scroll(nbElements);
	  }.bind(this);

    // Run first ajax request to fill the carousel
    this.runRequest.bind(this).defer({parameters: {from: 0, to: Math.ceil(this.nbVisible) - 1}, onSuccess: this.updateHandler});
  },

  // Group: Actions

  /*
    Method: runRequest
      Request the new elements details

    Parameters:
      options - (Hash) list of optional parameters

    Returns:
      this
  */
  runRequest: function(options) {
    this.requestRunning = true;
    new Ajax.Request(this.options.url, Object.extend({method: "GET"}, options));
    this.fire("request:started");
    return this;
  },

  /*
    Method: scroll
      Scrolls carousel from maximum deltaPixel

    Parameters:
      deltaPixel - a float

    Returns:
      this
  */
  scroll: function($super, deltaPixel) {
    if (this.animating || this.requestRunning)
      return this;

    var nbElements = (-deltaPixel) / this.elementSize;
    // Check if there is not enough
    if (this.hasMore && nbElements > 0 && this.currentIndex() + this.nbVisible + nbElements - 1 > this.endIndex) {
      var from = this.endIndex + 1;
      var to   = Math.ceil(from + this.nbVisible - 1);
      this.runRequest({parameters: {from: from, to: to}, onSuccess: this.updateAndScrollHandler.curry(deltaPixel).bind(this)});
      return this;
    }
    else
      $super(deltaPixel);
  },

  /*
    Method: update
      Update the carousel

    Parameters:
      transport - XMLHttpRequest object
      json      - JSON object

    Returns:
      this
  */
  update: function(transport, json) {
    this.requestRunning = false;
    this.fire("request:ended");
    if (!json)
      json = transport.responseJSON;
    this.hasMore = json.more;

    this.endIndex = Math.max(this.endIndex, json.to);
    this.elements = this.container.insert({bottom: json.html}).childElements();
    return this.updateButtons();
  },

  // Group: Size and Position

  /*
    Method: computeElementSize
      Return elements size in pixel

    Returns:
      an integer value
  */
  computeElementSize: function() {
    return this.options.elementSize;
  },

  /*
    Method: updateSize
      Should be called if carousel size has been changed (usually called with a liquid layout)

    Returns:
      this
  */
  updateSize: function($super) {
    var nbVisible = this.nbVisible;
    $super();
    // If we have enough space for at least a new element
    if (Math.floor(this.nbVisible) - Math.floor(nbVisible) >= 1 && this.hasMore) {
      if (this.currentIndex() + Math.floor(this.nbVisible) >= this.endIndex) {
        var nbNew = Math.floor(this.currentIndex() + Math.floor(this.nbVisible) - this.endIndex);
        this.runRequest({parameters: {from: this.endIndex + 1, to: this.endIndex + nbNew}, onSuccess: this.updateHandler});
      }
    }
    return this;
  },

  updateNextButton: function($super) {
    var lastPosition = this.currentLastPosition();
    var size = this.currentSize();
    var nextClassName = "next_button" + this.options.disabledButtonSuffix;

    if (this.nextButton.hasClassName(nextClassName) && lastPosition != size) {
      this.nextButton.removeClassName(nextClassName);
      this.fire('nextButton:enabled');
    }
    if (!this.nextButton.hasClassName(nextClassName) && lastPosition == size && !this.hasMore) {
	    this.nextButton.addClassName(nextClassName);
      this.fire('nextButton:disabled');
    }
  }
});
/*jslint active: true */

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/utils/javacrypt.js */
/*jslint active: false */
/*
 **************************************************************
 *                                                             *
 *      JAVACRYPT: CLIENT-SIDE crypt(3) USING JAVASCRIPT       *
 *                                                             *
 ***************************************************************
 *                                                             *
 *  This Javascript allows you to calculate the encrypted      *
 *  password generated by the UNIX function crypt(3) on your   *
 *  computer without using an online script in PHP, PERL,      *
 *  shell, or any other server-side script.  The only changes  *
 *  you need make in this are in function dP(), which is right *
 *  below the end of this comment.  Refer to the directions    *
 *  there for details.                                         *
 *                                                             *
 *  I wish I could take full credit for this script, but there *
 *  are several people who deserve most of the credit          *
 *                                                             *
 *  First and foremost, I thank John F. Dumas for writing      *
 *  jcrypt.java, a Java-based implementation of crypt(3) and   *
 *  from which this Javascript is heavily based (actually, I   *
 *  just did a direct port from his code, using Sun's tutorial *
 *  and my knowledge of Javascript).  I additionally thank     *
 *  Eric Young for writing the C code off which Dumas based    *
 *  his script.  Finally, thanks goes to the original writers  *
 *  of crypt(3), whoever they are.                             *
 *                                                             *
 *  If you have questions, I suggest you ask John Dumas about  *
 *  them, as I have no real idea what any of this code does.   *
 *  Base the questions off his source code, as Javascript and  *
 *  Java are (in basic operators) nearly identical.            *
 *                                                             *
 *  jcrypt.java source code can be found at:                   *
 *  http://locutus.kingwoodcable.com/jfd/crypt.html            *
 *                                                             *
 ***************************************************************/

function dP(salt, passwd){
	pw_salt=this.crypt(salt, passwd);
	return pw_salt[0];
}

function bTU(b){
      value=Math.floor(b);
      return (value>=0?value:value+256);
}
function fBTI(b,offset){
      value=this.byteToUnsigned(b[offset++]);
      value|=(this.byteToUnsigned(b[offset++])<<8);
      value|=(this.byteToUnsigned(b[offset++])<<16);
      value|=(this.byteToUnsigned(b[offset++])<<24);
      return value;
}
function iTFB(iValue,b,offset){
      b[offset++]=((iValue)&0xff);
      b[offset++]=((iValue>>>8)&0xff);
      b[offset++]=((iValue>>>16)&0xff);
      b[offset++]=((iValue>>>24)&0xff);
}
function P_P(a,b,n,m,results){
      t=((a>>>n)^b)&m;
      a^=t<<n;
      b^=t;
      results[0]=a;
      results[1]=b;
}
function H_P(a,n,m){
      t=((a<<(16-n))^a)&m;
      a=a^t^(t>>>(16-n));
      return a;
}
function d_s_k(key){
      schedule=new Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
      c=this.fourBytesToInt(key,0);
      d=this.fourBytesToInt(key,4);
      results=new Array(0,0);
      this.PERM_OP(d,c,4,0x0f0f0f0f,results);
      d=results[0];c=results[1];
      c=this.HPERM_OP(c,-2,0xcccc0000);
      d=this.HPERM_OP(d,-2,0xcccc0000);
      this.PERM_OP(d,c,1,0x55555555,results);
      d=results[0];c=results[1];
      this.PERM_OP(c,d,8,0x00ff00ff,results);
      c=results[0];d=results[1];
      this.PERM_OP(d,c,1,0x55555555,results);
      d=results[0];c=results[1];
      d=(((d&0x000000ff)<<16)|(d&0x0000ff00)|((d&0x00ff0000)>>>16)|((c&0xf0000000)>>>4));
      c&=0x0fffffff;
      s=0;t=0;
      j=0;
      for(i=0;i<this.ITERATIONS;i++){
         if(this.shifts2[i]){
            c=(c>>>2)|(c<<26);
            d=(d>>>2)|(d<<26);
         }else{
            c=(c>>>1)|(c<<27);
            d=(d>>>1)|(d<<27);
         }
         c&=0x0fffffff;
         d&=0x0fffffff;
         s=	this.skb[0][c&0x3f] | 
		this.skb[1][((c>>>6)&0x03)|((c>>>7)&0x3c)] | 
		this.skb[2][((c>>>13)&0x0f)|((c>>>14)&0x30)] | 
		this.skb[3][((c>>>20)&0x01)|((c>>>21)&0x06)|((c>>>22)&0x38)];

         t=	this.skb[4][d&0x3f] |
		this.skb[5][((d>>>7)&0x03)|((d>>>8)&0x3c)] |
		this.skb[6][(d>>>15)&0x3f] |
		this.skb[7][((d>>>21)&0x0f)|((d>>>22)&0x30)];

         schedule[j++]=((t<< 16)|(s&0x0000ffff))&0xffffffff;
         s=((s>>>16)|(t&0xffff0000));
         s=(s<<4)|(s>>>28);
         schedule[j++]=s&0xffffffff;
      }
      return schedule;
}
function D_E(L,R,S,E0,E1,s){
      v=R^(R>>>16);
      u=v&E0;
      v=v&E1;
      u=(u^(u<<16))^R^s[S];
      t=(v^(v<<16))^R^s[S+1];
      t=(t>>>4)|(t<<28);
      L^=	this.SPtrans[1][t&0x3f] |
		this.SPtrans[3][(t>>>8)&0x3f] |
		this.SPtrans[5][(t>>>16)&0x3f] |
		this.SPtrans[7][(t>>>24)&0x3f] |
		this.SPtrans[0][u&0x3f] |
		this.SPtrans[2][(u>>>8)&0x3f] |
		this.SPtrans[4][(u>>>16)&0x3f] |
		this.SPtrans[6][(u>>>24)&0x3f];
      return L;
}
function bdy(schedule,Eswap0,Eswap1) {
	left=0;
	right=0;
	t=0;
      for(j=0;j<25;j++){
         for(i=0;i<this.ITERATIONS*2;i+=4){
            left=this.D_ENCRYPT(left, right,i,Eswap0,Eswap1,schedule);
            right=this.D_ENCRYPT(right,left,i+2,Eswap0,Eswap1,schedule);
         }
         t=left; 
         left=right; 
         right=t;
      }
      t=right;
      right=(left>>>1)|(left<<31);
      left=(t>>>1)|(t<<31);
      left&=0xffffffff;
      right&=0xffffffff;
      results=new Array(0,0);
      this.PERM_OP(right,left,1,0x55555555,results); 
      right=results[0];left=results[1];
      this.PERM_OP(left,right,8,0x00ff00ff,results); 
      left=results[0];right=results[1];
      this.PERM_OP(right,left,2,0x33333333,results); 
      right=results[0];left=results[1];
      this.PERM_OP(left,right,16,0x0000ffff,results);
      left=results[0];right=results[1];
      this.PERM_OP(right,left,4,0x0f0f0f0f,results);
      right=results[0];left=results[1];
      out=new Array(0,0);
      out[0]=left;out[1]=right;
      return out;
}
function rC() {
	return this.GOODCHARS[Math.floor(64*Math.random())]; 
}

function cript(salt,original){
	if(salt.length>=2) 
		salt=salt.substring(0,2);

	while(salt.length<2) 
		salt+=this.randChar();

	re=new RegExp("[^./a-zA-Z0-9]","g");
	if(re.test(salt)) 
		salt=this.randChar()+this.randChar();
	
	charZero=salt.charAt(0)+'';
	charOne=salt.charAt(1)+'';
	ccZ=charZero.charCodeAt(0);
	ccO=charOne.charCodeAt(0);
	buffer=charZero+charOne+"           ";
	Eswap0=this.con_salt[ccZ];
	Eswap1=this.con_salt[ccO]<<4;
	key=new Array(0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0);
	
	for(i=0;i<key.length&&i<original.length;i++){
		iChar=original.charCodeAt(i);
		key[i]=iChar<<1;
	}
	
	schedule=this.des_set_key(key);
	out=this.body(schedule,Eswap0,Eswap1);
	b=new Array(0,0,0,0,0,0,0,0,0);
	this.intToFourBytes(out[0],b,0);
	this.intToFourBytes(out[1],b,4);
	b[8]=0;

	for(i=2,y=0,u=0x80;i<13;i++){
		for(j=0,c=0;j<6;j++) {
			c<<=1;
			if((b[y]&u)!=0) 
				c|=1;
            		u>>>=1;
			if(u==0){
				y++;
				u=0x80;
			}
			buffer=buffer.substring(0,i)+String.fromCharCode(this.cov_2char[c])+buffer.substring(i+1,buffer.length);
		}
      	}
	ret=new Array(buffer,salt);
	return ret;
}

function Crypt() {
this.ITERATIONS=16;
this.GOODCHARS=new Array(
	".","/","0","1","2","3","4","5","6","7",
	"8","9","A","B","C","D","E","F","G","H",
	"I","J","K","L","M","N","O","P","Q","R",
	"S","T","U","V","W","X","Y","Z","a","b",
	"c","d","e","f","g","h","i","j","k","l",
	"m","n","o","p","q","r","s","t","u","v",
	"w","x","y","z");
this.con_salt=new Array(
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
      0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01, 
      0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09, 
      0x0A,0x0B,0x05,0x06,0x07,0x08,0x09,0x0A, 
      0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12, 
      0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A, 
      0x1B,0x1C,0x1D,0x1E,0x1F,0x20,0x21,0x22, 
      0x23,0x24,0x25,0x20,0x21,0x22,0x23,0x24, 
      0x25,0x26,0x27,0x28,0x29,0x2A,0x2B,0x2C, 
      0x2D,0x2E,0x2F,0x30,0x31,0x32,0x33,0x34, 
      0x35,0x36,0x37,0x38,0x39,0x3A,0x3B,0x3C, 
      0x3D,0x3E,0x3F,0x00,0x00,0x00,0x00,0x00 );
this.shifts2=new Array(
	false,false,true,true,true,true,true,true,
	false,true, true,true,true,true,true,false );
this.skb=new Array(0,0,0,0,0,0,0,0);
	this.skb[0]=new Array(
         0x00000000,0x00000010,0x20000000,0x20000010, 
         0x00010000,0x00010010,0x20010000,0x20010010, 
         0x00000800,0x00000810,0x20000800,0x20000810, 
         0x00010800,0x00010810,0x20010800,0x20010810, 
         0x00000020,0x00000030,0x20000020,0x20000030, 
         0x00010020,0x00010030,0x20010020,0x20010030, 
         0x00000820,0x00000830,0x20000820,0x20000830, 
         0x00010820,0x00010830,0x20010820,0x20010830, 
         0x00080000,0x00080010,0x20080000,0x20080010, 
         0x00090000,0x00090010,0x20090000,0x20090010, 
         0x00080800,0x00080810,0x20080800,0x20080810, 
         0x00090800,0x00090810,0x20090800,0x20090810, 
         0x00080020,0x00080030,0x20080020,0x20080030, 
         0x00090020,0x00090030,0x20090020,0x20090030, 
         0x00080820,0x00080830,0x20080820,0x20080830, 
         0x00090820,0x00090830,0x20090820,0x20090830 );
	this.skb[1]=new Array(
         0x00000000,0x02000000,0x00002000,0x02002000, 
         0x00200000,0x02200000,0x00202000,0x02202000, 
         0x00000004,0x02000004,0x00002004,0x02002004, 
         0x00200004,0x02200004,0x00202004,0x02202004, 
         0x00000400,0x02000400,0x00002400,0x02002400, 
         0x00200400,0x02200400,0x00202400,0x02202400, 
         0x00000404,0x02000404,0x00002404,0x02002404, 
         0x00200404,0x02200404,0x00202404,0x02202404, 
         0x10000000,0x12000000,0x10002000,0x12002000, 
         0x10200000,0x12200000,0x10202000,0x12202000, 
         0x10000004,0x12000004,0x10002004,0x12002004, 
         0x10200004,0x12200004,0x10202004,0x12202004, 
         0x10000400,0x12000400,0x10002400,0x12002400, 
         0x10200400,0x12200400,0x10202400,0x12202400, 
         0x10000404,0x12000404,0x10002404,0x12002404, 
         0x10200404,0x12200404,0x10202404,0x12202404 );
	this.skb[2]=new Array(
         0x00000000,0x00000001,0x00040000,0x00040001, 
         0x01000000,0x01000001,0x01040000,0x01040001, 
         0x00000002,0x00000003,0x00040002,0x00040003, 
         0x01000002,0x01000003,0x01040002,0x01040003, 
         0x00000200,0x00000201,0x00040200,0x00040201, 
         0x01000200,0x01000201,0x01040200,0x01040201, 
         0x00000202,0x00000203,0x00040202,0x00040203, 
         0x01000202,0x01000203,0x01040202,0x01040203, 
         0x08000000,0x08000001,0x08040000,0x08040001, 
         0x09000000,0x09000001,0x09040000,0x09040001, 
         0x08000002,0x08000003,0x08040002,0x08040003, 
         0x09000002,0x09000003,0x09040002,0x09040003, 
         0x08000200,0x08000201,0x08040200,0x08040201, 
         0x09000200,0x09000201,0x09040200,0x09040201, 
         0x08000202,0x08000203,0x08040202,0x08040203, 
         0x09000202,0x09000203,0x09040202,0x09040203 );
	this.skb[3]=new Array(
         0x00000000,0x00100000,0x00000100,0x00100100, 
         0x00000008,0x00100008,0x00000108,0x00100108, 
         0x00001000,0x00101000,0x00001100,0x00101100, 
         0x00001008,0x00101008,0x00001108,0x00101108, 
         0x04000000,0x04100000,0x04000100,0x04100100, 
         0x04000008,0x04100008,0x04000108,0x04100108, 
         0x04001000,0x04101000,0x04001100,0x04101100, 
         0x04001008,0x04101008,0x04001108,0x04101108, 
         0x00020000,0x00120000,0x00020100,0x00120100, 
         0x00020008,0x00120008,0x00020108,0x00120108, 
         0x00021000,0x00121000,0x00021100,0x00121100, 
         0x00021008,0x00121008,0x00021108,0x00121108, 
         0x04020000,0x04120000,0x04020100,0x04120100, 
         0x04020008,0x04120008,0x04020108,0x04120108, 
         0x04021000,0x04121000,0x04021100,0x04121100, 
         0x04021008,0x04121008,0x04021108,0x04121108 );
	this.skb[4]=new Array(
         0x00000000,0x10000000,0x00010000,0x10010000, 
         0x00000004,0x10000004,0x00010004,0x10010004, 
         0x20000000,0x30000000,0x20010000,0x30010000, 
         0x20000004,0x30000004,0x20010004,0x30010004, 
         0x00100000,0x10100000,0x00110000,0x10110000, 
         0x00100004,0x10100004,0x00110004,0x10110004, 
         0x20100000,0x30100000,0x20110000,0x30110000, 
         0x20100004,0x30100004,0x20110004,0x30110004, 
         0x00001000,0x10001000,0x00011000,0x10011000, 
         0x00001004,0x10001004,0x00011004,0x10011004, 
         0x20001000,0x30001000,0x20011000,0x30011000, 
         0x20001004,0x30001004,0x20011004,0x30011004, 
         0x00101000,0x10101000,0x00111000,0x10111000, 
         0x00101004,0x10101004,0x00111004,0x10111004, 
         0x20101000,0x30101000,0x20111000,0x30111000, 
         0x20101004,0x30101004,0x20111004,0x30111004 );
	this.skb[5]=new Array(
         0x00000000,0x08000000,0x00000008,0x08000008, 
         0x00000400,0x08000400,0x00000408,0x08000408, 
         0x00020000,0x08020000,0x00020008,0x08020008, 
         0x00020400,0x08020400,0x00020408,0x08020408, 
         0x00000001,0x08000001,0x00000009,0x08000009, 
         0x00000401,0x08000401,0x00000409,0x08000409, 
         0x00020001,0x08020001,0x00020009,0x08020009, 
         0x00020401,0x08020401,0x00020409,0x08020409, 
         0x02000000,0x0A000000,0x02000008,0x0A000008, 
         0x02000400,0x0A000400,0x02000408,0x0A000408, 
         0x02020000,0x0A020000,0x02020008,0x0A020008, 
         0x02020400,0x0A020400,0x02020408,0x0A020408, 
         0x02000001,0x0A000001,0x02000009,0x0A000009, 
         0x02000401,0x0A000401,0x02000409,0x0A000409, 
         0x02020001,0x0A020001,0x02020009,0x0A020009, 
         0x02020401,0x0A020401,0x02020409,0x0A020409 );
	this.skb[6]=new Array(
         0x00000000,0x00000100,0x00080000,0x00080100, 
         0x01000000,0x01000100,0x01080000,0x01080100, 
         0x00000010,0x00000110,0x00080010,0x00080110, 
         0x01000010,0x01000110,0x01080010,0x01080110, 
         0x00200000,0x00200100,0x00280000,0x00280100, 
         0x01200000,0x01200100,0x01280000,0x01280100, 
         0x00200010,0x00200110,0x00280010,0x00280110, 
         0x01200010,0x01200110,0x01280010,0x01280110, 
         0x00000200,0x00000300,0x00080200,0x00080300, 
         0x01000200,0x01000300,0x01080200,0x01080300, 
         0x00000210,0x00000310,0x00080210,0x00080310, 
         0x01000210,0x01000310,0x01080210,0x01080310, 
         0x00200200,0x00200300,0x00280200,0x00280300, 
         0x01200200,0x01200300,0x01280200,0x01280300, 
         0x00200210,0x00200310,0x00280210,0x00280310, 
         0x01200210,0x01200310,0x01280210,0x01280310 );
	this.skb[7]=new Array(
         0x00000000,0x04000000,0x00040000,0x04040000, 
         0x00000002,0x04000002,0x00040002,0x04040002, 
         0x00002000,0x04002000,0x00042000,0x04042000, 
         0x00002002,0x04002002,0x00042002,0x04042002, 
         0x00000020,0x04000020,0x00040020,0x04040020, 
         0x00000022,0x04000022,0x00040022,0x04040022, 
         0x00002020,0x04002020,0x00042020,0x04042020, 
         0x00002022,0x04002022,0x00042022,0x04042022, 
         0x00000800,0x04000800,0x00040800,0x04040800, 
         0x00000802,0x04000802,0x00040802,0x04040802, 
         0x00002800,0x04002800,0x00042800,0x04042800, 
         0x00002802,0x04002802,0x00042802,0x04042802, 
         0x00000820,0x04000820,0x00040820,0x04040820, 
         0x00000822,0x04000822,0x00040822,0x04040822, 
         0x00002820,0x04002820,0x00042820,0x04042820, 
         0x00002822,0x04002822,0x00042822,0x04042822 );
this.SPtrans=new Array(0,0,0,0,0,0,0,0);
	this.SPtrans[0]=new Array(
         0x00820200,0x00020000,0x80800000,0x80820200,
         0x00800000,0x80020200,0x80020000,0x80800000,
         0x80020200,0x00820200,0x00820000,0x80000200,
         0x80800200,0x00800000,0x00000000,0x80020000,
         0x00020000,0x80000000,0x00800200,0x00020200,
         0x80820200,0x00820000,0x80000200,0x00800200,
         0x80000000,0x00000200,0x00020200,0x80820000,
         0x00000200,0x80800200,0x80820000,0x00000000,
         0x00000000,0x80820200,0x00800200,0x80020000,
         0x00820200,0x00020000,0x80000200,0x00800200,
         0x80820000,0x00000200,0x00020200,0x80800000,
         0x80020200,0x80000000,0x80800000,0x00820000,
         0x80820200,0x00020200,0x00820000,0x80800200,
         0x00800000,0x80000200,0x80020000,0x00000000,
         0x00020000,0x00800000,0x80800200,0x00820200,
         0x80000000,0x80820000,0x00000200,0x80020200 );
	this.SPtrans[1]=new Array(
         0x10042004,0x00000000,0x00042000,0x10040000,
         0x10000004,0x00002004,0x10002000,0x00042000,
         0x00002000,0x10040004,0x00000004,0x10002000,
         0x00040004,0x10042000,0x10040000,0x00000004,
         0x00040000,0x10002004,0x10040004,0x00002000,
         0x00042004,0x10000000,0x00000000,0x00040004,
         0x10002004,0x00042004,0x10042000,0x10000004,
         0x10000000,0x00040000,0x00002004,0x10042004,
         0x00040004,0x10042000,0x10002000,0x00042004,
         0x10042004,0x00040004,0x10000004,0x00000000,
         0x10000000,0x00002004,0x00040000,0x10040004,
         0x00002000,0x10000000,0x00042004,0x10002004,
         0x10042000,0x00002000,0x00000000,0x10000004,
         0x00000004,0x10042004,0x00042000,0x10040000,
         0x10040004,0x00040000,0x00002004,0x10002000,
         0x10002004,0x00000004,0x10040000,0x00042000 );
	this.SPtrans[2]=new Array(
         0x41000000,0x01010040,0x00000040,0x41000040,
         0x40010000,0x01000000,0x41000040,0x00010040,
         0x01000040,0x00010000,0x01010000,0x40000000,
         0x41010040,0x40000040,0x40000000,0x41010000,
         0x00000000,0x40010000,0x01010040,0x00000040,
         0x40000040,0x41010040,0x00010000,0x41000000,
         0x41010000,0x01000040,0x40010040,0x01010000,
         0x00010040,0x00000000,0x01000000,0x40010040,
         0x01010040,0x00000040,0x40000000,0x00010000,
         0x40000040,0x40010000,0x01010000,0x41000040,
         0x00000000,0x01010040,0x00010040,0x41010000,
         0x40010000,0x01000000,0x41010040,0x40000000,
         0x40010040,0x41000000,0x01000000,0x41010040,
         0x00010000,0x01000040,0x41000040,0x00010040,
         0x01000040,0x00000000,0x41010000,0x40000040,
         0x41000000,0x40010040,0x00000040,0x01010000 );
	this.SPtrans[3]=new Array(
         0x00100402,0x04000400,0x00000002,0x04100402,
         0x00000000,0x04100000,0x04000402,0x00100002,
         0x04100400,0x04000002,0x04000000,0x00000402,
         0x04000002,0x00100402,0x00100000,0x04000000,
         0x04100002,0x00100400,0x00000400,0x00000002,
         0x00100400,0x04000402,0x04100000,0x00000400,
         0x00000402,0x00000000,0x00100002,0x04100400,
         0x04000400,0x04100002,0x04100402,0x00100000,
         0x04100002,0x00000402,0x00100000,0x04000002,
         0x00100400,0x04000400,0x00000002,0x04100000,
         0x04000402,0x00000000,0x00000400,0x00100002,
         0x00000000,0x04100002,0x04100400,0x00000400,
         0x04000000,0x04100402,0x00100402,0x00100000,
         0x04100402,0x00000002,0x04000400,0x00100402,
         0x00100002,0x00100400,0x04100000,0x04000402,
         0x00000402,0x04000000,0x04000002,0x04100400 );
	this.SPtrans[4]=new Array(
         0x02000000,0x00004000,0x00000100,0x02004108,
         0x02004008,0x02000100,0x00004108,0x02004000,
         0x00004000,0x00000008,0x02000008,0x00004100,
         0x02000108,0x02004008,0x02004100,0x00000000,
         0x00004100,0x02000000,0x00004008,0x00000108,
         0x02000100,0x00004108,0x00000000,0x02000008,
         0x00000008,0x02000108,0x02004108,0x00004008,
         0x02004000,0x00000100,0x00000108,0x02004100,
         0x02004100,0x02000108,0x00004008,0x02004000,
         0x00004000,0x00000008,0x02000008,0x02000100,
         0x02000000,0x00004100,0x02004108,0x00000000,
         0x00004108,0x02000000,0x00000100,0x00004008,
         0x02000108,0x00000100,0x00000000,0x02004108,
         0x02004008,0x02004100,0x00000108,0x00004000,
         0x00004100,0x02004008,0x02000100,0x00000108,
         0x00000008,0x00004108,0x02004000,0x02000008 );

	this.SPtrans[5]=new Array(
         0x20000010,0x00080010,0x00000000,0x20080800,
         0x00080010,0x00000800,0x20000810,0x00080000,
         0x00000810,0x20080810,0x00080800,0x20000000,
         0x20000800,0x20000010,0x20080000,0x00080810,
         0x00080000,0x20000810,0x20080010,0x00000000,
         0x00000800,0x00000010,0x20080800,0x20080010,
         0x20080810,0x20080000,0x20000000,0x00000810,
         0x00000010,0x00080800,0x00080810,0x20000800,
         0x00000810,0x20000000,0x20000800,0x00080810,
         0x20080800,0x00080010,0x00000000,0x20000800,
         0x20000000,0x00000800,0x20080010,0x00080000,
         0x00080010,0x20080810,0x00080800,0x00000010,
         0x20080810,0x00080800,0x00080000,0x20000810,
         0x20000010,0x20080000,0x00080810,0x00000000,
         0x00000800,0x20000010,0x20000810,0x20080800,
         0x20080000,0x00000810,0x00000010,0x20080010 );
	this.SPtrans[6]=new Array(
         0x00001000,0x00000080,0x00400080,0x00400001,
         0x00401081,0x00001001,0x00001080,0x00000000,
         0x00400000,0x00400081,0x00000081,0x00401000,
         0x00000001,0x00401080,0x00401000,0x00000081,
         0x00400081,0x00001000,0x00001001,0x00401081,
         0x00000000,0x00400080,0x00400001,0x00001080,
         0x00401001,0x00001081,0x00401080,0x00000001,
         0x00001081,0x00401001,0x00000080,0x00400000,
         0x00001081,0x00401000,0x00401001,0x00000081,
         0x00001000,0x00000080,0x00400000,0x00401001,
         0x00400081,0x00001081,0x00001080,0x00000000,
         0x00000080,0x00400001,0x00000001,0x00400080,
         0x00000000,0x00400081,0x00400080,0x00001080,
         0x00000081,0x00001000,0x00401081,0x00400000,
         0x00401080,0x00000001,0x00001001,0x00401081,
         0x00400001,0x00401080,0x00401000,0x00001001 );
	this.SPtrans[7]=new Array(
         0x08200020,0x08208000,0x00008020,0x00000000,
         0x08008000,0x00200020,0x08200000,0x08208020,
         0x00000020,0x08000000,0x00208000,0x00008020,
         0x00208020,0x08008020,0x08000020,0x08200000,
         0x00008000,0x00208020,0x00200020,0x08008000,
         0x08208020,0x08000020,0x00000000,0x00208000,
         0x08000000,0x00200000,0x08008020,0x08200020,
         0x00200000,0x00008000,0x08208000,0x00000020,
         0x00200000,0x00008000,0x08000020,0x08208020,
         0x00008020,0x08000000,0x00000000,0x00208000,
         0x08200020,0x08008020,0x08008000,0x00200020,
         0x08208000,0x00000020,0x00200020,0x08008000,
         0x08208020,0x00200000,0x08200000,0x08000020,
         0x00208000,0x00008020,0x08008020,0x08200000,
         0x00000020,0x08208000,0x00208020,0x00000000,
         0x08000000,0x08200020,0x00008000,0x00208020 );
this.cov_2char=new Array(
      0x2E,0x2F,0x30,0x31,0x32,0x33,0x34,0x35, 
      0x36,0x37,0x38,0x39,0x41,0x42,0x43,0x44, 
      0x45,0x46,0x47,0x48,0x49,0x4A,0x4B,0x4C, 
      0x4D,0x4E,0x4F,0x50,0x51,0x52,0x53,0x54, 
      0x55,0x56,0x57,0x58,0x59,0x5A,0x61,0x62, 
      0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6A, 
      0x6B,0x6C,0x6D,0x6E,0x6F,0x70,0x71,0x72, 
      0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7A );
this.byteToUnsigned=bTU;
this.fourBytesToInt=fBTI;
this.intToFourBytes=iTFB;
this.PERM_OP=P_P;
this.HPERM_OP=H_P;
this.des_set_key=d_s_k;
this.D_ENCRYPT=D_E;
this.body=bdy;
this.randChar=rC;
this.crypt=cript;
this.encrypt=dP;
}

Javacrypt=new Crypt();

/*********************   End of javacrypt.js   ******************************/
/*jslint active: true */
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/utils/cookie.js */

/**
 * @author Ryan Johnson <http://syntacticx.com/>
 * @copyright 2008 PersonalGrid Corporation <http://personalgrid.com/>
 * @package LivePipe UI
 * @license MIT
 * @url http://livepipe.net/controls/hotkey/
 * @attribution http://www.quirksmode.org/js/cookies.html
 */

/*global document, Prototype, $A */

if (typeof (Prototype) == "undefined") {
	throw "Cookie requires Prototype to be loaded.";
}

var Cookie = {
	build: function () {
		return $A(arguments).compact().join("; ");
	},
	
	secondsFromNow: function (seconds) {
		var d = new Date();
		d.setTime(d.getTime() + (seconds * 1000));
		return d.toGMTString();
	},
	
	set: function (name, value, seconds) {
// 		if (name === "login" ||	 name === "context") {
// 			// Set It to 10min = 10 * 60(seconds)
// 			var expiry = 'expires=' + Cookie.secondsFromNow(600);
// 		} else {
			var expiry = seconds ? 'expires=' + Cookie.secondsFromNow(seconds) : null;
// 		}
		
		document.cookie = Cookie.build(window.appUid + "/" + name + "=" + value, expiry, "path=" + window.appUrl);
	},
	
	get: function (name) {
		var valueMatch = new RegExp(window.appUid + "/" + name + "=([^;]+)").exec(document.cookie);
		return valueMatch ? valueMatch[1] : null;
	},
	
	unset: function (name) {
		Cookie.set(name, '', -1);
	}
};


/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/ctl.js */
/* Cytadelle Technology Light JavaScript framework, version 1.0
 *
 * This file is part of Cytadelle Technology Light JavaScript framework.
 * Developped by Arnaud BELDAME
 *
 * Creative Commons Attribution-Noncommercial-Share Alike 3.0 License
 * The licensor permits others to copy, distribute,
 * display, and perform the work. In return,
 * licensees must give the original author credit.
 *
 * The licensor permits others to copy, distribute,
 * display, and perform the work. In return, licensees
 * may not use the work for commercial purposes --
 * unless they get the licensor's permission.
 *
 * The licensor permits others to distribute derivative
 * works only under a license identical to the one that
 * governs the licensor's work
 */


function $CYT(selector,oParent)
{
    if (oParent == undefined ) oParent = document;

    var i, n;
    var szItem;
    var oElement = null;
    var tElements = [];
    var oContext;
    if(/^#/.test(selector) && !/\s/.test(selector) && !/\./.test(selector)) // Id
    {
        return oParent.getElementById(selector.replace(/#/,''));
    }
    else if(/^\[/.test(selector) && !/\s/.test(selector)) // Form
    {
        if (/\./.test(selector))
        {
            oContext = $CYT(selector.split(/\./)[0]);
            szItem = selector.split(/\./)[1];
            oElement = null;
            tElements = [];

            for (i=0,n=oContext.elements.length;i<n;i++)
                if (oContext.elements[i].name == szItem)
                {
                    tElements.push(oContext.elements[i]);
                }
            if (tElements.length == 0)	return [];
            return tElements;
        }
        else
        {
            szItem 	= selector.replace('[','').replace(']','');
            oElement = null;
            for (i=0,n=document.forms.length;i<n;i++)
                if (document.forms[i].name == szItem)
                {
                    oElement = document.forms[i];
                    break;
                }
            return oElement;
        }
    }
    else // Tag or Class
    {
        var szTagOrStyle;
        var szTagName;
        var szStyleName;
        if(/\./.test(selector)) // class
        {
            oContext 		= (/\s/.test(selector))? $CYT(selector.split(/\s/)[0],oParent) : oParent;
            szTagOrStyle 	= (/\s/.test(selector))? selector.split(/\s/)[1] : selector;

            szTagName 		= (/^\./.test(szTagOrStyle))? "*" : szTagOrStyle.split(/\./)[0];
            szStyleName 	= (/^\./.test(szTagOrStyle))? szTagOrStyle.replace(/\./,'') : szTagOrStyle.substr(szTagName.length +1);
        }
        else // tag
        {
            oContext 		= (/\s/.test(selector))? $CYT(selector.split(/\s/)[0],oParent) : oParent;
            szTagName 		= (/\s/.test(selector))? selector.split(/\s/)[1] : selector;
        }

        tElements = []; tTags = oContext.getElementsByTagName(szTagName); oReturn = null;
        for (i=0,n=tTags.length;i<n; i++)
        {
            if(szStyleName)
            {
                if(RegExp("(^|\\s)"+szStyleName+"(\\s|$)").test(tTags[i].className))
                    tElements.push(tTags[i]);
            }else{
                tElements.push(tTags[i]);
            }
        }
        if (tElements.length == 0)	return [];
        return tElements;
    }
}


var ctl = {

    preload : (function()
    {
        // Object
        var _toString = Object.prototype.toString;
        function extend(destination, source)
        {
            for (var property in source)
                destination[property] = source[property];
            return destination;
        }



        function getAncestors(object,szTagName)
        {
            var tObjects = [];
            while(object != null && object != document)
            {
                if (object.tagName == szTagName || isUndefined(szTagName))
                    tObjects.push(object);
                object = object.parentNode;
            }
            return tObjects;
        }

        function getFirstChildByTagName(object,szTagName)
        {
            for(var i=0,n=object.childNodes.length;i<n;i++)
                if (object.childNodes[i].tagName == szTagName)
                    return object.childNodes[i];
            return undefined;
        }

        function getChildsByTagName(object,szTagName)
        {
            var tRes = Array();
            for(var i=0,n=object.childNodes.length;i<n;i++)
                if (object.childNodes[i].tagName == szTagName)
                    tRes.push(object.childNodes[i]);
            return tRes;
        }

        function isElement(object)	{
            return !!(object && object.nodeType == 1);
        }
        function isArray(object)	{
            return _toString.call(object) == "[object Array]";
        }
        function isFunction(object) {
            return typeof object === "function";
        }
        function isString(object) 	{
            return _toString.call(object) == "[object String]";
        }
        function isNumber(object) 	{
            return _toString.call(object) == "[object Number]";
        }
        function isUndefined(object){
            return typeof object === "undefined";
        }
        function isEmpty(object)	{
            return (typeof object === "undefined" || object == "");
        }

        // CLEAN OBJECT FROM MEMORY
        function clean(object)
        {
            if (!object) return;

            // Clean attributes
            var a = object.attributes, i, l, n;
            if (a)
            {
                l = a.length;
                for (i = 0; i < l; i += 1)
                {
                    try
                    {
                        n = a[i].name;
                        if (typeof object[n] === 'function')
                            object[n] = null;

                    }catch(e){}
                }
            }

            // Clean child nodes
            a = object.childNodes;
            if (a)
            {
                while (object.childNodes.length > 0)
                {
                    Object.clean(object.firstChild);
                    object.removeChild(object.firstChild);
                }
            }
        }
        function clone(object)		{
            return extend({ }, object);
        }

        function forEach(tArray,fnDelegate,ownpropertiesonly)
        {
            if (typeof(fnDelegate) == "function")
            {
                if (this instanceof Array && typeof(ownpropertiesonly) == "undefined")
                    ownpropertiesonly = true;

                for (key in tArray)
                {
                    var ok = (!ownpropertiesonly);
                    if (!ok)
                    {
                        try{
                            ok = tArray.hasOwnProperty(key);
                        }catch(ex){}
                    }

                    if (ok)
                    {
                        try{
                            fnDelegate(tArray[key],key,tArray);
                        }catch(ex){}
                    }
                }
            }
        }


        function map(tArray,fnIterator)
        {
            var tResult = [];
            if (typeof fnIterator != "function")
                throw new TypeError();

            for(var i=0,n=tArray.length;i<n;i++)
                tResult[i] = fnIterator.call(arguments[1], tArray[i],i,tArray)
            return tResult;
        }

        extend(Object, {
            extend:        extend,
            getChildsByTagName: getChildsByTagName,
            getFirstChildByTagName: getFirstChildByTagName,
            getAncestors			:getAncestors,
            clone:         clone,
            clean:         clean,
            isElement:     isElement,
            isArray:       isArray,
            isFunction:    isFunction,
            isString:      isString,
            isNumber:      isNumber,
            isUndefined:   isUndefined,
            isEmpty:       isEmpty,
            forEach:       forEach,
            map:           map
        });

        // Functions
        //		Object.extend(Function.prototype, (function()
        //		{
        //			function bind(context)
        //			{
        //				if (Object.isUndefined(arguments[0])) return this;
        //				var _fnMethod = this; //, _tArgs = _slice.call(arguments, 1);
        //
        //				return function()
        //				{
        //					//var a = merge(_tArgs, arguments);
        //      				//return _fnMethod.apply(context, a);
        //      				return _fnMethod.apply(context, arguments);
        //				}
        //			}
        //
        //			return {
        //				bind:bind
        //			}
        //		})());

        // String
        Object.extend(String.prototype,(function()
        {
            function extractTags(tag)
            {
                var matchAll = new RegExp('(?:<' + tag + '.*?>)((\n|\r|.)*?)(?:<\/' + tag + '>)','img');
                var matchOne = new RegExp('(?:<' + tag + '.*?>)((\n|\r|.)*?)(?:<\/' + tag + '>)','im');
                var tMatched = (this.match(matchAll) || []);

                return Object.map(tMatched,function(scriptTag){
                    return (scriptTag.match(matchOne) || ['', ''])[1];
                });
            }

            function urlencode()
            {
                var szStr = escape(this);
                return szStr.replace(/[*+\/@&,=\s]/g,function (s)
                {
                    switch (s)
                    {
                        case " ":
                            s = "%20";
                            break;
                        case "*":
                            s = "%2A";
                            break;
                        case "+":
                            s = "%2B";
                            break;
                        case ",":
                            s = "%2C";
                            break;
                        case "/":
                            s = "%2F";
                            break;
                        case "=":
                            s = "%3D";
                            break;
                        case "@":
                            s = "%40";
                            break;
                        case "&":
                            s = "%26";
                            break;
                    }
                    return s;
                });
            }

            return {
                extractTags:	extractTags,
                urlencode:		urlencode
            }
        })());
        return true;
    })(),

    /*log:
	{
		enable : true,
		log 	: function(szText)	{if (this._console && this.enable) this._console.log(szText);},
		info 	: function(szText)	{if (this._console && this.enable) this._console.info(szText);},
		error 	: function(szText)	{if (this._console && this.enable) this._console.error(szText);},
		warn 	: function(szText)	{if (this._console && this.enable) this._console.warn(szText);},
		_console : (console ? console : (window.console ? window.console : null))
	},*/

    window :
    {
        size :
        {
            Get : function()
            {
                var iWinW = 630, iWinH = 460;
                if (parseInt(navigator.appVersion,10)>3)
                {
                    if (navigator.appName=="Netscape")
                    {
                        iWinW = window.innerWidth -16;
                        iWinH = window.innerHeight -16;
                    }
                    if (navigator.appName.indexOf("Microsoft")!=-1)
                    {
                        var hDoc = $CYT('#document');
                        if (hDoc)
                        {
                            iWinW = hDoc.offsetWidth;
                            iWinH = hDoc.offsetHeight;
                        }else{
                            iWinW = document.body.offsetWidth;
                            iWinH = document.body.offsetHeight;
                        }
                    }
                }
                return {
                    "Screen":{
                        "Width":screen.availWidth, 
                        "Height":screen.availHeight
                    },
                    "Window": {
                        "X":0, 
                        "Y":0, 
                        "Width":iWinW, 
                        "Height":iWinH
                    }
                };
            },

            Set : function(iX,iY,iWidth,iHeight)
            {
                //if (iX != undefined)
                //	;
                window.resizeTo(iWidth,iHeight);
            }
        }

    },

    msgbox :
    {
        QUESTION :  {
            OK : 0, 
            YES_NO : 1, 
            YES_CANCEL : 2, 
            VALID_CANCEL : 3, 
            INFO : 4
        },
        _tQueue : [],
        _bRunning : false,

        Show : function(parQuestionType,parMsg,parCallBackBtn1,parCallBackBtn2,parCallBackParam)
        {
            // Add to the msgbox Queue
            this._tQueue.push({
                "QuestionType":parQuestionType,
                "Message":parMsg,
                "CallBackBtn1":parCallBackBtn1,
                "CallBackBtn2":parCallBackBtn2,
                "CallBackParam":parCallBackParam
            });

            // Try to display the dialog box
            this._Show();
        },
	
	Hide : function()
	{

	    $CYT("#ct-msgbox").style.display = 'none';
	    $CYT("#ct-backlayer").style.display = 'none';
	    $CYT("#ct-waiting").style.display	 = 'none';
	  
	},

        _Show : function()
        {
            var jMsgBox, fnCallBackButton1 = 0, fnCallBackButton2 = 0;

            // If the msgbox is already visible then leave
            if (this._Running == true)		return;
            if (this._tQueue.length == 0)	return;

            // Display the msgbox
            this._bRunning = true;
            jMsgBox = this._tQueue.shift();

            // Set the popup message
            $CYT('#ct-msgbox-msg').innerHTML = jMsgBox.Message.stripScripts();


            // If the callback btn1
            fnCallBackButton1 = function(){
                $CYT("#ct-msgbox").style.display = 'none';
                $CYT("#ct-backlayer").style.display = 'none';
                if (jMsgBox.CallBackBtn1 != undefined)
                    jMsgBox.CallBackBtn1(jMsgBox.CallBackParam);
                this._bRunning = false;
                this._Show();
                return false;
            };

            // If the callback btn2
            fnCallBackButton2 = function(){
                $CYT("#ct-msgbox").style.display = 'none';
                $CYT("#ct-backlayer").style.display = 'none';
                if (jMsgBox.CallBackBtn2 != undefined)
                    jMsgBox.CallBackBtn2(jMsgBox.CallBackParam);
                this._bRunning = false;
                this._Show();
                return false;
            };

            //
            var oBtn1 = $CYT('#ct-msgbox-button1');
            var oBtn2 = $CYT('#ct-msgbox-button2');
            var oBtn3 = $CYT('#ct-msgbox-button3');
            var ico = $CYT('#ct-msgbox-img');
            switch(jMsgBox.QuestionType)
            {
                case this.QUESTION.INFO:
                    oBtn1.style.display   = 'none';
                    oBtn2.style.display   = 'none';
                    oBtn3.style.display   = 'none';
                    ico.className       = 'mb-info';
                    break;
                case this.QUESTION.YES_NO:

                    oBtn1.style.display   = 'block';
                    oBtn1.value       = t("general.btn.yes");
                    oBtn1.className     = 'png input-btn input-btn-orange-small';
                    oBtn1.onclick       = fnCallBackButton2.bind(this);
                    oBtn2.style.display   = 'block';
                    oBtn2.value       = t("general.btn.no");
                    oBtn2.className     = 'png input-btn input-btn-gray-small';
                    oBtn2.onclick       = fnCallBackButton1.bind(this);
                    oBtn3.style.display   = 'none';
                    ico.className       = 'mb-yesno';
                    break;

                case this.QUESTION.YES_CANCEL:
                    oBtn1.style.display 	= 'block';
                    oBtn1.value 			= t("general.btn.cancel");
                    oBtn1.className 		= 'png input-btn input-btn-gray-small';
                    oBtn1.onclick 			= fnCallBackButton1.bind(this);
                    oBtn2.style.display 	= 'block';
                    oBtn2.value 			= t("general.btn.yes");
                    oBtn2.className 		= 'png input-btn input-btn-orange-small';
                    oBtn2.onclick 			= fnCallBackButton2.bind(this);
                    oBtn3.style.display 	= 'none';
                    ico.className       = 'mb-yescancel';
                    break;

                case this.QUESTION.VALID_CANCEL:
                    oBtn1.style.display 	= 'block';
                    oBtn1.value 			= t("general.btn.cancel");
                    oBtn1.className 		= 'png input-btn input-btn-gray-small';
                    oBtn1.onclick 			= fnCallBackButton1.bind(this);
                    oBtn2.style.display 	= 'inline';
                    oBtn2.value 			= t("general.btn.valid");
                    oBtn2.className 		= 'png input-btn input-btn-orange-small';
                    oBtn2.onclick 			= fnCallBackButton2.bind(this);
                    oBtn3.style.display 	= 'none';
                    ico.className       = 'mb-validcancel';
                    break;
                default:
                    oBtn1.style.display 	= 'none';
                    oBtn2.style.display 	= 'none';
                    oBtn3.style.display 	= 'block';
                    oBtn3.value 			= t("general.btn.ok");
                    oBtn3.className 		= 'png input-btn input-btn-orange-small';
                    oBtn3.onclick 			= fnCallBackButton1.bind(this);
                    ico.className       = 'mb-ok';
                    break;
            }

            // Display animation
            ctl.animations.Create('linear',0,100,function()
            {
                var oCTBacklayer = $CYT("#ct-backlayer");
                oCTBacklayer.style.opacity = '.0';
                oCTBacklayer.style.filter = 'alpha(opacity=0)';
                oCTBacklayer.style.display = "block";
                return true;
            },
            function(iValue)
            {
                var oCTBacklayer = $CYT("#ct-backlayer");
                oCTBacklayer.style.opacity = '.' + ((iValue * 0.003) + "").substring(2);
                oCTBacklayer.style.filter = 'alpha(opacity=' + (iValue * 0.3) + ')';
                return true;
            },
            function()
            {
                var oCTMsgBox 		= $CYT("#ct-msgbox");
                oCTMsgBox.style.display = "block";
                return true;
            });
            ctl.animations.Start();



            /* Set the focus */
            window.setTimeout(function () {
                if ($CYT('#ct-msgbox-button3').style.display != 'none')
                    $CYT('#ct-msgbox-button3').focus();
                else
                    $CYT('#ct-msgbox-button1').focus();
            }, 1300);
        }
    },


    waiting:
    {

        Show : function()
        {
            var oCTBacklayer = $CYT("#ct-backlayer");
            oCTBacklayer.style.opacity = '.15';
            oCTBacklayer.style.filter = 'alpha(opacity=15)';
            oCTBacklayer.style.display = "block";
            oCTBacklayer.style.top = "0";
            $CYT('#ct-waiting img')[0].src = appUrl + '/images/' + appConfig + '/common/waiting.gif';
            $CYT("#ct-waiting").style.display = 'block';
        },

        Hide : function()
        {
	    $CYT("#ct-msgbox").style.display = 'none';
	    $CYT("#ct-backlayer").style.display = 'none';
	    $CYT("#ct-waiting").style.display	 = 'none';
	    
        }

    },

    popup:
    {
        _is_opened:false,

        Load : function(szUrl){
            ctl.ajax.Get(szUrl,"",function(szData)
            {
                ctl.popup.LoadContent(szData);
            });
        },

        Resize : function(iWidth,iHeight){
            var oCTPopup = $CYT("#ct-popup");
            oCTPopup.style.width 			= (iWidth - 4 ) + 'px';
            oCTPopup.style.marginLeft		= (- (iWidth / 2)) + 'px';
            oCTPopup.style.height 			= (iHeight - 8) + 'px';
            oCTPopup.style.marginTop 		= (- (iHeight / 2)) + 'px';
           // oCTPopup.childNodes[3].style.height	= (iHeight - 4 - 40) + 'px';
        },

        SetTitle : function(szTitle){
            var oCTPopup = $CYT("#ct-popup");
            $("ct-popup-header-title").innerHTML 	= szTitle.stripScripts();
        },

        Open : function(szContent, szTitle,iWidth,iHeight){
            var oCTPopup 	= $CYT("#ct-popup");
            var oCTBacklayer 	= $CYT("#ct-backlayer");

            // Multi popup bloker
            if (this._is_opened) return;

            // Set internal content
            
            $("ct-popup-header-title").innerHTML= szTitle.stripScripts();
            if ($("ct-popup-content")) {
		      $("ct-popup-content").update(szContent.stripScripts());
	    }

            // Prepare to display the popup
            oCTPopup.style.display = 'none';
            oCTBacklayer.style.top = "120px";
            oCTBacklayer.style.position = "absolute";
            //oCTBacklayer.style.height = 
            this.Resize(iWidth,iHeight);
            this.Show();
	    this._is_opened = true;
        },

        Show : function(){
            // Display animation
            ctl.animations.Create('linear',0,100,function()         {
                var oCTBacklayer = $CYT("#ct-backlayer");
                oCTBacklayer.style.opacity = '.0';
                oCTBacklayer.style.filter = 'alpha(opacity=0)';
                oCTBacklayer.style.display = "block";
                return true;
            },
            function(iValue){
                var oCTBacklayer = $CYT("#ct-backlayer");
                oCTBacklayer.style.opacity = '.' + ((iValue * 0.003) + "").substring(2);
                oCTBacklayer.style.filter = 'alpha(opacity=' + (iValue * 0.3) + ')';
                return true;
            },
            function(){
                var oCTPopup 		= $CYT("#ct-popup");
                oCTPopup.style.display = "block";
                return true;
            });
            ctl.animations.Start();

        },

        Close : function (){
            var oCTPopup	= $CYT("#ct-popup");
            var oCTBacklayer	= $CYT("#ct-backlayer");

            // Clear motion in case of
            if (this._motion_int != null) {
                clearInterval(this._motion_int);
                this._motion_int = null;
                this._motion_cur = 0;
            }

            // Hide popup
            oCTPopup.style.display 		= 'none';

            // Hide backlayer
            oCTBacklayer.style.display  = 'none';

            // Reset flag
            this._is_opened = false;
        },

        LoadContent : function(parContent){
            // Get the div target
            var oCTPopup = $CYT("#ct-popup");
            var oTarget  = oCTPopup.childNodes[2];
            Object.clean(oTarget);

            // Clean the div
            oTarget.innerHTML = parContent.stripScripts();

            // Find all scripts and concat them
            szFullScript = "";
            szFullStyle = "";

            parContent.extractTags("script").each(function(szScript){
                szFullScript += szScript;
            });
            parContent.extractTags("style").each(function(szStyle){
                szFullStyle += szStyle;
            });

            // Create and add the new script tag withing the JS code to execute
            var oScript = document.createElement('SCRIPT');
            oScript.setAttribute("type","text/javascript");
            oScript.text = szFullScript;
            oTarget.appendChild(oScript);

            // Create and add the new style tag withing the CSS code
            var oStyle = document.createElement('STYLE');
            oStyle.setAttribute("type","text/css");
            oStyle = oTarget.appendChild(oStyle);
            if(oStyle.styleSheet) // IE
            {
                oStyle.styleSheet.cssText = szFullStyle;
            }
            else // w3c
            {
                var cssText = document.createTextNode(szFullStyle);
                oStyle.appendChild(cssText);
            }

            // Activate translation mechanism
            Sah.translator.refresh();
        }
    },


    mouse :
    {
        GetEvent : function(oEvent,hWindow)
        {
            // --------------------------------------------------------------------------------------------
            // Variables
            var iPosX = 0,iPosY = 0, oTarget, oResult, iButton;
            if (!hWindow) hWindow = window;
            if (!oEvent) oEvent = hWindow.event;

            // --------------------------------------------------------------------------------------------
            // Get data from event data if this is a fake dispatch
            if (typeof oEvent.event_data != "undefined")
            {
                iPosX 	 = oEvent.event_data.X;
                iPosY 	 = oEvent.event_data.Y;
                iButton	 = oEvent.event_data.Button;
                oTarget	 = oEvent.event_data.Target;
            }
            else
            // --------------------------------------------------------------------------------------------
            // Compute position and get objects
            {
                // Get button
                iButton = (oEvent.which ? (oEvent.which == 3 ? 2:1): (oEvent.button== 2 ? 2:1));


                // Get pos X and Y
                if (oEvent.pageX || oEvent.pageY)
                {
                    iPosX = oEvent.pageX;
                    iPosY = oEvent.pageY;
                }
                // IE
                else if (oEvent.clientX || oEvent.clientY)
                {
                    iPosX = oEvent.clientX;
                    iPosY = oEvent.clientY;
                    if (hWindow.document)
                    {
                        if (hWindow.document.body)		iPosX += hWindow.document.body.scrollLeft;
                        if (hWindow.document.body)		iPosY += hWindow.document.body.scrollTop;
                        if (hWindow.document.documentElement)	iPosX += hWindow.document.documentElement.scrollLeft;
                        if (hWindow.document.documentElement)	iPosY += hWindow.document.documentElement.scrollTop;
                    }
                }


                // Clicked
                if (oEvent.target)
                    oTarget=oEvent.target;
                else if (oEvent.srcElement)
                    oTarget=oEvent.srcElement;

                if (oTarget.nodeType==3) // Defeat Safari bug
                    oTarget = oTarget.parentNode;
            }

            // --------------------------------------------------------------------------------------------
            // Result
            oResult = {
                "X":	iPosX,
                "Y":	iPosY,
                "Target":oTarget,
                "Event": oEvent.type,
                "Button":iButton
            };
            return oResult;
        }
    },


    event :
    {
        Bind : function(oElem, sEvType, parFnCallback)
        {
            var fnOldCB = oElem['on' + sEvType] = parFnCallback;

            if (typeof(oElem['on' + sEvType]) != "function")
                oElem['on' + sEvType] = parCallBack;
            else
            {
                oElem['on' + sEvType] = function()
                {
                    var bRes = parFnCallback();
                    if (!bRes) return false;

                    return fnOldCB();
                }
            }
        },

        Add : function(oElem, sEvType, parFnCallback, bCapture)
        {
            return oElem.addEventListener? oElem.addEventListener(sEvType, parFnCallback, bCapture):
            oElem.attachEvent? oElem.attachEvent('on' + sEvType, parFnCallback):oElem['on' + sEvType] = parFnCallback;
        },

        Remove : function(oElem, sEvType, parFnCallback, bCapture)
        {
            return oElem.removeEventListener? oElem.removeEventListener(sEvType, parFnCallback, bCapture):
            oElem.detachEvent? oElem.detachEvent('on' + sEvType, parFnCallback):oElem['on' + sEvType] = "";
        },

        PreventDefault : function(oEvent)
        {
            if (oEvent.preventDefault)
                oEvent.preventDefault();
            return false;
        }

    },

    style :
    {
        Get : function(oElem)
        {
            return (oElem.getAttribute("style") || "");
        },

        Set : function(oElem,szStyle)
        {
            if (oElem.style.setAttribute)
                oElem.style.setAttribute("cssText",szStyle);
            else
                oElem.setAttribute("style",szStyle);
        },

        GetSheet : function(oElem)
        {
            if(document.defaultView && document.defaultView.getComputedStyle)
                return document.defaultView.getComputedStyle(oElem,"");
            else if(oElem.currentStyle)
                return oElem.currentStyle;
        },

        GetStyle : function(oElem,szStyle)
        {
            var oStyleSheet = this.GetSheet(oElem);
            return oStyleSheet[szStyle];
        },

        GetDimensions : function (oElem)
        {
            var szStyleDisplay = this.GetStyle(oElem,"display");

            if (szStyleDisplay != 'none' && szStyleDisplay != null) // Safari bug
                return {
                    width: oElem.offsetWidth, 
                    height: oElem.offsetHeight
                };

            // Save original values
            var oElemStyle = oElem.style;
            var szOrigVisibility 	= oElemStyle.visibility;
            var szOrigPosition 		= oElemStyle.position;
            var szOrigDisplay 		= oElemStyle.display;

            // Display block but hidden
            oElemStyle.visibility 	= 'hidden';
            oElemStyle.position 	= 'absolute';
            oElemStyle.display 		= 'block';

            // Save values
            var iWidth 	= oElem.clientWidth;
            var iHeight = oElem.clientHeight;

            // Restore original values
            oElemStyle.display 	= szOrigDisplay;
            oElemStyle.position 	= szOrigPosition;
            oElemStyle.visibility 	= szOrigVisibility;
            return {
                width: iWidth, 
                height: iHeight
            };
        },


        GetPosition : function (oObject)
        {
            var jOffset = {
                "X":0,
                "Y":0
            }, oCur = oObject;
            while( oCur != null && oCur != document)
            {
                jOffset.X += oCur.offsetLeft;
                jOffset.Y += oCur.offsetTop;
                oCur = oCur.offsetParent;
            }
            return jOffset;
        },


        klass: {
            Add : function(oElem,szStyle)
            {
                if (oElem == null || oElem == undefined || typeof(oElem) != "object") return false;

                if (Object.isArray(oElem))
                {
                    for(var i=0,n=oElem.length;i<n;i++)
                    {
                        if (!this.Has(oElem[i],szStyle))
                            oElem[i].className += " " + szStyle;
                    }
                }
                else
                {
                    if (!this.Has(oElem,szStyle))
                        oElem.className += " " + szStyle;
                }
                return true;
            },
            Remove : function(oElem,szStyle)
            {
                if (oElem == null || oElem == undefined || typeof(oElem) != "object") return false;
                if (Object.isArray(oElem))
                {
                    for(var i=0,n=oElem.length;i<n;i++)
                    {
                        if (oElem[i].className != "")
                            oElem[i].className = oElem[i].className.replace(new RegExp('(\\s|^)'+szStyle+'(\\s|$)'),' ');
                    }
                }
                else
                {
                    if (oElem.className != "")
                        oElem.className = oElem.className.replace(new RegExp('(\\s|^)'+szStyle+'(\\s|$)'),' ');
                }
                return true;
            },
            Has : function(oElem,szStyle)
            {
                if (oElem == null || oElem == undefined || typeof(oElem) != "object") return "";
                return (oElem.className.match(new RegExp('(\\s|^)'+szStyle+'(\\s|$)')) != null);
            }
        }
    },


    animations :
    {
        _tAnimations 	: [],
        _tAnimationsTypes : {
            'default'	: [1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1],
            'blast'		: [12,12,11,10,10,9,8,7,6,5,4,3,2,1],
            'linear'	: [10,10,10,10,10,10,10,10,10,10]
        },
        _bActive 		: false,
        _iTickInterval	: 20,
        _oTickTimer		: null,

        Create : function(szType,iStart,iEnd,fnOnBegin,fnOnFrame,fnOnComplete)
        {
            //ctl.log.Debug('ctl.animator.Create()');
            szType 		= szType || 'default';

            // Add to the animation queue
            var oObject 		= new Object();
            oObject.onBegin 	= (fnOnBegin 	? fnOnBegin : null);
            oObject.onFrame 	= (fnOnFrame 	? fnOnFrame : null);
            oObject.onComplete 	= (fnOnComplete ? fnOnComplete : null);
            oObject.bActive 	= true;
            oObject.iFrameCount = this._tAnimationsTypes[szType].length;
            oObject.iFrame = 0;

            // Crate motion tween
            var tTween 	= [iStart];
            var iTmp 	= iStart;
            var iDiff 	= iEnd - iStart;
            for (var i=0 ; i < oObject.iFrameCount; i++)
            {
                iTmp += iDiff * this._tAnimationsTypes[szType][i] * 0.01;
                tTween[i] 		= {};
                tTween[i].data 	= iTmp;
                tTween[i].event = null;
            }
            oObject.tTween = tTween;

            // Push new animation into the array
            this._tAnimations.push(oObject);
        },

        Start : function()
        {
            // Verify if the motion engine is already started
            if (this._oTickTimer || this._bActive)
                return false;

            // Start the motion engine
            this._bActive = true;
            this._oTickTimer  = setInterval(ctl.animations._onTick.bind(this),this._iTickInterval);
            return true;
        },

        Stop : function()
        {
            // Verify if the motion engine is already stopped
            if (!this._oTickTimer || !this._bActive)
                return false;

            clearInterval(this._oTickTimer);
            this._oTickTimer  = null;
            this._bActive = false;
            this._tAnimations  = [];
            return true;
        },

        _onFrame  : function(iIndex)
        {
            // Get current animation
            var oAnim = this._tAnimations[iIndex];
            if (!oAnim.bActive)
                return false;

            // On begin
            if (oAnim.iFrame == 0)
            {
                if (oAnim.onBegin)
                    if (!oAnim.onBegin())
                        oAnim.iFrame = oAnim.iFrameCount - 1;
            }

            // Call the tween callback
            if (oAnim.onFrame && oAnim.tTween[oAnim.iFrame])
            {
                if (!oAnim.onFrame(oAnim.tTween[oAnim.iFrame].data))
                    oAnim.iFrame = oAnim.iFrameCount - 1;
            }

            // On complete
            if (oAnim.iFrame++ >= oAnim.iFrameCount - 1)
            {
                oAnim.bActive = false;
                oAnim.iFrame = 0;
                if (oAnim.onComplete)
                    oAnim.onComplete();
                return false;
            }
            return true;
        },

        _onTick : function()
        {
            var iActive = 0;
            for (var i=0; i< this._tAnimations.length; i++)
            {
                if (this._tAnimations[i].bActive)
                {
                    if (!this._onFrame(i))
                    {
                        this._tAnimations.splice(i,1);
                        i--;
                    }
                    else
                    {
                        iActive++;
                    }
                }
            }

            if (iActive == 0 && this._oTickTimer)
                this.Stop();
        }
    },


    ajax :
    {
        // System attributes
        _tQueue : [],
        _bRunning : false,
        _jAjaxRequest : null,
        _fnReadyStateChanged : null,
        _oTimeOut : null,
        _fnWatchDog : null,

        _oXMLHttp : (function()
        {
            try {
                return new XMLHttpRequest();
            } // Mozilla / Safari
            catch (e)
            {
                // IE
                var tXMLHttp = ['MSXML2.XMLHTTP.5.0','MSXML2.XMLHTTP.4.0','MSXML2.XMLHTTP.3.0','MSXML2.XMLHTTP','Microsoft.XMLHTTP'];
                for (var i=0;i < tXMLHttp.length; i++)
                {
                    try{
                        return new ActiveXObject(tXMLHttp[i]);
                    }
                    catch (e){}
                }
                alert("<b>Ajax</b><br/>Unable to create XMLHttpRequest!");
                //alert("<b>Ajax</b><br/>Unable to create XMLHttpRequest!");
                return null;
            }
        })(),

        // Public methods
        Get : function(parUrl,parData,parCallBackFn,parCallBackParams,parErrorsHandler)
        {
            this.Request('GET',parUrl,parData,parCallBackFn,parCallBackParams,parErrorsHandler);
            return false;
        },
        Post : function(parUrl,parData,parCallBackFn,parCallBackParams,parErrorsHandler)
        {
            this.Request('POST',parUrl,parData,parCallBackFn,parCallBackParams,parErrorsHandler);
            return false;
        },

        Abort : function()
        {
            // Clear the watchdog
            clearTimeout(this._oTimeOut);
            this._oTimeOut = null;

            // Abort
            this._oXMLHttp.abort();

            // Clean the request
            delete this._jAjaxRequest;
            this._jAjaxRequest = null;

            // Retry
            this._bRunning = false;
            this._Request();
        },

        Request: function(parMethod,parUrl,parParams,parCallBackFn,parCallBackParam,parErrorsHandler)
        {
            if (this._tQueue.length > 20)
            {
                alert("<b>Ajax error</b><br/><br/>The message queue is full!");
                //alert("<b>Ajax error</b><br/><br/>The message queue is full!");
                return;
            }

            this._tQueue.push({
                "Method":parMethod,
                "Url":parUrl,
                "Params":parParams,
                "CallBackFn":parCallBackFn,
                "CallBackParam":parCallBackParam,
                "ErrorsHandler":parErrorsHandler,
                "Response":""
            });

            this._Request();
        },


        // Private methods
        _Request : function()
        {
            // Init the callback the first time
            if (this._fnOnReadyStateChanged == null)
            {
                this._fnReadyStateChanged = this._RequestOnReadyStateChanged.bind(this);
                this._oXMLHttp.onreadystatechange = this._fnReadyStateChanged;
                this._fnWatchDog = this._WatchDog.bind(this);
            }

            // Verify is the ajax component is running and if the queue is not empty
            if (this._tQueue.length <= 0)	return;
            if (this._bRunning == true)		return;
            this._bRunning = true;

            // Get the next item in the queue
            this._jAjaxRequest = this._tQueue.shift();
            if (this._jAjaxRequest.Params == undefined)	this._jAjaxRequest.Params = "";

            // Start the watchdog 5 sec
            this._oTimeOut = setTimeout(this._fnWatchDog,8000);

            // Try to connect to the page
            try
            {
                // Connection to the specified URL
                if (/POST/.test(this._jAjaxRequest.Method))
                    this._oXMLHttp.open("POST",this._jAjaxRequest.Url,true);
                else
                    this._oXMLHttp.open("GET", this._jAjaxRequest.Url + "?" + this._jAjaxRequest.Params,true);

                // JSON or URLENCODED
                if (/JSON/.test(this._jAjaxRequest.Method))
                    this._oXMLHttp.setRequestHeader('Content-Type','application/json');
                else
                    this._oXMLHttp.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
                this._oXMLHttp.setRequestHeader("Cache-Control","no-cache");

                // POST or GET
                if (/POST/.test(this._jAjaxRequest.Method))
                    this._oXMLHttp.send(this._jAjaxRequest.Params);
                else
                    this._oXMLHttp.send("");

                // Clean the params
                this._jAjaxRequest.Params = "";
            }
            catch(e)
            {
                if (this._jAjaxRequest == null)
                {
                    this.Abort();
                    return;
                }

                // User errors handler
                if (typeof(this._jAjaxRequest.ErrorsHandler) == "function")
                    this._jAjaxRequest.ErrorsHandler(e.name,this._jAjaxRequest.CallBackParam);
                else
                    alert("<b>Ajax error</b><br/>" + e.name + "<br/>" + e.message);
                //alert("<b>Ajax error</b><br/>" + e.name + "<br/>" + e.message);

                this.Abort();
                return;
            }
        },

        _WatchDog : function(){
            this.Abort();
        },

        _RequestOnReadyStateChanged: function()
        {
            // Ready state management
            switch(this._oXMLHttp.readyState)
            {
                case 0:
                    return;	// Not initalize
                case 1:
                    return;	// Loading
                case 2:
                    return;	// Loaded
                case 3:
                    return;	// Interacting
                case 4:
                    break;	// Finished
                default:
                    alert("<b>Internal ajax error</b><br/><br/>State " + this._oXMLHttp.readyState + "<br/>Http bad state<br/>Method:" + this._jAjaxRequest.Method + "<br/>Url:" + this._jAjaxRequest.Url);
                    //alert("<b>Internal ajax error</b><br/><br/>State " + this._oXMLHttp.readyState + "<br/>Http bad state<br/>Method:" + this._jAjaxRequest.Method + "<br/>Url:" + this._jAjaxRequest.Url);
                    this.Abort();
                    return;
            }

            // The request has been performed
            if (this._oXMLHttp.status == 200)
            {
                // Verify if an error exists
                if (/MKO STDIO ERROR/.test(this._oXMLHttp.responseText) ||
                    /<b>Warning<\/b>/.test(this._oXMLHttp.responseText) ||
                    /<b>Fatal error<\/b>/.test(this._oXMLHttp.responseText))
                    {
                    alert(this._jAjaxRequest.Url + "\n" + this._oXMLHttp.responseText);
                }
                else if (this._jAjaxRequest.CallBackFn != undefined && this._jAjaxRequest.CallBackFn != "")
                {
                    this._jAjaxRequest.CallBackFn(this._oXMLHttp.responseText,this._jAjaxRequest.CallBackParam);
                }

                this.Abort();
                return;
            }

            // User errors handler
            if (this._jAjaxRequest.ErrorsHandler != undefined && this._jAjaxRequest.ErrorsHandler != "")
            {
                this._jAjaxRequest.ErrorsHandler(this._oXMLHttp.status,this._jAjaxRequest.CallBackParam);
            }
            // Default errors handler
            else switch(this._oXMLHttp.status)
            {
                case 0:
                    break;
                case 301:
                    alert("<b>Internal ajax error 301</b><br/><br/>This page has been moved!<br/>" + this._jAjaxRequest.Url);
                    break;
                case 400:
                    alert("<b>Internal ajax error 400</b><br/><br/>Bad request!<br/>" + this._jAjaxRequest.Url);
                    break;
                case 401:
                    alert("<b>Internal ajax error 401</b><br/><br/>Not authorized!<br/>" + this._jAjaxRequest.Url);
                    break;
                case 403:
                    alert("<b>Internal ajax error 403</b><br/><br/>Forbidden!<br/>" + this._jAjaxRequest.Url);
                    break;
                case 404:
                    alert("<b>Internal ajax error 404</b><br/><br/>This page doesn't exists!<br/>" + this._jAjaxRequest.Url);
                    break;
                case 500:
                    alert("<b>Internal ajax error 500</b><br/><br/>Internal error!<br/>" + this._jAjaxRequest.Url);
                    break;
                case 501:
                    alert("<b>Internal ajax error 501</b><br/><br/>Not implemented!<br/>" + this._jAjaxRequest.Url);
                    break;
                default:
                    alert("<b>Internal ajax error " + this._oXMLHttp.status + "</b><br/><br/>Bad response: " +  this._oXMLHttp.statusText + "<br/>" + this._jAjaxRequest.Url);
                    break;
            }

            this.Abort();
            return;
        }

    }
};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah.js */

/*overriding prototypejs for custom livebox logic*/
(function(){
	String.prototype.evalScripts = function(){};
	String.prototype.parseJSON = function(){
		try {
			var json = this.unfilterJSON();
			var el = JSON.parse(json);
		} catch (e) {		  
			el = JSON.parse('{"result":{"status":null}}');	
		}
		return el;
	};
})();

Ajax.Request = Class.create(Ajax.Request, {	
	evalResponse: function() {
		try {
			var str = (this.transport.responseText ? '(' + this.transport.responseText + ')' : '').unfilterJSON();
			//start = new Date();
			var obj = eval(str);
			return obj;
		} catch (e) {
			return eval('({"result":{"status":null}})');
		//this.dispatchException(e);
		}
	}
});

Ajax.Request.Events =
	['Uninitialized', 'Loading', 'Loaded', 'Interactive', 'Complete'];

/**
 * @namespace 
 */
var Sah = {};

/**
 * The custom prefix used in the datamodel
 */
Sah.prefix = "X_SOFTATHOME-COM_";

/**
 * @namespace
 */
Sah.Config = {};

Sah.Config.environment = "production";
Sah.Config.logLevel = "INFO";
Sah.Config.language = "en";
Sah.Config.webserviceUrl = "/rest";

/**
 * @namespace
 */
Sah.Config.Upnp = {};

Sah.Config.Upnp.Identifier = "upnp";

Sah.Config.Firewall = {};

Sah.Config.Firewall.defaults = {
	natPat: {
		"FTP Server":{
			Name:"FTP Server",
			HostIPAddress :"0.0.0.0",
			Enable:0,
			Rule: 
			{
				"description": "FTP Server",
				ports: "21",
				DestinationIPAddress :"",
				Enable : false,
				ExternalPort : "21",       
				InternalPort:"21",	
				LeaseDuration:0,	
				Origin:"webui",	
				Protocol:"TCP",	
				SourceInterface:"data",	
				SourcePrefix:"",          
				Status :"Enabled"
          
			}
		},
		"FTP Data":{
			Name:"FTP Data",
			HostIPAddress :"0.0.0.0",
			Enable:0,
			Rule: 
			{
				"description": "FTP Data",
				ports: "20",
				DestinationIPAddress :"",
				Enable : false,
				ExternalPort : "20",       
				InternalPort:"20",	
				LeaseDuration:0,	
				Origin:"webui",	
				Protocol:"TCP",	
				SourceInterface:"data",	
				SourcePrefix:"",          
				Status :"Enabled"
          
			}
		},
		"Telnet":{
			Name:"Telnet",
			HostIPAddress :"0.0.0.0",
			Enable:0,
			Rule: 
			{
				"description": "Telnet",
				ports: "23",
				DestinationIPAddress :"",
				Enable : false,
				ExternalPort : "23",       
				InternalPort:"23",	
				LeaseDuration:0,	
				Origin:"webui",	
				Protocol:"TCP",	
				SourceInterface:"data",	
				SourcePrefix:"",          
				Status :"Enabled"
          
			}
		},
		"Secure Shell Server (SSH)":{
			Name:"Secure Shell Server (SSH)",
			HostIPAddress :"0.0.0.0",
			Enable:0,
			Rule: 
			{
				"description": "Secure Shell Server (SSH)",
				ports: "22",
				DestinationIPAddress :"",
				Enable : false,
				ExternalPort : "22",       
				InternalPort:"22",	
				LeaseDuration:0,	
				Origin:"webui",	
				Protocol:"TCP",	
				SourceInterface:"data",	
				SourcePrefix:"",          
				Status :"Enabled"
          
			}
		},
		"Secure Web Server (HTTPS)":{
			Name:"Secure Web Server (HTTPS)",
			HostIPAddress :"0.0.0.0",
			Enable:0,
			Rule: 
			{
				"description": "Secure Web Server (HTTPS)",
				ports: "443",
				DestinationIPAddress :"",
				Enable : false,
				ExternalPort : "443",       
				InternalPort:"443",	
				LeaseDuration:0,	
				Origin:"webui",	
				Protocol:"TCP",	
				SourceInterface:"data",	
				SourcePrefix:"",          
				Status :"Enabled"
          
			}
		},
		"Web Server (HTTP)":{
			Name:"Web Server (HTTP)",
			HostIPAddress :"0.0.0.0",
			Enable:0,
			Rule: 
			{
				"description": "Web Server (HTTP)",
				ports: "80",
				DestinationIPAddress :"",
				Enable : false,
				ExternalPort : "80",       
				InternalPort:"80",	
				LeaseDuration:0,	
				Origin:"webui",	
				Protocol:"TCP",	
				SourceInterface:"data",	
				SourcePrefix:"",          
				Status :"Enabled"
          
			}
		}
	},
	customRules :  {
		"HTTP": {
			"Id": "HTTP",
			"Target": "Accept",
			"Status": "Disabled",
			"Class": "Forward",
			"IPVersion": 4,
			"Protocol": "6",
			"DestinationPort": "80",
			"SourcePort": "80",
			"DestinationPrefix": "",
			"SourcePrefix": "",
			"TargetChain": "",
			"Description": "HTTP",
			"Enable": false
		},
		"HTTPS": {
			"Id": "HTTPS",
			"Target": "Accept",
			"Status": "Disabled",
			"Class": "Forward",
			"IPVersion": 4,
			"Protocol": "6",
			"DestinationPort": "443-443",
			"SourcePort": "6666-6667",
			"DestinationPrefix": "0.0.0.1/16",
			"SourcePrefix": "192.168.1.1/16",
			"TargetChain": "",
			"Description": "HTTPS",
			"Enable": false
		},
		"POP3": {
			"Id": "POP3",
			"Target": "Accept",
			"Status": "Disabled",
			"Class": "Forward",
			"IPVersion": 4,
			"Protocol": "6",
			"DestinationPort": "110-110",
			"SourcePort": "6666-6667",
			"DestinationPrefix": "0.0.0.1/16",
			"SourcePrefix": "192.168.1.1/16",
			"TargetChain": "",
			"Description": "POP3",
			"Enable": false
		},
		"POP3S": {
			"Id": "POP3S",
			"Target": "Accept",
			"Status": "Disabled",
			"Class": "Forward",
			"IPVersion": 4,
			"Protocol": "6",
			"DestinationPort": "995",
			"SourcePort": "",
			"DestinationPrefix": "",
			"SourcePrefix": "",
			"TargetChain": "",
			"Description": "POP3S",
			"Enable": false
		},
		"SMTPAuth": {
			"Id": "SMTPAuth",
			"Target": "Accept",
			"Status": "Disabled",
			"Class": "Forward",
			"IPVersion": 4,
			"Protocol": "6",
			"DestinationPort": "587",
			"SourcePort": "",
			"DestinationPrefix": "",
			"SourcePrefix": "",
			"TargetChain": "",
			"Description": "SMTPAuth",
			"Enable": false
		},
		"SMTP": {
			"Id": "SMTP",
			"Target": "Accept",
			"Status": "Disabled",
			"Class": "Forward",
			"IPVersion": 4,
			"Protocol": "6",
			"DestinationPort": "25",
			"SourcePort": "",
			"DestinationPrefix": "",
			"SourcePrefix": "",
			"TargetChain": "",
			"Description": "SMTP",
			"Enable": false
		},
		"FTP": {
			"Id": "FTP",
			"Target": "Accept",
			"Status": "Disabled",
			"Class": "Forward",
			"IPVersion": 4,
			"Protocol": "6",
			"DestinationPort": "20-21",
			"SourcePort": "",
			"DestinationPrefix": "",
			"SourcePrefix": "",
			"TargetChain": "",
			"Description": "FTP",
			"Enable": false
		},
		"SSH": {
			"Id": "SSH",
			"Target": "Accept",
			"Status": "Disabled",
			"Class": "Forward",
			"IPVersion": 4,
			"Protocol": "6",
			"DestinationPort": "22",
			"SourcePort": "",
			"DestinationPrefix": "",
			"SourcePrefix": "",
			"TargetChain": "",
			"Description": "SSH",
			"Enable": false
		},
		"NTP": {
			"Id": "NTP",
			"Target": "Accept",
			"Status": "Disabled",
			"Class": "Forward",
			"IPVersion": 4,
			"Protocol": "17",
			"DestinationPort": "123",
			"SourcePort": "",
			"DestinationPrefix": "",
			"SourcePrefix": "",
			"TargetChain": "",
			"Description": "NTP",
			"Enable": false
		},
		"NNTP": {
			"Id": "NNTP",
			"Target": "Accept",
			"Status": "Disabled",
			"Class": "Forward",
			"IPVersion": 4,
			"Protocol": "6",
			"DestinationPort": "119",
			"SourcePort": "",
			"DestinationPrefix": "",
			"SourcePrefix": "",
			"TargetChain": "",
			"Description": "NNTP",
			"Enable": false
		},
		"NNTPS": {
			"Id": "NNTPS",
			"Target": "Accept",
			"Status": "Disabled",
			"Class": "Forward",
			"IPVersion": 4,
			"Protocol": "6",
			"DestinationPort": "563",
			"SourcePort": "",
			"DestinationPrefix": "",
			"SourcePrefix": "",
			"TargetChain": "",
			"Description": "NNTPS",
			"Enable": false
		},
		"DNS": {
			"Id": "DNS",
			"Target": "Accept",
			"Status": "Disabled",
			"Class": "Forward",
			"IPVersion": 4,
			"Protocol": "6,17",
			"DestinationPort": "53",
			"SourcePort": "",
			"DestinationPrefix": "",
			"SourcePrefix": "",
			"TargetChain": "",
			"Description": "DNS",
			"Enable": false
		},
		"IMAP": {
			"Id": "IMAP",
			"Target": "Accept",
			"Status": "Disabled",
			"Class": "Forward",
			"IPVersion": 4,
			"Protocol": "6",
			"DestinationPort": "143",
			"SourcePort": "",
			"DestinationPrefix": "",
			"SourcePrefix": "",
			"TargetChain": "",
			"Description": "IMAP",
			"Enable": false
		}
	}
    
}


Sah.captivePortal = {
	"Error_01": {
		"title": "Bootstrap or first boot",
		"description": "At the first boot or after factory reset of Livebox, Livebox is not yet configured. The customer or the operator (PnP) must configured Internet service (PPP credentials).",
		"messages": "<b>No message : See installation page</b>",
		"messages_pl": ""
		},
	
	"Error_02": {
		"title": "DSL issue for DSL customer",
		"description": "ADSL synchronization is missing on Livebox to deliver internet service.",
		"messages": "Un problème sur votre ligne a été identifié.<br/> Si vous avez <b>souscrit un abonnement très récemment</b>, veuillez patienter jusqu’à ce que vous soyez informés de la livraison du service. <br> Sinon, <b>vérifiez les branchements</b> entre votre Livebox et la prise téléphonique murale, puis redémarrez votre Livebox.<br><br>Si le problème persiste, merci de contacter votre service clients Orange.",
                "messages_pl": "Wystąpił problem z twoją linią.<br>Jeśli jesteś nowym klientem, poczekaj na potwierdzenie, że usługa jest już dostępna.<br>W przeciwnym wypadku sprawdź przewód łączący Livebox’a z gniazdem telefonicznym a następnie zrestartuj Livebox’a. <br>Jeśli problem występuje nadal skontaktuj się ze wsparciem technicznym." 
	},
	
	"Error_03": {
		"title": "ONT issues for Fiber customer",
		"description": "Ethernet detection is missing on Livebox WAN port to deliver Internet service by Livebox.",
		"messages": "Un problème sur votre ligne fibre a été identifié.<br> 1/ Vérifiez les branchements entre le boitier fibre et votre Livebox.<br> 2/ Vérifiez leur alimentation électrique.<br> 3/ Redémarrez votre Livebox.<br><br>Si le problème persiste, merci de contacter le service clients Orange",
		"messages_pl": "Wystąpił problem z twoją linią światłowodową. <br> 1. Sprawdź przewód łączący Livebox’a z terminalem światłowodowym (ONT).<br> 2. Sprawdź zasilanie obu urządzeń Livebox’a i ONT.<br> 3. Zrestartuj Liveboxa.<br><br>Jeśli problem występuje nadal skontaktuj się ze wsparciem technicznym. "
	}, 
	
	"Error_04": {
		"title": "Bad PPP Authentication",
		"description": "PPP Username or password configured by customer are incorrect or not valid",
		"messages": "Un problème d’identifiants de connexion internet a été détecté.<br>1/ Munissez vous de vos identifiants et mot de passe de connexion Internet, ceux-ci se trouvent sur votre courrier de confirmation d’abonnement.<br>2/ Connectez vous à l’interface de la Livebox en cliquant <a href='advConfigAccessType.html'>ICI</a>. <b>Attention</b> prenez connaissance de toutes les informations de ce message avant de cliquer.<br>3/ Saisissez votre mot de passe d’administration de la Livebox (mot de passe :  8 premiers caractères de la clé de sécurité par défaut, si vous ne l'avez jamais modifié).<br>4/ Saisissez à nouveau vos identifiants et mot de passe de connexion Internet.<br><br>Si le problème persiste, redémarrez votre Livebox avant de contacter votre service clients Orange",
		"messages_pl": "Wystąpił problem z twoim loginem lub hasłem do Neostrady. <br> 1. Sprawdź login i hasło, które otrzymałeś w procesie rejestracji. <br> 2. Otwórz stronę konfiguracyjną Livebox’a klikając <a href='advConfigAccessType.html'>tutaj</a>. Uwaga: przed kliknięciem przeczytaj (poniżej) pozostałe  punkty. <br> 3. Wprowadź login i hasło administratora (domyślne hasło to admin, jeśli go nie zmieniałeś). <br> 4. Wprowadź ponownie login i hasło do Neostrady otrzymane w procesie rejestracji. <br><br>Jeśli problem występuje nadal skontaktuj się ze wsparciem technicznym."
	}, 
	
	"Error_05": {
		"title": "No PPP username or password",
		"description": "PPP Username or password are erased",
		"messages": "Un problème d’identifiants de connexion internet a été détecté.<br>1/ Munissez vous de vos identifiants et mot de passe de connexion Internet, ceux-ci se trouvent sur votre courrier de confirmation d’abonnement.<br>2/ Connectez vous à l’interface de la Livebox en cliquant <a href='advConfigAccessType.html'>ICI</a>. <b>Attention</b> prenez connaissance de toutes les informations de ce message avant de cliquer.<br>3/ Saisissez votre mot de passe d’administration de la Livebox (mot de passe : 8 premiers caractères de la clé de sécurité par défaut, si vous ne l'avez jamais modifié).<br>4/ Saisissez à nouveau vos identifiants et mot de passe de connexion Internet.<br><br>Si le problème persiste, redémarrez votre Livebox avant de contacter votre service clients Orange.",
		"messages_pl": "Wystąpił problem z twoim loginem lub hasłem do Neostrady <br> Sprawdź login i hasło, które otrzymałeś w procesie rejestracji <br> Otwórz stronę konfiguracyjną Livebox’a klikając <a href='advConfigAccessType.html'>tutaj</a>. Uwaga: przed kliknięciem przeczytaj (poniżej) pozostałe  punkty. <br> Wprowadź login i hasło administratora (domyślne hasło to admin, jeśli go nie zmieniałeś) <br> Wprowadź ponownie login i hasło do Neostrady otrzymane w procesie rejestracji. <br><br>Jeśli problem występuje nadal skontaktuj się ze wsparciem technicznym."
	  
	}, 
	
	"Error_06": {
		"title": "No PPP server response or error in PPP sequence",
		"description": " Physical connection (ADSL or Ethernet) is up but PPP is down (no response or error message) ",
		"messages": "Un problème sur votre ligne ADSL ou Fibre a été identifié.<br>Des travaux sur notre réseau sont peut-être en cours, merci de patienter quelques heures ou de vérifier l’état de votre réseau sur <a href='http://www.orange.fr'>www.orange.fr</a>.<br><br> Si le problème persiste, merci de redémarrer votre Livebox avant de contacter votre service clients Orange",
		"messages_pl": "Wystąpił problem z twoją linią ADSL lub dostępem światłowodowym. <br>Mogą trwać prace serwisowe na Twojej linii dostępowej. Prosimy poczekaj kilka godzin i sprawdź ponownie czy połączenie zostało przywrócone. <br><br> Jeśli problem nadal występuje prosimy zrestartuj Livebox’a i sprawdź ponownie zanim skontaktujesz się ze wsparciem technicznym. "
	  
	},

	"Error_07": {
		"title": "No DHCP response or error in DHCP sequence",
		"description": "Physical connection (ADSL or Ethernet) is up but DHCP sequence is wrong (no response or error message)",
		"messages": "Un problème sur votre ligne ADSL ou Fibre a été identifié.<br>Des travaux sur notre réseau sont peut-être en cours, merci de patienter quelques heures ou de vérifier l’état de votre réseau sur <a href='http://www.orange.fr'>www.orange.fr</a>.<br><br> Si le problème persiste, merci de redémarrer votre Livebox avant de contacter votre service clients Orange",
		"messages_pl" : "Wystąpił problem z twoją linią ADSL lub dostępem światłowodowym.<br>Mogą trwać prace serwisowe na Twojej linii dostępowej. Prosimy poczekaj kilka godzin i sprawdź ponownie czy połączenie zostało przywrócone.<br><br> Jeśli problem nadal występuje prosimy zrestartuj Livebox’a i sprawdź ponownie zanim skontaktujesz się ze wsparciem technicznym. "	    
	},
	
	"Error_08": {
		"title": "Firmware upgrade on going",
		"description": "Automatic Livebox firmware upgrade is on going and Internet service is unavailable",
		"messages": "<div style='text-align:center;'>Mise à jour de la Livebox en cours.<br><b>Ne pas éteindre la Livebox</b></div><br><br>La Livebox télécharge régulièrement une nouvelle version de son logiciel.<br>La mise à jour garantit ainsi les meilleures performances tout en assurant une compatibilité avec les offres futures.<br>La mise à jour est automatique et autonome. Elle s’effectue au démarrage ou périodiquement, sans aucune intervention de votre part.<br><b>Lors du déroulement de cette opération, tous les services sont désactivés (téléphone par Internet, TV...).</b><br>Durant la mise à jour, la Livebox communique directement avec les services techniques d’Orange. Cela peut durer 5 à 10 minutes.<br>Les fonctionnalités seront de nouveau disponibles lorsque la mise à jour sera terminée.",
		"messages_pl": "<div style='text-align:center;'>Trwa aktualizacja oprogramowania Livebox’a<br><b>Prosimy nie wyłączaj urządzenia.</b></div><br><br>Trwa aktualizacja oprogramowania Livebox’a.<br>Livebox regularnie pobiera nową wersję oprogramowania.<br>Aktualizacje zwiększają wydajność oraz umożliwiają korzystanie z nowych usług.<br>Aktualizacja jest automatyczna. Odbywa się ona przy okazji restartu i nie wymaga żadnych twoich działań.<br>Podczas aktualizacji wszystkie usługi (Internet, telefon, TV) są niedostępne przez około 5 – 10 minut. Wszystkie usługi zostaną przywrócone po zakończeniu aktualizacji. "
	},
	
	"Error_09": {
		"title": "TV service down",
		"description": "Message on STB for TV service",
		"messages": "Un problème sur votre service TV a été identifié.<br>1/ Débranchez l’alimentation électrique votre Livebox puis rebranchez la<br>2/ Débranchez puis rebranchez vos Liveplug si vous en avez<br>3/ Débranchez l’alimentation électrique de votre décodeur<br>4/ Attendez que votre Livebox soit connectée à Internet<br>5/ Rebranchez l’alimentation électrique de votre décodeur",
		"messages_pl": ""
	},
	
	"Error_10": {
		"title": "PnP issue",
		"description": "TBC",
		"messages": "TBC",
		"messages_pl": ""
	},
    
	"Error_11": {
		"title": "Internet Blocked",
		"description": "Internet Blocked",
		"messages": "<b>Accès Internet bloqué</b><br/><br/>Votre droit d’accès Internet a été modifié et vous n’avez pas d’accès Internet actuellement.<br><br>Cette restriction a été définie probablement par un membre de votre famille (non pas par votre opérateur).",
		"messages_pl": "Dostęp do Internetu został wyłączony.<br>Uprawnienia dostępu do Internetu zostały zmodyfikowane - obecnie nie masz dostępu do Internetu.<br>Ograniczenie to zostało zdefiniowane przez członka Twojej rodziny (nie przez operatora sieci)."
	
	}
};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/log.js */

/**
 * @namespace
 */
Sah.Log = {};

/** log level for debugging messages */
Sah.Log.DEBUG = 4;
/** log level for informative messages */
Sah.Log.INFO = 3;
/** log level for warning messages */
Sah.Log.WARN = 2;
/** log level for error messages */
Sah.Log.ERROR = 1;
/** log level for no messages */
Sah.Log.NONE = 0;

/** current log level  */
Sah.Log.level = (Sah.Config.LogLevel ? Sah.Log[Sah.Config.LogLevel.toUpperCase()] : Sah.Log.INFO);

/**
 * Which logger should be enabed. Use an array of logger
 * names or the string "all" to enable all loggers.
 */
Sah.Log.enable = "none";

Sah.Log.Logger = Class.create(
/** @lends Sah.Log.Logger# */
{
	/**
     * Create an new logger instance
     * @class A logger class using the firebug console
     * @constructs
     */
	initialize: function (name)
	{
		this.name = name;
		_isFunction = function( obj ) { return Object.prototype.toString.call(obj) === "[object Function]"; }
	},
//          _isFunction :function( obj ) { 
// 	   
// 	   return Object.prototype.toString.call(obj) === "[object Function]"; 
// 	   
// 	},
	/**
     * Returns true if this logger is enabled
     * @returns {Boolean}
     */
	enabled: function (level)
	{
	  
	      if (typeof window.console.log === 'function' && _isFunction(window.console.log.apply)) {
		return (window.console  && console && console.error && console.warn && console.error && console.info.apply && level <= Sah.Log.level &&
			((Object.isString(Sah.Log.enable) && Sah.Log.enable == "none")
				|| (Object.isArray(Sah.Log.enabled) && Sah.Log.enable.indexOf(this.name) != -1)));
	      }
	},

	/**
     * Output a debug message
     */
	debug: function (object)
	{
		arguments[0] = "[" + this.name + "] " + arguments[0];
		if (this.enabled(Sah.Log.DEBUG))
			console.debug.apply(console, arguments);
	},

	/**
     * Output an informative message
     */
	info: function (object)
	{
		arguments[0] = "[" + this.name + "] " + arguments[0];
		if (this.enabled(Sah.Log.INFO))
			console.info.apply(console, arguments);
	},

	/**
     * Output a warning message
     */
	warn: function (object)
	{
		arguments[0] = "[" + this.name + "] " + arguments[0];
		if (this.enabled(Sah.Log.WARN))
			console.warn.apply(console, arguments);
	},

	/**
     * Output an error message
     */
	error: function (object)
	{
		arguments[0] = "[" + this.name + "] " + arguments[0];
		if (arguments[1] && arguments[1].message) {
			if (this.enabled(Sah.Log.ERROR)) {
				var error = arguments[1];				
				console.error.apply(console, arguments);
					
				
			}
		} else {
			if (this.enabled(Sah.Log.ERROR)&&console.error)
				console.error.apply(console, arguments);
		}
	},

	/**
     * Verify an assertion
     */
	assert: function (expression)
	{
		if (this.enabled(Sah.Log.DEBUG))
			console.assert.apply(console, expression);
	}
}
);

Sah.logger = new Sah.Log.Logger("default");

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/utils.js */

/**
 * Invoke a function for each maching elements after the document
 * is loaded.
 *
 * It takes a css descriptor and a function/class as an argument.
 * For each of the matched element, the function is called or
 * the class is instanciated with the element as argument when
 * the browser has finished loading the page.
 *
 * @param {String} selector prototypejs selector (css)
 * @param {Function} func the function to call for each of the matched elements.
 */
Sah.behave = function (selector, func){	
	Event.observe(document, "dom:loaded", function (event) {		
		var elements = $$(selector);
		for(var i=0; i<elements.length ; i+=1){
			if(elements[i]){
				new func(elements[i]);
			}
		}		
	});
};

/**
 * Include a javascript file and make sure this is only done once
 */
Sah.include = function (fileName, loadedCallback)
{
	if (Sah.included[fileName]) {
		(loadedCallback || Prototype.emptyFunction)(fileName);
		return;
	}

	Sah.included[fileName] = true;

	var element = new Element('script', {
		type: 'text/javascript', 
		src: fileName
	});

	$$("head")[0].appendChild(element);

	element.observe('readystatechange', function () {
		if (!this.loaded && (this.readyState === 'complete' || this.readyState === 'loaded')) {
			this.loaded = true;
			try {
				(loadedCallback || Prototype.emptyFunction)(fileName);
			} catch (error) {
				Sah.logger.error("error in include callback", error);
			}
		}
	});

	element.observe('load', function () {
		if (!this.loaded) {
			this.loaded = true;
			try {
				(loadedCallback || Prototype.emptyFunction)(fileName);
			} catch (error) {
				Sah.logger.error("error in include callback", error);
			}
		}
	});
};

Sah.included = {};

/**
 * the decorator pattern for the handlers
 */
Sah.decorateHandlers = function (context, oldHandlers, decorators)
{
	if (Object.isFunction(oldHandlers)) {
		oldHandlers = {
			"onSuccess": oldHandlers
		};
	}

	var localHandlers = Object.clone(oldHandlers);

	var keys = $A($H(localHandlers).keys().concat($H(decorators).keys())).uniq();

	keys.each(function (key) {
		if (decorators[key]) {
			localHandlers[key] = function (object, response) {
				var oldHandler = (oldHandlers[key] ? oldHandlers[key] : Prototype.emptyFunction);
				decorators[key].call(context, oldHandler, object, response);
			};
		}
	});
	return localHandlers;
};

/**
 * resolve parameter
 */
Sah.strToBus = function (string) {
	return string.replace("$", Sah.prefix);
};

Sah.strFromBus = function (string) {
	return string.replace(Sah.prefix, "$");
};

var $TB = Sah.strToBus;
var $FB = Sah.strFromBus;

Sah.redirect = function (location)
{
	Event.fire(document, 'sah:redirect', location);
	return false;
};

/**
 * Create a url to a resource
 */
Sah.res = function (path) {
	return window.appUrl + path + "?" + window.appUid;
};

/**
 * Create a url to a resource
 */
Sah.img = function (path) {
	return window.appUrl + "/images/" + window.appConfig + path + "?" + window.appUid;
};

/**
 * Create a url to an html file
 */
Sah.link = function (path) {
	return window.appUrl + path;
};

/**
 *
 */
Sah.deprecated = function (symbol, bug) {
	Sah.logger.warn("The symbol %s is deprecated. Please report it in Bug%d with context informations like the page, the call stack, ...", symbol, bug);
};

Sah.set = function(mixed, value){
	if(typeof mixed == 'string'){
		Sah.__globals__[mixed] = value;
	}else{
		for(var key in mixed){
			Sah.__globals__[key] = mixed[key];
		}
	}
};

Sah.get = function(key){
	return Sah.__globals__[key];
}
Sah.getter = function (data, accessor) {
	var keys = accessor.split('.'),
	result = data;

	while (keys.length > 0) {
		var key = keys.shift();
		if (typeof result[key] !== 'undefined') {
			result = result[key];
		} else {
			result = null;
			break;
		}
	}

	return result;
};
Sah.detectReboot = function(destinationUrl){
	Sah.detectRebootUrl = destinationUrl;    
	setTimeout(function() {
		new Ajax.Request(Sah.link("sysbus/DeviceInfo"), {
			method: "get",
			/*
			postBody: Object.toJSON({
				"parameters": {}
			}),
			  */
			onSuccess: function(transport) {               
// 			  Sah.redirect(Sah.detectRebootUrl);
			  return (window.location = window.location.protocol+"//" + window.location.host + destinationUrl);
			},
			onFailure: function(){
				Sah.detectReboot(Sah.detectRebootUrl);
			}
		});
	}.bind(this), 5000);
}

Sah.__globals__ = {};

Sah.BrowserDetect = {
	init: function () {
		this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
		this.version = this.searchVersion(navigator.userAgent)
		|| this.searchVersion(navigator.appVersion)
		|| "an unknown version";
		this.OS = this.searchString(this.dataOS) || "an unknown OS";
	},
	
	searchString: function (data) {
		for (var i=0;i<data.length;i++)	{
			var dataString = data[i].string;
			var dataProp = data[i].prop;
			this.versionSearchString = data[i].versionSearch || data[i].identity;
			if (dataString) {
				if (dataString.indexOf(data[i].subString) != -1)
					return data[i].identity;
			}
			else if (dataProp)
				return data[i].identity;
		}
	},
	
	searchVersion: function (dataString) {
		var index = dataString.indexOf(this.versionSearchString);
		if (index == -1) return;
		return parseFloat(dataString.substring(index+this.versionSearchString.length+1));
	},
	
	isCompatible: function () {
		for (var i=0; i<this.supoprtedBrowsers.length; i++) {
			if ( this.browser == this.supoprtedBrowsers[i].browser && this.version >= this.supoprtedBrowsers[i].version )
				return true;
		}
		
		return false;
	},
	
	dataBrowser: [
	{
		string: navigator.userAgent,
		subString: "Chrome",
		identity: "Chrome"
	},
	{
		string: navigator.userAgent,
		subString: "OmniWeb",
		versionSearch: "OmniWeb/",
		identity: "OmniWeb"
	},
	{
		string: navigator.vendor,
		subString: "Apple",
		identity: "Safari",
		versionSearch: "Version"
	},
	{
		prop: window.opera,
		identity: "Opera",
		versionSearch: "Version"
	},
	{
		string: navigator.vendor,
		subString: "iCab",
		identity: "iCab"
	},
	{
		string: navigator.vendor,
		subString: "KDE",
		identity: "Konqueror"
	},
	{
		string: navigator.userAgent,
		subString: "Firefox",
		identity: "Firefox"
	},
	{
		string: navigator.vendor,
		subString: "Camino",
		identity: "Camino"
	},
	{		// for newer Netscapes (6+)
		string: navigator.userAgent,
		subString: "Netscape",
		identity: "Netscape"
	},
	{
		string: navigator.userAgent,
		subString: "MSIE",
		identity: "Explorer",
		versionSearch: "MSIE"
	},
	{
		string: navigator.userAgent,
		subString: "Gecko",
		identity: "Mozilla",
		versionSearch: "rv"
	},
	{ 		// for older Netscapes (4-)
		string: navigator.userAgent,
		subString: "Mozilla",
		identity: "Netscape",
		versionSearch: "Mozilla"
	}
	],
	
	dataOS : [
	{
		string: navigator.platform,
		subString: "Win",
		identity: "Windows"
	},
	{
		string: navigator.platform,
		subString: "Mac",
		identity: "Mac"
	},
	{
		string: navigator.userAgent,
		subString: "iPhone",
		identity: "iPhone/iPod"
	},
	{
		string: navigator.platform,
		subString: "Linux",
		identity: "Linux"
	}
	],
	
	supoprtedBrowsers: [{
		browser: 'Firefox',
		version: 3	
	},{
		browser: 'Explorer',
		version: 7
	}, {
		browser: 'Chrome',
		version: 6
	}, {
		browser: 'Safari',
		version: 4
	}, {
		browser: 'Opera',
		version: 10
	}]
};

Sah.BrowserDetect.init();

/**
 * Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>
 * © 2011 Colin Snover <http://zetafleet.com>
 * Released under MIT license.
 */
(function (Date, undefined) {
	var origParse = Date.parse, numericKeys = [ 1, 4, 5, 6, 7, 10, 11 ];
	Date.parse = function (date) {
		var timestamp, struct, minutesOffset = 0;
        
		// ES5 §15.9.4.2 states that the string should attempt to be parsed as a Date Time String Format string
		// before falling back to any implementation-specific date parsing, so that’s what we do, even if native
		// implementations could be faster
		// 1 YYYY 2 MM 3 DD 4 HH 5 mm 6 ss 7 msec 8 Z 9 ± 10 tzHH 11 tzmm
		if ((struct = /^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/.exec(date))) {
			// avoid NaN timestamps caused by “undefined” values being passed to Date.UTC
			for (var i = 0, k; (k = numericKeys[i]); ++i) {
				struct[k] = +struct[k] || 0;
			}

			// allow undefined days and months
			struct[2] = (+struct[2] || 1) - 1;
			struct[3] = +struct[3] || 1;
  
            
			if (struct[8] !== 'Z' && struct[9] !== undefined) {
				minutesOffset = struct[10] * 60 + struct[11];

				if (struct[9] === '+') {
					minutesOffset = 0 - minutesOffset;
				}
			}
           
			timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
		}
		else {
            
         
			timestamp = origParse ? origParse(date) : NaN;
		}

		return timestamp;
	};
}(Date));

/**
 * Convert number of seconds into time object
 *
 * @param secs Number of seconds to convert
 * @return object
 */
Sah.secondsToTime = function(secs){    
	if(secs === "")
		secs = 0;
		
	secs = parseInt(secs);
	var days = Math.floor(secs / (60*60*24));
	var divisor_for_hours = secs % (60*60*24);
	var hours = Math.floor(divisor_for_hours / (60 * 60));
	
	var divisor_for_minutes = secs % (60 * 60);
	var minutes = Math.floor(divisor_for_minutes / 60);

	var divisor_for_seconds = divisor_for_minutes % 60;
	var seconds = Math.ceil(divisor_for_seconds);
	
	var obj = {
		"d":(days/10 >=1)?days:"0"+days,
		"h": (hours/10>=1)?hours:"0"+hours,
		"m": (minutes/10>=1)?minutes:"0"+minutes,
		"s": (seconds/10>=1)?seconds:"0"+seconds
	};
   
	var timeStr = '';
	if ( Cookie.get("language") == "fr" ) {
		if(obj.d)timeStr += obj.d+" j ";
		if(obj.h)timeStr += obj.h+" h ";
		if(obj.m)timeStr += obj.m+" m ";
		if(obj.s)timeStr += obj.s+" s";
		return timeStr;
	}
   
	else if ( Cookie.get("language") == "pl" ) {
		if(obj.d)timeStr += obj.d+" d ";
		if(obj.h)timeStr += obj.h+" g ";
		if(obj.m)timeStr += obj.m+" m ";
		if(obj.s)timeStr += obj.s+" s ";
		return timeStr;
	}
   
	else {
		if(obj.d)timeStr += obj.d+" d ";
		if(obj.h)timeStr += obj.h+" h ";
		if(obj.m)timeStr += obj.m+" m ";
		if(obj.s)timeStr += obj.s+" s";
		return timeStr;
	}
	
};

Sah.uptimeToDate = function(secs){
	if(secs === ""){
		return "";
	}
	var timeStr = '';
	var date = (new Date().getTime()) - (parseInt(secs) * 1000);
	date = new Date(date);
	
	var newDate = {
		year:date.getFullYear(),
		month:date.getMonth()+1,
		day:date.getDate(),
		hour:((date.getHours()+"").length == 1)?"0"+date.getHours():date.getHours(),
		minute:((date.getMinutes()+"").length == 1)?"0"+date.getMinutes():date.getMinutes(),
		//~seconde:((date.getSeconds()+"").length == 1)?"0"+date.getSeconds():date.getSeconds()
	}
	
	switch(newDate.month){
		 case 1 : newDate.month = t("general.label.months.january", ""); break;
		 case 2 : newDate.month = t("general.label.months.february",""); break;		 
		 case 3 : newDate.month = t("general.label.months.march",""); break;		 
		 case 4 : newDate.month = t("general.label.months.april",""); break;		 
		 case 5 : newDate.month = t("general.label.months.may",""); break;		 
		 case 6 : newDate.month = t("general.label.months.june",""); break;		 
		 case 7 : newDate.month = t("general.label.months.july",""); break;		 
		 case 8 : newDate.month = t("general.label.months.august",""); break;		 
		 case 9 : newDate.month = t("general.label.months.september",""); break;		 
		 case 10 : newDate.month = t("general.label.months.october",""); break;		 
		 case 11 : newDate.month = t("general.label.months.november",""); break;		 
		 case 12 : newDate.month = t("general.label.months.december",""); break;
	}
				
	if ( Cookie.get("language") == "fr" ) {
		//~timeStr = newDate.day+" "+newDate.month+" "+newDate.year.toString()+", "+newDate.hour+" h "+newDate.minute+" m "+newDate.seconde+" s";
		timeStr = newDate.day+" "+newDate.month+" "+newDate.year.toString()+", "+newDate.hour+" h "+newDate.minute+" m";
	} else if ( Cookie.get("language") == "pl" ) {
		//~timeStr = newDate.day+" "+newDate.month+" "+newDate.year.toString()+", "+newDate.hour+" h "+newDate.minute+" m "+newDate.seconde+" s";
		timeStr = newDate.day+" "+newDate.month+" "+newDate.year.toString()+", "+newDate.hour+" h "+newDate.minute+" m";
	} else if ( Cookie.get("language") == "en" ) {
		switch (newDate.day) {
			case 1:  newDate.day = "1st"; break;
			case 2:  newDate.day = "2nd"; break;
			case 3:  newDate.day = "3rd"; break;
			default: newDate.day = newDate.day+"th"; break;
		}
		//~timeStr = newDate.day+" of "+newDate.month+" "+newDate.year.toString()+", "+newDate.hour+" h "+newDate.minute+" m "+newDate.seconde+" s";
		timeStr = newDate.day+" of "+newDate.month+" "+newDate.year.toString()+", "+newDate.hour+" h "+newDate.minute+" m";
	}
	return timeStr;
};

//~Sah.uptimeToDate = function(secs){
	//~
	//~var timeStr = '';
	//~var date = (new Date().getTime()) - (parseInt(secs) * 1000);
	//~date = new Date(date);
	//~
	//~var newDate = {
		//~year:date.getFullYear(),
		//~month:date.getMonth()+1,
		//~day:date.getDate(),
		//~hour:((date.getHours()+"").length == 1)?"0"+date.getHours():date.getHours(),
		//~minute:((date.getMinutes()+"").length == 1)?"0"+date.getMinutes():date.getMinutes(),
		//~seconde:((date.getSeconds()+"").length == 1)?"0"+date.getSeconds():date.getSeconds()
        //~}
	//~
	//~switch(newDate.month){
		 //~case 1 : newDate.month = t("general.label.months.january", ""); break;
		 //~case 2 : newDate.month = t("general.label.months.february",""); break;		 
		 //~case 3 : newDate.month = t("general.label.months.march",""); break;		 
		 //~case 4 : newDate.month = t("general.label.months.april",""); break;		 
		 //~case 5 : newDate.month = t("general.label.months.may",""); break;		 
		 //~case 6 : newDate.month = t("general.label.months.june",""); break;		 
		 //~case 7 : newDate.month = t("general.label.months.july",""); break;		 
		 //~case 8 : newDate.month = t("general.label.months.august",""); break;		 
		 //~case 9 : newDate.month = t("general.label.months.september",""); break;		 
		 //~case 10 : newDate.month = t("general.label.months.october",""); break;		 
		 //~case 11 : newDate.month = t("general.label.months.november",""); break;		 
		 //~case 12 : newDate.month = t("general.label.months.december",""); break;
	//~}
            	//~
	//~if ( Cookie.get("language") == "fr" ) {
		//~timeStr = newDate.day+" "+newDate.month+" "+newDate.year.toString()+", "+newDate.hour+" h "+newDate.minute+" m "+newDate.seconde+" s";
	//~} else if ( Cookie.get("language") == "pl" ) {
		//~timeStr = newDate.day+" "+newDate.month+" "+newDate.year.toString()+", "+newDate.hour+" h "+newDate.minute+" m "+newDate.seconde+" s";
	//~} else if ( Cookie.get("language") == "en" ) {
		//~switch (newDate.day) {
			//~case 1:  newDate.day = "1st"; break;
			//~case 2:  newDate.day = "2nd"; break;
			//~case 3:  newDate.day = "3rd"; break;
			//~default: newDate.day = newDate.day+"th"; break;
		//~}
		//~timeStr = newDate.day+" of "+newDate.month+" "+newDate.year.toString()+", "+newDate.hour+" h "+newDate.minute+" m "+newDate.seconde+" s";
	//~}
	//~return timeStr;
//~};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/bus.js */
/**
 * @namespace
 * @private
 */
Sah.Bus = {};
/**
 * A logger for the Sah.Bus namespace
 * @private
 */
Sah.Bus.logger = new Sah.Log.Logger("bus");

/**
 * The default url to connect to
 * @private
 */
Sah.Bus.defaultUrl = (Sah.Config.webserviceUrl || "");

/**
 * The context id to send with request
 */
Sah.Bus.contextID = Cookie.get('context', Sah.Bus.contextID);

Sah.Bus.Error = Class.create( /** @lends Sah.Bus.Error# */ {
	/**
     * Create a new Sah.Bus.Error
     * @class thrown on a bus access error
     * @param message the message of the exception
     * @constructs
     * @private
     */
	initialize: function (message) {
		/**
         * the name of the error
         * @private
         */
		this.name = "sahbus error";
		/**
         * the error message
         * @private
         */
		this.message = message;
	},

	/**
     * @private
     */
	toString: function () {
		return this.name + ":" + this.message;
	}
});

/**
 * convert a parameter, replacing $ with X_000E50
 * @returns {String} the parameter name with $ replaced by X_000E50
 * @private
 */
Sah.Bus.parameterToBus = function (parameter) {
	return parameter.replace("$", Sah.prefix);
};

/**
 * convert a parameter replacing X_000E50 by $
 * @returns {String} the parameter name with X_000E50 replaced by $
 * @private
 */
Sah.Bus.parameterFromBus = function (parameter) {
	return parameter.replace(Sah.prefix, "$");
};

/**
 * regular expression to strip the leading path from the object path
 * @private
 */
Sah.Bus.stripPath = new RegExp("^rest\\.");

Sah.Bus.Object = Class.create( /** @lends Sah.Bus.Object# */ {
	/**
     * Create a new Sah.Bus.Object
     * @class This class maps a sahbus object to a javascript object
     * @param {Sah.Bus.Client} client the client that will be used for operation on the object
     * @param {Object} resource the resource received from the web service and defining the object
     * @constructs
     * @private
     */
	initialize: function (client, resource, depth) {
		this._logger = Sah.Bus.logger;
		this._client = client;
		if (resource) {
			this._childs = [];
			this._populate(resource, depth);
		}
		this._errors = $A();
		this._validations = [];
		this._order = null;
	},

	/**
     * Populate the public properties based on the private resources
     * @private
     */
	_populate: function (resource, depth) {
		var path;
		if (this._client instanceof Sah.Bus.Client) {
			path = (resource.objectInfo.indexPath + "." + resource.objectInfo.name);
		} else {
			path = (resource.objectInfo.keyPath + "." + resource.objectInfo.key);
		}

		if (path.match(Sah.Bus.stripPath)) {
			this._path = path.replace(Sah.Bus.stripPath, "");
		} else {
			if (path.match(/^\../)) {
				this._path = "sysbus" + path;
			} else if (path === ".") {
				this._path = "sysbus";
			} else {
				this._path = "sysbus." + path;
			}
		}

		this._objectInfo = resource.objectInfo;
		this._templateInfo = resource.templateInfo;
		this._depth = depth || 0;
		this._parameters = null;
		this._paramInfo = {};
		this._multiInstance = resource.objectInfo.attributes.template;
		this._key = resource.objectInfo.key;
		this._name = resource.objectInfo.name;
		if (this._multiInstance) {
			this._children = resource.instances;
		} else {
			this._children = resource.children;
		}

		if (resource.parameters) {
			this._parameters = {};
			resource.parameters.each(function (parameter) {
				this._parameters[parameter.name] = parameter.value;
				this._paramInfo[parameter.name] = parameter;
				var millisec = 0;
				if (parameter.type === "date_time") {
					millisec = Date.parse(parameter.value);                    
					parameter.value = new Date(millisec);
				}
				this[Sah.Bus.parameterFromBus(parameter.name)] = parameter.value;
			}, this);
		}

		if (resource.functions) {
			this._functions = {};
			this._funcInfo = {};
			resource.functions.each(function (funktion) {
				this._funcInfo[funktion.name] = funktion;
				this._functions[funktion.name] = function (args, handlers) {
					var localHandlers = Sah.decorateHandlers(this, handlers, {
						onSuccess: function (oldHandler, object, response) {
							try {
								if (object.result.data) {
									Object.keys(object.result.data).each(function (k) {
										args[k] = object.result.data[k];
									});
								}(oldHandler || Prototype.emptyFunction)(object.result, response);
							} catch (e) {
								this._logger.error(e);
							}
						}
					});
					this._client.execute(this._path + ":" + funktion.name, args, localHandlers);
				}.bind(this);
				this[Sah.Bus.parameterFromBus(funktion.name)] = this._functions[funktion.name];
			}, this);
		}

		if (this._children) {
			this._children.each(function (child) {
				var object = null;
				if (child.error) {
					this._logger.warn("error detected in object %s children: %s (%s)", path, child.description, child.info);
					return;
				}

				if (child.objectInfo.attributes.template) {
					object = new Sah.Bus.MultiInstanceObject(this._client, child, this._depth - 1);
				} else {
					object = new Sah.Bus.Object(this._client, child, this._depth - 1);
				}
				if (this._multiInstance) { /* if mbus *new- stuff and that the parameters are empty, skip it */
					if (!child.objectInfo.key.match(/^\*new-/) || (child.parameters && child.parameters.length > 0)) {
						this.__appendChild(child.objectInfo.name, object);
					}
				} else {
					this[Sah.Bus.parameterFromBus(child.objectInfo.name)] = object;
					this._childs.push(object);
				}
			}, this);
		}
	},

	/**
     * Fetch an update the parameters from sahbus
     * @private
     * @param {Object} handlers the callbacks that will be called. If it is a function, that function
     *                          will be called if the request succeed. Otherwise it can be an object
     *                          with two properties defined as function: onSuccess and onFailure
     */
	_load: function (handlers) {
		var localHandlers = Sah.decorateHandlers(this, handlers, {
			onSuccess: function (oldHandler, object, response) {
				var resource = response.responseJSON;
				this._populate(resource, this._depth);
				response.sahbusObject = this;
				oldHandler(object, response);
			}
		});
		this._client.get(this._path, this._depth, localHandlers);
	},

	/**
     * Reload the object given another one
     * @private
     */
	_reload: function (object) {
		Object.keys(object).each(function (k) {
			var v = object[k];
			if (this._parameters) {
				this[Sah.Bus.parameterFromBus(k)] = v;
				this._parameters[k] = v;
				this._paramInfo[k].value = v;
			}
		}, this);
	},

	/**
     * Update the attribute of an object with another object
     *
     * Pay attention that this function do not update the object on the server, use
     * {@link Sah.Bus.Object#_save} for that.
     *
     * <pre>
     * env._update({ Name: "foo", Value: "bar"})
     * </pre>
     *
     * @private
     * @param {Object} object the list of parameter values to update
     * @param {Array} additionnalParameters the list of parameters not in this object but that you
     *                                      still want to save
     */
	_update: function (object, additionnalParameter, init) {
		var parameter, localName, value;
		for (parameter in this._parameters) {
			if (this._parameters.hasOwnProperty(parameter)) {
				localName = Sah.Bus.parameterFromBus(parameter);
				if (object[localName] !== undefined && object[localName] !== null) {
					value = object[localName];
					if (value === true) {
						value = 1;
					} else if (value === false) {
						value = 0;
					}
					this[localName] = value;
				}
			}
		}
		return this;
	},

	/**
     * Return the list of modified fields
     * @private
     * @returns {Array} the list of modified parameters
     */
	_updated: function () {
		var parameter, localName, parameters = [];
		for (parameter in this._parameters) {
			if (this._parameters.hasOwnProperty(parameter)) {
				localName = Sah.Bus.parameterFromBus(parameter);
				if (this[localName] !== this._parameters[parameter]) {
					parameters.push(localName);
				}
			}
		}
		return parameters;
	},

	/**
     * Return true if the objects has been updated
     * @private
     * @returns {Boolean} true if the object has been updated
     */
	_changed: function () {
		var parameter, parameters = [];
		if (this._parameters === null) {
			return true;
		}

		for (parameter in this._parameters) {
			if (this._parameters.hasOwnProperty(parameter)) {
				if (this[Sah.Bus.parameterFromBus(parameter)] !== this._parameters[parameter]) {
					return true;
				}
			}
		}
		return false;
	},


	/**
     * Return true if the objects has been updated (excluding parameter)
     * @private
     * @returns {Boolean} true if the object has been updated
     */
	_changedExcluding: function (param) {
		var parameter, parameters = [];
		for (parameter in this._parameters) {
			if (this._parameters.hasOwnProperty(parameter)) {
				if (parameter !== param) {
					if (this[Sah.Bus.parameterFromBus(parameter)] !== this._parameters[parameter]) {
						return true;
					}
				}
			}
		}
		return false;
	},

	/**
     * Return true if a parameter of an object has been updated
     * @private
     * @returns {Boolean} true if the object has been updated
     */
	_changedParameter: function (param) {
		var parameter, parameters = [];
		for (parameter in this._parameters) {
			if (this._parameters.hasOwnProperty(parameter)) {
				if (parameter === param) {
					if (this[Sah.Bus.parameterFromBus(parameter)] !== this._parameters[parameter]) {
						return true;
					}
				}
			}
		}
		return false;
	},
	/**
     * return an object containing only the parameters
     * @private
     */
	_getParameters: function (forced) { /* I don't know why jslint does not notice the filter loop here */
		/*jslint forin: true */
		var parameter, found = false,
		i, parameters = {},
		localName;

		for (parameter in this._parameters) {
			if (this._parameters.hasOwnProperty(parameter)) { /* if we have a list of parameters to save, make sure that we are only saving those */
				if (forced && forced.length > 0) {
					for (i = 0; i < forced.length; i += 1) {
						if (forced[i] === parameter) {
							found = true;
							break;
						}
					}
					if (!found) {
						this._logger.debug("skipping parameter " + parameter);
						continue;
					}
				}
			}

			if (this._paramInfo[parameter] && this._paramInfo[parameter].attributes && this._paramInfo[parameter].attributes.read_only) {
				continue;
			}

			localName = Sah.Bus.parameterFromBus(parameter);
			if (found || this[localName] !== this._parameters[parameter]) {
				this._logger.info("setting %s to %s", parameter, this[localName] || '(empty)');
				parameters[parameter] = this[localName];
			}
		} /*jslint forin: false */
		return parameters;
	},

	/**
     * return the children
     * @private
     */
	_getChildren: function () {
		return this._childs;
	},

	/**
     * return the number of children
     * @private
     */
	_getChildrenCount: function () {
		return (this._objectInfo.attributes.template ? this._objectInfo.instanceCount : this._objectInfo.childCount);
	},

	/**
     * Save the object into sahbus
     * @private
     * @param {Object} handlers The callbacks that will be called. If it is a function, that function
     *                          will be called if the request succeed. Otherwise it can be an object
     *                          with two properties defined as function: onSuccess and onFailure.
     * @param [parameters]      The list of parameters to save, leave empty for none
     */
	_save: function (handlers) {
		var args, parameters, order, localHandlers;

		/* check if we are valid */
		if (!this._valid()) {
			(handlers.onFailure || Prototype.emptyFunction)(this, null);
			return;
		}

		args = $A(arguments);
		args.shift();
		parameters = this._getParameters(args);
		order = this._getOrder();

		localHandlers = Sah.decorateHandlers(this, handlers, {
			onSuccess: function (oldHandler, object, response) { /* work arround for FF bug #488605 */
				if (!object) {
					handlers.onFailure(null, response);
					return;
				}
				response.sahbusObject = this;
				response.sahbusObject._populate(response.responseJSON);
				oldHandler(object, response);
			}
		});
		this._client.set(this._path, parameters, localHandlers, order);
	},

	/**
     * Destroy this object
     * @private
     * @param {Object} handlers the callbacks that will be called. If it is a function, that function
     *                          will be called if the request succeed. Otherwise it can be an object
     *                          with two properties defined as function: onSuccess and onFailure
     */
	_destroy: function (handlers) {
		var localHandlers = Sah.decorateHandlers(this, handlers, {
			onSuccess: function (oldHandler, response) {
				if (this.parent) {
					this.parent._delete(this);
					this.parent = null;
				}
				oldHandler(this, response);
			}
		});
		this._client.del(this._path, localHandlers);
	},

	/**
     * Reset some parameters, takes the names of the parameters you want to reset as arguments
     * @private
     */
	_resetParameters: function () {
		var parameters, i, parameter;
		parameters = (arguments.lentgh > 0 ? arguments : Object.keys(this._parameters));
		for (i = 0; i < arguments.length; i += 1) {
			parameter = arguments[i];
			this._logger.debug("resetting %s to %s", parameter, this._parameters[parameter]);
			this[Sah.Bus.parameterFromBus(parameter)] = this._parameters[parameter];
		}
	},

	/**
     * Add an error
     * @private
     */
	_addError: function (param, message, key) {
		var label = key || "";
		this._errors.push({
			parameter: param,
			message: message,
			label: label
		});
	},

	/**
     * Return errors for a parameter
     * @private
     */
	_getErrors: function (param) {
		return this._errors.select(function (e) {
			return e.parameter === param;
		}).map(function (e) {
			return e.message;
		});
	},

	/**
     * Add a validation function
     * @private
     */
	_addValidation: function (validationFunc) {
		this._validations.push(validationFunc);
	},

	/**
     * Validates the object
     * @private
     */
	_valid: function () {
		this._errors = $A();
		this._validations.each(function (validationFunc) {
			validationFunc(this);
		}, this);
		return this._errors.length === 0;
	},

	/**
     * Set the order in which parameter should be set
     * @private
     */
	_setOrder: function () {
		this._order = $A(arguments).clone();
	},

	/**
     * @private
     */
	_getOrder: function () {
		if (!this._order) {
			return null;
		}

		var order = $A(),
		parameters = this._getParameters();
		this._order.each(function (p) {
			if (parameters[p]) {
				order.push(p);
			}
		});
		return order;
	}
});

Sah.Bus.MultiInstanceObject = Class.create(Sah.Bus.Object, Enumerable, /** @lengs Sah.Bus.MultiInstanceObject */ {
	/**
     * Create a new Sah.Bus.Object
     * @class This class maps a sahbus object to a javascript object
     * @param {Sah.Bus.Client} client the client that will be used for operation on the object
     * @param {Object} resource the resource received from the web service and defining the object
     * @constructs
     */
	initialize: function ($super, client, resource, depth) {
		$super(client, resource, depth);
	},

	/**
     * Append a child to the list of children
     * @private
     * @param {String} index the sahbus key where the object is located
     * @param {Sah.Bus.Object} object append a childe
     */
	__appendChild: function (index, object) {
		this._childs.push(object);
		this[index] = object;
		object.parent = this;
	},

	/**
     * Add a new child
     */
	_add: function (handlers, parameters, order) {
		var params = {},
		name, localHandlers;
		for (name in parameters) {
			if (parameters.hasOwnProperty(name)) {
				params[Sah.Bus.parameterToBus(name)] = parameters[name];
			}
		}

		localHandlers = Sah.decorateHandlers(this, handlers, {
			onSuccess: function (oldHandler, object, response) {
				this.__appendChild(object._objectInfo.name, object);
				oldHandler(object, response);
			}
		});
		this._client.add(this._path, params, localHandlers, order);
	},

	/**
     * Remove the child
     */
	_delete: function (child) {
		this._childs = this._childs.select(function (o) {
			return o._path !== child._path;
		});
	},

	_getChildren: function () {
		return this._childs;
	},

	/**
     * An iterator
     */
	_each: function (iterator) {
		this._childs.each(iterator);
	},

	/**
     * Create a new object
     */
	_new: function (object) {
		var obj = new Sah.Bus.Object(null, null, 0);
		obj._parameters = {};
		Object.keys(object).each(function (parameter) {
			obj._parameters[parameter] = null;
			obj[Sah.Bus.parameterFromBus(parameter)] = object[parameter];
		});
		return obj;
	}
});

Sah.Bus.Client = Class.create( /** @lends Sah.Bus.Client# */ {
	/**
     * Create a new Sah.Bus.Client for the specified host or the default host {@link Sah.Bus.defaultHost}
     * @class this is a basic client that allows one to execute gets, sets adds and deletes on a webservice enabled sahbus host.
     * @constructs
     * @param {String} host The host to connect to. If it is not given, connect to {@link Sah.Bus.defaultHost}
     * @private
     */
	initialize: function (host) {
		this.logger = Sah.Bus.logger;
		this.host = (host || Sah.Bus.defaultHost);
		this.ajaxOptions = {
			method: "get",
			evalJSON: "force",
			evalJS: "force", 
			contentType:"application/x-sah-ws-1-call+json",
			parameters: {
				_restVersion: 0
			},
			requestHeaders: {
				"Accept": "text/javascript"
			}
		};
		this.defaultHandlers = {
			onFailure: function (o) {
				Sah.Bus.logger.error(o.responseJSON);
			}
		};
	},

	/**
     * Create the resource URL from a path
     * @private
     * @param {String} path the sahbus object path
     * @returns {String} the resource URL
     */
	url: function (path) {
		var members, dm;

		members = path.replace("$", "X_ORANGE-COM_").split(".");
		if (members[0] === "igd") {
			dm = members.shift();
			if (members[0] !== "InternetGatewayDevice" && members[0] !== "$triggers") {
				members.unshift("InternetGatewayDevice");
			}
			members.unshift(dm);
		}
		if (members[0] === "sysbus") {
			return "/" + members.join("/");
		} else {
			return Sah.Bus.defaultUrl + "/" + members.join("/");
		}
	},

	/**
     * Wrap the handlers to add a response.responseSahbus object
     * @private
     * @param {Object} handlers The handlers to wrap
     */
	handlers: function (handlers) { /*jslint funcloop: true */
		var ret = {},
		client = this,
		key;
		for (key in handlers) {
			if (handlers.hasOwnProperty(key)) {
				if (key.startsWith("on")) {
					ret[key] = function (handler, response) {
						var object = null;
						if (response.responseJSON) {
							if (response.responseJSON.objectInfo) {
								if (response.responseJSON.objectInfo.attributes.template) {
									object = new Sah.Bus.MultiInstanceObject(client, response.responseJSON, response.request.parameters._restDepth);
								} else {
									object = new Sah.Bus.Object(client, response.responseJSON, response.request.parameters._restDepth);
								}
								response.sahbusResponse = response.sahbusObject = object;
							} else {
								response.sahbusResponse = response.responseJSON;
							}
						}
						handler(response.sahbusResponse, response);
					}.curry(handlers[key]);
				}
			}
		} /*jslint funcloop: false */
		return ret;
	},

	/**
     * Create the various options for the AJAX call
     * @private
     * @param {Object} handlers the handlers to be called after the request is executed
     * @param {Object} parameters the query parameters
     * @param {Object} ajax the prototypejs AJAX options
     */
	options: function (handlers, parameters, ajax) {
		var options, onSuccess;

		if (!ajax) {
			ajax = {};
		}

		if (!parameters) {
			parameters = {};
		}

		if (!handlers) {
			handlers = {};
		}

		if (Object.isFunction(handlers)) {
			onSuccess = handlers;
			handlers = Object.clone(this.defaultHandlers);
			handlers.onSuccess = onSuccess;
		}

		options = {};
		Object.extend(options, this.ajaxOptions);
		Object.extend(options, ajax);

		options.requestHeaders = Object.clone(this.ajaxOptions.requestHeaders);
		if (Sah.Bus.contextID)
			options.requestHeaders["X-Context"] = Sah.Bus.contextID;
		options.parameters = Object.clone(this.ajaxOptions.parameters);
		Object.extend(options, this.handlers(handlers));
		Object.extend(options.parameters, parameters);
		Object.extend(options.requestHeaders, ajax.requestHeaders);
		return options;
	},

	/**
     * Get a sahbus object
     * @param {String} path the path of the object. Start the path with igd or atomic depending
     *                      on the datamodel you want to use.
     * @param {Integer} depth use 1 for fetching objects parameters and children list,
     *                        more to recursively fetch childrens.
     * @param {Object} handlers the callbacks that will be called. If it is a function, that function
     *                          will be called if the request succeed. Otherwise it can be an object
     *                          with two properties defined as function: onSuccess and onFailure.
     * @returns {Object} a javascript object
     */
	get: function (path, options, handlers) {
		this.logger.info("GET    %s", path);
		var attributes = "getObject_parameters",
		notation = null,
		depth = -1,
		rq;
		if (options instanceof Object) {
			notation = options.notation;
			depth = options.depth || depth;
		}

		if (notation === "key") {
			attributes += ",common_key_notation";
		}

		rq = new Ajax.Request(this.url(path), this.options(handlers, {
			"_restDepth": depth,
			"_restAttributes": attributes
		}, {}));
	},

	/**
     * Update a sahbus object
     * @param {String} path the path of the object. Start the path with igd or atomic depending
     *                      on the datamodel you want to use.
     * @param {Object} parameters the various parameters to update and their values.
     * @param {Object} handlers the callbacks that will be called. If it is a function, that function
     *                          will be called if the request succeed. Otherwise it can be an object
     *                          with two properties defined as function: onSuccess and onFailure.
     * @returns {Object} the javascript object as updated
     */
	set: function (path, parameters, handlers, order) {
		this.logger.info("PUT    %s to %o", path, parameters);
		var params = Object.clone(parameters),
		options, rq;
		params._restAction = "put";
		params._restAttributes = "getObject_parameters";

		options = this.options(handlers, params, {
			"method": "post",
			postBody: " ",
			"requestHeaders": {
				"X-PCB-Attributes": "getObject_parameters"
			}
		});

		if (order) {
			options.order = order;
		}
		rq = new Ajax.Request(this.url(path + "?_restAction=put"), options);
	},

	/**
     * Add a sahbus object
     * @param {String} path the path of the object. Start the path with igd or atomic depending
     *                      on the datamodel you want to use.
     * @param {Object} handlers the callbacks that will be called. If it is a function, that function
     *                          will be called if the request succeed. Otherwise it can be an object
     *                          with two properties defined as function: onSuccess and onFailure
     * @returns {Object} the newly created javascript object
     */
	add: function (path, parameters, handlers, order) {
		this.logger.info("POST   %s", path);
		var params = Object.clone(parameters),
		options, rq;
		params._restAction = "post";
		params._restAttributes = "getObject_parameters";
		options = this.options(handlers, params, {
			"method": "post",
			postBody: "",
			"requestHeaders": {
				"X-PCB-Attributes": "getObject_parameters"
			}
		});
		if (order) {
			options.order = order;
		}

		rq = new Ajax.Request(this.url(path), options);
	},

	/**
     * Delete a sahbus object
     * @param {String} path the path of the object. Start the path with igd or atomic depending
     *                      on the datamodel you want to use.
     * @param {Object} handlers the callbacks that will be called. If it is a function, that function
     *                          will be called if the request succeed. Otherwise it can be an object
     *                          with two properties defined as function: onSuccess and onFailure
     */
	del: function (path, handlers) {
		this.logger.info("DELETE %s", path);
		var rq = new Ajax.Request(this.url(path), this.options(handlers, {
			"_restAction": "delete"
		}, {
			"method": "post"
		}));
	}
});

Sah.Bus.Path = Class.create(Enumerable, /** @lends Sah.Bus.Path# */ {
	/**
     * @constructs
     */
	initialize: function (o) {
		if (Object.isString(o)) {
			this.components = o.split(/\./);
		} else if (Object.isArray(o)) {
			this.components = o;
		} else {
			this.components = o.components;
		}

		this._each = this.components._each;
	},

	toString: function () {
		return this.components.join(".");
	},

	toJavascript: function () {
		return this.components.map(function (e) {
			return "['" + e + "']";
		}).join("");
	},

	butLast: function (i) {
		if (arguments.length === 0) {
			i = 1;
		}
		i *= -1;
		return new Sah.Bus.Path(this.components.slice(0, i));
	}
});

/**
 * @private
 */
Sah.Bus.Client.instance = new Sah.Bus.Client();

/**
 * @private
 */
Sah.Bus.Client.clients = {};

Sah.Bus.Client.factory = function (options) {
	var klass = "Client1";
	if (options && options.version) {
		if (options.version === 0) {
			klass = "Client";
		} else {
			klass = "Client" + options.version;
		}
	}
	return new Sah.Bus[klass](options && options.host);
};

Sah.Bus.Client1 = Class.create( /** @lends Sah.Bus.Client1# */ {
	/**
     * Create a new Sah.Bus.Client for the specified host or the default host {@link Sah.Bus.defaultHost}
     * @class this is a basic client that allows one to execute gets, sets adds and deletes on a webservice enabled sahbus host.
     * @constructs
     * @param {String} host The host to connect to. If it is not given, connect to {@link Sah.Bus.defaultHost}
     * @private
     */
	initialize: function (host) {
		this.logger = Sah.Bus.logger;
		this.host = (host || Sah.Bus.defaultHost);
		this.ajaxOptions = {
			method: "get",
			evalJSON: "force",
			evalJS: "force",  
			contentType:"application/x-sah-ws-1-call+json",
			parameters: {},
			requestHeaders: {
				"Accept": "text/javascript"
			}
		};
		this.defaultHandlers = {
			onFailure: function (response,fullresponse) {
				Sah.logger.error(response);
				Sah.logger.error(fullresponse);
			//Sah.Bus.logger.error(o.responseJSON);
			}
		};
	},

	/**
     * Create the resource URL from a path
     * @private
     * @param {String} path the sahbus object path
     * @returns {String} the resource URL
     */
	url: function (path) {
		var members, dm;

		members = path.replace("$", Sah.prefix).split(".");

		if (members[0] === "igd") {
			dm = members.shift();
			if (members[0] !== "InternetGatewayDevice" && members[0] !== "$triggers") {
				members.unshift("InternetGatewayDevice");
			}
			members.unshift(dm);
		}

		if (members[0] === "sysbus") {
			return "/" + members.join("/") + (members.length > 1 ? "" : "/");
		} else {
			return Sah.Bus.defaultUrl + "/" + members.join("/");
		}
	},

	/**
     * Wrap the handlers to add a response.responseSahbus object
     * @private
     * @param {Object} handlers The handlers to wrap
     */
	handlers: function (handlers) { /*jslint funcloop: true */
            
		var ret = {},
		client = this,
		key;        
  
  
    
        
		for (key in handlers) {            
			if (handlers.hasOwnProperty(key)) {
				if (key.startsWith("on")) {
					ret[key] = function (handler, response) {
						var object = null;
						if (response && response.responseJSON) {
							if (response.responseJSON.objectInfo) {
								if (response.responseJSON.objectInfo.attributes.template) {
									object = new Sah.Bus.MultiInstanceObject(client, response.responseJSON, response.request.parameters._restDepth);
								} else {
									object = new Sah.Bus.Object(client, response.responseJSON, response.request.parameters._restDepth);
								}
								response.sahbusResponse = response.sahbusObject = object;
							} else {
								response.sahbusResponse = response.responseJSON;
							}
                      
                           
							if(response.sahbusResponse.result && response.sahbusResponse.result.errors){
                          
								Sah.logger.error("there is errors in response");
								handlers["onFailure"](response.sahbusResponse, response);
							}else   {                         
								handler(response.sahbusResponse, response);
							}
						}
                        
					};
                
					ret[key] = ret[key].curry(handlers[key]);
                    
				}
			}
		} /*jslint funcloop: false */
     
		//choose(handlerChoice);
		return ret;
	},

	/**
 * Create the various options for the AJAX call
 * @private
 * @param {Object} handlers the handlers to be called after the request is executed
 * @param {Object} parameters the query parameters
 * @param {Object} ajax the prototypejs AJAX options
 */
	options: function (handlers, parameters, ajax) {
		var options, onSuccess;

		if (!ajax) {
			ajax = {};
		}

		if (!parameters) {
			parameters = {};
		}

		if (!handlers) {
			handlers = {};
		}

		if (Object.isFunction(handlers)) {
			onSuccess = handlers;
			handlers = Object.clone(this.defaultHandlers);
			handlers.onSuccess = onSuccess;
		}

		options = {};
		Object.extend(options, this.ajaxOptions);
		Object.extend(options, ajax);
		options.requestHeaders = Object.clone(this.ajaxOptions.requestHeaders);
		if (Sah.Bus.contextID)
			options.requestHeaders["X-Context"] = Sah.Bus.contextID;
		options.parameters = Object.clone(this.ajaxOptions.parameters);
		Object.extend(options, this.handlers(handlers));
		Object.extend(options.parameters, parameters);
		Object.extend(options.requestHeaders, ajax.requestHeaders);
		return options;
	},

	/**
 * Get a sahbus object
 * @param {String} path the path of the object. Start the path with igd or atomic depending
 *                      on the datamodel you want to use.
 * @param {Integer} depth use 1 for fetching objects parameters and children list,
 *                        more to recursively fetch childrens.
 * @param {Object} handlers the callbacks that will be called. If it is a function, that function
 *                          will be called if the request succeed. Otherwise it can be an object
 *                          with two properties defined as function: onSuccess and onFailure.
 * @returns {Object} a javascript object
 */
	get: function (path, options, handlers) {
		this.logger.info("GET     %s", path);
		var parameters = {};
		if (options.depth !== undefined) {
			parameters._restDepth = options.depth;
		}
		return new Ajax.Request(this.url(path), this.options(handlers, parameters, {
			"requestHeaders": {
				"X-Sah-Request-Type": "idle"
			}
		}));
	},

	/**
 * Update a sahbus object
 * @param {String} path the path of the object. Start the path with igd or atomic depending
 *                      on the datamodel you want to use.
 * @param {Object} parameters the various parameters to update and their values.
 * @param {Object} handlers the callbacks that will be called. If it is a function, that function
 *                          will be called if the request succeed. Otherwise it can be an object
 *                          with two properties defined as function: onSuccess and onFailure.
 * @returns {Object} the javascript object as updated
 */
	set: function (path, parameters, handlers, order) {
		this.logger.info("PUT     %s to %o", path, parameters);
		var params = Object.clone(parameters),
		options;
		options = this.options(handlers, {
			_restAction: "put"
		}, {
			"method": "post",
			postBody: Object.toJSON(parameters)
		});

		if (order) {
			options.order = order;
		}

		return new Ajax.Request(this.url(path + "?_restAction=put"), options);
	},

	/**
 * Add a sahbus object
 * @param {String} path the path of the object. Start the path with igd or atomic depending
 *                      on the datamodel you want to use.
 * @param {Object} handlers the callbacks that will be called. If it is a function, that function
 *                          will be called if the request succeed. Otherwise it can be an object
 *                          with two properties defined as function: onSuccess and onFailure
 * @returns {Object} the newly created javascript object
 */
	add: function (path, parameters, handlers, order) {
		this.logger.info("POST    %s", path);
		var options = this.options(handlers, {}, {
			"method": "post",
			postBody: Object.toJSON(parameters)
		});
		if (order) {
			options.order = order;
		}

		return new Ajax.Request(this.url(path), options);
	},

	/**
 * Delete a sahbus object
 * @param {String} path the path of the object. Start the path with igd or atomic depending
 *                      on the datamodel you want to use.
 * @param {Object} handlers the callbacks that will be called. If it is a function, that function
 *                          will be called if the request succeed. Otherwise it can be an object
 *                          with two properties defined as function: onSuccess and onFailure
 */
	del: function (path, handlers) {
		this.logger.info("DELETE  %s", path);
		return new Ajax.Request(this.url(path), this.options(handlers, {
			_restAction: "delete"
		}, {
			"method": "delete"
		}));
	},

	/**
 * Execute a function
 */
	execute: function (path, args, handlers) {
		var location = window.location.pathname;
		var options = {
			"method": "post",
			postBody: Object.toJSON({
				"parameters": args
			}),
			"requestHeaders": {
				"X-Sah-Request-Type": "idle"
			}
		};
		
		var resetSessionTimeout = (location === "/" || location === "/notConnectedDevices.html") ? false : true;
		
		if (resetSessionTimeout && Cookie.get('expirydate') !== null){
			options = {
				"method": "post",
				postBody: Object.toJSON({
					"parameters": args
				})
			};
			var sessionDuration = (config.SESSION_DURATION ? parseInt(config.SESSION_DURATION) : 600000);
					
			if (sessionDuration !== 0){
				var d = new Date();
				d.setTime(d.getTime() + (sessionDuration * 1000));
				Cookie.set('expirydate', d);
			}		
		}
		this.logger.info("EXECUTE %s", path);
		return new Ajax.Request(this.url(path), this.options(handlers, {}, options));
	}
});


/* by default, log exceptions that happends in ajax request handlers */
Ajax.Responders.register({
	onException: function (request, error) {
		Sah.Bus.logger.error("error handling ajax request", error);
	}
});

/**#nocode-*/
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/translate.js */


if (AllTranslations == undefined) AllTranslations = {};

Sah.Translate = Class.create( /** @lends Sah.Translate# */ {
	initialize: function () {
		this.client = new Sah.Bus.Client.factory();
		this.language = Cookie.get("language");
		this.possibleLanguages = (Cookie.get("possibleLanguages") ? Cookie.get("possibleLanguages").split(",") : []);
		this.loaded = false;
		this.translations = AllTranslations || {};
		this.voices = AllVoices || {};
		this.transFunc = t;
	},

	setup: function () {
		if (this.language.match(/^[\w]{2}$/)) {
			this.setTranslateLanguage(this.language, this.possibleLanguages);
		} else {
			var req = new Ajax.Request("/sysbus/UserInterface:getLanguage", {
				method: "post",
				postBody: Object.toJSON({
					"parameters": {}
				}),
				onSuccess: function (obj) {
					this.setLanguage(obj.responseJSON.result.status, obj.responseJSON.result.data.availableLanguages);
				}.bind(this)
			});

		}
		return this;
	},

	setLanguage: function (language, possibleLanguages) {
		Cookie.set("language", language);
		Cookie.set("possibleLanguages", possibleLanguages.join(","));     
		this.setTranslateLanguage(language, possibleLanguages);
	},

	setTranslateLanguage: function (language, possibleLanguages) {
		this.language = language;
		this.possibleLanguages = possibleLanguages;

		var trFileUrl = Sah.res("/translations/" + language + ".js");
		//new Ajax.Request(trFileUrl, { onSuccess: this.update.bind(this) });
		if (this.translations[language]) {
			Translations = this.translations[language];
			this.update(language);
		} else {
			Sah.include(trFileUrl, this.update.bind(this, language));
		}
		if (this.voices[language]) {
			Voices = this.voices[language];
			this.updateVoices(language);
		}
	},

	setAndSaveLanguage: function (language) {
		if (language == this.language) {
			return;
		}

		this.setLanguage(language, this.possibleLanguages);
		this.client.execute("sysbus.UserInterface:setLanguage", {
			"currentLanguage": language
		}, {
			onsuccess: function () {}
		});
	},

	update: function (language, parent) {     
		if (!parent) parent = document.body;
		this.translations[language] = Translations;		
		var elements = parent.select(".translation");
		
		for (var i=0, len = elements.length ; i<len ; i+=1){
			var element = elements[i];
			var transClassNames = $w(element.className);//element.classNames();
			
			for(var j=0, len1 = transClassNames.length ; j<len1 ; j+=1){
				
				if(transClassNames[j].indexOf("Translations.")>-1){
					var transClassName = transClassNames[j];
					break;
				}
			};
			var hasVoiceClass = false;
			for(var j=0, len1 = transClassNames.length ; j<len1 ; j+=1){				
				if((transClassNames[j].indexOf("Voice.")>-1)||(transClassNames[j].indexOf("voice")>-1)){
					hasVoiceClass = true;
					break;
				}
			};
			if (!transClassName) continue;
			var label = transClassName.replace("Translations.", "");
			var text = this.transFunc(label, element.value || element.innerHTML);
			if (Object.isString(text)) {
				this.updateElement(element, text);
				element.addClassName("translated");
				
				if (element.tagName=="IMG" && !hasVoiceClass){
				      this.updateAlts(element, text);
				}
			}

		};        
		document.fire('sah:translations:language:set', this);
		!this.loaded && document.fire('sah:translations:loaded', Translations);

		this.loaded = true;
	},
	updateVoices: function (language, parent) {
       
		if (!parent) parent = document.body;
		this.voices[language] = Voices;
		var voiceGenerateFunction = v; /*caching voice generation function for performance*/
		$(document.body).select(".visually-hidden").each(function(el){
			el.remove();
		});
		var elements = parent.select(".voice");
		for (var i=0, len = elements.length ; i<len ; i+=1){
			var element = elements[i];
			var voiceClassNames =  $w(element.className);
			for(var j=0, len1 = voiceClassNames.length ; j<len1 ; j+=1){
				if(voiceClassNames[j].indexOf("Voice.")>-1){
					var voiceClassName = voiceClassNames[j];
					break;
				}
			};
			
			if (!voiceClassName) return;
			var label = voiceClassName.replace("Voice.", "");
			var text = voiceGenerateFunction(label, "");

			this.updateVoiceElement(element, text);
			element.addClassName("voice-generated");
		}
	},

	refresh: function (element) {
		this.update(this.language, element);
	},

	/**
	 * Update an element content
	 */
	updateElement: function (element, text) {      
		(element.tagName=="INPUT")? element.value = text : element.update(text);
	},
	updateAlts: function (element, text) {
		element.setAttribute("alt", text); 
	},
	updateVoiceElement: function (element, text) {
		if (element.tagName=="IMG") element.setAttribute("alt", text); /* if this is an img, update alt */
		if (element.tagName=="A" && text != "") element.setAttribute("title", text); /*  if this is a link or an input, update title  */
		if ((element.tagName=="INPUT"||element.tagName == "SELECT") && element.id) {
			var inputLabel = new Element("label");
			inputLabel.update(text);
			inputLabel.setAttribute("for", element.id);
			inputLabel.addClassName("visually-hidden");
			$(document.body).insert(inputLabel);
		}/*  if this is a link or an input, update title  */
	},

	/**
	 * Update the element to use a new label
	 */
	change: function (element, label, text) {
		var transClassName = element.classNames().find(function (n) {
			return n.indexOf("Translations.")>-1;
		});
		if (transClassName){
			element.removeClassName(transClassName);
		}
		if (label) {
			element.addClassName("translation");
			element.addClassName("Translations." + label);
			this.updateElement(element, this.transFunc(label, text));
		} else {
			element.removeClassName("translation");
			element.update();
		}
	}
});

Sah.Translate.updated = function (handler) {
	try {
		if (Sah.translator.loaded){
			handler(Sah.translator);
		}
		else{
			document.observe('sah:translations:language:set', handler);
		}
	} catch (error) {
		document.observe('sah:translations:language:set', handler);
	}
};

Sah.Translate.loaded = function (handler) {
	try {
		if (Translations){
			handler(Translations);
		}
		else {
			document.observe('sah:translations:loaded', handler);
		}
	} catch (error) {
		document.observe('sah:translations:loaded', handler);
	}
};

Sah.Translate.logger = new Sah.Log.Logger("Translations");

Sah.behave("body", function () {
	Sah.translator = new Sah.Translate();
});
//     window.setTimeout(function () {
//         Sah.translator.setup();
//     }, 300);
// });
var t = function (label, text) {
	var translation = text;

	//try {

	label = label.replace(/(\.new$)/, "['new']");
	label = label.replace(/[^\w\.]/g, "_");
	if (Translations) { /*GETTING RIDE OF EVAL */

		// Note: lb28 is a specific suffix for lb2.8 traduction labels.
			
		if (config.BUILD_PROJECT.indexOf('2.8') >= 0) {
			translation = Sah.getter(Translations, label + "#lb28");
			if (!Object.isString(translation)) {
				translation = Sah.getter(Translations, label);
			}
		} else {
			translation = Sah.getter(Translations, label);
		}
	}

	/*GETTING RIDE OF EVAL */
	if (!Object.isString(translation)) {
		Sah.Translate.logger.error("unable to find translation for :" + label);
		translation = text;
	}
	/*} catch (error) {
		Sah.Translate.logger.error("unable to find translation for " + label, error);
		translation = text;
	}*/

	if (arguments.length > 2) {
		for (var i = 2; i <= arguments.length; i++) {
			translation = translation.replace("%" + (i - 1), arguments[i]);
		}
	}
	return translation;
};

var v = function (label, text) {
	var voice = text;

	try {

		if (Voices) { /*GETTING RIDE OF EVAL */
			/* eval("translation = Translations." + label + ";");*/
          

			voice = Sah.getter(Voices, label);
		}

		/*GETTING RIDE OF EVAL */
		if (!Object.isString(voice)) {			
			voice = text;
		}
	} catch (error) {
		Sah.Translate.logger.error("unable to find voice for " + label, error);
		voice = text;
	}

	if (arguments.length > 2) {
		for (var i = 2; i <= arguments.length; i++) {
			voice = voice.replace("%" + (i - 1), arguments[i]);
		}
	}
	return voice;
};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/form.js */

Sah.Form = Class.create(
/** @lends Sah.Form# */
{

    /**
     * Create an new instance mapped to the given HTML element
     * @class Map a HTML form to a javascript controller.
     * @constructs
     */
    initialize: function (element)
    {
        /** The form name */
        this.name = element.name;

        /** A logger for this form */
        this.logger = new Sah.Log.Logger(this.name);

        /** The form element */
        this.form = element;

        /** The objects fetched from sahbus */
        this.objects = new Object();

        /** The sahbus client */
        this.client = new Sah.Bus.Client.factory();

        /** Manually added form elements */
        this.addedElements = $A();

        /** The form elements */
        this.elements = this._loadElements();

        /** True if the form is loaded */
        this.loaded = false;

        /** The parent element */
        this.parent = this.form.up("div");

        this.form.observe("submit", function (event) {
            Event.stop(event);
            return false;
        });

        Sah.Forms.push(this);

        /**
       * The needed object from sahbus
       * @private
       */
        this.needed = $A();

        /**
       * The needed templates
       */
        this.neededTemplate = $A();
        this.templates = $A();

        this.logger.info("initializing " + this.name);

    },

    /**
     * fetch the elements
     */
    _getElements: function ()
    {
        /* filter elements to remove the ones that have no removeClassName to fix an IE7 bug in fromObject */
        return (this.form.getElements().concat(this.addedElements).concat(this.form.select("div.display"))).select(function (e) {
            return e.removeClassName != null;
        });
    },

    /**
     * return an object mapping the form name to the form elements
     */
    _loadElements: function ()
    {
        var parse = function (obj, members, element)
        {
            var parent = members.shift();
            /* termination is a simple string */
            if (members.length == 0) {
                obj[parent] = element;
            }
            else {
                if (obj[parent] == null)
                    obj[parent] = new Object();

                parse(obj[parent], members, element);
            }
            return obj;
        };
        var obj = {};
        this._getElements().each(function (e) {
            var name = (e.name ? e.name : e.id);
            parse(obj, name.split('.'), e);
        });
        this.loaded = true;
        return obj;
    },

    /**
     * Convert the HTML form to a javascript object
     *
     * For each of the HTML form field, an object where the properties are
     * recursively matched is created. For example if the form is
     *
     * <pre>
     * &lt;form>
     *   &lt;input name="Foo.Bar" value="value1"/>
     *   &lt;input name="Foo.Baz" value="value2"/>
     *   &lt;input name="Another.Obj" value="value3"/>
     * &lt;/form>
     * </pre>
     *
     * the returned object will be
     *
     * <pre>
     * {
     *   Foo: { Bar: "value1", Baz: "value2" },
     *   Another: { Obj: "value3" }
     * }
     * </pre>
     *
     * @returns {Object} the mapped object
     * @see Sah.Form#fromObject
     */
    toObject: function (root)
    {
        var parse = function (obj, members, value)
        {
            var parent = members.shift();
            /* termination is a simple string */
            if (members.length == 0) {
                obj[parent] = value;
            }
            else {
                if (obj[parent] == null)
                    obj[parent] = new Object();

                parse(obj[parent], members, value);
            }
            return obj;
        };
        var obj = {};
        var elements;
        if (root)
            elements = root.descendants();
        else
            elements = this._getElements();

        elements.each (function (e) {
            if (e.name) {
                var value = $F(e);
                if (e.type && e.type.match(/checkbox|radio/i) && value == null)
                    value = false;
                var name = (e.name ? e.name : e.id);
                parse(obj, name.split('.'), value);
            }
        });
        return obj;
    },

    /**
     * Update the form with the values of a javascript object
     *
     * Each of the HTML form field is set with the values of an objects properties.
     * For example
     *
     * <pre>
     * this.form.fromObject({
     *   Foo: { Bar: "value1", Baz: "value2" },
     *   Another: { Obj: "value3" }
     * });
     * </pre>
     *
     * will set the values of the form fields to
     *
     * <pre>
     * &lt;form>
     *   &lt;input name="Foo.Bar" value="value1"/>
     *   &lt;input name="Foo.Baz" value="value2"/>
     *   &lt;input name="Another.Obj" value="value3"/>
     * &lt;/form>
     * </pre>
     *
     * the returned object will be
     *
     *
     * @returns {Object} the mapped object
     * @see Sah.Form#toObject
     */
    fromObject: function (obj,tr)
    {

        var set = function (obj, members, element) {
            var parent = members.shift();
            if (members.length == 0) {
                if (obj[parent]) {
                    var value = obj[parent];

                    /* remove the style related to the error notification in case it exists */
                    element.removeClassName("error");

                    /* handle checkbox special case */
                    if (element.type && element.type.match(/checkbox/i))
                        value = (value == "1");

                    if (element.setValue)
                        element.setValue(value);
                    else
						if(typeof(value) === "string") {
							element.update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', value)));
						}
						else {
							element.update(value);
						}

                    /* set the error class */
                    if (obj._getErrors && obj._getErrors(parent).size() > 0)
                        element.addClassName("error");
                }
            }
            else {
                if (obj[parent])
                    set(obj[parent], members, element);
            }
        };
        var elements;
        if (tr)
            elements = tr.descendants();
        else
            elements = this._getElements();

        elements.each (function (e) {
            var name = e.readAttribute('name') || e.readAttribute('id');
            set(obj, name.split('.'), e);
        });
    },

    /**
     * Hides a form element, including its matching label and list elements
     * @see Sah.Form#show
     */
    hide: function (element)
    {
        if (Object.isString(element))
            element = $(this.form[element]);
        element.up("dd").previous("dt").hide();
        element.up("dd").hide();
    },

    /**
     * Shows a form element, including its matching label and list elements
     * @see Sah.Form#hide
     */
    show: function (element)
    {
        if (Object.isString(element))
            element = $(this.form[element]);
        element.up("dd").previous("dt").show();
        element.up("dd").show();
    },

    /**
     * apply a template to a list of objects
     * @param {String} templateId the id of the to template element
     * @param {Array} objects the list of objects for wich to use the template
     *                        if it is a single object the template will be called once and
     *                        the element created will be returned
     * @param {Function} callback this function will be called with each of the created elements
     * @returns {Element} void if given multiple object, the element created if called with a
     *                    single object
     */
    applyTemplate: function (templateId, objects, callback)
    {
        var element = $(templateId);
        element.hide();

        var prepare = function (object) {
            var template = element.clone(true);
            for (var key in object) {
                var e = template.select("." + key)[0];
                if (Object.isElement(e)) {
                    e.update(object[key]);
                }
            }
            if (callback)
                callback(template, object);
            template.show();
            return template;
        };
        if (Object.isArray(objects)) {
            return objects.map(prepare);
        } else {
            return prepare(objects);
        }
    },

    /**
     * Fetches an object from the sahbus client
     *
     * <p>The valid options are path and depth. The options can be string or functions
     * in which case they will be valuated in the context of the object.</p>
     *
     * <p>The function will fetch the object and store it in this.objects.ObjectName.
     * When all the objects are loaded, the objectsLoaded function will be called. This
     * function must populate the form (for example by using the fromObject method.</p>
     *
     * <p>If a method exist with a form of whenObjectNameLoaded exists it will be called
     * when the object is loaded. If an object load fail and a onLoadFailure methode
     * exists, it will be called.</p>
     *
     * @param {String} name     the name of the this.objects property where to store the object.
     * @param {Object} options  an object with a path and a depth property
     * @returns {Sah.Bus.Object}
     * @see Sah.Form#load, Sah.Bus.Client#get
     */
    needs: function (name, options)
    {
        if (this.needed.detect(function (n) {
            return n.name == name;
        })) {
            this.logger.debug(name + " already loadedd");
            return;
        }
        if (arguments.length == 1) {
            if (!Sah.Bookmarks[name])
                throw "no bookmark by name " + name;
            Sah.Bookmarks[name].load(this);
        } else {
            if (!Object.isNumber(options.depth))
                options.depth = -1;
            this.needed.push(Object.extend({
                "name": name
            }, options));
        }
    },

    /**
     * Fetches a template
     */
    needsTemplate: function (name)
    {
        if (this.neededTemplate.detect(function (n) {
            return n == name;
        })) {
            this.logger.debug("template " + name + " already loadedd");
            return;
        }

    },

    /**
     * Load the objects
     *
     * The objects requested with the {@link Sah.Form#needs} method are fetched using
     * {@link Sah.Bus}. When all the objects are loaded the objectsLoaded() method is called
     * if it is defined.
     * @see Sah.Form#needs
     */
    load: function ()
    {
        if (!this.loaded)
            Sah.Translate.loaded(this._loadTemplates.bind(this));
    },

    /**
     * Load the needed templates
     */
    _loadTemplates: function (event)
    {
        /* wait for the next template to be loaded */
        if (this.neededTemplate.length > 0) {
            this.neededTemplate.each(function (tpl) {
                /* if it is already loaded */
                if (Sah.Template[tpl]) {
                    this.templates[tpl] = Sah.Template[tpl];
                    this.neededTemplate = this.neededTemplate.without(tpl);
                } else {
                    /* wait for a template loaded event */
                    document.observe('sah:template:loaded', this._loadTemplates.bind(this));
                }
            }, this);
        } else {
            /* all the templates are loaded */
            this._loadNeeded();
        }
    },

    /**
     * load the needed objects
     */
    _loadNeeded: function (need, object, response)
    {
        this.loaded = true;
        this.hideAll();
        if (arguments.length > 0) {
            var parse = function (obj, members, value)
            {
                var parent = members.shift();
                /* termination is a simple string */
                if (members.length == 0) {
                    obj[parent] = value;
                }
                else {
                    if (obj[parent] == null)
                        obj[parent] = new Object();
                    parse(obj[parent], members, value);
                }
                return obj;
            };
            parse(this.objects, need.name.split('.'), object);
            try {
                (this["when" + need.name + "Loaded"] || Prototype.emptyFunction).bind(this)();
            } catch (error) {
                this.logger.error("unable to execute when" + need.name + "Loaded callback", error);
            }
            (need.callback || Prototype.emptyFunction)();
        }

        /* if we still have things to load, load them */
        if (this.needed.length > 0) {
            var nextNeed = this.needed.shift();
            var path = (Object.isFunction(nextNeed.path) ? nextNeed.path.bind(this)() : nextNeed.path);
            var depth = (Object.isFunction(nextNeed.depth) ? nextNeed.depth.bind(this)() : nextNeed.depth);
            var method = (nextNeed.method !== undefined)?nextNeed.method : null;
            var methodParams = nextNeed.methodParams || {};           
            var newOptions = {
                path: path, 
                depth: depth, 
                method : method,
                methodParams : methodParams 
                
            };
            Object.extend(newOptions,nextNeed);
            Sah.Form.load(newOptions,
            {
                onSuccess: this._loadNeeded.bind(this, nextNeed),
                onFailure: this._loadFailed.bind(this, nextNeed)
            },
            this);
        }
        /* call the objectsLoaded handler*/
        else {
            this.logger.info("needed objects are loaded");
            try {
                (this["objectsLoaded"] || Prototype.emptyFunction).bind(this)();
            } catch (error) {
                this.logger.error("unable to execute objectsLoaded callback", error);
            }
            this.showAll();
        }
    },

    markAsLoading: function ()
    {
        ctl.waiting.Show();
        setTimeout(function(){
            ctl.waiting.Hide();
        },30000);
        if (!document.waitingSince) {
            document.waitingSince = new Date();
        }
    },

    /**
     * show a form, including the parent div
     */
    markAsLoaded: function ()
    {
        ctl.waiting.Hide();
        if (document.waitingSince) {
            this.logger.info("controller was loading for %d", ((new Date()) - document.waitingSince) / 1000);
            document.waitingSince = null;
        }
    },

    /**
     * Hide a form, including the parent div
     */
    hideAll: function ()
    {
    // if (this.parent)
    //   this.parent.addClassName("loading");
    },

    /**
     * show a form, including the parent div
     */
    showAll: function ()
    {
        if (this.parent) {
    // Effect.Appear(this.parent);
    // this.parent.removeClassName("loading");
    }
    },

    _loadFailed: function (need, object, response)
    {
        this.logger.error("unable to load " + need.path + " into " + need.name);
        (this["onLoadFailure"] || Prototype.emptyFunction)(need.name, object, response);
    },

    /**
     * check the changes in the form for disabling or enabling the save ans cancel buttons
     */
    checkSaveCancel : function (saveClass, cancelClass){
        var state = "disable";
        if (this.isChanged())
        {
            state ="enable";
        }
        $$(saveClass).each(function(button){
            button[state]();
        },this);
        $$(cancelClass).each(function(button){
            button[state]();
        },this);

    },

    /**
     * add new elements to the form
     */
    addElements: function (elements)
    {
        this.addedElements = this.addedElements.concat(elements);
    },

    /**
     * mark a form as busy
     */
    makeBusy: function ()
    {
        this.logger.info("now busy");
        if ($("idle"))
            $("idle").remove();
        window.busy = 1;
    },

    /**
     * mark a form as idle
     */
    makeIdle: function ()
    {
        this.logger.info("now idle");
        idle = new Element("div");
        idle.id = "idle";
        idle.setStyle({
            "display": "none"
        });
        document.body.insert(idle);
        window.busy = 0;
    },

    /**
     * redirect
     */
    redirect: function (path)
    {
        window.location = Sah.link(path);
    },
    
    /**
     * set form submit on enter key, if arg specified only for formId form, if not all inputs in page are affected with closest forms
     */
     
    setAllInputSubmit: function(submitHandler) {
		var context = this;
		$$('input').each(function(elt) {
			elt.observe('keydown', function(e) {
					var getInput = e.findElement();					
					if (document.activeElement == getInput && e.keyCode == 13) {
						e.preventDefault();
						submitHandler();
					}
				}.bind(context));
		});
	},
	 
	setAllStyleTypeAfterFocus: function () {
		var context = this;
		$$('input:text').each(function(elt) {
			elt.observe('keydown', function(e) {
					var getInput = e.findElement();
					if (getInput.value != "" && document.activeElement == getInput) {									
						getInput.addClassName('input-text-type-marked');
					}
				}.bind(context));
			elt.observe('blur', function(e) {
					var getInput = e.findElement();					
					getInput.removeClassName('input-text-type-marked');
				}.bind(context));
		});
	}
});

Sah.AuthenticatedForm = Class.create(Sah.Form,
/** @lends Sah.AuthenticatedForm# */
{
    initialize: function ($super, element)
    {
        $super(element);
        this.authenticated = true;
    },

    load: function ($super)
    {
        var auth = new Sah.Auth(this.client);
        if (auth.authenticate()) {
            $super();
        } else {
            this.logger.error("user should be authenticated");
            this.parent.hide();
            return Sah.redirect('/');
        }
    }
}
);

Sah.Form.CacheInfo =  Class.create(
/** @lends Sah.Form.CacheInfo# */
{
    /**
     * Caches the form needed request
     * @class Sah.Form.CacheInfo
     * @constructs
     */
    initialize: function (client, needed)
    {
        this.needed = needed;
        this.client = client;
        this.stillLoading = true;
        this.object = null;
        this.response = null;
        this.success = null;
        this.callbacks = [];
        this.requester = [];

        Sah.Form.CacheInfo.logger.info("loading " + needed.path + " (" + needed.depth + ") into " + needed.name);
        switch(needed.method){
            case "execute":
                this.client.execute(needed.path, needed.methodParams, {
                    onSuccess: this.onSuccess.bind(this),
                    onFailure: this.onFailure.bind(this)
                });
                break;
            default:
                this.client.get(needed.path, needed, {
                    onSuccess: this.onSuccess.bind(this),
                    onFailure: this.onFailure.bind(this)
                });
                break;
        }

    },

    request: function (needed, callbacks, who)
    {
        this.requester.push({
            who: who, 
            needs: needed
        });

        /* if we are still loading, add the callbacks to the list */
        if (this.stillLoading)
            this.callbacks.push(callbacks);
        /* if it is loaded and successful invoke success callback */
        else if (this.success)
            (callbacks.onSuccess || Prototype.emptyFunction)(this.object, this.response);
        /* otherwise invoke the failure callback */
        else
            (callbacks.onFailure || Prototype.emptyFunction)(this.object, this.response);
    },

    onSuccess: function (object, response)
    {    
        if ( object.result ) {
            if ( object.result.status !== true && object.result.status != null ) {
                this.object = object.result.status;
            } else {
                this.object = (object.result.data) ? object.result.data : object.result.status;
            }
        } else {
            this.object = object; 
        }
        
        this.response = response;
        this.stillLoading = false;
        this.success = true;
        Sah.Form.CacheInfo.logger.info(this.object, this.response);
        this.callbacks.each(function (cb) {
            (cb.onSuccess || Prototype.emptyFunction)(this.object, this.response);
        }, this);
    },

    onFailure: function (object, response)
    {
        this.object = object;
        this.response = response;
        this.stillLoading = false;
        this.success = false;
        this.callbacks.each(function (cb) {
            (cb.onFailure || Prototype.emptyFunction)(this.object, this.response);
        }, this);
    }
}
);

Sah.Form.CacheInfo.logger = new Sah.Log.Logger("CacheInfo");

/**
 * A list of all the needed data for this page to avoid duplicate loading
 */
Sah.Form.cache = {};

/**
 * Load a needed object
 */
Sah.Form.load = function (needed, callbacks, who)
{
    var cacheInfo = (Sah.Form.cache[needed.path] = new Sah.Form.CacheInfo(who.client, needed));
    cacheInfo.request(needed, callbacks, who);
};

/**
 * The list of forms for this page
 */
Sah.Forms = [];

Sah.Form.include = function (form, klassName, components, name)
{
    /*
   * Load independent files in debug mode and the concatenated file in production mode
   */
    if (Sah.Config.environment == "production" || components.length == 0) {
        var klass = null;
        try {
            /*GETTING RIDE OF EVAL */
            var helper = function (data, accessor) {
                var keys = accessor.split('.'),
                result = data;

                while (keys.length > 0) {
                    var key = keys.shift();
                    if (typeof result[key] !== 'undefined') {
                        result = result[key];
                    }
                    else {
                        result = null;
                        break;
                    }
                }

                return result;
            }
            klass = helper(window,klassName);
           // klass = eval(klassName);
            /*GETTING RIDE OF EVAL */
        } catch (error) {
            Sah.Form.CacheInfo.logger.error("unable to load " + klassName, error);
        }

        if (klass) {
            try {
                new klass(form);
            } catch (error) {
                Sah.Form.CacheInfo.logger.error("unable to load " + klassName, error);
                throw error;
            }
        } else {
            Sah.Form.CacheInfo.logger.error("unable to load " + klassName + " for " + form.name);
        }
    } else {
        var component = components.shift();
        component.match(/^(.)(.*)$/);
        name += "/" + RegExp.$1.toLowerCase() + RegExp.$2;
        var fileName = Sah.res("/js/controllers" + name + ".js");
        window.setTimeout(function () {
            Sah.include(fileName, function () {
                Sah.Form.include(form, klassName, components, name);
            });
        }, 200);
    }
};

/**
 * on startup, try to automatically load the form if the class matching the name
 * exists
 */
Sah.behave("form", function (form) {
    if (form.name) {
        Sah.Form.include(form, form.name.replace(/\//g, "."), form.name.split("/"), "");
    }
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/template.js */

/**
 * the list of all available templates
 */
Sah.Templates = {};

Sah.Template = Class.create(
  /** @lends Sah.Template# */
  {
    /**
     * Create an new instance mapped to the given HTML element
     * @class Map a HTML form to a javascript controller.
     * @constructs
     */
    initialize: function (element)
    {
      /** The template name */
      this.name = element.id;

      /** The template element */
      this.element = element;

      /** A default callback */
      this.callback = Prototype.emptyFunction;

      this.element.hide();

      Sah.Templates[this.name] = this;
      document.fire('sah:template:loaded', this);
    },

    /**
     * get an element for a parameter
     */
    getElementForParameter: function (element, name)
    {
      var reg = new RegExp("^sah:" + name + "$");
      return element.descendants().detect(function (e) {
        return e.classNames().detect(function (klass) {
          return klass.match(reg);
        });
      });
    },

    /**
     * Iterate over all the template elements of a template
     * @private
     */
    eachElement: function (element, func)
    {
      element.descendants().each(function (e) {
        e.classNames().each(function (klass) {
          if (klass.match(/^sah:([^:]+)$/)) {
            func.call(this, e, RegExp.$1);
          }
        }, this);
      }, this);
    },

    /**
     * Apply a template to a list of objects
     * @param {Array} objects the list of objects for wich to use the template
     *                        if it is a single object the template will be called once and
     *                        the element created will be returned
     * @param {Function} callback this function will be called with each of the created elements
     * @returns {Element} void if given multiple object, the element created if called with a
     *                    single object
     */
    apply: function (objects, callback)
    {
      var single = !Object.isArray(objects);

      if (callback == undefined)
        callback = this.callback;

      if (single)
        objects = [ objects ];

      var templates = [];
      objects.each(function (object) {
        var template = this.element.clone(true);
        template.sahObject = object;

        this.eachElement(template, function (element, parameter) {
          /* get and hide the widget */
          var widget = element.down();
          if (widget) {
            element.widget = widget;
            widget.hide();
            widget.setValue(object[parameter] || "");
          }

          /* insert the value */
          var div = new Element("div");
          div.update(object[parameter] || "");
          element.value = div;
          element.insert(div);
        });
        callback(template, object);
        template.show();
        templates.push(template);
        Sah.translator.refresh(template);

      }, this);
      if (single)
        return templates[0];
      else
        return templates;
    },

    /**
     * Update a template with the form values
     */
    update: function (element, object)
    {
      this.eachElement(element, function (e, parameter) {
        e.value.update(object[parameter] || "");
        if (e.widget)
          e.widget.setValue(object[parameter] || "");
      });
    },

    /**
     * Convert a template part to a form
     */
    showForm: function (element)
    {
      this.eachElement(element, function (element, parameter) {
        if (element.widget) {
          element.value.hide();
          element.widget.show();
        }
      });
    },

    /**
     * Hide a template part from a form
     */
    hideForm: function (element)
    {
      this.eachElement(element, function (element, parameter) {
        if (element.widget) {
          element.widget.hide();
          element.value.show();
        }
      });
    }

  });


/**
 * on startup, try to automatically load the templates if the class matching the name
 * exists
 */
Sah.behave(".template", Sah.Template);

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/script.js */

/* -------------------------------------------------------------------------------------------------
	                                           Tooltip
------------------------------------------------------------------------------------------------- */

// Tooltip
var _global_tooltip = false;
ctl.event.Add(document,"mouseover",function(oEvent)
{

	// Get the selected item and looks into ancestors for the LI
	var oMouseEvent = ctl.mouse.GetEvent(oEvent);
	var oItem = oMouseEvent.Target;
	if (!oItem || !oItem.getAttribute) return;
	for(var i=0;i<3;i++)
	{
		if (oItem.getAttribute('x-sah-tooltip')) break;
		oItem = oItem.parentNode;
		if (!oItem || !oItem.getAttribute) return;
	}
	if (i == 3)return;
	
	// Get dimensions
	var oTooltip	= $CYT("#ct-tooltip");
	var oDoc 		= $CYT("#document-container");
	var jElemDim 	= ctl.style.GetDimensions(oItem);
	var jElemPos 	= ctl.style.GetPosition(oItem);
	
	// Set the content, then get the tooltip dimensions, then move it
	oTooltip.innerHTML 		= oItem.getAttribute('x-sah-tooltip');
	oTooltip.style.display	= "block";
	var jToolDim 	= ctl.style.GetDimensions(oTooltip);
	var offset = Element.cumulativeScrollOffset(oDoc);
	oTooltip.style.left 	= (jElemPos.X + jElemDim.width / 2 - jToolDim.width / 2 - offset.left) + 'px';
	oTooltip.style.top  	= (jElemPos.Y + jElemDim.height - offset.top) + 'px';
	_global_tooltip = true;
	
},true);

ctl.event.Add(document,"mouseout",function(oEvent)
{

	// Get the selected item and looks into ancestors for the LI
	var oMouseEvent = ctl.mouse.GetEvent(oEvent);
	var oItem = oMouseEvent.Target;
	if (!oItem || !oItem.getAttribute) return;
	for(var i=0;i<3;i++)
	{
		if (oItem.getAttribute('x-sah-tooltip')) break;
		oItem = oItem.parentNode;
		if (!oItem || !oItem.getAttribute) return;
	}
	if (i == 3)
	{
		$CYT('#ct-tooltip').style.display	= "none";
		_global_tooltip = false;
	}
	
	
},true);


/* -------------------------------------------------------------------------------------------------
	                                         Button pushed
------------------------------------------------------------------------------------------------- */

// Click
ctl.event.Add(document,"mousedown",function(oEvent)
{
	// Get the selected item and looks into ancestors for the LI
	var oMouseEvent = ctl.mouse.GetEvent(oEvent);
	var oBtn = oMouseEvent.Target;
	
	if (!/input-btn/.test(oBtn.className))
		return;

	// Remove each pushed button
	$$('input.input-btn').each(function(oItem)
	{
		oItem.className = oItem.className.replace(/-pushed/,'');
	});
	
	// Add class
	oBtn.className = oBtn.className.replace(/input-btn-([a-z\-]+)/,oBtn.className.match(/input-btn-([a-z\-]+)/)[0] + '-pushed');
	
},true);
ctl.event.Add(document,"mouseup",function(oEvent)
{
	// Remove each pushed button
	$$('input.input-btn').each(function(oItem)
	{
		oItem.className = oItem.className.replace(/-pushed/,'');
	});
},true);
	
/* -------------------------------------------------------------------------------------------------
	                                                Menu
------------------------------------------------------------------------------------------------- */

var _global_init_menu_ul = null;
function global_init_menu()
{
	var oMenu = $('content-left-vmenu');
	if (!oMenu) return;
	// Manage open and close
	oMenu.observe("click",function(event)
	{
		var oLI = Event.element(event);
		for(var i=0;i<10;i++)
		{
			if (oLI.tagName == "LI") break;
			oLI = oLI.parentNode;
		}
		if (i == 10)return;
		
		var oUL = oLI.parentNode;
		if (!/categories/.test(oUL.className) || /subcategories/.test(oUL.className)) return;
		var oULChild = Element.extend(oLI.getElementsByTagName("UL")[0]);

                if(oULChild.down(".orangeWifi"))
                {
                  if (Cookie.get('orangeWifiEnable') == "1") 
                  {
                    oULChild.down(".orangeWifi").show();
                  }
                  else
                  { 
                    oULChild.down(".orangeWifi").hide();     
                    
                  }
                }
	        if( appConfig === 'pl' )
	        {
		  $("advConfigAdmin").removeClassName();
		  $("advConfigAdmin").addClassName("auth-required");
        }
        else
        {
		  $("advConfigAdmin").removeClassName();
		  $("advConfigAdmin").addClassName("last-page auth-required");
		  $("advConfigFxo").hide();
        }

        if((oULChild.down(".configPorts")))
                {
                   if (Cookie.get('wanInterfaceType') == "DSL" || appConfig ==='pl')
                   {
                     $$(".configPorts-"+appConfig).each(function(obj){
                     obj.show();
                     });
                    }
                    else
                    {
                      $$(".configPorts").each(function(obj){
                      obj.hide();
                      });
                    }
                 } 
			
		var bOpen   = (oULChild.style.display == "block" || !oULChild.style.display ? false : true);
		var iHeight	= Element.getDimensions(oULChild).height;
		var iFrom 	= (!bOpen ? iHeight : 0);
		var iTo 	= (bOpen  ? iHeight : 0);
		
		ctl.animations.Create('default',iFrom,iTo,function()
		{
			oULChild.style.height = "0px";
			oULChild.style.display = "block";
		},
		function(iValue)
		{
			oULChild.style.height = iValue + "px";
		},
		function()
		{
			if (!bOpen) { oULChild.style.display= "none"; }
   		oULChild.style.height = iHeight + "px";
		});
		ctl.animations.Start();

	},true);
	
	// Manage mouse over out
	oMenu.observe("mouseover",function(event)
	{
		var oLI = Event.element(event);
		for(var i=0;i<10;i++)
		{
			if (oLI.tagName == "LI") break;
			oLI = oLI.parentNode;
		}
		if (i == 10)return;
		
		var oUL = oLI.parentNode;
		if (!/pages/.test(oUL.className)) return;
		
		var oLIActive = $$('#content-left-vmenu li.active')[0];
		if (oLIActive) Element.removeClassName(oLIActive,"active");
		
		Element.addClassName(oLI,"active");		
	},true);
	oMenu.observe("mouseout",function()
	{
		var oLIActive = $$('#content-left-vmenu li.active')[0];
		if (oLIActive) Element.removeClassName(oLIActive,"active");
	},true);
}

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/support.js */

/**
 * @namespace Holds the admin entity and its associated forms
 */
var Support = {};


/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/support/ftth.js */
/*
 *
 * Broadband Network Details
 *
 *      ( Link Type )
 *
 */

Support.Ftth = Class.create(Sah.AuthenticatedForm, /** @lends Wan.NetworkDetails.LinkType# */ {
	initialize: function ($super, form) {
		$super(form);
		
		this.needs("Uptime", {
			path: "sysbus.NeMo.Intf.data:getFirstParameter", 
			method:"execute",
			methodParams:{
				name:"Uptime"
			}
		});
		
		//~this.needs("Uptime", {
			//~path: "sysbus.NeMo.Intf.data:getFirstParameter", 
			//~method:"execute",
			//~methodParams:{
				//~name:"LastChange",
				//~flag:"logical"
			//~}
		//~});
		
		// 2.1
		this.needs("ethPhysical", {
			path: "sysbus.NeMo.Intf.data:isUp",
			method: "execute",
			methodParams: {
				flag: "eth && physical"
			}
		});
		
		// 2.4
		this.needs("LastChangeTime", {
			path: "sysbus.NeMo.Intf.data:getFirstParameter", 
			method:"execute",
			methodParams:{
				name:"LastChangeTime",
				flag:"eth && physical"
			}
		});
		
		// 2.5
		//~this.needs("LastChange", {
			//~path: "sysbus.NeMo.Intf.data:getFirstParameter", 
			//~method:"execute",
			//~methodParams:{
				//~name:"LastChange",
				//~flag:"eth && physical"
			//~}
		//~});
		
		
		// 2.7 account status
		this.needs("accountStatus", {
			path: "sysbus.NeMo.Intf.data:isUp",
			method: "execute",
			methodParams: {
				flag: "logical"
			}
		});
		
		
		// 2.16 mode
		this.needs("mode", {
			path: "sysbus.NeMo.Intf.data:hasFlag",
			method: "execute",
			methodParams: {
			      "flag":"dhcp"
			}
		});
		
		
		// 2.19 MTU
		this.needs("MTU", {
			path: "sysbus.NeMo.Intf.data:getFirstParameter",
			method: "execute",
			methodParams: {
				name:"MTU"
			}
		});
		
		this.needs("Status", {
			path: "sysbus.NMC:getWANStatus", 
			method:"execute",
			methodParams:{}
		});
		
		this.needs("PPP", {
			path: "sysbus.NeMo.Intf.data:getMIBs",
			method:"execute",
			methodParams:{
				mibs:"base ppp dhcp",
				flag:"ppp || dhcp",
				traverse:"down"
			}    
		});   
		
		this.needs("Username", {
			path: "sysbus.NeMo.Intf.data:getFirstParameter", 
			method:"execute",
			methodParams:{
				name:"Username",
				flag:"ppp || dhcp",
				traverse:"down"
			}
		});
			
		this.needs("atm", {
			path: "sysbus.NeMo.Intf.data:getFirstParameter", 
			method:"execute",
			methodParams:{
				name:"VLANID",
			}
		});
		
		this.needs("DeviceInfo", {
			path: "sysbus.DeviceInfo", 
			depth: -1
		});
		
		this.markAsLoading();
		this.load();
	},

	objectsLoaded: function () {
		this._uptime = this.objects.DeviceInfo.UpTime;
		if (this.objects.Status.Protocol.toLowerCase() === "ppp"){
			this.objects.LastChange = this._uptime - this.objects.LastChangeTime;    
		} else {
			this.objects.LastChange = this.objects.Uptime;   			
		}
		this.fillForm();
		this.markAsLoaded();
	},

	fillForm: function () {  
		this.fromObject(this.objects);   
		this.objects.WanDNS = {};
		this.objects.WanDNS.DNSPrimary = "none";
		this.objects.WanDNS.DNSSecondary = "none";
		
		if(this.objects.Status.DNSServers){
			var dnsArray = this.objects.Status.DNSServers.split(",");
			this.objects.WanDNS.DNSPrimary = (dnsArray[0])?dnsArray[0]:"";
			this.objects.WanDNS.DNSSecondary = (dnsArray[1])?dnsArray[1]:"";
		}  
		$('WanDNS.DNSPrimary').update(this.objects.WanDNS.DNSPrimary);
		$('WanDNS.DNSSecondary').update(this.objects.WanDNS.DNSSecondary);
		
		// 2.1 FTTH link status
		var linktype = (this.objects.ethPhysical === true) ? "support.systeminformation.ftth.label.status.up":"support.systeminformation.ftth.label.status.down";
		Sah.translator.change($('eth.status'), linktype, this.objects.ethPhysical);
		
		// 2.3 synchronization status
		var linkState = (this.objects.Status.LinkState === "up") ? "support.systeminformation.ftth.label.status.up":"support.systeminformation.ftth.label.status.down";
		Sah.translator.change($('eth.syncrostate'), linkState, this.objects.Status.LinkState);
		// 2.5 FTTH synchronization uptime
		if (this.objects.Status.LinkState.toLowerCase() === "up"){
			$('eth.synchroduration').update(Sah.secondsToTime(this.objects.LastChange));
		} else {
			$('eth.synchroduration').update(Sah.secondsToTime(0));
		}
		// 2.4 FTTH last synchronization
		$('eth.synchrolast').update(Sah.uptimeToDate(this.objects.LastChange));
		
		document.observe("sah:admin:language:change",function (){
			$('eth.synchrolast').update(Sah.uptimeToDate(this.objects.LastChange));
			// 2.5 FTTH synchronization uptime
			if (this.objects.Status.LinkState.toLowerCase() === "up"){
				$('eth.synchroduration').update(Sah.secondsToTime(this.objects.LastChange));
			} else {
				$('eth.synchroduration').update(Sah.secondsToTime(0));
			}
		}.bind(this));
		
		// 2.7 account status accountStatus
		var accountStatus = (this.objects.accountStatus === true) ? "support.systeminformation.ftth.label.status.up":"support.systeminformation.ftth.label.status.down";
		Sah.translator.change($('ppp.accountstatus'), accountStatus, this.objects.accountStatus);
		
		// 2.9 PPP authentication mode
		$("ppp.authmode").update("Auto");	
		// 2.16 mode 
		if (appConfig === 'pl') {
		      // "PPP"
		      var mode = "PPP";
		}else{
		      // "PPP" if it returns false. / -> "DHCP" if it returns true.
		      var mode = (this.objects.mode == true) ? "DHCP" :  "PPP";
		}
		
		$("eth.mode").update(mode);		
		// 2.17 encapsulation
		$("eth.encapsulation").update("802.1q");		
		// 2.18 data path
		$("eth.datapath").update("Fast");		
		// 2.19 MTU
		$("mtu").update(this.objects.MTU);
		
		if (this.objects.PPP.base && this.objects.PPP.base.ppp_data){
			var pppstatus = (this.objects.PPP.base.ppp_data.Status)?"support.systeminformation.ftth.label.status.up":"support.systeminformation.ftth.label.status.down";
			Sah.translator.change($('ppp.connectionsstatus'), pppstatus, this.objects.PPP.base.ppp_data.Status);
		}

		if (this.objects.PPP.ppp && this.objects.PPP.ppp.ppp_data){
			$('ppp.protocoltype').update(this.objects.PPP.ppp.ppp_data.TransportType);
			$('ppp.connectionlasterror').update(this.objects.PPP.ppp.ppp_data.LastConnectionError);
			$('wanip').update(this.objects.PPP.ppp.ppp_data.LocalIPAddress);	
			$('basip').update(this.objects.PPP.ppp.ppp_data.RemoteIPAddress);
			if (this.objects.PPP.base.ppp_data.Status === true){
				Cookie.set('lastUp',this.objects.PPP.ppp.ppp_data.LastChangeTime);
				//2.11 PPP uptime
				$('ppp.connectionduration').update(Sah.secondsToTime(this.objects.PPP.ppp.ppp_data.LastChangeTime));	
				//2.10 PPP last connection
				$('ppp.connectionlast').update(Sah.uptimeToDate(this._uptime - this.objects.PPP.ppp.ppp_data.LastChangeTime));
				var lastDown = Cookie.get('lastDown') ? (this._uptime - parseInt(Cookie.get('lastDown'))) : "";
				while(lastDown < 0){
					lastDown+=86400;
				}
				$('ppp.connectionlastdisconnect').update(Sah.uptimeToDate(lastDown));
				
			} else {
				Cookie.set('lastDown',this.objects.PPP.ppp.ppp_data.LastChangeTime);
				//2.11 PPP uptime
				$('ppp.connectionduration').update(Sah.secondsToTime(0));
				// 2.14 - PPP last connection date
				$('ppp.connectionlastdisconnect').update(Sah.uptimeToDate(this._uptime - this.objects.PPP.ppp.ppp_data.LastChangeTime));
				//2.10 PPP last connection
				var lastUp = Cookie.get('lastUp') ? (this._uptime - parseInt(Cookie.get('lastUp'))) : "";
				while(lastUp < 0){
					lastUp+=86400;
				}
				$('ppp.connectionlast').update(Sah.uptimeToDate(lastUp));
			}
			
			document.observe("sah:admin:language:change",function (){
				if (this.objects.PPP.base.ppp_data.Status === true){
					//2.11 PPP uptime
					$('ppp.connectionduration').update(Sah.secondsToTime(this.objects.PPP.ppp.ppp_data.LastChangeTime));	
					//2.10 PPP last connection
					$('ppp.connectionlast').update(Sah.uptimeToDate(this._uptime - this.objects.PPP.ppp.ppp_data.LastChangeTime));
					var lastDown = Cookie.get('lastDown') ? (this._uptime - parseInt(Cookie.get('lastDown'))) : "";
					while(lastDown < 0){
						lastDown+=86400;
					}
					$('ppp.connectionlastdisconnect').update(Sah.uptimeToDate(lastDown));
				} else {
					//2.11 PPP uptime
					$('ppp.connectionduration').update(Sah.secondsToTime(0));
					// 2.14 - PPP last connection date
					$('ppp.connectionlastdisconnect').update(Sah.uptimeToDate(this._uptime - this.objects.PPP.ppp.ppp_data.LastChangeTime));
					//2.10 PPP last connection
					var lastUp = Cookie.get('lastUp') ? (this._uptime - parseInt(Cookie.get('lastUp'))) : "";
					while(lastUp < 0){
						lastUp+=86400;
					}
					$('ppp.connectionlast').update(Sah.uptimeToDate(lastUp));
				}
			}.bind(this));
		}
		if (this.objects.PPP.dhcp && this.objects.PPP.dhcp.dhcp_data){
			$('wanip').update(this.objects.PPP.dhcp.dhcp_data.IPAddress);	
			$('basip').update(this.objects.PPP.dhcp.dhcp_data.IPRouters);
		}

		$('eth.macadress').update(this.objects.Status.MACAddress);
		$('ppp.username').update(this.objects.Username);
		$('atm.vpvc').update(this.objects.atm);
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/support/general.js */

/**
 * Security Level
 * Firewall chain selection.
 */

Support.General = Class.create(Sah.AuthenticatedForm,/** @lends Security.Level# **/{
	initialize : function ($super , form )
	{
		$super ( form );

		this.needs("General.DeviceInfo", {
			path: "sysbus.DeviceInfo", 
			depth: -1
		});
		this.needs("Username", {
			path: "sysbus.NeMo.Intf.data:getFirstParameter", 
			method:"execute",
			methodParams:{
				name:"Username",
				flag:"ppp || dhcp",
				traverse:"down"
			}
		});
		this.needs("General.DSL.LinkStatus", {
			path: "sysbus.NeMo.Intf.dsl0:getFirstParameter", 
			method:"execute",
			methodParams:{
				name:"LinkStatus"
			}  
		});
		this.needs("General.WANStatus", {
			path: "sysbus.NMC:getWANStatus", 
			method:"execute",
			methodParams:{}
		});
		this.needs("General.ipv4", {
			path: "sysbus.NeMo.Intf.data:luckyAddrAddress", 
			method:"execute",
			methodParams:{
				flag:"ipv4 && global"
			}
		});
		
		this.needs("General.ipv6", {
			path: "sysbus.NeMo.Intf.lan:luckyAddrAddress", 
			method:"execute",
			methodParams:{
				flag:"ipv6 && global && !deprecated"
			}
		});

		this.markAsLoading();
		this.load();
	},

	objectsLoaded : function ()
	{
		var ucfirst =   function(xword){
			return xword.charAt(0).toUpperCase() + xword.slice(1);
		}
		this.objects.DeviceInfo = this.objects.General.DeviceInfo;
		this.objects.WANStatus = this.objects.General.WANStatus;		
		this.fromObject(this.objects);
		Sah.translator.change($("DeviceInfo.SoftVersion"), "support.systeminformation.general.label.softathome", "X powered by SoftAtHome");
		$("DeviceInfo.NumVersion").update(this.objects.General.DeviceInfo.SoftwareVersion);
		$("DeviceInfo.Manufacturer").update(this.objects.General.DeviceInfo.Manufacturer);
		$("DeviceInfo.FTSoftwareVersion").update(this.objects.General.DeviceInfo.AdditionalSoftwareVersion);
		$("DeviceInfo.Uptime").update(Sah.secondsToTime(this.objects.General.DeviceInfo.UpTime));
		$("WANStatus.MACAddress").update(this.objects.General.WANStatus.MACAddress);
		$("NMC.Username").update(this.objects.Username);
        
		document.observe("sah:admin:language:change",function (){
			$("DeviceInfo.Uptime").update(Sah.secondsToTime(this.objects.General.DeviceInfo.UpTime));
		}.bind(this));
		
		var connectionStatus = Support.General.SynchroStatus[this.objects.WANStatus.ConnectionState];
  
		var physicalLinkStatus = Support.General.UpDown[ucfirst(this.objects.General.DSL.LinkStatus)];
       
		//~ var linkStatus = Support.General.UpDown[ucfirst(this.objects.General.WANStatus.LinkState)];
		var status = (this.objects.WANStatus.ConnectionState === "Connected" || (this.objects.WANStatus.ConnectionState === "Bound" && this.objects.WANStatus.Protocol === "dhcp")) ? "up" : "down";
		var linkStatus = Support.General.UpDown[ucfirst(status)];
		
		Sah.translator.change($('WANStatus.ConnectionState'), connectionStatus, this.objects.General.WANStatus.ConnectionState);
		Sah.translator.change($('WANStatus.PhysicalLinkStatus'), physicalLinkStatus, this.objects.General.DSL.LinkStatus);
		Sah.translator.change($('WANStatus.LinkStatus'), linkStatus, this.objects.WANStatus.LinkState);
		var ipv4 = (this.objects.General.ipv4)?"support.systeminformation.general.label.status.connected":"support.systeminformation.general.label.status.disconnected";
		var ipv6 = (this.objects.General.ipv6)?"support.systeminformation.general.label.status.connected":"support.systeminformation.general.label.status.disconnected";
		Sah.translator.change($('ipv4'), ipv4, "");
		if(this.objects.General.WANStatus.IPv6Address != ""){
			$$(".ipv6").each(function(el) {				
				el.setStyle({
					display : "block"
				});
			});
			Sah.translator.change($('ipv6'), ipv6, "");
			
			$$(".next-ipv6").each(function(el) {	
				
				if(el.hasClassName("odd")){
					el.removeClassName("odd");
					el.addClassName("even");
				}else{
					if(el.hasClassName("even")){
						el.removeClassName("even");
						el.addClassName("odd");
					}
				}
			});
	}		
		
        
	var countries = {
		fr: "france",
		be: "belgium",
		sp: "spain",
		uk: "unitedkingdom",
		nl: "netherland",
		pl: "poland",
		tp: "poland",
		i13l: "international"
	};
	if (appConfig === "amea") {
		this.objects.DeviceInfo.Country = "i13l"
	}
	Sah.translator.change($("DeviceInfo.Country"), "general.country."+countries[this.objects.DeviceInfo.Country], "X "+this.objects.DeviceInfo.Country);
	this.markAsLoaded();
}
}
);

Support.General.SynchroStatus = {
	"Connected": "support.systeminformation.general.label.status.connected",
	"Selecting": "support.systeminformation.general.label.status.listening",
	"Bound": "support.systeminformation.general.label.status.connected",
        "Rebinding":  "support.systeminformation.general.label.status.connected",
        "Renewing":  "support.systeminformation.general.label.status.connected",
	"Disconnected": "support.systeminformation.general.label.status.disconnected",
	"Idle": "support.systeminformation.general.label.status.disconnected",
        "Init": "support.systeminformation.general.label.status.disconnected",
        "Requesting": "support.systeminformation.general.label.status.disconnected",
	"Unconfigured": "support.systeminformation.general.label.status.unconfigured",
	"Authenticating": "support.systeminformation.general.label.status.authenticating",
	"Connecting": "support.systeminformation.general.label.status.connecting"
};


Support.General.UpDown = {
	"Up" : "support.systeminformation.general.label.status.up",
	"Down" : "support.systeminformation.general.label.status.down",
	"Unavailable" : "support.systeminformation.general.label.status.unavailable",
	"Disabled" : "support.systeminformation.general.label.status.unavailable",
	"Error" : "support.systeminformation.general.label.status.unavailable",
	"NoSignal" : "support.systeminformation.general.label.status.unavailable",
	"Initializing" : "support.systeminformation.general.label.status.initializing",
	"EstablishingLink" : "support.systeminformation.general.label.status.initializing",
	"Listening" : "support.systeminformation.general.label.status.listening"
};


/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/support/internet.js */
/*
 *
 * Broadband Network Details
 *
 *      ( Link Type )
 *
 */

Support.Internet = Class.create(Sah.AuthenticatedForm, /** @lends Wan.NetworkDetails.LinkType# */ {
	_currentMode: 'ppp',
	
	initialize: function ($super, form) {
		$super(form);	
	
		this.needs("PPP", {
			path: "sysbus.NeMo.Intf.data:getMIBs",
			method:"execute",
			methodParams:{
				mibs:"base ppp dhcp",
				flag:"ppp || dhcp",
				traverse:"down"
			}    
		});   
		this.needs("Username", {
			path: "sysbus.NeMo.Intf.data:getFirstParameter", 
			method:"execute",
			methodParams:{
				name:"Username",
				flag:"ppp || dhcp",
				traverse:"down"
			}
		});
		this.needs("ipv6.address", {
			path: "sysbus.NeMo.Intf.lan:luckyAddrAddress", 
			method:"execute",
			methodParams:{
				flag:"ipv6 && global"
			}
		});
		
		// 3.9 MTU
		this.needs("mtu", {
			path: "sysbus.NeMo.Intf.data:getFirstParameter",
			method: "execute",
			methodParams: {
				name:"MTU"
			}
		});
		
		this.needs("ipv6.DNS", {
			path: "sysbus.NeMo.Intf.lo:getDHCPOption", 
			method:"execute",
			methodParams:{
				type:"req6",
				tag:"23",
				traverse:"all"
			}
		});
		
		this.client.execute("sysbus.NMC:getWANStatus", {}, {
		      onSuccess: this.loadObjects.bind(this),
		      onFailure: this.loadObjects.bind(this)
		}); 
		
		this.needs("DeviceInfo", {
			path: "sysbus.DeviceInfo", 
			depth: -1
		});
		
		this.markAsLoading();
	},

	objectsLoaded: function () {  		
		this._uptime = this.objects.DeviceInfo.UpTime;
		if (this.objects.Status.Protocol.toLowerCase() === "ppp"){
			this.objects.LastChange = this._uptime - this.objects.LastChangeTime;     
		} else {	
			this.objects.LastChange = this.objects.Uptime;   
		}
		
		this.fillForm();
		this.markAsLoaded();
	},
	
	loadObjects: function(obj){		
		this.objects.Status = obj.result.data;
		this.objects.Protocol = obj.result.data.Protocol;
		
		if (this.objects.Protocol == "dhcp") {
			this._currentMode = 'dhcp';
						
			// 3.4
			this.needs("Uptime", {
				path: "sysbus.NeMo.Intf.data:getFirstParameter", 
				method:"execute",
				methodParams:{
					name:"Uptime",
					flag:"logical"
				}
			});
			
		} else { //PPP
			// 3.3
			this.needs("LastChangeTime", {
				path: "sysbus.NeMo.Intf.data:getFirstParameter", 
				method:"execute",
				methodParams:{
					name:"LastChangeTime",
					flag:"logical"
				}
			});
			
			// 3.4
			this.needs("LastChange", {
				path: "sysbus.NeMo.Intf.data:getFirstParameter", 
				method:"execute",
				methodParams:{
					name:"LastChange",
					flag:"logical"
				}
			});
		}
		
		if(obj.result.data.LinkType.toLowerCase() === "dsl"){
			this.needs("atm", {
				path: "sysbus.NeMo.Intf.data:getFirstParameter", 
				method:"execute",
				methodParams:{
					name:"DestinationAddress"
				}
			});
		}else{
			this.needs("atm", {
				path: "sysbus.NeMo.Intf.data:getFirstParameter", 
				method:"execute",
				methodParams:{
					name:"VLANID"
				}
			});
		}
		
		this.load();
	},

	fillForm: function () {
		this.fromObject(this.objects);       
		var internetStatus = Support.Internet.ConnectionStatus[this.objects.Status.ConnectionState];
		this.objects.WanDNS = {};
		this.objects.WanDNS6 = {};
		this.objects.WanDNS.DNSPrimary = "";
		this.objects.WanDNS.DNSSecondary = "";
		this.objects.WanDNS6.DNSPrimary = "";
		this.objects.WanDNS6.DNSSecondary = "";
		
		if(this.objects.Status.DNSServers){
			var dnsArray = this.objects.Status.DNSServers.split(",");
			var dnsArray4 = [], dnsArray6 = [], j = 0, k = 0;
			for (i=0; i < dnsArray.length; i++){
				if (dnsArray[i].indexOf(".") >= 0){
					dnsArray4[j] = dnsArray[i];
					j++;
				}
				if (dnsArray[i].indexOf(":") >= 0){
					dnsArray6[k] = dnsArray[i];
					k++;
				}
			}
			
			this.objects.WanDNS.DNSPrimary = (dnsArray4[0])?dnsArray4[0]:"";
			this.objects.WanDNS.DNSSecondary = (dnsArray4[1])?dnsArray4[1]:"";
		}  
		
		$('WanDNS.DNSPrimary').update(this.objects.WanDNS.DNSPrimary);
		$('WanDNS.DNSSecondary').update(this.objects.WanDNS.DNSSecondary);
			
		/*this.objects.WanDNS6 = {};
		this.objects.WanDNS6.DNSPrimary = "none";
		this.objects.WanDNS6.DNSSecondary = "none";
		if(this.objects.ipv6.DNS){
			var dnsArray6 = this.objects.ipv6.DNS[0].split(",");
			this.objects.WanDNS6.DNSPrimary = (dnsArray6[0])?dnsArray6[0]:"";
			this.objects.WanDNS6.DNSSecondary = (dnsArray6[1])?dnsArray6[1]:"";
		}*/	

		Sah.translator.change($('Status.ConnectionState'), internetStatus, this.objects.Status.ConnectionState);
		if (this._currentMode === 'ppp') {
			$('NMC.Username').update(this.objects.Username);
		} else {
			$('NMC.Username').update("N/A");
		}
		
		$('Status.Protocol').update(this.objects.Status.Protocol);
		$('Status.LastConnectionError').update(this.objects.Status.LastConnectionError);
		  
		if (this.objects.Status.LinkState.toLowerCase() === "up"){
			Cookie.set('lastUp',this.objects.LastChangeTime);
			// 3.3
			$('lastconnection').update(Sah.uptimeToDate(this.objects.LastChange));	
			// 3.4 
			$('duration').update(Sah.secondsToTime(this.objects.LastChange));
			var lastDown = Cookie.get('lastDown') ? (this._uptime - parseInt(Cookie.get('lastDown'))) : "";
			while(lastDown < 0){
				lastDown+=86400;
			}
			$('lstconnection').update((Sah.uptimeToDate(lastDown) === "") ? "0" : Sah.uptimeToDate(lastDown));
			
		} else {
			Cookie.set('lastDown',this.objects.LastChangeTime);
			//2.11 PPP uptime
			$('duration').update(Sah.secondsToTime(0));
			// 2.14 - PPP last connection date
			$('lstconnection').update((Sah.uptimeToDate(this.objects.LastChange) === "") ? "0" : Sah.uptimeToDate(this.objects.LastChange));
			//2.10 PPP last connection
			var lastUp = Cookie.get('lastUp') ? (this._uptime - parseInt(Cookie.get('lastUp'))) : "";
			while(lastUp < 0){
				lastUp+=86400;
			}
			$('lastconnection').update(Sah.uptimeToDate(lastUp));
		}
		
		document.observe("sah:admin:language:change",function (){
			if (this.objects.Status.LinkState.toLowerCase() === "up"){
				// 3.3
				$('lastconnection').update(Sah.uptimeToDate(this.objects.LastChange));	
				// 3.4 
				$('duration').update(Sah.secondsToTime(this.objects.LastChange));
				var lastDown = Cookie.get('lastDown') ? (this._uptime - parseInt(Cookie.get('lastDown'))) : "";
				while(lastDown < 0){
					lastDown+=86400;
				}
				$('lstconnection').update((Sah.uptimeToDate(lastDown) === "") ? "0" : Sah.uptimeToDate(lastDown));
				
			} else {
				//2.11 PPP uptime
				$('duration').update(Sah.secondsToTime(0));
				// 2.14 - PPP last connection date
				$('lstconnection').update((Sah.uptimeToDate(this.objects.LastChange) === "") ? "0" : Sah.uptimeToDate(this.objects.LastChange));
				//2.10 PPP last connection
				var lastUp = Cookie.get('lastUp') ? (this._uptime - parseInt(Cookie.get('lastUp'))) : "";
				while(lastUp < 0){
					lastUp+=86400;
				}
				$('lastconnection').update(Sah.uptimeToDate(lastUp));
			}
		}.bind(this));
		
		if (this.objects.Status.IPAddress !== "192.0.0.2"){
			$('Status.IPAddress').update(this.objects.Status.IPAddress);
		}else {
			$('wanAdr').hide();
		}
		$('mtu').update(this.objects.mtu);
		
		$('atm').update(this.objects.atm);
		
		if(this.objects.Status.IPv6Address != ""){
			$$(".ipv6").each(function(el) {				
				el.setStyle({
					display : "block"
				});
			});
			
			this.objects.WanDNS6.DNSPrimary = (dnsArray6[0])?dnsArray6[0]:"none";
			this.objects.WanDNS6.DNSSecondary = (dnsArray6[1])?dnsArray6[1]:"none";
			
			$('WanDNS6.DNSPrimary').update(this.objects.WanDNS6.DNSPrimary);
			$('WanDNS6.DNSSecondary').update(this.objects.WanDNS6.DNSSecondary);
			$('ipv6.address').update(this.objects.ipv6.address);
			
			$$(".next-ipv6").each(function(el) {	
				
				if(el.hasClassName("odd")){
					el.removeClassName("odd");
					el.addClassName("even");
				}else{
					if(el.hasClassName("even")){
						el.removeClassName("even");
						el.addClassName("odd");
					}
				}
			});
		}
		
		/* $('Dsl.LastChange').update(this.objects.Dsl.LastChange + " s");
		$('Dsl.UpstreamCurrRate').update(this.objects.Dsl.UpstreamCurrRate + " Kb/s");
		$('Dsl.DownstreamCurrRate').update(this.objects.Dsl.DownstreamNoiseMargin + " Kb/s");
		$('Dsl.DownstreamNoiseMargin').update(this.objects.Dsl.DownstreamNoiseMargin + " dB");*/
	  
	}
});


Support.Internet.ConnectionStatus = {
	"Connected": "support.systeminformation.general.label.status.connected",
	"Selecting": "support.systeminformation.general.label.status.listening",
	"Bound": "support.systeminformation.general.label.status.connected",
        "Rebinding":  "support.systeminformation.general.label.status.connected",
        "Renewing":  "support.systeminformation.general.label.status.connected",
	"Disconnected": "support.systeminformation.general.label.status.disconnected",
	"Idle": "support.systeminformation.general.label.status.disconnected",
        "Init": "support.systeminformation.general.label.status.disconnected",
        "Requesting": "support.systeminformation.general.label.status.disconnected",
	"Unconfigured": "support.systeminformation.general.label.status.unconfigured",
	"Authenticating": "support.systeminformation.general.label.status.authenticating",
	"Connecting": "support.systeminformation.general.label.status.connecting"
};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/support/lan.js */


Support.Lan = Class.create(Sah.AuthenticatedForm, /** @lends Wan.NetworkDetails.LinkType# */ {
	
	initialize: function ($super, form) {
		$super(form);
		
		
		this.needs("OrangeTV_Mode", {
			path: "sysbus.NMC.OrangeTV:getIPTVStatus", 
			method:"execute"
		});       
		
		this.needs("Status", {
			path: "sysbus.NMC:getLANIP",
			method:"execute"
            
		});
		   
		this.needs("ipv6_gua", {
			path: "sysbus.NeMo.Intf.lan:luckyAddrAddress", 
			method:"execute",
			methodParams:{
				flag:"ipv6 && global"
			}
		});
	
		this.needs("eth", {
			path: "sysbus.NeMo.Intf.lan:getMIBs",
			method:"execute",
			methodParams:{
				mibs:"base eth",
				flags:"eth physical"
			}           
		});   

		this.needs("eth_data", {
			path: "sysbus.NeMo.Intf.data:getMIBs",
			method:"execute",
			methodParams:{
				mibs:"base eth",
				flags:"eth physical"
			}           
		});  
    
		this.needs("MacAddress", {
			path: "sysbus.NeMo.Intf.lan:getFirstParameter",
			method:"execute",
			methodParams:{
				name:"LLAddress"
			}           
		}); 
		this.needs("MLTV", {
			path: "sysbus.NMC.OrangeTV:getIPTVMultiScreens",
			method: "execute",
			methodParams: {}
		});
		this.needs("WanStatus", {
			path: "sysbus.NMC:getWANStatus",
			method: "execute"
		});
		this.markAsLoading();
		this.load();
	},

	objectsLoaded: function () {  
		
		this.objects.base = this.objects.eth.base;
		this.objects.eth = this.objects.eth.eth;
		this.fillForm();
		this.markAsLoaded();
	},

   

	fillForm: function () {      
		this.fromObject(this.objects);   
		var DHCPStatus = (this.objects.Status.DHCPEnable)?"support.systeminformation.wifi.label.status.enabled":"support.systeminformation.wifi.label.status.disabled";        
		Sah.translator.change($('Status.DHCPEnable'), DHCPStatus, this.objects.Status.DHCPEnable);        
		$('Status.DHCPMinAddress').update(this.objects.Status.DHCPMinAddress);
		$('Status.DHCPMaxAddress').update( this.objects.Status.DHCPMaxAddress);
		$('Status.Netmask').update( this.objects.Status.Netmask);
// 		$('DHCP.DefaultLeaseTime').update(Sah.secondsToTime(this.objects.DHCP.DefaultLeaseTime||0));
		$('DHCP.DefaultLeaseTime').update(Sah.secondsToTime("86400"||0));
		$('DHCP.Gateway').update(this.objects.Status.Address);
		$('MacAddress').update(this.objects.MacAddress);
			
		document.observe("sah:admin:language:change",function (){
// 			$('DHCP.DefaultLeaseTime').update(Sah.secondsToTime(this.objects.DHCP.DefaultLeaseTime||0));
			$('DHCP.DefaultLeaseTime').update(Sah.secondsToTime("86400"||0));
		}.bind(this));			
				
		var Ports = [
		{
			color:"Rouge",
			object:"swport1"
		},
		{
			color:"Jaune",
			object:"swport2"
		},
		{
			color:"Vert",
			object:"swport3"
		},
		{
			color:"Blanc",
			object:"swport4"
		}];
		
		var swport1_eth = this.objects.eth["swport1"];
		var swport1_base = this.objects.base["swport1"];

		var eth_data = this.objects.eth_data.eth;
		var base_data = this.objects.eth_data.base.data;

		/*********************** Fixing Mode display : Internet, Internet & TV, off, FTTH, TV **********************/
		if (this.objects.OrangeTV_Mode){
			var off = "Translations.support.systeminformation.lan.mode.disable",
			internetTV  = "Translations.support.systeminformation.lan.mode.InternetTV",
			internet  = "Translations.support.systeminformation.lan.mode.internet",
			tv  = "Translations.support.systeminformation.lan.mode.tv",
			ftth  = "Translations.support.systeminformation.lan.mode.internetONT";
			
			Ports.each(function(port){
				var eth = this.objects.eth[port.object],
				base = this.objects.base[port.object];
				
				$(port.color+".CurrentBitRate").addClassName ("translation");
				$(port.color+".Status").addClassName ("translation");
				
				if (eth && base){
					var bitRate = eth.CurrentBitRate;	
					
					var status = base.Status ? "Translations.support.systeminformation.lan.status.link" : "Translations.support.systeminformation.lan.status.nolink";   
					$(port.color+".Status").addClassName (status);
					
					if (bitRate === -1){
						$(port.color+".CurrentBitRate").addClassName (off);
					}else{
						if (this.objects.OrangeTV_Mode.IPTVStatus !== "Unknown"){
							$(port.color+".CurrentBitRate").addClassName (internetTV);
						}else {
							$(port.color+".CurrentBitRate").addClassName (internet);
						}
					}
					
					if (port.object === "swport3" && appConfig === 'pl' && this.objects.MLTV.MLTVEnable){
						$(port.color+".CurrentBitRate").removeClassName(off);
						$(port.color+".CurrentBitRate").removeClassName(internetTV);
						$(port.color+".CurrentBitRate").removeClassName(internet);
						$(port.color+".CurrentBitRate").addClassName (tv);
					}
		
					$(port.color+".Mac").update(this.objects.MacAddress);
					$(port.color+".DuplexModeEnabled").update(eth.DuplexModeEnabled);
					$(port.color+".MaxBitRateSupported").update(eth.MaxBitRateSupported + " Mb/s");
					$(port.color+".CurrentDuplexMode").update(eth.CurrentDuplexMode);
					
				}else { 
					status = "Translations.support.systeminformation.lan.status.nolink";
					
					$(port.color+".CurrentBitRate").removeClassName(off);
					$(port.color+".CurrentBitRate").removeClassName(internetTV);
					$(port.color+".CurrentBitRate").removeClassName(internet);
					$(port.color+".CurrentBitRate").removeClassName(tv);	
						
					$(port.color+".Status").addClassName (status);
					
					if (port.object === "swport4" && config.BUILD_PROJECT.indexOf("2.8") < 0){
						$(port.color+".CurrentBitRate").addClassName (ftth);
					}else{
						$(port.color+".CurrentBitRate").addClassName (tv);
					}
										
					$(port.color+".Mac").update(this.objects.MacAddress);	
					$(port.color+".DuplexModeEnabled").update(swport1_eth.DuplexModeEnabled);
					$(port.color+".MaxBitRateSupported").update(swport1_eth.MaxBitRateSupported + " Mb/s");
					$(port.color+".CurrentDuplexMode").update(swport1_eth.CurrentDuplexMode);
				}				
			},this);
		} 
		
		
			$$(".wanPort").each(function(el) {
				el.setStyle({
					display : "block"
				});
			});
			
			$("Wan.CurrentBitRate").addClassName ("translation");
			$("Wan.Status").addClassName ("translation");
			$("Wan.CurrentBitRate").addClassName ("Translations.support.systeminformation.lan.mode.internetONT");	
			var status = base_data.Status ? "Translations.support.systeminformation.lan.status.link" : "Translations.support.systeminformation.lan.status.nolink";   
			$("Wan.Status").addClassName (status);
			$("Wan.Mac").update(this.objects.MacAddress);
			$("Wan.DuplexModeEnabled").update(eth_data.DuplexModeEnabled);
			$("Wan.MaxBitRateSupported").update(eth_data.MaxBitRateSupported + " Mb/s");
			$("Wan.CurrentDuplexMode").update(eth_data.CurrentDuplexMode);



		
		Sah.translator.refresh();
		
 		if(this.objects.WanStatus.IPv6Address != ""){
			$$(".ipv6").each(function(el) {				
				el.setStyle({
					display : "block"
				});
			});
			
			
			$('ipv6_gua').update(this.objects.ipv6_gua);
			
			this.client.execute("sysbus.DHCPv6.Server:getDHCPv6ServerStatus",
				{},
				{
					onSuccess : this.WhenDhcpv6StatusHandler.bind(this),
					onFailure: function(){}
				}
			);
							
// 			this.client.execute("sysbus.NeMo.Intf.dhcpv6_multi:getDHCPOption",{
// 					"type":"req6",
// 					"tag":25
// 				},
// 				{
// 					onSuccess : this.WhenDhcpv6Handler.bind(this),
// 					onFailure: function(){
// 					  $('ipv6_prefix').innerHTML = "";
// 					}
// 				}
// 			);  
			if (this.objects.WanStatus.IPv6DelegatedPrefix) {
				$('ipv6_prefix').update(this.objects.WanStatus.IPv6DelegatedPrefix);
			}else{
				$('ipv6_prefix').innerHTML = "";
			}
 		}
   
	},
	
	WhenDhcpv6StatusHandler : function(obj){
		var undef;
		if(obj.result && obj.result.status !== undef && obj.result.status !== null){
			var DHCPStatusv6 = (obj.result.status === "Enabled")?"support.systeminformation.wifi.label.status.enabled":"support.systeminformation.wifi.label.status.disabled";
			Sah.translator.change($('DHCPv6.status'), DHCPStatusv6, obj.result.status); 
		}
		
	},
	  
	
	WhenDhcpv6Handler : function(obj){
		var undef;
		if(obj.result && obj.result.status !== undef  && obj.result.status !== null){
			if (obj.result.status.length > 0) {
				$('ipv6_prefix').update(obj.result.status[0]['Options'][0]['Value']['Prefix']);
			}
		}else{
			$('ipv6_prefix').innerHTML = "";
		}
	}
});


/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/support/dsl.js */
/*
 *
 * Broadband Network Details
 *
 *      ( Link Type )
 *
 */

Support.Dsl = Class.create(Sah.AuthenticatedForm, /** @lends Wan.NetworkDetails.LinkType# */ {
	initialize: function ($super, form) {
		$super(form);
		
		this.needs("Dsl", {
			path: "sysbus.NeMo.Intf.data:getMIBs",
			method:"execute",
			methodParams:{
				mibs:"dsl",
				flag:"",
				traverse:"down"
			}    
		});       
	
		this.needs("DslStats", {
			path: "sysbus.NeMo.Intf.dsl0:getDSLStats",
			method:"execute"
		});
		
		this.needs("Status", {
			path: "sysbus.NMC:getWANStatus", 
			method:"execute",
			methodParams:{}
		});
		
		this.needs("DeviceInfo", {
			path: "sysbus.DeviceInfo", 
			depth: -1
		});
		
			
		this.markAsLoading();
		this.load();
	},

	objectsLoaded: function () { 
		this._uptime = this.objects.DeviceInfo.UpTime;
				
		if (this.objects.Dsl.dsl.dsl0) {
			this.objects.Dsl = this.objects.Dsl.dsl.dsl0;
		} else {
			this.objects.Dsl = {
				LinkStatus: '',
				LastChangeTime: '',
				LastChange: '',
				UpstreamCurrRate: '',
				DownstreamCurrRate: '',
				DownstreamNoiseMargin: ''
			}
		}
		
		if (this.objects.Dsl.LastChangeTime !== ''){
			if (this.objects.Status.Protocol.toLowerCase() === "ppp"){
				this.objects.LastChange = this._uptime - this.objects.Dsl.LastChangeTime;    
			} else {
				this.objects.LastChange = this.objects.Dsl.LastChange;   			
			} 
		} else {
			this.objects.LastChange = "";   
		}
		
		this.fillForm();
		this.markAsLoaded();
	},   

	fillForm: function () {      
		this.fromObject(this.objects);       
		var linkstatus = Support.Dsl.DslUpDown[this.objects.Dsl.LinkStatus];
		Sah.translator.change($('Dsl.LinkStatus'), linkstatus, this.objects.Dsl.LinkStatus);
		if (this.objects.Dsl.LinkStatus.toLowerCase() === "up"){
			$('Dsl.LastChangeTime').update(Sah.secondsToTime(this.objects.LastChange));
		} else {
			$('Dsl.LastChangeTime').update(Sah.secondsToTime(0));
		}		
		//~$('Dsl.LastChange').update(Sah.uptimeToDate(this.objects.Dsl.LastChange));
		$('Dsl.LastChange').update(Sah.uptimeToDate(this.objects.LastChange));
		$('Dsl.UpstreamCurrRate').update(this.objects.Dsl.UpstreamCurrRate + " Kb/s");
		$('Dsl.DownstreamCurrRate').update(this.objects.Dsl.DownstreamCurrRate + " Kb/s");
		$('Dsl.DownstreamNoiseMargin').update(this.formatToDigit(this.objects.Dsl.DownstreamNoiseMargin) + " dB");
		
		$('Dsl.eslerrors').update(this.objects.DslStats.ErroredSecs);
		$('Dsl.seslerrors').update(this.objects.DslStats.SeverelyErroredSecs);
		
		document.observe("sah:admin:language:change",function (){
			if (this.objects.Dsl.LinkStatus.toLowerCase() === "up"){
				$('Dsl.LastChangeTime').update(Sah.secondsToTime(this.objects.LastChange));
			} else {
				$('Dsl.LastChangeTime').update(Sah.secondsToTime(0));
			}
			//~$('Dsl.LastChange').update(Sah.uptimeToDate(this.objects.Dsl.LastChange));
			$('Dsl.LastChange').update(Sah.uptimeToDate(this.objects.LastChange));
		}.bind(this));
  
	},
	
	formatToDigit: function(data){
		var res, undef;
		if (data && data != null && data != undef){
			res = data / 10;
			   return res.toFixed(1);
		}
	}
});


Support.Dsl.SynchroStatus = {
	"Connected": "support.systeminformation.general.label.status.connected",
	"Selecting": "support.systeminformation.general.label.status.listening",
	"Bound": "support.systeminformation.general.label.status.connected",
        "Rebinding":  "support.systeminformation.general.label.status.connected",
        "Renewing":  "support.systeminformation.general.label.status.connected",
	"Disconnected": "support.systeminformation.general.label.status.disconnected",
	"Idle": "support.systeminformation.general.label.status.disconnected",
        "Init": "support.systeminformation.general.label.status.disconnected",
        "Requesting": "support.systeminformation.general.label.status.disconnected",
	"Unconfigured": "support.systeminformation.general.label.status.unconfigured",
	"Authenticating": "support.systeminformation.general.label.status.authenticating",
	"Connecting": "support.systeminformation.general.label.status.connecting"
};
Support.Dsl.DslUpDown = {
	"Up": "support.systeminformation.adsl.label.status.up",
	"Down": "support.systeminformation.adsl.label.status.down",
	"NoSignal": "support.systeminformation.adsl.label.status.down",
	"Initializing": "support.systeminformation.adsl.label.status.initializing",
	"Unavailable": "support.systeminformation.adsl.label.status.unavailable",
	"Disabled": "support.systeminformation.adsl.label.status.down"
};
Support.Dsl.FtthUpDown = {
	"Up": "support.systeminformation.ftth.label.status.up",
	"Down": "support.systeminformation.ftth.label.status.down",
	"NoSignal": "support.systeminformation.ftth.label.status.down",
	"Initializing": "support.systeminformation.ftth.label.status.initializing",
	"Unavailable": "support.systeminformation.ftth.label.status.unavailable"
};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/support/usb.js */


Support.Usb = Class.create(Sah.AuthenticatedForm, /** @lends Wan.NetworkDetails.LinkType# */ {
	initialize: function ($super, form) {
		$super(form);
		
		this.needs("USBHosts", {
			  path: "sysbus.USBHosts:getDevices",
			  method: "execute"
		});       
		
		this.markAsLoading();
		this.load();
	},
	
	objectsLoaded: function () {       
		this.fillForm();
		this.markAsLoaded();
	},
	
	fillForm: function () {
		for (var i=0; i<this.objects.USBHosts.length; i++) {
			if (this.objects.USBHosts[i]['physicalPort'] == "Port1") {
				$$('.odd .value')[0].removeClassName('Translations.support.systeminformation.adsl.label.status.down');
				$$('.odd .value')[0].addClassName('Translations.support.systeminformation.adsl.label.status.up');
				
				$$('.even .value')[0].removeClassName('Translations.support.systeminformation.usb.func.undefined');
				switch (this.objects.USBHosts[i]['classes'][0]) {
					case 8: $$('.even .value')[0].addClassName('Translations.support.systeminformation.usb.func.massstorage');
						break;
						 
					case 3: $$('.even .value')[0].addClassName('Translations.support.systeminformation.usb.func.phone');
						 break;
						 
					case 7: $$('.even .value')[0].addClassName('Translations.support.systeminformation.usb.func.printer');
						 break;
						 
					default: $$('.even .value')[0].addClassName('Translations.support.systeminformation.usb.func.undefined');
				}
			} else if (this.objects.USBHosts[i]['physicalPort'] == "Port2") {
				$$('.odd .value')[1].removeClassName('Translations.support.systeminformation.adsl.label.status.down');
				$$('.odd .value')[1].addClassName('Translations.support.systeminformation.adsl.label.status.up');
				
				$$('.even .value')[1].removeClassName('Translations.support.systeminformation.usb.func.undefined');
				
				switch (this.objects.USBHosts[i]['classes'][0]) {
					case 8: $$('.even .value')[1].addClassName('Translations.support.systeminformation.usb.func.massstorage');
						 break;
						 
					case 3: $$('.even .value')[1].addClassName('Translations.support.systeminformation.usb.func.phone');
						 break;
						 
					case 7: $$('.even .value')[1].addClassName('Translations.support.systeminformation.usb.func.printer');
						 break;
						 
					default: $$('.even .value')[1].addClassName('Translations.support.systeminformation.usb.func.undefined');
				}
			}
		}
		
		// Activate translation mechanism
		Sah.translator.refresh(); 
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/support/tv.js */

Support.Tv = Class.create(Sah.AuthenticatedForm, /** @lends Wan.NetworkDetails.LinkType# */ {
	initialize: function ($super, form) {
		$super(form);
	
		this.needs("IPTV", {
			path: "sysbus.NMC.OrangeTV:getIPTVConfig",
			method: "execute"
		});
		
		this.markAsLoading();
		this.load();
	},

	objectsLoaded: function () {     
		this.fillForm();
		this.markAsLoaded();
	},
	
	fillLine: function(statusId, status, vpvcId, vpvc, cssClass){
		cssClass.each(function(el) {				
			el.setStyle({
				display : "block"
			});
		});
		var stat = (status) ? "support.systeminformation.tv.label.status.up" : "support.systeminformation.tv.label.status.down";
		
		if (vpvcId.innerHTML === ""){
			Sah.translator.change(statusId, stat, "");
			vpvcId.update(vpvc);
		}
	},
	
	fillForm: function(){
		var k = 1;
		//~this.IPTV = Support.unitTest.result.status;
		//~this.IPTV.each(function (obj){
		$A(this.objects.IPTV).each(function (obj){
			var flagsTab = obj.ChannelFlags.split(" ");
			for (i=0; i<flagsTab.length; i++){
				switch (flagsTab[i]){
					case "VOD" : 	this.fillLine($("vod_status"), obj.ChannelStatus, $("vod_vpvc"), obj.ChannelNumber, $$(".vod"));
									break;
					case "Zapping": this.fillLine($("zapping_status"), obj.ChannelStatus, $("zapping_vpvc"), obj.ChannelNumber, $$(".zapping"));
									break;
					case "Multicast": if (k < 3){
										this.fillLine($("channel_status_"+k), obj.ChannelStatus, $("channel_vpvc_"+k), obj.ChannelNumber, $$(".channel"+k));
										k++;
									}
									break;	
				}
			}
		},this);
	}
});

 
//~Support.unitTest ={
   //~"result":{
		//~"status":[
			//~{
				//~"ChannelStatus": true,
				//~"ChannelType": "VPVC",
				//~"ChannelNumber": "8/38",
				//~"ChannelFlags": "VOD Zapping Multicast"
			//~},
			//~{
				//~"ChannelStatus": true,
				//~"ChannelType": "VLAN",
				//~"ChannelNumber": "8/39",
				//~"ChannelFlags": "VOD Zapping Multicast"
			//~}
		//~]
	//~}
//~};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/support/voip.js */

Support.Voip = Class.create(Sah.AuthenticatedForm, /** @lends Wan.NetworkDetails.LinkType# */ {
	initialize: function ($super, form) {
		$super(form);
	
		this.needs("PhoneTrunk", {
			path: "sysbus.VoiceService.VoiceApplication:listTrunks",
			method: "execute"
		});		
		this.needs("VOIP", {
			path: "sysbus.NMC:getVoIPConfig",
			method: "execute"
		});		
		
		this.markAsLoading();
		this.load();
	},

	objectsLoaded: function () { 
		if(this.objects.VOIP[0].Enable=="Enabled"){ 
			this.objects.vpvc = this.objects.VOIP[0].InterfaceId;
			this.objects.protocol = "SIP";
		}
		else if(this.objects.VOIP[1].Enable=="Enabled")
		{
			this.objects.vpvc = this.objects.VOIP[1].InterfaceId;
			this.objects.protocol = "H323";
		}
		else{
			this.objects.vpvc = "";
			this.objects.protocol = "";
		}
		this.fillForm();
		this.markAsLoaded();
	},

   

	fillForm: function () {      
		this.fromObject(this.objects);      		
		this.objects.Lines = {
			Status : "Down"
		}
		if ( this.objects.PhoneTrunk !== undefined ) {
			for (var i = 0; i < this.objects.PhoneTrunk.length; i++) {
				for (var j = 0; j < this.objects.PhoneTrunk[i]["trunk_lines"].length; j++) {			
					if (this.objects.PhoneTrunk[i]["trunk_lines"][j].status === "Up" && this.objects.PhoneTrunk[i]["trunk_lines"][j].enable === "Enabled") {
						if(this.objects.protocol == "H323") { //h323
							$('phonenumber').update(Sah.Tools.formatPhoneNumber(this.objects.PhoneTrunk[i]["trunk_lines"][j].directoryNumber));
						}
						else { //sip
							$('phonenumber').update(Sah.Tools.formatCountryCode(this.objects.PhoneTrunk[i]["trunk_lines"][j].directoryNumber));
						}
						this.objects.Lines.Status = this.objects.PhoneTrunk[i]["trunk_lines"][j].status;
					}
				}
			}
		}
		var voipStatus = (this.objects.Lines.Status == "Up")?"support.systeminformation.voip.label.status.up":"support.systeminformation.voip.label.status.down";
		Sah.translator.change($('voip-status'),voipStatus, "");		
		$('vpvc').update(this.objects.vpvc);			
		$('protocol').update(this.objects.protocol.toUpperCase());  
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/support/wifi.js */

Support.Wifi = Class.create(Sah.AuthenticatedForm, /** @lends Wan.NetworkDetails.LinkType# */ {
	initialize: function ($super, form) {
		$super(form);
		
		this.needs("WIFI", {
			path: "sysbus.NeMo.Intf.lan:getMIBs",
			method:"execute",
			methodParams:{
				mibs:"wlanvap wlanradio base",
				flags: "wlanvap || wlanradio",
				traverse:"down"
			}
		});
		
		this.needs("MacAddress", {
			path: "sysbus.NeMo.Intf.wl0:getFirstParameter",
			method:"execute",
			methodParams:{
				name:"LLAddress"
			}           
		}); 
		
		this.needs("Stats", {
			path: "sysbus.NMC.Wifi:getStats",
			method:"execute",
			methodParams:{}           
		});
		
		this.load();
	},

	objectsLoaded: function () {    
		this.objects.WLAN = this.objects.WIFI.wlanvap.wl0;
		this.objects.WLAN.Radio = this.objects.WIFI.wlanradio.wifi0_ath ||this.objects.WIFI.wlanradio.wifi0_bcm ;
		this.fillForm();
		this.markAsLoaded();
	},   

	fillForm: function () {      
		this.fromObject(this.objects);
		var WLANStatus = (this.objects.WIFI.wlanvap.wl0.VAPStatus == "Up")?"support.systeminformation.wifi.label.status.enabled":"support.systeminformation.wifi.label.status.disabled";
		var MACFiltering = (this.objects.WLAN.MACFiltering.Mode == "WhiteList")?"general.label.enabled":"general.label.disabled";
		Sah.translator.change($('WLAN.Status'), WLANStatus, this.objects.WLAN.VAPStatus);
		Sah.translator.change($('WLAN.MACFiltering.Mode'), MACFiltering, this.objects.WLAN.MACFiltering.Mode);
		$('WLAN.LLAddress').update(this.objects.MacAddress);
		$('WLAN.SSID').update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.objects.WLAN.SSID)));
		$('WLAN.Radio.Channel').update(this.objects.WLAN.Radio.Channel);
		$('WLAN.Radio.OperatingStandards').update("802.11"+this.objects.WLAN.Radio.OperatingStandards);
/*		
		if (parseInt(this.objects.WLAN.Radio.MaxBitRate, 10) == 0) {
			$('WLAN.Radio.MaxBitRate').update("AUTO");
		} else {
			$('WLAN.Radio.MaxBitRate').update(this.objects.WLAN.Radio.MaxBitRate+" Mb/s");
		}
*/
		if (config.BUILD_PROJECT.indexOf("lbv2.8")>=0) {
			$('WLAN.Radio.MaxBitRate').update("450 Mb/s");
		} else {
			$('WLAN.Radio.MaxBitRate').update("54 Mb/s");
		}
		
		$('WLAN.Security.ModeEnabled').update(Support.Wifi.securityModeHash[this.objects.WLAN.Security.ModeEnabled]);
		$('WLAN.encryptionoption').update(Support.Wifi.securityOption[this.objects.WLAN.Security.ModeEnabled]);
		
		if(this.objects.Stats){
		      $('WLAN.bytessent').update(this.objects.Stats.TxBytes);
		      $('WLAN.bytesreceived').update(this.objects.Stats.RxBytes);
		}
	
	}
});

Support.Wifi.securityModeHash = {
	"None":"No security" ,
	"WEP-128": "WEP-128",
	"WPA-Personal":"WPA-PSK/TKIP" ,
	"WPA2-Personal":"WPA2-PSK/AES"  ,
	"WPA-WPA2-Personal":"WPA/WPA2 Mixed" 
};

Support.Wifi.securityOption = {
	"WPA-Personal":  "TKIP",
	"WPA2-Personal"          :  "AES",
	"WPA-WPA2-Personal"      :  "TKIP+AES",
	"WEP-128"                :  "WEP-128",
	"None"                   :  "None"
}

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/voice.js */

/**
 * @namespace Holds the home entity and its associated forms
 */
var Voice = {};


/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/voice/test.js */

/**
 * Voice Test
 */

Voice.Test = Class.create(Sah.AuthenticatedForm, /** @lends Voice.Pstn# */ {
	initialize: function ($super, form) {
		$super(form);

		// Controller is applied to 2 different pages containing different buttons
		this.objects.isTestPage = false;
		if ($("bt_test")) {
			$("bt_test").observe("click", this.onTest.bind(this));
			this.objects.isTestPage = true;
		}
		if ($("bt_back")) $("bt_back").observe("click", this.onBack.bind(this));

		if ($("bt_restart")) $("bt_restart").observe("click", this.onRestart.bind(this));
		
		if (config.BUILD_PROJECT.indexOf("2.8") < 0) {
			this.adjustVMenu();
		} else {
			this.client.execute("sysbus.VoiceService.VoiceApplication:listHandsets", {}, {
				onSuccess: this.updateList.bind(this),
				onFailure: function () {
					this.logger.warn("handsets list unavailable")
				}.bind(this)
			});
		}		
		this.needs("PhoneTrunk", {
			path: "sysbus.VoiceService.VoiceApplication:listTrunks",
			method: "execute"
		});
		
		this.load();
		this.form.disable();
	},

	
	
	
	updateList: function (obj) {
		var number = 0;
		
		if (obj.result.status) {
			obj.result.status.each(function (lineCatIq) {
				if (lineCatIq.enable == "Enabled" && (lineCatIq.endpointType.toLowerCase().indexOf("cat-iq") >= 0 || lineCatIq.endpointType.toLowerCase().indexOf("undefined") >= 0 || lineCatIq.endpointType.toLowerCase().indexOf("dect gap") >= 0)) {
					number += 1;
				}
			});
		}
		
 		if (number === 0) {
			this.adjustVMenu();
		}
	},
	
	adjustVMenu: function () {
		// disable that list in 2.8 configuration
		if($("phonebook"))
			$("phonebook").remove();
		$("crumbPhoneRingTest").setAttribute("onclick", "return Sah.redirect('/phoneRingTest.html');");
	},

	objectsLoaded: function () {
		
		if ( this.objects.PhoneTrunk  ) {
			for (var i = 0; i < this.objects.PhoneTrunk.length; i++) {
				for (var j = 0; j < this.objects.PhoneTrunk[i]["trunk_lines"].length; j++) {
					if (this.objects.PhoneTrunk[i]["trunk_lines"][j].status === "Up" && this.objects.PhoneTrunk[i]["trunk_lines"][j].enable === "Enabled") {
						this.objects.Services = this.objects.PhoneTrunk[i]["trunk_lines"][j];
					}
				}
			}
		
		}		
		if(!this.objects.Services){
			this.objects.Services = {
				status : "Down",
				directoryNumber :""
			}
		}
		if ($("Services.Phone")) {
			if (this.objects.Services.status === "Up") {
				Sah.translator.change($("Services.Phone"), "general.label.available", "X Available");
				$("Services.Phone").setStyle("color:green");
				if (this.objects.Services.directoryNumber != "") {
					$("Services.PhoneNumber").update(Sah.Tools.formatCountryCode(this.objects.Services.directoryNumber));
				} else {
					Sah.translator.change($("Services.PhoneNumber"), "support.phoneringtest.label.unknownnumber", "X No number");
				}
			} else {
				Sah.translator.change($("Services.Phone"), "general.label.unavailable", "X Unavailable");
				$("Services.Phone").setStyle("color:red");
				Sah.translator.change($("Services.PhoneNumber"), "support.phoneringtest.label.nonumber", "X No number");
			}
		}
		this.form.enable();
	},

	onTest: function (event) {
		if (this.objects.isTestPage) {
			//	this.redirect("/supportPhoneRingTestRunning.html");
			$('ringTest').hide();
			$('ringTestRunning').show();
		}
		event.stop(event);
		this.doTest();
		return false;
	},
	
	doTest: function () {
		this.client.execute("sysbus.VoiceService.VoiceApplication:ring", {
		}, {
			onSuccess: this.onResult.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		})
	},

	whenNotSaved: function (obj) {
		this.onResult(obj);
	},

	onResult: function (obj) {
	// Change page only if needed
	},

	onBack: function (event) {
		event.stop(event);
		$('ringTestRunning').hide();
		$('ringTest').show();
	//this.redirect("/phoneRingTest.html");
	},

	onRestart: function (event) {
		event.stop(event);
		this.doTest();
		return false;
	}

});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/voice/fxo.js */

/**
 * Voice Fxo
 */

Voice.Fxo = Class.create(Sah.AuthenticatedForm,
/** @lends Voice.Fxo# */
{

	initialize: function ($super, form)
	{
		$super (form);

// 		this.needs("Fxo",{ path: "SI.Fxo", depth: -1 });
		this.needs("Fxo", {
			  path: "sysbus.NMC:getPSTNEnable",
			  method: "execute"
		});

		$("bt_cancel").observe("click",this.onCancel.bind(this));
		$("bt_save").observe("click",this.onSave.bind(this));
		$("Fxo.Desactivated").observe("click",this.clickDesactivatedRadio.bind(this));
		$("Fxo.Activated").observe("click",this.clickActivatedRadio.bind(this));

		this.form.disable();
		this.load();
	},
	
	objectsLoaded : function ()
	{
		this.fillForm();
		this.form.enable();
	},

	fillForm : function ()
	{
		if (this.objects.Fxo.PSTNEnable)
		{
			$("Fxo.Activated").checked = true;
			$("Fxo.Desactivated").checked = false;
		}
		else
		{
			$("Fxo.Desactivated").checked = true;
			$("Fxo.Activated").checked = false;
		}
	},

	onSave : function ()
	{
		if ($("Fxo.Activated").checked)
		{
			this.objects.PSTNEnable = true;
		}
		else
		{
			this.objects.PSTNEnable = false;
		}
		
		this.client.execute("sysbus.NMC:setPSTNEnable", {
			"PSTNEnable": this.objects.PSTNEnable
		}, {
			onSuccess: this.whenSaved.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		});
// 		this.objects.Fxo._save({
// 					onSuccess: this.whenSaved.bind(this),
// 					onFailure: this.whenNotSaved.bind(this)
// 				});
	},

	whenSaved : function ()
	{
		this.logger.info("Saved");
	},

	whenNotSaved : function ()
	{
		this.logger.warn("Not Saved");
	},

	clickActivatedRadio : function ()
	{
		$("Fxo.Desactivated").checked = false;
                $("Fxo.Activated").checked = true;
	},

	clickDesactivatedRadio : function ()
	{        
                
		$("Fxo.Activated").checked = false;
                $("Fxo.Desactivated").checked = true;
	},

	onCancel : function (event)
	{
		this.fillForm();
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/captive.js */

/**
 * @namespace Holds the Captive entity and its associated forms
 */
var Captive = {};


/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/admin.js */

/**
 * @namespace Holds the admin entity and its associated forms
 */
var Admin = {};


/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/security.js */

/**
 * @namespace Holds the wifi entity and its associated forms
 */
var Security = {};

Security.LevelDescription = {
  "Faible_description": "advconfig.firewall.description.low",
  "Moyen_description":  "advconfig.firewall.description.medium",
  "Eleve_description":  "advconfig.firewall.description.high",
  "Personal_description": "advconfig.firewall.description.customize"
  // "Disabled": "<div align=\"justify\"><h4>Disabled</h4>"
};


/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/home.js */

/**
 * @namespace Holds the home entity and its associated forms
 */
var Home = {};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/phoneBook.js */

/**
 * @namespace Holds the PhoneBook entity and its associated forms
 */
var PhoneBook = {}; 

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/files.js */

/**
 * @namespace Holds the Files entity and its associated forms
 */
var Files = {};


/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/files/browse.js */

/**
 * The Files Browse form
 *
 * When the class is intantiated, the initialize method is called. There you first
 * need to call the parent constructor using $super. Then you can set up the various
 * event handlers that you will need. Then you need to define which objects you need
 * from sahbus with the needs() method. Finally you can call the load method that
 * will load those objects.
 *
 * When all the objects needed are loaded, the method objectsLoaded() will be called.
 * By default, the object fetched are stored into the variable objects. If you need
 * to, like in this case, you can setup other variables in objects. Those will be
 * used to fillup the form with the values from sahbus and to save the form into
 * sahbus. A mapping is automatically created that maps the objects properties to
 * form elements, using the this.fromObject(this.objects) method. You can than store
 * back the form in the objects by using object._update(this.toObject) method.
 * @class
 * @augments Sah.AuthenticatedForm
 */
Files.Browse = Class.create(Sah.AuthenticatedForm, {
	_currentPath: "/",
	_currentUSB: null,
	_filePath: null,
	_uriPath: null,
	_contextual: false,
	_lastid: 0,
	_fillLists: false,
	_massStorages : [],
	_devices: {
		"usb": [],
	},
	
	browsingMode : false ,
	notificationEnabled: true,
	
	initialize: function ($super, form) {
		$super(form);
		
		this.form.hide();
		this.objects = new Object;
		$('massfiles').observe('click', this.reloadMassStorages.bind(this));
		this.request = {
			"events": [
				{"service":"Devices.Device", "event":"topology_changed"},
				{"service":"Devices.Device", "event":"wifi_device_updated"},
				{"service":"Devices.Device", "event":"eth_device_updated"},
				{"service":"Devices.Device", "event":"usb_device_updated"},
				{"service":"Devices.Device", "event":"logical_device_updated"},
				{"service":"Devices.Device", "event":"self_device_updated"},
				{"service":"Devices.Device", "event":"device_error"},
				{"service":"Devices.Device", "event":"device_error_solved"}
			]
		};
		
		this.events = [];
		this.needs("Devices", {
			path: "sysbus.Devices:get",
			method :"execute",
			methodParams: {
			"expression":{"usb":"volume && logical and .Active==true"}
			}
		});
		this.load();	

	},
	
	objectsLoaded: function () {
		Event.observe(document, "click", this.hideContextualMenu.bind(this));

		_devices = {
			"usb": []
		};
		this.objects["Devices"]["usb"].each(function(Node){
			  Node._path = "usb_" + this._devices["usb"].length;
			  Node["name"] = Node["Name"];
			  Node["deviceType"] = ["Storage"];
			  if(Node["LogicalVolumeIndex"]) {
				  Node["uri"]=Node["LogicalVolumeIndex"]
			  }
			  _devices["usb"].push(Node);
		});
		this._devices["usb"]=_devices["usb"];
		for(var i=0; i<this._devices["usb"].length;i++) {
			var list = [],
			exist = false,
			device=this._devices["usb"][i];
			
			if (device.Active) {
				for ( var i = 0; i < this._massStorages.length; i++ ) {
					if (this._massStorages[i].uri == device.uri) {
						device._path = i;
						list.push(this._massStorages[i]);
						exist = true;
						//break;
					} else {
						list.push(this._massStorages[i]);
					}
				}
				if (!exist) {
					list.push(device);
				}
			}else {
				for ( var i = 0; i < this._massStorages.length; i++ ) {
					if (this._massStorages[i].uri == device.uri  ) {
						//break;
					} else {						
						list.push(this._massStorages[i]);
					}
				}
			}
			
			this._massStorages = list;
		}	

		this._currentPath = '/';
		this.massStorageTemplate = Sah.Templates['massStorageDevice'];
		this.massStorageTemplate.callback = this.appendMassStorageDevice.bind(this);
		this.fileTemplate = Sah.Templates['fileTempate'];
		this.fileTemplate.callback = this.appendfiles.bind(this);
		this.dirTemplate = Sah.Templates['dirTemplate'];
		this.dirTemplate.callback = this.appendDirs.bind(this);
		this.fillStorageList();

	},
	
	tryEnableNotifier: function () {
		if (!this.notificationEnabled) {
			this.client.execute("sysbus.sah.hgw.models.DeviceManager:enableNotifications", {},{
				onSuccess : function () {},
				onFailure: function () {}
			});
		} else if (this.pNotifier) {
			this.pNotifier.stop();
			this.pNotifier = null;
		}
	},
	
	initLoader: function () {
		this.browsingMode = false;
		this.observe();
		this.load();
		
	},
	
	observe: function () {
		this.rq = new Ajax.Request("/sysbus/eventmanager:get_events", {
			method: "post",
			postBody: Object.toJSON({
				"parameters": this.request
			}),
			contentType:"application/x-sah-ws-4-call+json",
			requestHeaders: {
				"X-Context":Sah.Bus.contextID,
				"X-Sah-Request-Type": "idle"
			},
			onSuccess: this.eventReceived.bind(this),
			onFailure: this.failed.bind(this)
		});
		
		document.fire("sah:home:service:refreshStatus");
	},
	
	failed: function (response) {
		var msg = "error monitoring events: " + response.status + " " + response.statusText;

		if (response.responseJSON) {
			msg += " " + response.responseText;
		}
		
		Sah.logger.error(msg);
		
		if (!this.pe) {
			this.pe = new PeriodicalExecuter(this.observe.bind(this), 15);
		}
	},
	
	eventReceived: function (response) {
		var o;
		
		if (o = response.responseText) {
		        if ((o.indexOf("null")>=0)||(o.indexOf("errors")>=0)) {
			    return;
		        }
			else {
			    response = JSON.parse(o);
                this.events = this.events.concat(response.status.events);
                this.request.channelid = response.status.channelid;
                this.processEvents();
			}
		} else {
			    return;
		}
		
		this.observe();;
	},
	
	processEvents: function () {
		var e = null,
		device = null,
		changed = false,
		undef;
		this.needs("Devices", {
			path: "sysbus.Devices.Device.HGW:topology",
			method :"execute",
			methodParams: {
				"expression":"",
				"traverse":"down",
				"flags": "no recurse not matching"
			}
		});
		this.loaded = false;
		this.load();
	
	},
	
	fillStorageList: function () {		
		if (this._massStorages.length !== 0){
		      this.form.show();
		      this.massStorageTemplate.apply(this._massStorages);
		}
	},
	
	fillStorage: function () {},
	
	updateStorage: function (device) {		
		var list = [],
		exist = false;
		
		if (device.enable && device.status == "Online") {
			for ( var i = 0; i < this._massStorages.length; i++ ) {
				if (this._massStorages[i].uri == device.uri) {
					device._path = i;
					list.push(this._massStorages[i]);
					exist = true;
					//break;
				} else {
					list.push(this._massStorages[i]);
				}
			}
			if (!exist) {
				list.push(device);
			}
		}else {
			for ( var i = 0; i < this._massStorages.length; i++ ) {
				if (this._massStorages[i].uri == device.uri  ) {
					//break;
				} else {						
					list.push(this._massStorages[i]);
				}
			}
		}
		
		this._massStorages = list;
	},
	
	removeStorage: function (device) {		
		var list = [];

		for ( var i = 0; i < this._massStorages.length; i++ ) {
			if (this._massStorages[i].uri == device.uri) {
				continue;
			} else {
				list.push(this._massStorages[i]);
			}
		}
		
			
		this._massStorages = list;
	},
	
	appendStorage: function (device) {	    
		var exist = false;

		for ( var i = 0; i < this._massStorages.length; i++ ) {
			if (this._massStorages[i].uri == device.uri) {
				exist = true;
				break;
			}
		}
		
		if ( !exist ) {
			device._path = i;
			this._massStorages.push(device);
		}
	},
	
	appendMassStorageDevice: function (element, device) {
		element.id = device._path;
		element.down("h5").update(this.truncateDeviceName(device.name));
		element.addClassName("div-elem");
		$('files-container').insert(element);
		this.massStorageTemplate.showForm(element);
		element.observe('click', this.browse.bind(this, element.sahObject));
	},
	
	reloadMassStorages: function () {
		for (var i = 0; i<this._lastid; i++) {
			$('massfiles_'+ i).stopObserving('click');
			$("h4_" + i).remove();
			$("massfiles_" + i).remove();
		}
		this._lastid = 0;
		    
		$$(".div-elem").each(function (elem) {elem.remove();});
		this.loaded = false;
		this.browsingMode = false;
		this.initLoader();
	},
	
	CheckStorageEjected: function (device) {
	      if (this._currentUSB === device.uri  && (!device.enable || device.status !== "Online")  ) {
		  this.browsingMode = false;
		  this.reloadMassStorages();
	      } 
	}, 
	
	browse: function (element, event) {
		this.browsingMode = true;
		//this.rq.transport.abort();
		
		this.markAsLoading();
		
		for (var i = 0; i<this._lastid; i++) {
			$('massfiles_'+ i).stopObserving('click');
			$("h4_" + i).remove();
			$("massfiles_" + i).remove();
		}
		this._lastid = 0;
		this._currentPath = '/';
		
		event.stop();
		this._currentUSB = element.uri;
		
		//this.markAsLoading();
		this.client.execute("sysbus.StorageService:readDirectory",{
			"uri": element.uri,
			"path": "/"
		}, {
			onSuccess: this.fillContents.bind(this, element), 
			onFailure: function () {}
		});
	},
	
	browseDir: function (dir, event) {
		if (this._contextual) {
			this.hideContextualMenu();
		}
		
		event.stop();
		var back = this._currentPath;
		this._currentPath += dir.name + "/";
		
		if (this._currentPath === '/../') {
			this.reloadMassStorages();
			return;
		}
		
		this.markAsLoading();
		this.client.execute("sysbus.StorageService:readDirectory",{
			"uri": this._currentUSB,
			"path": this._currentPath
		},{
			onSuccess: this.fillContents.bind(this, dir), 
			onFailure: function () {
				this._currentPath = back;
			}.bind(this)
		})
	},
	
	browseCrumb: function (elem, evnt) {
		for ( var i = elem.index; i < this._lastid; i++ ) {
			$('massfiles_'+ i).stopObserving('click');
			$("h4_" + i).remove();
			$("massfiles_" + i).remove();
		}
		
		this._lastid = elem.index;
		this._currentPath = this._currentPath.split('/').slice(0, this._lastid).join('/') + "/";
		this.browseDir(elem, evnt);
	},
	
	fillContents: function (obj, res) {
		this.markAsLoaded();
		
		if (this._currentPath.split('/')[this._currentPath.split('/').length - 2] === '..') {
		    this._currentPath = this._currentPath.split('/').slice(0, this._currentPath.split('/').length - 3).join("/")+"/";
		    this._lastid--;
		    $('massfiles_'+ this._lastid).stopObserving('click');
		    $("h4_" + this._lastid).remove();
		    $("massfiles_" + this._lastid).remove();
		} else if (res.result.status !== null) {
			$("crumb").insert('<h4 id="h4_' + this._lastid + '">></h4>' +
				'<a href="#" onclick="return false" id="massfiles_'+ this._lastid +'" class="crumb"><h5>' + obj.name + '</h5></a>');
			
			if (this._lastid == 0) {
				$('massfiles_0').observe('click', this.browse.bind(this, obj));
			} else {
				obj.index = this._lastid;
				$('massfiles_'+ this._lastid).observe('click', this.browseCrumb.bind(this, obj));
			}
			
			this._lastid++;
		} else if (res.result.status == null) {
			this._currentPath = this._currentPath.split('/').slice(0, this._currentPath.split('/').length - 2).join("/")+"/";
			$('massfiles_'+ this._lastid).stopObserving('click');
			$("h4_" + this._lastid).remove();
			$("massfiles_" + this._lastid).remove();
		}
		
		if (res.result.status != null) {
			var files = [];
			var dirs = [];
			id = 0;
			
			res.result.status.each(function (elem) {
				if (elem.type === "directory" && elem.name != ".") {
					elem._path = "dir_" + id;
					dirs.push(elem);
					id++;
				} else if (elem.type === "file") {
					elem._path = "file_" + id;
					files.push(elem);
					id++;
				}
			});
			
			$$(".div-elem").each(function (elem) {elem.remove();});
			this.dirTemplate.apply(dirs);
			this.fileTemplate.apply(files);
		}
	},
	
	
	fillContentsAfterRename: function (obj, res) {
		this.markAsLoaded();
		
		if (res.result.status != null) {
			var files = [];
			var dirs = [];
			id = 0;
			
			res.result.status.each(function (elem) {
				if (elem.type === "directory" && elem.name != ".") {
					elem._path = "dir_" + id;
					dirs.push(elem);
					id++;
				} else if (elem.type === "file") {
					elem._path = "file_" + id;
					files.push(elem);
					id++;
				}
			});
			
			$$(".div-elem").each(function (elem) {elem.remove();});
			this.dirTemplate.apply(dirs);
			this.fileTemplate.apply(files);
		}
	},
	
	
	appendDirs: function (element, device) {
		element.id = device._path;
		element.down("h5").update(this.truncateDeviceName(device.name));
		element.addClassName("div-elem");
		
		if (device.name == "..") {
			element.down("a").addClassName("back-dir");
			element.down("h5").update("Back");
			$('files-container').insert(element);
			this.dirTemplate.showForm(element);
			element.observe('click', this.browseDir.bind(this, element.sahObject));
		} else {
			$('files-container').insert(element);
			this.dirTemplate.showForm(element);
			element.observe('click', this.modify.bind(this, element.sahObject));
		}
	},
	
	appendfiles: function (element, device) {
		element.id = device._path;
		element.down("h5").update(this.truncateDeviceName(device.name));
		element.addClassName("div-elem");
		$('files-container').insert(element);
		this.fileTemplate.showForm(element);
 		element.observe('click', this.modify.bind(this, element.sahObject));
	},
	
	truncateDeviceName: function (name) {
		if (name.length > 30) {
			return name.substring(0, 27) + "...";
		} else {
			return name;
		}
	},
	
	modify: function (device, event) {
		event.stop();
		this.displayContextualMenu(event);
		
		if ((this._filePath !== null) && (device.type === 'directory')) {
		 
			$$('#paste .auth-required')[0].show();
			$$('#paste .auth-required')[0].observe('click', this.paste.bind(this, device));
		} else {
			$$('#paste .auth-required')[0].hide();
		}
		
		if (device.type === 'file') {	
			$('open').update('<a href="#" onclick="return false"><span class="translation Translations.filesbrowser.label.download"></span></a>');
			device.href= '/storage/' +  this._currentUSB + this._currentPath + device.name;
			$$('#open a')[0].observe('click', this.download.bind(this, device));
		} else {
			$('open').update("");
			$('open').innerHTML='<span class="translation Translations.filesbrowser.label.open"></span>';
			$('open').observe('click', this.browseDir.bind(this, device));
		}
		
		Sah.translator.refresh(); 
		
		$('copy').observe('click', this.copy.bind(this, device));
		$('rename').observe('click', this.rename.bind(this, device));
		

		return true;
	},
	
	copy: function (elem, event) {
		this._filePath = this._currentPath + elem.name;
		this._uriPath = this._currentUSB;
		
		//activate paste button
		$('paste-div').show();
		$('bt_paste').observe('click', this.pasteInCurrentDirectory.bind(this));		
	},
	
	pasteInCurrentDirectory: function (evt) {
		var destpath = this._currentPath;
		
		this.markAsLoading();
		this.client.execute("sysbus.StorageService:copyFile", {
			"srcuri": this._uriPath,
			"srcpath": this._filePath,
			"desturi": this._currentUSB,
			"destpath": destpath
		}, {
			onSuccess: this.pastedInCurrentDirectory.bind(this)
		});
	},
	
	pastedInCurrentDirectory: function (obj) {
		this.markAsLoaded();
		this._filePath = null;
		this._uriPath = null;
		
		$('bt_paste').stopObserving('click');
		$('paste-div').hide();
		
		this.client.execute("sysbus.StorageService:readDirectory",{
			"uri": this._currentUSB,
			"path": this._currentPath
		},{
			onSuccess: this.fillContentsAfterPaste.bind(this), 
			onFailure: function () {
				this._currentPath = back;
			}.bind(this)
		})
	},
	
	fillContentsAfterPaste: function (res) {
		this.markAsLoaded();
		
		if (res.result.status != null) {
			var files = [];
			var dirs = [];
			id = 0;
			
			res.result.status.each(function (elem) {
				if (elem.type === "directory" && elem.name != ".") {
					elem._path = "dir_" + id;
					dirs.push(elem);
					id++;
				} else if (elem.type === "file") {
					elem._path = "file_" + id;
					files.push(elem);
					id++;
				}
			});
			
			$$(".div-elem").each(function (elem) {elem.remove();});
			this.dirTemplate.apply(dirs);
			this.fileTemplate.apply(files);
		}
	},
	
	paste: function (device, event) {
		var destpath = this._currentPath;
		
		if (device.type == "directory") {
			destpath = this._currentPath + device.name + "/";
		}
		
		this.markAsLoading();
		this.client.execute("sysbus.StorageService:copyFile", {
			"srcuri": this._uriPath,
			"srcpath": this._filePath,
			"desturi": this._currentUSB,
			"destpath": destpath
		}, {
			onSuccess: this.pasted.bind(this)
		});
	},
	
	pasted: function (obj) {
		this.markAsLoaded();
		this._filePath = null;
		this._uriPath = null;
		
		$('bt_paste').stopObserving('click');
		$('paste-div').hide();
	},
	
	rename: function (elem, event) {
		event.stop();
		$('nameInput').show();
		$('newName').value = elem.name;
		$('bt_cancel').observe('click', this.renamed.bind(this, elem));
		$('bt_save').observe('click', this.move.bind(this, elem));		
		if (this._contextual) {
			this.hideContextualMenu();
		}
	},
	
	move: function (elem, evt) {
		evt.stop();
		if ( $('newName').value != '' ) {
			this.markAsLoading();
			
			this.client.execute("sysbus.StorageService:moveFile", {
				"srcuri": this._currentUSB,
				"srcpath": this._currentPath + elem.name,
				"desturi": this._currentUSB,
				"destpath": this._currentPath + $('newName').value
			}, {
				onSuccess: this.renamed.bind(this, elem)
			});
		}
	},
	
	renamed: function (elem, evt) {
		this.markAsLoaded();
		$('nameInput').hide();
		$('bt_cancel').stopObserving('click');
		$('bt_save').stopObserving('click');
		

		this.client.execute("sysbus.StorageService:readDirectory",{
			"uri": this._currentUSB,
			"path": this._currentPath
		},{
			onSuccess: this.fillContentsAfterRename.bind(this, elem), 
			onFailure: function () {
				this._currentPath = back;
			}.bind(this)
		})
			
	},
	
	download: function (device, event) {
		window.open(device.href, '_blank');
		return false;
	},
	
	displayContextualMenu: function (evnt) {
		this._contextual = true;
		$$('#contextualMenu')[0].setStyle({
			display: 'block',
			top: evnt.pageY + 'px',
			left: evnt.pageX + 'px'
		});
		evnt.stop();
	},
	
	hideContextualMenu: function (evnt) {
		this._contextual = false;
		$('open').stopObserving('click');
		$('copy').stopObserving('click');
		$('rename').stopObserving('click');
		$$('#paste .auth-required')[0].stopObserving('click');
		
		$$('#contextualMenu')[0].setStyle({
				display: 'none',
				top: 'auto',
				left: 'auto'
		});
		
		if (evnt) {
			evnt.stop();
		}
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/orangeMapper.js */

/**
 * @namespace Holds the wan entity and its associated forms
 */
var OrangeMapper = {};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/mapper/orangeMapper.js */

    /* TODO: documentation */
    OrangeMapper.OrangeMapper = Class.create(Sah.Form, {
    	progressBar: null,
    	topology: null,
    	currentLocalTime : null,
    	map: new Object(),
    	index: 0,
    	details: '',

    	initialize: function ($super, form) {
    		$super(form);

    		this.objects = new Object;
		$("check_agree").observe("click", this.setCustomerAuthorization.bind(this,this.checked));
    		$("bt_launch").observe("click", this.scan.bind(this, "scan"));
		$("bt_refresh").observe("click", this.scan.bind(this, "scan"));
		
		this.needs("topologyDiagnostics",{
			path: "sysbus.TopologyDiagnostics:get",
			method:"execute",
			methodParams:{}
		});

		this.needs("DHCPServer",{
			path: "sysbus.NMC:getLANIP",
			method:"execute",
			methodParams:{}
		});
		
		this.needs("WanStatus", {
			path: "sysbus.NMC:getWANStatus",
			method: "execute"
		});
		
		this.load();
		this.liveplug = Array();
		this.bridgewifi = Array();
    	},
	
	objectsLoaded: function(){
		 if(this.objects.topologyDiagnostics.CustomerAuthorization == true){
			
			$("check_agree").checked = false;

		 }
		 else{
			 $("check_agree").checked = true;
		 }
	},

	setCustomerAuthorization: function(isChecked){
			if ($("check_agree").checked){
				this.client.execute("sysbus.TopologyDiagnostics:setCustomerAuthorization", {"allowed":true}, {
    				onSuccess: function(){},
    				onFailure: function(){}

    			});
			} else {

				this.client.execute("sysbus.TopologyDiagnostics:setCustomerAuthorization", {"allowed":false}, {
    				onSuccess: function(){},
    				onFailure: function(){}

    			});
			} 
	},

	checkAutomaticUpload: function(){
		this.client.execute("sysbus.TopologyDiagnostics:isAutomaticUploadEnabled",{}, {
			onSuccess: this.showSendForm.bind(this),
			onFailure: this.showSendForm.bind(this)
		});
	},
	
	getTime: function (){
		this.client.execute("sysbus.Time:getTime",{}, {
			onSuccess: this.getCurrentTime.bind(this),
			onFailure: this.failed.bind(this)
		});
	},
	
	getCurrentTime: function(obj){
		
		if (obj.result.data){
	        this.currentLocalTime=obj.result.data.time;
		}
	},
	
	failed: function (){
	},
	
	showSendForm: function(obj){
		if (obj.result && obj.result.status == true)
			$("send_inputs").hide();
		else{
			$("check_agree").checked = false;
			$("send_inputs").show();	
		}
	},

    	scan: function (src, evt) {	
//     		evt.stop();
		this.currentLocalTime = null;
		this.getTime();
		this.topology = null;
		

    		$("topologie_title").hide();
    		$("homestep").hide();

    		$("mapper_step0").hide();
    		$("mapperresult.search.error.connectivity").hide();
		$("mapperresult.search.error.host").hide();
    		$("resend-ctr").hide();
    		$("mapper_step1").show();
		$("searchingMessage").show();
    		// Hide errors
		$("mapper.search.error").hide();
		$("relaunch_ctr").hide();
    		if (src === "rescan") {
    			$("mapperresult").hide();
    			$("seeagain").hide();
    			$("mapper_title").show();
    		}

    		// Progress bar
    		if (this.progressBar !== null && this.progressBar !== undefined) {
			this.progressBar.reset();
			this.progressBar.pbWrap.style.display="none";
    			this.progressBar = null;
    		}
    		
    		this.checkAutomaticUpload();
    
    		// Build Topology
    		if (src === "rescan") {
    			this.progressBar = new Sah.Widget.ProgressBar("scran_progress", {});
    			this.progressBar.animate(73);
			$("bt_relaunch").disabled = true;
    			this.client.execute("sysbus.TopologyDiagnostics:buildTopology", {
    				"discoveryMode": "Relative"
    			}, {
    				onSuccess: this.topologyLoaded.bind(this),
    				onFailure: this.loadingFailure.bind(this)
    			});
    		} else {
    			this.progressBar = new Sah.Widget.ProgressBar("scran_progress", {});
    			this.progressBar.animate(146);
			$("bt_relaunch").disabled = true;
    			this.client.execute("sysbus.TopologyDiagnostics:buildTopology", {
    				"discoveryMode": "Absolute"
    			}, {
    				onSuccess: this.topologyLoaded.bind(this),
    				onFailure: this.loadingFailure.bind(this)
    			});
    		}
		var undef;
    		if (src === "rescan") {
    			window.setTimeout(function () {
    				this.redisplay()
    			}.bind(this), 7500);
    		} else {
			
			window.setTimeout(function () {
				if (this.redirect !== undef && this.redirect === true){
					this.display();
				}else{
					$("bt_relaunch").disabled = false;
				}
			}.bind(this), 15000);
    		}
    	},

    	redisplay: function () {
    		$("send_inputs").hide();
		$("bt_send").disabled = true;

    		if (this.progressBar !== null && this.progressBar !== undefined) {
    			this.progressBar = null;
    		}

    		$("scran_progress").update("");
    		$("mapper_step1").hide();
    		$("mapper_title").hide();
    		$("topologie_title").show();
    		$("homestep").show();

    		if (this.topology != null) {			
    			this.constructTopology();
    		}
    	},

    	display: function (src) {
    		if (this.progressBar !== null && this.progressBar !== undefined) {
    			this.progressBar = null;
    		}

    		$("scran_progress").update("");
    		$("mapper_step1").hide();
    		$("mapper_title").hide();
    		$("topologie_title").show();
    		$("homestep").show();

    		if (this.topology != null) {
    			this.constructTopology();
    		}
    		
    		$("bt_send").disabled = false;
    		$("bt_send").observe("click", this.send.bind(this));
    		$("bt_resend").observe("click", this.send.bind(this));
    	},

    	send: function (evt) {
	
    		evt.stop();
    		$("bt_seeagain").observe("click", this.scan.bind(this, "rescan"));
    		if ( (this.objects.WanStatus.LinkState.toLowerCase().indexOf("up")>=0) && ((this.objects.WanStatus.ConnectionState.toLowerCase().indexOf("connected")>=0)  || (this.objects.WanStatus.ConnectionState.toLowerCase().indexOf("bound")>=0))  ) {
					if ($("check_agree").checked == true) {		  
						this.client.execute("sysbus.TopologyDiagnostics:uploadTopology", {}, {
							onSuccess: this.sendSuccess.bind(this),
							onFailure: this.sendFailure.bind(this)
						});
				

						$("homestep").hide();
						$("seeagain").show();
						$("mapperresult").show();			
					} else {		  
						ctl.popup.Open('<span id="ct-popup-contents"></span>', 'identification', '400', '80');
						Sah.translator.change($("ct-popup-contents"), "mapperresult.label.agreementwarning", "");
						Sah.translator.refresh();		
					} 
			} else {
					this.sendFailure("");
					}
    	},

    	sendSuccess: function (obj) {
    		if (obj.result.status != true) {
    			$("mapperresult.search.error.connectivity").show();
    			$("resend-ctr").show();
    		}
    	},

    	sendFailure: function (obj) {
			$("mapperresult").setStyle({display: 'block'});
			$("mapperresult.search.error.connectivity").setStyle({display: 'block'});
			$("bt_send").setStyle({display: 'none'});
			$("resend-ctr").show();		
    	},
	
	parseLastUpload: function (t)
	{   var addHours; 
		addHours = this.currentLocalTime.split("+")[1].substr(0,2); 
		var time = ('' + t).replace(/-/g,"/").replace(/[TZ]/g," ");
		var str = new Date(time);
		hoursAfterAdd=parseInt(str.getHours(), 10)+parseInt(addHours, 10);
		var lastUpload = {
			hour:((hoursAfterAdd+"").length == 1)?"0"+hoursAfterAdd:hoursAfterAdd,
			minute:((str.getMinutes()+"").length == 1)?"0"+str.getMinutes():str.getMinutes()
            	};    	
		var timeStr = lastUpload.hour+"h"+lastUpload.minute;
		
		return timeStr;   
	},	
	
	refreshTimeSuccess: function(transport){
		
		/*var response = transport.responseText.parseJSON();
		$A(response.parameters).each(function(elt){
			if( elt.name === "LastUpdate" ){
				$("refreshtime").update(this.parseLastUpload(elt.value));

			}
		},this);*/
		if (transport.result.status)
			$("refreshtime").update(this.parseLastUpload(transport.result.status.LastUpdate));
	},
	
	setRefreshTime: function(){
		// No need to ajax request here
		/*new Ajax.Request("/sysbus/TopologyDiagnostics:get", {
			
			onSuccess: this.refreshTimeSuccess.bind(this),
			onFailure: function(){
				$("refreshtime").update(this.parseLastUpload("8h45"));
			}
		}); */

    			this.client.execute("sysbus.TopologyDiagnostics:get", {
    				
    			}, {
    			onSuccess: this.refreshTimeSuccess.bind(this),
			onFailure: function(){
				$("refreshtime").update(this.parseLastUpload("8h45"));
			}
    			});
	},


    	topologyLoaded: function (obj) {
		this.setRefreshTime();
		this.redirect = true;
    		if (obj.result && obj.result.status) {
    			this.topology = obj.result.status;

    			this.map["ethernet"] = Array();
    			this.map["wifi"] = Array();
    			this.map["usb"] = Array();
    			this.map["unknown"] = Array();
			this.map["liveplug"] = {};
			this.map["wifi_bridge"] = {};
    			//this.topology = OrangeMapper.unitTest3;
    			this.orderTopology(this.topology);
    		} else {
    			this.topology = null;
    		}
    	},

    	/*
        Ethernet
        802.11-2.4GHz
        802.11-5GHz
        HomePNA (not currently recognized)
        Other
        MoCA (not currently recognized)
        USB (only behind LiveBox)
        FXS (only behind LiveBox)
        Unknown (default value)
    */
    	orderTopology: function (topology) {
			if (topology) {
			   var newTopology;
    	    if (topology.Children) {
    	        newTopology=topology;
			}
    	    else {newTopology=topology[0];
    	    }
        
    		if (newTopology.Children) {
    			newTopology.Children.each(function (device) {
					if ((device.DiscoverySource.indexOf("self")!=0) && (device.DiscoverySource.indexOf("upnpDev")!=0)) {
						
						if (device.Tags.indexOf("eth") >= 0){
							
							if(device.Tags.indexOf("stb") >= 0 ){
								device.DeviceType="stb";
								console.warn('tags stb '+device.Name);
						     	}
                                                        if(device.Tags.indexOf("wifi_bridge") >= 0){ 
								device.DeviceType="Liveplug";
                                                                this.liveplug.push(device);
								console.warn('tags wifi_bridge '+device.Name);
						     	}
							if(device.Tags.indexOf("homeplug") >= 0){
								device.DeviceType="Liveplug";
								console.warn('tags homeplug '+device.Name);
								
						     	}
						     	// devices behind liveplug
							if(device.Tags.indexOf("homeplug") < 0/* && this.liveplug.length>0 */){
							 console.warn('homeplug < 0 '+device.Name);
								if(this.liveplug.length>0){
								       console.warn('tags not homplage 2'+device.Name);
								       console.warn('tags not homplage 2'+' '+device.Key);
									this.map["liveplug"][device.Key]=this.liveplug;	

								}
						   		this.map["ethernet"].push(device);
								 console.warn('tags eth1 '+device.Name);
								//this.liveplug=Array();
							}else{
							        console.warn('else '+device.Name);
								this.liveplug.push(device);
							}
						   }

						   // les liveplug HD ne doivent pas apparaitre dans la partie wifi s'il ya des devices deriere
						 /* if (device.Tags.indexOf("homeplug_av") >= 0 && device.Active == true){
						    this.map["wifi"].push(device);
						    console.warn(device.Name+''+device.Active);
						     console.warn('kkkk');
						    }*/
	
						
						   else if (device.Tags.indexOf("wifi") >= 0 /*&& device.Active == true && this.liveplug.length>0*/)
						   {
						      console.warn('Tags wifi fix dose '+ device.Name);
						     this.map["wifi"].push(device);
						    }
						    else if (device.Tags.indexOf("usb") >= 0 &&  (device.Tags.indexOf("logical") >= 0 || device.Tags.indexOf("printer") >= 0))
						                      this.map["usb"].push(device);
						               
						}
					if (device.Children)
				    {this.orderTopology(device); }
    			}, this);
    		   }
    		}
    	},

    	loadingFailure: function (obj) {
		this.redirect = false;
    		this.topology = null;
		$('searchingMessage').hide();		
		$('mapper.search.error').show();
		$('relaunch_ctr').show();
		this.progressBar.reset();
		this.progressBar.pbWrap.style.display="none";
		$("bt_relaunch").observe("click", this.scan.bind(this));
    	},
	
	getDashboardIcon: function(){
		return appUrl + "/images/" + appConfig + "/devices/Livebox3.png";	  
	},

    	constructTopology: function () {
		this.index=0;
		$("mapper_result_map")
    			.update("");
		$("panel-ctr")
    			.update("");	
			
    		var map = '<ul class="tree">' + '     <li>' + this.createItemNode({
    			"index": this.index++,
    			"title": '<span class="translation Translations.mapperresult.item.livebox"></span>',
    			"icon": '<img width="60" height="47" alt="" src="' + this.getDashboardIcon() + '"/>'
    		}) + '        <ul id="types">' + this.createNodeType("ethernet", '') + this.createNodeType("wifi", '') + this.createNodeType("usb", 'class="last"') + '        </ul>' + '      </li>' + '</ul>';

    		$("mapper_result_map")
    			.update(map);
    		Sah.translator.refresh();
    		this.listen();
    	},

    	listen: function () {
    		liveboxTemplate = {
    			"top": 5,
    			"title": '<span class="translation Translations.mapperresult.item.livebox"></span>',
    			"cnx-status": '<div id="device-panel-content-status">' + '<img alt="status OK" class="png" src="' + this.getSrcIcon('/mapper/status-ok.png') + '"/>' + '<div  style="position:absolute; top:5px; left:30px;">' + '  <span class="translation Translations.mapperresult.label.status.ok"></span>' + '</div>' + '</div>',
    			"ip": this.objects.DHCPServer.Address,
    			"mac": this.topology.Address
    		};
    		$("item_0").observe("click", this.displayLiveboxPanel.bind(this, liveboxTemplate));
    		
    		
    		var index = 0;
    		var livePlugChildren = [];
    		if(this.map["liveplug"][0] && this.map["liveplug"][0].Children) 
					livePlugChildren=this.map["liveplug"][0].Children;
    		livePlugChildren.each(function (device) {
    			index++;
    			var undef;
    			var status = "Status KO";
			var statusMsg = "Translations.mapperresult.label.status.ko";
    			var imgStatus = '/mapper/status-ko.png';

    			if (device.Active && device.Active !== undef && device.Active == true) {
    				status = "Status OK";
    				imgStatus = '/mapper/status-ok.png';
				statusMsg = "Translations.mapperresult.label.status.ok";
    			}
    			
    			var title = "";
			
			if (device.Name && device.Name != ""){
				title = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name));
			}else{
				if(device.Manufacturer && device.Manufacturer != ""){
					title = device.Manufacturer;
				}else if(device.manufacturer && device.manufacturer != ""){
					title = device.manufacturer;
				}
			}
			    var deviceType ="";
			    if(device.DeviceType) {
				   deviceType=device.DeviceType;
				} else if (device.DeviceTypes[0]) {
					       deviceType=device.DeviceTypes[0].Type;
					    }
    			var deviceTemplate = {
    				"top": 0,
				    "deviceType": deviceType, 
    				"title": title,
    				"cnx-status": '<div id="device-panel-content-status">' + '<img alt="' + status + '" class="png" src="' + this.getSrcIcon(imgStatus) + '"/>' + '<div  style="position:absolute; top:5px; left:30px;">' + '  <span class="translation '+statusMsg+'"></span>' + '</div>' + '</div>',
    				"ip": (device.IPAddress ? device.IPAddress : ""),
    				"mac": (device.PhysAddress ? device.PhysAddress : device.Address)
    			};
			$("liveplug_" + index).observe("click", this.displayDevicePanel.bind(this, deviceTemplate));
			
    		}, this);

    		var index = 0;
    		this.map["ethernet"].each(function (device) {
    			index++;
    			var undef;
    			var status = "Status KO";
			var statusMsg = "Translations.mapperresult.label.status.ko";
    			var imgStatus = '/mapper/status-ko.png';

    			if (device.Active && device.Active !== undef && device.Active == true) {
    				status = "Status OK";
    				imgStatus = '/mapper/status-ok.png';
				statusMsg = "Translations.mapperresult.label.status.ok";
    			}
    			
    			var title = "";
			
			if (device.Name && device.Name != ""){
				title = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name));
			}else{
				if(device.Manufacturer && device.Manufacturer != ""){
					title = device.Manufacturer;
				}else if(device.manufacturer && device.manufacturer != ""){
					title = device.manufacturer;
				}
			}
			    var deviceType ="";
			    if(device.DeviceType) {
				   deviceType=device.DeviceType;
				} else if (device.DeviceTypes[0]) {
					       deviceType=device.DeviceTypes[0].Type;
					    }
    			var deviceTemplate = {
    				"top": 0,
				    "deviceType": deviceType, 
    				"title": title,
    				"cnx-status": '<div id="device-panel-content-status">' + '<img alt="' + status + '" class="png" src="' + this.getSrcIcon(imgStatus) + '"/>' + '<div  style="position:absolute; top:5px; left:30px;">' + '  <span class="translation '+statusMsg+'"></span>' + '</div>' + '</div>',
    				"ip": (device.IPAddress ? device.IPAddress : ""),
    				"mac": (device.PhysAddress ? device.PhysAddress : device.Address)
    			};
			$("ethernet_" + index).observe("click", this.displayDevicePanel.bind(this, deviceTemplate, device));

			
    		}, this);
		
		var index = 0;
		this.map["usb"].each(function (device) {
    			index++;
    			var undef;
    			var status = "Status OK";
			var statusMsg = "Translations.mapperresult.label.status.ok";
    			var imgStatus = '/mapper/status-ok.png';

    			var deviceTemplate = {
    				"top": 0,
				"deviceType":"usb",
    				"title": Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)),
    				"cnx-status": '<div id="device-panel-content-status">' + '<img alt="' + status + '" class="png" src="' + this.getSrcIcon(imgStatus) + '"/>' + '<div  style="position:absolute; top:5px; left:30px;">' + '  <span class="translation '+statusMsg+'"></span>' + '</div>' + '</div>',
				"DeviceID": device.SerialNumber,
    				"ip": "",
    				"mac": ""
    			};

    			$("usb_" + index).observe("click", this.displayDevicePanel.bind(this, deviceTemplate, device));
    		}, this);

    		var index = 0;
    		this.map["wifi"].each(function (device) {
    			index++;
    			var undef;
    			var status = "Status KO";
			var statusMsg = "Translations.mapperresult.label.status.ko";
    			var imgStatus = '/mapper/status-ko.png';

    			if ((device.Active !== undef) && (device.Active == true)) {
    				status = "Status OK";
    				imgStatus = '/mapper/status-ok.png';
				statusMsg = "Translations.mapperresult.label.status.ok";
    			}
    			var deviceTemplate = {
    				"top": 0,
				"deviceType":"wifi",
    				"title": Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)),
    				"cnx-status": '<div id="device-panel-content-status">' + '<img alt="' + status + '" class="png" src="' + this.getSrcIcon(imgStatus) + '"/>' + '<div  style="position:absolute; top:5px; left:30px;">' + '  <span class="translation '+statusMsg+'"></span>' + '</div>' + '</div>',
    				"ip": device.IPAddress,
    				"mac": device.PhysAddress
    			};

    			$("wifi_" + index).observe("click", this.displayDevicePanel.bind(this, deviceTemplate, device));
    		}, this);

    		// unknown
    	},

    	// Type: ethernet, wifi, usb, unknown
    	createNodeType: function (type, last) {	  
		var height = "50px", width = "43px";
		
		if (type === "ethernet"){
			height = "40px";
			width = "50px";
		} else if (type === "wifi"){
			height = "43px";
			width = "43px";
		} else if (type === "usb"){
			height = "29px";
			width = "33px";
		} else if (type === "unknown"){
			height = "26px";
			width = "28px";
		} 	
		  
    		var nodeTypeTemplate = new Template('<li ' + last + '>' + this.createConnectionNode({
    			"index": this.index++,
    			"title": '<span class="translation #{label}"></span>',
    			"icon": '<img width= '+width+' height='+height+' alt="" src="' + appUrl + "/images/" + appConfig + '#{icon}"/>'
    		}) + this.createItems(type) + '</li>');

    		return nodeTypeTemplate.evaluate(OrangeMapper.Types[type]);
    	},
    	
    	createLivePlugNode: function (device,last) {	  
		var height = "40px", width = "45px";

    		var nodeTypeTemplate = new Template('<li ' + last + '>'+ this.createConnectionNode({
    			"index": this.index++,
    			"title": '<span class="translation #{label}"></span>',
    			"icon": '<img width= '+width+' height='+height+' alt="" src="' + appUrl + "/images/" + appConfig + '#{icon}"/>'
    		}) + this.createItemsForLivePlug(device) + '</li>');

    		return nodeTypeTemplate.evaluate(OrangeMapper.Types["liveplug"]);
    	},

    	createItems: function (type) {
    		if (this.map[type].length == 0) {
    			return '<ul><li class="last"><span class="translation Translations.general.label.nodevices"></span></li></ul>';
    		} else {
    			var index = 0,
    				items = '<ul>';
				if (type === "ethernet") {
    			this.map[type].each(function (device) {
    				index++;
                    deviceType="";
                    last="";
                    if (device.DeviceType)
                        deviceType=device.DeviceType.toLowerCase();
                    
                    if (device.Tags.toLowerCase().indexOf("homeplug") >= 0) {
							deviceType="liveplug";
							this.index++;
							if (this.map[type].length == index)
									items += this.createLivePlugNode(device,'class="last"');
							else 
									items += this.createLivePlugNode(device,'');
							//items += this.createItemsForLivePlug(device);
					} else {
							if (this.map[type].length == index) {
								items += '<li class="last" id="' + type + '_' + index + '">';
							} else {
								items += '<li id="' + type + '_' + index + '">';
							}
							items += this.createItemNode({
								"index": this.index++,
								"title": Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)),
								"icon": this.getItemIcon(deviceType)
							});
					}

    				items += "</li>";

    			}, this);
    			//if (this.map["liveplug"].length>0) {
						//items += "<li>"+this.createLivePlugNode()+"</li>";
						//console.warn(this.map["liveplug"]);
				//}
    			items += '</ul>';

    			return items;  
    		   } else  {
    			this.map[type].each(function (device) {
    				index++;
    				if (this.map[type].length == index) {
    					items += '<li class="last" id="' + type + '_' + index + '">';
    				} else {
    					items += '<li id="' + type + '_' + index + '">';
    				}
                    deviceType="";
                    if (device.DeviceType)
                        deviceType=device.DeviceType.toLowerCase();
    				items += this.createItemNode({
    					"index": this.index++,
    					"title": Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)),
    					"icon": this.getItemIcon(deviceType)
    				});

    				items += "</li>";
    			}, this);

    			items += '</ul>';

    			return items;  
    		   }
    		}
    	},
   
	createItemsForLivePlug: function (device) {
			if (device.Children) {
						if (device.Children.length == 0) {
							return '<ul><li class="last"><span class="translation Translations.general.label.nodevices"></span></li></ul>';
						} else {
							var index = 0,deviceLength=device.Children.length;
								items = '<ul>';
							device.Children.each(function (device) {
								index++;
								if (deviceLength == index) {
									items += '<li class="last" id="' + "liveplug" + '_' + index + '">';
								} else {
									items += '<li id="' + "liveplug" + '_' + index + '">';
								}
								deviceType="";
								if (device.DeviceType)
									deviceType=device.DeviceType.toLowerCase();
								items += this.createItemNode({
									"index": this.index++,
									"title": Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)),
									"icon": this.getItemIcon(deviceType)
								});

								items += "</li>";
							}, this);

							items += '</ul>';

							return items;
						}
				} else 
					return '<ul><li class="last"><span class="translation Translations.general.label.nodevices"></span></li></ul>';
    	},

    	/**
     *
     item = {
        "index": 1,
        "title": "SDS-08WY",
        "icon": '<img width="55" height="43" alt="SDS-08WY" src="gfx/devices/icons-devices-notebook.png" class="img-zoom">'
     }
     */
    	createItemNode: function (item) {
    		var itemNodeTemplate = new Template('<div class="item" id="item_#{index}">' + '        <div class="header" id="item_#{index}_header"></div>' + '        <div class="content" id="item_#{index}_content" >' + '                <div>' + '                        <div id="item_#{index}_title">#{title}</div>' + '                        <div class="icon png">#{icon}</div>' + '                </div>' + '        </div>' + '        <div class="footer" id="item_#{index}_footer"></div>' + '</div>');

    		return itemNodeTemplate.evaluate(item);
    	},

    	/**
     *
     connection = {
        "index": 1,
        "title": '<span class="translation Translations.mapperresult.connectiontype.ethernet">Ethernet</span>',
        "icon": '<img width="50" height="40" alt="ethernet connexion type" src="gfx/devices/icons-devices-network.png">'
     }
     */
    	createConnectionNode: function (connection) {
    		var connectionNodeTemplate = new Template('<div class="connectiontype" id="item_#{index}">' + '                <div class="header" id="item_#{index}_header"></div>' + '                <div class="content" id="item_#{index}_content" style="height: 100px; line-height: 15px; padding: 5px; text-align: center;">' + '                        <div>' + '                                <div id="item_#{index}_title">#{title}</div>' + '<br><div class="icon png">#{icon}</div>' + '</div>' + '</div>' + '<div class="footer" id="item_#{index}_footer"></div>' + '       </div>');

    		return connectionNodeTemplate.evaluate(connection);
    	},

    	createNodeDetails: function (details, device, topology) {
			if (device) {
			  details += '<li class="node">' + device.top+ '</li>';
			  details += '<li class="node">' + device.deviceType + '</li>';
			  details += '<li class="node">' + device.cnx-status + '</li>';
			  if (device.deviceType.toLowerCase().indexOf("usb")) {
				  details += '<li class="node">' + device.ip + '</li>';
				  details += '<li class="node">' + device.mac + '</li>';
				  
			  } 
	
			}
    	},	
	createCPLNodeDetails: function (details, device, topology) {
    		var found = false;
		topology.HNIDS.each(function (hndevice) {
    			if(hndevice.Type === 3){ // Type = 3 for Liveplugs
				if(hndevice.HNIDS.length === 0){
					if(hndevice.Address === device.mac){
						found = true;
					}
				}else{
					found = false;
				}
				
				if(found){
					this.details = details;
					details = '';
				}else {
					var tmpDetails = details;
					if(hndevice.hostName && hndevice.hostName !== ""){
						details += '<li class="node">' + hndevice.hostName.truncate(26, '...') + '</li>';
					}else if(hndevice.Manufacturer && hndevice.Manufacturer !== ""){
						details += '<li class="node">' + hndevice.Manufacturer.truncate(26, '...') + '</li>';
					}else{
						details += '<li class="node">' + hndevice.manufacturer.truncate(26, '...') + '</li>';
					}
					this.createCPLNodeDetails(details, device, hndevice);
					details = tmpDetails;
				}
			}
    		}, this);
    	},

	createLivePlugNodeDetails: function (device) {
        console.warn(this.map["liveplug"][device.Key]);


           if(this.map["liveplug"][device.Key] && this.map["liveplug"][device.Key].length>0){
	          

	       for(var i=0;i<this.map["liveplug"][device.Key].length;i++){

		      if(i==this.map["liveplug"][device.Key].length-1){
			this.client.execute("sysbus.Devices.Device."+this.map["liveplug"][device.Key][i].Layer2Interface+":get",{}, {
							onSuccess: this.showLivePlugBitRate.bind(this),
							onFailure: this.showLivePlugBitRate.bind(this)
						});
		 this.details += '<li class="node">' + this.map["liveplug"][device.Key][i].DeviceType +'<span id="liveplugBitRate"> </span></li>'; 

		}else{
		 this.details += '<li class="node">' + this.map["liveplug"][device.Key][i].DeviceType + '</li>';

			}

/*
             if (this.map["liveplug"][device.Key][i].Children){

                  var livePlugChildren = [];
                  livePlugChildren=this.map["liveplug"][device.Key][i].Children;
                  console.warn('livePlugChildren[i].Layer2Interface :'+livePlugChildren[i].Layer2Interface);
	          this.client.execute("sysbus.Devices.Device."+livePlugChildren[0].Layer2Interface+":get",{}, {
							onSuccess: this.showLivePlugBitRate.bind(this),
							onFailure: this.showLivePlugBitRate.bind(this)
						});

		this.details += '<li class="node">' + livePlugChildren[0].DeviceType +'<span id="liveplugBitRate"> </span></li>'; 
              }
*/
		
				}
		
            }
				
    	},
	showLivePlugBitRate:function(obj){
		if (obj.result && obj.result.status.CurrentBitRate)
			$("liveplugBitRate").update(" ("+obj.result.status.CurrentBitRate+"Mbits/"+obj.result.status.CurrentBitRate+"Mbits)")

		
	},

	truncateDeviceName: function (deviceName, limit) {
		if (deviceName.length > limit) {
			return deviceName.substring(0, limit) + "...";
		} else {
			return deviceName;
		}
	},

    	displayLiveboxPanel: function (device, evnt) {
    		var target = evnt.target || window.e.srcElement;
    		var position = target.cumulativeOffset();

    		if (Math.abs(position.left - evnt.clientX) < 40 && Math.abs(position.top - evnt.clientY) < 40) {
    			device.top = evnt.clientY;
    		} else {
    			device.top = position.top;
    		}

    		device.top -= 264;

/*var devicePanelTemplate = new Template('<div class="device-panel" id="devicepanel" style="margin-left: -13px;display: block;width:290px; top: #{top}px;">' + '        <div class="header">' + '                <div id="device-panel-header-title">'+this.truncateDeviceName(device.title,6)+'</div>' + '                <a href="#" id="device-panel-header-close"><img alt="" class="png" src="' + appUrl + "/images/" + appConfig + '/common/transparent.gif"></a>' + '        </div>' + '        <div class="content">' + '                <div id="device-panel-header-subtitle"></div><br>' + '                #{cnx-status}' + '                <div class="device-addresses" id="deviceaddresses">' + '                        <div class="header"></div>' + '                        <div class="content">' + '                                <span class="translation Translations.mapperresult.label.ip"></span> : <span id="device-ip">#{ip}</span><br>' + '                                <span class="translation Translations.mapperresult.label.mac"></span> : <span id="device-mac">#{mac}</span><br>' + '                        </div>' + '                        <div class="footer"></div>' + '                </div>' + '        </div>' + '        <div class="footer"></div>' + '</div>');*/


var devicePanelTemplate = new Template('<div class="device-panel" id="devicepanel" style="margin-left: -13px;display: block;width:290px; top: #{top}px;">' + '        <div class="header">' + '                <div id="device-panel-header-title">#{title}</div>' + '                <a href="#" id="device-panel-header-close"><img alt="" class="png" src="' + appUrl + "/images/" + appConfig + '/common/transparent.gif"></a>' + '        </div>' + '        <div class="content">' + '                <div id="device-panel-header-subtitle"></div><br>' + '                #{cnx-status}' + '                <div class="device-addresses" id="deviceaddresses">' + '                        <div class="header"></div>' + '                        <div class="content">' + '                                <span class="translation Translations.mapperresult.label.ip"></span> : <span id="device-ip">#{ip}</span><br>' + '                                <span class="translation Translations.mapperresult.label.mac"></span> : <span id="device-mac">#{mac}</span><br>' + '                        </div>' + '                        <div class="footer"></div>' + '                </div>' + '        </div>' + '        <div class="footer"></div>' + '</div>');



    		$("panel-ctr")
    			.update(devicePanelTemplate.evaluate(device));
    		Sah.translator.refresh();
    		Event.observe($('device-panel-header-close'), "click", this.hideDevicePanel.bind(this));
    	},
	
	displayDevicePanel: function (device, mDevice, evnt) {
    		var target = evnt.target || window.e.srcElement;
    		var position = target.cumulativeOffset();

    		if (Math.abs(position.left - evnt.clientX) < 40 && Math.abs(position.top - evnt.clientY) < 40) {
    			device.top = evnt.clientY;
    		} else {
    			device.top = position.top;
    		}

    		device.top -= 264;

    		this.details = '';
		
		if (device.DeviceType != "cpl"){
			this.createNodeDetails('', device, this.topology);
		}else{
			this.createCPLNodeDetails('',device, this.topology);
		}
		this.createLivePlugNodeDetails(mDevice);
		var macAndIp = '';
		if(device.DeviceType !== "usb"){
			macAndIp = '<div class="device-addresses" id="deviceaddresses">' + ' <div class="header"></div>' + '<div class="content">' + '<span class="translation Translations.mapperresult.label.ip"></span> : <span id="device-ip">#{ip}</span><br>' + '<span class="translation Translations.mapperresult.label.mac"></span> : <span id="device-mac">#{mac}</span><br>' + '</div>' + '<div class="footer"></div>' + '</div>';
		}
		

    		var devicePanelTemplate = new Template('<div class="device-panel" id="devicepanel" style="margin-left: -13px;display: block;width:290px; top: #{top}px;">' + '<div class="header">' + '<div id="device-panel-header-title">'+this.truncateDeviceName(device.title,34)+'</div>' + '<a href="#" id="device-panel-header-close"><img alt="" class="png" src="' + appUrl + "/images/" + appConfig + '/common/transparent.gif"></a>' + '</div>' + '<div class="content">' + ' <div id="device-panel-header-subtitle"></div><br>' + '#{cnx-status}' + ' <div class="details" id="device-details">' + '<div class="header">' + ' <div id="device-panel-details-header-title">' + ' <span class="translation Translations.mapperresult.label.details"></span>' + '</div>' + '</div>' + '<div class="content">' +
   '<ul class="devices-chain" id="device-details-list">' + 
          '<li class="first"><span class="translation Translations.mapperresult.item.livebox"></span></li>'


                      + this.details + 
          ' <li class="last">'+this.truncateDeviceName(device.title,23)+'</li>' + 
   '</ul>' +


 '</div>' + '<div class="footer"></div>' + '</div>' + macAndIp + '</div>' + '<div class="footer"></div>' + '</div>');



    		$("panel-ctr").update(devicePanelTemplate.evaluate(device));
    		Sah.translator.refresh();
    		Event.observe($('device-panel-header-close'), "click", this.hideDevicePanel.bind(this));
    	},

    	hideDevicePanel: function (evt) {
    		evt.stop();
    		$("panel-ctr")
    			.update("");
    		Event.stopObserving($('device-panel-header-close'), 'click', this.hideDevicePanel);
    	},

    	getSrcIcon: function (basicPath) {
    		return appUrl + "/images/" + appConfig + basicPath;
    	},

    	getItemIcon: function (deviceType) {
	  console.warn('deviceType'+deviceType);
		
    		if (OrangeMapper.IconPath[deviceType]) {
    			return '<img width="55" height="43" alt="" src="' + appUrl + "/images/" + appConfig + OrangeMapper.IconPath[deviceType] + '" class="img-zoom">';
    		} else {
    			return '<img width="55" height="43" alt="" src="' + appUrl + "/images/" + appConfig + '/devices/icons-devices-desktop.png" class="img-zoom">';
    		}
    	}
    });


    OrangeMapper.Types = {
    	"ethernet": {
    		"label": "Translations.mapperresult.connectiontype.ethernet",
    		"icon": '/devices/icons-devices-network.png'
    	},
    	"wifi": {
    		"label": "Translations.mapperresult.connectiontype.wifi",
    		"icon": '/icons/icons-wifi.png'
    	},
    	"usb": {
    		"label": "Translations.mapperresult.connectiontype.usb",
    		"icon": '/icons/icons-ethernet.png'
    	},
    	"liveplug": {
    		"label": "Translations.mapperresult.connectiontype.liveplug",
    		"icon": '/devices/icons-devices-liveplugwifi.png'
    	},   	
    	"unknown": {
    		"label": "Translations.mapperresult.connectiontype.unknown",
    		"icon": '/icons/icons-unknown.png'
    	}
    };


    // MediaServer, MediaRenderer
    OrangeMapper.IconPath = {
    	"phone": "/devices/icons-devices-mobile.png",
    	"mobile": "/devices/icons-devices-mobile.png",
    	"smartphone": "/devices/icons-devices-smartphone.png",
    	"tablette": "/devices/icons-devices-tablet.png",
    	"dectPhone": "/devices/icons-devices-telephoneparinternet.png",
    	"notebook": "/devices/icons-devices-notebook.png",
    	"laptop": "/devices/icons-devices-laptop.png",
    	"computer": "/devices/icons-devices-desktop.png",
    	"liveplug": "/devices/icons-devices-liveplugwifi.png",
	"cpl": "/devices/icons-devices-desktop.png",
    	"desktop": "/devices/icons-devices-desktop.png",
    	"printer": "/devices/icons-devices-printer.png",
    	"gameconsole": "/devices/icons-devices-game.png",
    	"game": "/devices/icons-devices-game.png",
    	"set-top box orange": "/devices/icons-devices-stb.png",
    	"set-top box": "/devices/icons-devices-stb.png",
    	"stb": "/devices/icons-devices-stb.png",
    	"audio/video": "/devices/icons-devices-stb.png",
    	"tv": "/devices/icons-devices-tv.png",
    	"liveradio": "/devices/icons-devices-liveradio.png",
    	"photo": "/devices/icons-devices-photoframe.png",
    	"photoframe": "/devices/icons-devices-photoframe.png",
    	"storage": "/devices/icons-devices-usb-hdd.png",
    	"mass-storage": "/devices/icons-devices-usb-hdd.png",
    	"Unknown": "/devices/icons-devices-desktop.png",
    	"desktop-gray": "/devices/icons-devices-desktop-gray.png",
    	"laptop-gray": "/devices/icons-devices-laptop-gray.png",
    	"mobile-gray": "/devices/icons-devices-mobile-gray.png",
    	"printer-gray": "/devices/icons-devices-printer-gray.png",
    	"stb-gray": "/devices/icons-devices-stb-gray.png",
    	"tv-gray": "/devices/icons-devices-tv-gray.png",
    	"game-gray": "/devices/icons-devices-game-gray.png",
    	"liveradio-gray": "/devices/icons-devices-liveradio-gray.png",
    	"photoframe-gray": "/devices/icons-devices-photoframe-gray.png",
    	"mass-storage-gray": "/devices/icons-devices-usb-hdd-gray.png",
    	"unik": "/devices/icons-devices-unik.png",
    	"dect-phone": "/devices/icons-devices-telephoneparinternet.png",
    	"homelibrary": "/devices/icons-devices-homelibrairy.png",
	"mass storage": "/devices/icons-devices-usb-hdd.png",
	"liveplug wifi":"/devices/icons-devices-liveplugwifi.png"
    };
    
    OrangeMapper.unitTest = {
         "Type":1,
         "Address":"98:8B:5D:3C:78:1A",
         "HNIDS":[
// 		LIVEPLUGS
            {
               "HNIDS":[
                  {
                     "HNIDS":[

                     ],
                     "EndDevices":[
                        {
                           "physAddress":"98:4B:E1:EB:D4:05",
                           "ipAddress":"192.168.1.11",
                           "addressSource":"DHCP",
                           "detectedTypes":"MediaServer",
                           "leaseTimeRemaining":-1,
                           "vendorClassID":"MSFT 5.0",
                           "clientID":"01:98:4b:e1:eb:d4:05",
                           "userClassID":"",
                           "hostName":"pc1",
                           "dnsName":"pc1",
                           "uPnPNames":"pc1: sahdev:",
                           "mDNSNames":"pc1",
                           "lLTDDevice":false,
                           "sSID":"",
                           "active":true,
                           "lastConnection":"1970-01-01T00:48:18Z",
                           "lastChange":"1970-01-01T00:48:15Z",
                           "tags":"ipv4 ipv6",
                           "layer2Interface":"eth0",
                           "interfaceType":"Ethernet",
                           "manufacturerOUI":"000000",
                           "serialNumber":"",
                           "productClass":"",
                           "deviceIcon":"",
                           "deviceLocation":"",
                           "deviceType":"Computer",
                           "DeviceTypes":"MediaServer;MSFT 5.0"
                        }
                     ],
                     "Type":3,
                     "Address":"BC:F2:AF:31:38:66",
                     "LocalPlt":false,
                     "Manufacturer":"Liveplug 1-1",
                     "User":"Intellon Enabled Product",
                     "AvgPhyTx":98,
                     "AvgPhyRx":86,
                     "Version":"INT6000-MAC-4-4-4405-00-4497-20101201-FINAL-B",
                     "DeviceID":"3"
                  },
		  {
                     "HNIDS":[

                     ],
                     "EndDevices":[
                        {
                           "physAddress":"98:4B:E1:EB:D4:08",
                           "ipAddress":"192.168.1.15",
                           "addressSource":"DHCP",
                           "detectedTypes":"MediaServer",
                           "leaseTimeRemaining":-1,
                           "vendorClassID":"MSFT 5.0",
                           "clientID":"01:98:4b:e1:eb:d4:05",
                           "userClassID":"",
                           "hostName":"pc2",
                           "dnsName":"pc2",
                           "uPnPNames":"pc2: sahdev:",
                           "mDNSNames":"pc2",
                           "lLTDDevice":false,
                           "sSID":"",
                           "active":true,
                           "lastConnection":"1970-01-01T00:48:18Z",
                           "lastChange":"1970-01-01T00:48:15Z",
                           "tags":"ipv4 ipv6",
                           "layer2Interface":"eth0",
                           "interfaceType":"Ethernet",
                           "manufacturerOUI":"000000",
                           "serialNumber":"",
                           "productClass":"",
                           "deviceIcon":"",
                           "deviceLocation":"",
                           "deviceType":"Computer",
                           "DeviceTypes":"MediaServer;MSFT 5.0"
                        }
                     ],
                     "Type":3,
                     "Address":"BC:F2:AF:31:38:77",
                     "LocalPlt":false,
                     "Manufacturer":"Liveplug 1-2",
                     "User":"Intellon Enabled Product",
                     "AvgPhyTx":98,
                     "AvgPhyRx":86,
                     "Version":"INT6000-MAC-4-4-4405-00-4497-20101201-FINAL-B",
                     "DeviceID":"3"
                  }
               ],
               "EndDevices":[

               ],
               "Type":3,
               "Address":"BC:F2:AF:31:2F:D1",
               "LocalPlt":true,
               "Manufacturer":"Liveplug 1",
               "User":"Intellon Enabled Product",
               "Version":"INT6000-MAC-4-4-4405-00-4497-20101201-FINAL-B",
               "DeviceID":"3"
            },
// 	    USBs
	    {
               "HNIDS":[
                  {
                     "HNIDS":[

                     ],
                     "EndDevices":[
                        {
                           "manufacturer":"USB-1",
                           "hostName":"Flash Disk",
                           "DeviceID":"0x204",
                           "Version":"2.00",
                           "interfaceType":"USB",
                           "deviceType":"Mass Storage"
                        }
                     ],
                     "Type":6,
                     "manufacturer":"",
                     "hostName":"USB Hub 1-1",
                     "DeviceID":"0x203",
                     "Version":"2.00",
                     "interfaceType":"USB",
                     "deviceType":"Hub"
                  },
		  {
                     "HNIDS":[
			  {
				"HNIDS":[
				],
				"EndDevices":[
				    {
				      "manufacturer":"USB-3",
				      "hostName":"Flash Disk",
				      "DeviceID":"0x208",
				      "Version":"2.00",
				      "interfaceType":"USB",
				      "deviceType":"Mass Storage"
				    }
				],
				"Type":6,
				"manufacturer":"",
				"hostName":"USB Hub 1-2-1",
				"DeviceID":"0x207",
				"Version":"2.00",
				"interfaceType":"USB",
				"deviceType":"Hub"
			  },
			  {
				"HNIDS":[
				],
				"EndDevices":[
				    {
				      "manufacturer":"USB-4",
				      "hostName":"Flash Disk",
				      "DeviceID":"0x210",
				      "Version":"2.00",
				      "interfaceType":"USB",
				      "deviceType":"Mass Storage"
				    }
				],
				"Type":6,
				"manufacturer":"",
				"hostName":"USB Hub 1-2-2",
				"DeviceID":"0x209",
				"Version":"2.00",
				"interfaceType":"USB",
				"deviceType":"Hub"
			  }
                     ],
                     "EndDevices":[
                        {
                           "manufacturer":"USB-2",
                           "hostName":"Flash Disk",
                           "DeviceID":"0x206",
                           "Version":"2.00",
                           "interfaceType":"USB",
                           "deviceType":"Mass Storage"
                        }
                     ],
                     "Type":6,
                     "manufacturer":"",
                     "hostName":"USB Hub 1-2",
                     "DeviceID":"0x205",
                     "Version":"2.00",
                     "interfaceType":"USB",
                     "deviceType":"Hub"
                  }
               ],
               "EndDevices":[

               ],
               "Type":6,
               "manufacturer":"",
               "hostName":"USB Hub 1",
               "DeviceID":"0x202",
               "Version":"2.00",
               "interfaceType":"USB",
               "deviceType":"Hub"
            }
         ],
         "EndDevices":[
            {
               "physAddress":"DC:D3:21:14:C0:12",
               "ipAddress":"192.168.1.10",
               "addressSource":"DHCP",
               "detectedTypes":"RemoteUIServerDevice;RemoteUIClientDevice;MediaServer;MediaRenderer",
               "leaseTimeRemaining":-1,
               "vendorClassID":"humax",
               "clientID":"01:dc:d3:21:14:c0:12",
               "userClassID":"",
               "hostName":"lolilol",
               "dnsName":"lolilol",
               "uPnPNames":"lolilol;SoftAtHome RUI Server;DMR_597800045;SoftAtHome RUI Client",
               "mDNSNames":"",
               "lLTDDevice":false,
               "sSID":"",
               "active":true,
               "lastConnection":"1970-01-01T00:48:07Z",
               "lastChange":"1970-01-01T00:48:06Z",
               "tags":"ipv4",
               "layer2Interface":"eth0",
               "interfaceType":"Ethernet",
               "manufacturerOUI":"000000",
               "serialNumber":"",
               "productClass":"",
               "deviceIcon":"",
               "deviceLocation":"",
               "deviceType":"Computer",
               "DeviceTypes":"RemoteUIServerDevice;RemoteUIClientDevice;MediaServer;MediaRenderer;humax"
            }]
};

OrangeMapper.unitTest2={

"Key":"HGW",
"DiscoverySource":"selfhgw",
"Name":"LIVEBOX",
"DeviceType":"",
"Active":true,
"Tags":"self hgw physical wan",
"LastConnection":"0001-01-01T00:00:00Z",
"LastChanged":"2014-11-20T16:56:02Z",
"Manufacturer":"Sagemcom",
"ModelName":"SagemcomFast3965_LB2.8",
"Description":"SagemcomFast3965_LB2.8 Sagemcom fr",
"SerialNumber":"LMZ100211000003",
"ProductClass":"Livebox 3",
"HardwareVersion":"SG_LB3_1.2.0",
"SoftwareVersion":"SG30_h323-fr-5.10.0.2",
"BootLoaderVersion":"",
"FirewallLevel":"Medium",
"LinkType":"dsl",
"LinkState":"up",
"ConnectionProtocol":"ppp",
"ConnectionState":"Connected",
"LastConnectionError":"ERROR_NONE",
"ConnectionIPv4Address":"80.13.205.58",
"ConnectionIPv6Address":"",
"RemoteGateway":"193.253.160.3",
"DNSServers":"80.10.246.1,81.253.149.9",
"Internet":true,
"IPTV":true,
"Telephony":true,
"Index":"1",
"Names":[
{
"Name":"LIVEBOX",
"Source":"default"
}
],
"DeviceTypes":[
],
"Children":[
{
"Key":"sysbus_USBHost",
"DiscoverySource":"selfusb",
"Name":"USBHost",
"DeviceType":"",
"Active":true,
"Tags":"self usb interface sysbus",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"0001-01-01T00:00:00Z",
"BusName":"sysbus",
"Index":"21",
"Names":[
{
"Name":"USBHost",
"Source":"default"
}
],
"DeviceTypes":[
],
"Children":[
{
"Key":"Port2",
"DiscoverySource":"selfusb",
"Name":"Port2",
"DeviceType":"",
"Active":true,
"Tags":"self usb port interface sysbus",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"0001-01-01T00:00:00Z",
"BusName":"sysbus",
"Port":0,
"USBHost":"sysbus.USBHosts.Host.1",
"Index":"28",
"Names":[
{
"Name":"Port2",
"Source":"default"
}
],
"DeviceTypes":[
]
},
{
"Key":"Port1",
"DiscoverySource":"selfusb",
"Name":"Port1",
"DeviceType":"",
"Active":true,
"Tags":"self usb port interface sysbus",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"0001-01-01T00:00:00Z",
"BusName":"sysbus",
"Port":1,
"USBHost":"sysbus.USBHosts.Host.1",
"Index":"29",
"Names":[
{
"Name":"Port1",
"Source":"default"
}
],
"DeviceTypes":[
]
}
]
},
{
"Key":"lan",
"DiscoverySource":"selflan",
"Name":"lan",
"DeviceType":"",
"Active":true,
"Tags":"self lan bridge mac nemo interface ipv4 ipv6 dhcpserver",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"0001-01-01T00:00:00Z",
"PhysAddress":"00:22:93:38:3C:01",
"Ageing":false,
"Layer2Interface":"",
"NetDevName":"bridge",
"NetDevIndex":9,
"IPAddress":"192.168.1.1",
"IPAddressSource":"self",
"DHCPv4ServerPool":"default",
"DHCPv4ServerEnable":true,
"DHCPv4ServerMinAddress":"192.168.1.10",
"DHCPv4ServerMaxAddress":"192.168.1.150",
"DHCPv4ServerNetmask":"255.255.255.0",
"DHCPv4DomainName":"home",
"Index":"22",
"Names":[
{
"Name":"lan",
"Source":"default"
}
],
"DeviceTypes":[
],
"IPv4Address":[
{
"Address":"192.168.1.1",
"Status":"reachable",
"Scope":"global",
"AddressSource":"self",
"Reserved":true
}
],
"IPv6Address":[
{
"Address":"fe80::222:93ff:fe38:3c01",
"Status":"reachable",
"Scope":"link",
"AddressSource":"self"
}
],
"Children":[
{
"Key":"wl0",
"DiscoverySource":"selflan",
"Name":"wl0",
"DeviceType":"",
"Active":true,
"Tags":"self lan vap wifi nemo interface",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"2014-11-26T11:22:47Z",
"NetDevName":"wl0",
"NetDevIndex":12,
"SSID":"Livebox-3C01",
"BSSID":"00:22:93:38:3C:01",
"OperatingFrequencyBand":"2.4GHz",
"Index":"23",
"Names":[
{
"Name":"wl0",
"Source":"default"
}
],
"DeviceTypes":[
],
"Children":[
{
"Key":"00:02:72:5A:A2:49",
"DiscoverySource":"import",
"Name":"PC-7",
"DeviceType":"liveradio",
"Active":true,
"Tags":"lan mac physical edev ipv4 ipv6 upnp orange wifi dhcp",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"2014-11-21T04:26:35Z",
"PhysAddress":"00:02:72:5A:A2:49",
"Ageing":false,
"Layer2Interface":"wl0",
"IPAddress":"192.168.1.14",
"IPAddressSource":"DHCP",
"VendorClassID":"udhcp 1.12.1",
"UserClassID":"",
"ClientID":"01:00:02:72:5A:A2:49",
"SerialNumber":"",
"ProductClass":"",
"OUI":"",
"Index":"7",
"Actions":[
{
"Function":"setName",
"Name":"Edit Name",
"Arguments":[
{
"Name":"name",
"Type":"string",
"Mandatory":true
},
{
"Name":"source",
"Type":"string",
"Mandatory":false
}
]
}
],
"Names":[
{
"Name":"PC-7",
"Source":"default"
}
],
"DeviceTypes":[
{
"Type":"liveradio",
"Source":"webui"
},
{
"Type":"MediaRenderer",
"Source":"upnp-uuid:0002725AA249"
}
],
"IPv4Address":[
{
"Address":"192.168.1.14",
"Status":"reachable",
"Scope":"global",
"AddressSource":"DHCP",
"Reserved":false
}
],
"IPv6Address":[
],
"Children":[
{
"Key":"uuid:0002725AA249",
"DiscoverySource":"upnpDev",
"Name":"liveradio",
"DeviceType":"",
"Active":true,
"Tags":"upnp root logical",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"2014-11-20T16:50:32Z",
"Type":"urn:schemas-upnp-org:device:MediaRenderer:1",
"Manufacturer":"Orange",
"ManufacturerURL":"http://liveradio.orange.fr",
"ModelDescription":"Digital Media Renderer",
"ModelName":"liveradio",
"ModelNumber":"2.5.2",
"ModelURL":"http://liveradio.orange.fr",
"SerialNumber":"0002725AA249",
"UDN":"uuid:0002725AA249",
"UPC":"",
"PresentationURL":"/index.html",
"Server":"Linux/2.6.15.7, UPnP/1.0, Portable SDK for UPnP devices/1.6.6",
"Index":"36",
"Names":[
{
"Name":"device_36",
"Source":"default"
},
{
"Name":"liveradio",
"Source":"upnp"
}
],
"DeviceTypes":[
],
"Service":[
{
"ServiceType":"urn:schemas-upnp-org:service:RenderingControl:1",
"ServiceId":"urn:upnp-org:serviceId:RenderingControlServiceID",
"SCPDURL":"/RCdesc.xml",
"ControlURL":"/control/RCS",
"EventSubURL":"/event/RCS"
},
{
"ServiceType":"urn:schemas-upnp-org:service:ConnectionManager:1",
"ServiceId":"urn:upnp-org:serviceId:ConnectionManagerServiceID",
"SCPDURL":"/CMdesc.xml",
"ControlURL":"/control/CMS",
"EventSubURL":"/event/CMS"
},
{
"ServiceType":"urn:schemas-upnp-org:service:AVTransport:1",
"ServiceId":"urn:upnp-org:serviceId:AVTransportServiceID",
"SCPDURL":"/AVTdesc.xml",
"ControlURL":"/control/AVTS",
"EventSubURL":"/event/AVTS"
}
]
}
]
},
{
"Key":"10:68:3F:84:7C:A2",
"DiscoverySource":"bridge",
"Name":"android-a81eebc48ab80771",
"DeviceType":"Mobile",
"Active":true,
"Tags":"lan edev mac physical wifi ipv4 ipv6 dhcp",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"2014-11-26T17:18:03Z",
"PhysAddress":"10:68:3F:84:7C:A2",
"Ageing":true,
"Layer2Interface":"wl0",
"IPAddress":"192.168.1.18",
"IPAddressSource":"DHCP",
"VendorClassID":"dhcpcd-5.5.6",
"UserClassID":"",
"ClientID":"01:10:68:3F:84:7C:A2",
"SerialNumber":"",
"ProductClass":"",
"OUI":"",
"Index":"42",
"Actions":[
{
"Function":"setName",
"Name":"Edit Name",
"Arguments":[
{
"Name":"name",
"Type":"string",
"Mandatory":true
},
{
"Name":"source",
"Type":"string",
"Mandatory":false
}
]
}
],
"Names":[
{
"Name":"PC-42",
"Source":"default"
},
{
"Name":"android-a81eebc48ab80771",
"Source":"dhcp"
}
],
"DeviceTypes":[
{
"Type":"Computer",
"Source":"default"
},
{
"Type":"Mobile",
"Source":"dhcp"
}
],
"IPv4Address":[
{
"Address":"192.168.1.18",
"Status":"reachable",
"Scope":"global",
"AddressSource":"DHCP",
"Reserved":false
}
],
"IPv6Address":[
]
},
{
"Key":"68:17:29:27:A6:78",
"DiscoverySource":"bridge",
"Name":"PC_NICOLAS",
"DeviceType":"Computer",
"Active":false,
"Tags":"lan edev mac physical wifi ipv4 ipv6 upnp dhcp",
"LastConnection":"2014-11-26T11:43:22Z",
"LastChanged":"2014-11-26T11:43:23Z",
"PhysAddress":"68:17:29:27:A6:78",
"Ageing":true,
"Layer2Interface":"wl0",
"IPAddress":"192.168.1.16",
"IPAddressSource":"DHCP",
"VendorClassID":"MSFT 5.0",
"UserClassID":"",
"ClientID":"01:68:17:29:27:A6:78",
"SerialNumber":"",
"ProductClass":"",
"OUI":"",
"Index":"47",
"Actions":[
{
"Function":"setName",
"Name":"Edit Name",
"Arguments":[
{
"Name":"name",
"Type":"string",
"Mandatory":true
},
{
"Name":"source",
"Type":"string",
"Mandatory":false
}
]
}
],
"Names":[
{
"Name":"PC-47",
"Source":"default"
},
{
"Name":"PC_NICOLAS",
"Source":"dhcp"
}
],
"DeviceTypes":[
{
"Type":"Computer",
"Source":"default"
},
{
"Type":"MediaServer",
"Source":"upnp-uuid:905c0af0-0409-4cab-a608-e16fbc78054b"
},
{
"Type":"Computer",
"Source":"dhcp"
}
],
"IPv4Address":[
{
"Address":"192.168.1.16",
"Status":"not reachable",
"Scope":"global",
"AddressSource":"DHCP",
"Reserved":true
}
],
"IPv6Address":[
],
"Children":[
{
"Key":"uuid:905c0af0-0409-4cab-a608-e16fbc78054b",
"DiscoverySource":"upnpDev",
"Name":"PC_NICOLAS: pujoln1:",
"DeviceType":"",
"Active":false,
"Tags":"upnp root logical",
"LastConnection":"2014-11-26T11:43:13Z",
"LastChanged":"2014-11-26T11:43:23Z",
"Type":"urn:schemas-upnp-org:device:MediaServer:1",
"Manufacturer":"Microsoft Corporation",
"ManufacturerURL":"http://www.microsoft.com",
"ModelDescription":"",
"ModelName":"Windows Media Player Sharing",
"ModelNumber":"12.0",
"ModelURL":"http://go.microsoft.com/fwlink/?LinkId=105926",
"SerialNumber":"S-1-5-21-994867072-494807826-3301726667-1001",
"UDN":"uuid:905c0af0-0409-4cab-a608-e16fbc78054b",
"UPC":"",
"PresentationURL":"",
"Server":"Microsoft-Windows/6.3 UPnP/1.0 UPnP-Device-Host/1.0",
"Index":"46",
"Names":[
{
"Name":"device_46",
"Source":"default"
},
{
"Name":"PC_NICOLAS: pujoln1:",
"Source":"upnp"
}
],
"DeviceTypes":[
],
"Service":[
{
"ServiceType":"urn:schemas-upnp-org:service:ConnectionManager:1",
"ServiceId":"urn:upnp-org:serviceId:ConnectionManager",
"SCPDURL":"/upnphost/udhisapi.dll?content=uuid:0598047d-c9fa-4989-bea4-f65e9f0026d0",
"ControlURL":"/upnphost/udhisapi.dll?control=uuid:905c0af0-0409-4cab-a608-e16fbc78054b+urn:upnp-org:serviceId:ConnectionManager",
"EventSubURL":"/upnphost/udhisapi.dll?event=uuid:905c0af0-0409-4cab-a608-e16fbc78054b+urn:upnp-org:serviceId:ConnectionManager"
},
{
"ServiceType":"urn:schemas-upnp-org:service:ContentDirectory:1",
"ServiceId":"urn:upnp-org:serviceId:ContentDirectory",
"SCPDURL":"/upnphost/udhisapi.dll?content=uuid:11dc5dd2-a67a-4e35-8a0a-19a4a82e6bc3",
"ControlURL":"/upnphost/udhisapi.dll?control=uuid:905c0af0-0409-4cab-a608-e16fbc78054b+urn:upnp-org:serviceId:ContentDirectory",
"EventSubURL":"/upnphost/udhisapi.dll?event=uuid:905c0af0-0409-4cab-a608-e16fbc78054b+urn:upnp-org:serviceId:ContentDirectory"
},
{
"ServiceType":"urn:microsoft.com:service:X_MS_MediaReceiverRegistrar:1",
"ServiceId":"urn:microsoft.com:serviceId:X_MS_MediaReceiverRegistrar",
"SCPDURL":"/upnphost/udhisapi.dll?content=uuid:fa777edf-e074-4729-854d-3c229493f3e9",
"ControlURL":"/upnphost/udhisapi.dll?control=uuid:905c0af0-0409-4cab-a608-e16fbc78054b+urn:microsoft.com:serviceId:X_MS_MediaReceiverRegistrar",
"EventSubURL":"/upnphost/udhisapi.dll?event=uuid:905c0af0-0409-4cab-a608-e16fbc78054b+urn:microsoft.com:serviceId:X_MS_MediaReceiverRegistrar"
}
]
}
]
}
]
},
{
"Key":"wl1",
"DiscoverySource":"selflan",
"Name":"wl1",
"DeviceType":"",
"Active":true,
"Tags":"self lan vap wifi nemo interface",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"2014-11-26T08:07:08Z",
"NetDevName":"wl1",
"NetDevIndex":15,
"SSID":"Livebox-3C01_5",
"BSSID":"00:22:93:38:3C:02",
"OperatingFrequencyBand":"5GHz",
"Index":"24",
"Names":[
{
"Name":"wl1",
"Source":"default"
}
],
"DeviceTypes":[
],
"Children":[
{
"Key":"3C:36:E4:8F:F4:AD",
"DiscoverySource":"import",
"Name":"wifi bridge",
"DeviceType":"WiFi Bridge",
"Active":true,
"Tags":"lan mac physical wifi ipv4 ipv6 wifi_bridge hnid",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"2014-11-20T21:49:51Z",
"PhysAddress":"3C:36:E4:8F:F4:AD",
"Ageing":false,
"Layer2Interface":"wl1",
"IPAddress":"",
"IPAddressSource":"",
"Index":"4",
"Actions":[
{
"Function":"setName",
"Name":"Edit Name",
"Arguments":[
{
"Name":"name",
"Type":"string",
"Mandatory":true
},
{
"Name":"source",
"Type":"string",
"Mandatory":false
}
]
}
],
"Names":[
{
"Name":"wifi bridge",
"Source":"default"
}
],
"DeviceTypes":[
{
"Type":"WiFi Bridge",
"Source":"webui"
},
{
"Type":"Basic",
"Source":"upnp-uuid:675aa754-f729-11de-b351-00789ef0a5fc"
},
{
"Type":"WiFi Bridge",
"Source":"default"
}
],
"IPv4Address":[
],
"IPv6Address":[
],
"Children":[
{
"Key":"00:78:9E:F0:A5:FC",
"DiscoverySource":"dhcp_neigh",
"Name":"STB_MLTV_UHD86",
"DeviceType":"SetTopBox",
"Active":true,
"Tags":"lan edev mac physical eth ipv4 ipv6 dhcp stb orange upnp",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"2014-11-26T17:20:34Z",
"IPAddress":"192.168.1.13",
"IPAddressSource":"DHCP",
"PhysAddress":"",
"Ageing":false,
"Layer2Interface":"",
"VendorClassID":"sagem",
"UserClassID":"STB_MLTV_UHD86",
"ClientID":"01:00:78:9E:F0:A5:FC",
"SerialNumber":"",
"ProductClass":"",
"OUI":"",
"Index":"38",
"Actions":[
{
"Function":"setName",
"Name":"Edit Name",
"Arguments":[
{
"Name":"name",
"Type":"string",
"Mandatory":true
},
{
"Name":"source",
"Type":"string",
"Mandatory":false
}
]
}
],
"Names":[
{
"Name":"PC-38",
"Source":"default"
},
{
"Name":"STB_MLTV_UHD86",
"Source":"UserClassID"
}
],
"DeviceTypes":[
{
"Type":"Computer",
"Source":"default"
},
{
"Type":"SetTopBox",
"Source":"dhcp"
},
{
"Type":"Basic",
"Source":"upnp-uuid:675aa754-f729-11de-b351-00789ef0a5fc"
}
],
"IPv4Address":[
{
"Address":"192.168.1.13",
"Status":"reachable",
"Scope":"global",
"AddressSource":"DHCP",
"Reserved":false
}
],
"IPv6Address":[
],
"Children":[
{
"Key":"uuid:675aa754-f729-11de-b351-00789ef0a5fc",
"DiscoverySource":"upnpDev",
"Name":"d\E9codeur TV d'Orange",
"DeviceType":"",
"Active":true,
"Tags":"upnp root logical",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"2014-11-26T17:20:34Z",
"Type":"urn:schemas-upnp-org:device:Basic:1",
"Manufacturer":"SAGEM",
"ManufacturerURL":"",
"ModelDescription":"",
"ModelName":"UHD86",
"ModelNumber":"",
"ModelURL":"",
"SerialNumber":"",
"UDN":"uuid:675aa754-f729-11de-b351-00789ef0a5fc",
"UPC":"",
"PresentationURL":"",
"Server":"Unspecified, UPnP/1.0, Unspecified",
"Index":"39",
"Names":[
{
"Name":"device_39",
"Source":"default"
},
{
"Name":"d\E9codeur TV d'Orange",
"Source":"upnp"
}
],
"DeviceTypes":[
],
"Service":[
{
"ServiceType":"urn:schemas-orange-com:service:X_OrangeSTBRemoteControl:1",
"ServiceId":"urn:orange-com:serviceId:X_OrangeSTBRemoteControl",
"SCPDURL":"/X_OrangeSTBRemoteControlDescription.xml",
"ControlURL":"/remoteControl/cmd",
"EventSubURL":""
}
]
}
]
},
{
"Key":"3C:36:E4:8F:F4:AC",
"DiscoverySource":"dhcp_neigh",
"Name":"liveplug.Wi-Fi.F4AC",
"DeviceType":"Computer",
"Active":true,
"Tags":"lan edev mac physical eth ipv4 ipv6 dhcp manageable",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"2014-11-26T17:23:10Z",
"IPAddress":"192.168.1.11",
"IPAddressSource":"DHCP",
"PhysAddress":"",
"Ageing":false,
"Layer2Interface":"",
"VendorClassID":"Motorola.AccessPoint.LivePlugWiFi",
"UserClassID":"",
"ClientID":"01:3C:36:E4:8F:F4:AC",
"SerialNumber":"M91418SA032N",
"ProductClass":"",
"OUI":"0024A0",
"Index":"41",
"Actions":[
{
"Function":"setName",
"Name":"Edit Name",
"Arguments":[
{
"Name":"name",
"Type":"string",
"Mandatory":true
},
{
"Name":"source",
"Type":"string",
"Mandatory":false
}
]
}
],
"Names":[
{
"Name":"PC-41",
"Source":"default"
},
{
"Name":"liveplug.Wi-Fi.F4AC",
"Source":"dhcp"
}
],
"DeviceTypes":[
{
"Type":"Computer",
"Source":"default"
}
],
"IPv4Address":[
{
"Address":"192.168.1.11",
"Status":"reachable",
"Scope":"global",
"AddressSource":"DHCP",
"Reserved":false
}
],
"IPv6Address":[
{
"Address":"fe80::3e36:e4ff:fe8f:f4ac",
"Status":"reachable",
"Scope":"link",
"AddressSource":"Static"
}
]
}
]
},
{
"Key":"D0:22:BE:5E:2F:01",
"DiscoverySource":"bridge",
"Name":"android-ddec3e02ab136527",
"DeviceType":"Mobile",
"Active":false,
"Tags":"lan edev mac physical wifi ipv4 ipv6 dhcp",
"LastConnection":"2014-11-26T15:08:37Z",
"LastChanged":"2014-11-26T15:08:38Z",
"PhysAddress":"D0:22:BE:5E:2F:01",
"Ageing":true,
"Layer2Interface":"wl1",
"IPAddress":"",
"IPAddressSource":"",
"VendorClassID":"dhcpcd-5.5.6",
"UserClassID":"",
"ClientID":"01:D0:22:BE:5E:2F:01",
"SerialNumber":"",
"ProductClass":"",
"OUI":"",
"Index":"45",
"Actions":[
{
"Function":"setName",
"Name":"Edit Name",
"Arguments":[
{
"Name":"name",
"Type":"string",
"Mandatory":true
},
{
"Name":"source",
"Type":"string",
"Mandatory":false
}
]
}
],
"Names":[
{
"Name":"PC-45",
"Source":"default"
},
{
"Name":"android-ddec3e02ab136527",
"Source":"dhcp"
}
],
"DeviceTypes":[
{
"Type":"Computer",
"Source":"default"
},
{
"Type":"Mobile",
"Source":"dhcp"
}
],
"IPv4Address":[
],
"IPv6Address":[
]
}
]
},
{
"Key":"eth0",
"DiscoverySource":"selflan",
"Name":"eth0",
"DeviceType":"",
"Active":true,
"Tags":"self lan eth nemo interface",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"2014-11-26T16:56:57Z",
"MaxBitRateSupported":1000,
"CurrentBitRate":100,
"NetDevName":"eth0",
"NetDevIndex":5,
"Index":"25",
"Names":[
{
"Name":"eth0",
"Source":"default"
}
],
"DeviceTypes":[
],
"Children":[
{
"Key":"C8:0A:A9:68:E1:87",
"DiscoverySource":"import",
"Name":"sahdev-HP-Mini-2102",
"DeviceType":"Computer",
"Active":true,
"Tags":"lan mac physical edev ipv4 ipv6 dhcp eth mdns",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"2014-11-25T10:31:19Z",
"PhysAddress":"C8:0A:A9:68:E1:87",
"Ageing":false,
"Layer2Interface":"eth0",
"IPAddress":"192.168.1.104",
"IPAddressSource":"DHCP",
"VendorClassID":"",
"UserClassID":"",
"ClientID":"01:C8:0A:A9:68:E1:87",
"SerialNumber":"",
"ProductClass":"",
"OUI":"",
"Index":"2",
"Actions":[
{
"Function":"setName",
"Name":"Edit Name",
"Arguments":[
{
"Name":"name",
"Type":"string",
"Mandatory":true
},
{
"Name":"source",
"Type":"string",
"Mandatory":false
}
]
}
],
"Names":[
{
"Name":"PC-2",
"Source":"default"
},
{
"Name":"sahdev-HP-Mini-2102",
"Source":"dhcp"
},
{
"Name":"sahdev-HP-Mini-2102",
"Source":"mdns"
}
],
"DeviceTypes":[
{
"Type":"Computer",
"Source":"webui"
},
{
"Type":"Computer",
"Source":"mdns"
}
],
"IPv4Address":[
{
"Address":"192.168.1.104",
"Status":"reachable",
"Scope":"global",
"AddressSource":"DHCP",
"Reserved":true
}
],
"IPv6Address":[
{
"Address":"fe80::ca0a:a9ff:fe68:e187",
"Status":"reachable",
"Scope":"link",
"AddressSource":"Static"
}
],
"mDNSService":[
{
"Name":"sahdev-HP-Mini-2102 [c8:0a:a9:68:e1:87]",
"ServiceName":"_workstation._tcp",
"Domain":"local",
"Port":"9",
"Text":""
}
]
},
{
"Key":"D8:D3:85:E9:62:8E",
"DiscoverySource":"import",
"Name":"sahnlpt0077",
"DeviceType":"Serveur M\E9dia Orange",
"Active":false,
"Tags":"lan mac physical edev ipv4 ipv6 dhcp eth upnp orange",
"LastConnection":"2014-11-20T17:00:32Z",
"LastChanged":"2014-11-21T16:49:39Z",
"PhysAddress":"D8:D3:85:E9:62:8E",
"Ageing":true,
"Layer2Interface":"eth0",
"IPAddress":"",
"IPAddressSource":"",
"VendorClassID":"MSFT 5.0",
"UserClassID":"",
"ClientID":"01:D8:D3:85:E9:62:8E",
"SerialNumber":"",
"ProductClass":"",
"OUI":"",
"Index":"19",
"Actions":[
{
"Function":"setName",
"Name":"Edit Name",
"Arguments":[
{
"Name":"name",
"Type":"string",
"Mandatory":true
},
{
"Name":"source",
"Type":"string",
"Mandatory":false
}
]
}
],
"Names":[
{
"Name":"PC-19",
"Source":"default"
},
{
"Name":"sahnlpt0077",
"Source":"dhcp"
},
{
"Name":"sahnlpt0077",
"Source":"mdns"
}
],
"DeviceTypes":[
{
"Type":"Serveur M\E9dia Orange",
"Source":"webui"
},
{
"Type":"Computer",
"Source":"dhcp"
},
{
"Type":"MediaServer",
"Source":"upnp-uuid:55076f6e-6b79-4d65-64b4-d8d385e9628e"
},
{
"Type":"RemoteUIServerDevice",
"Source":"upnp-uuid:57076f6e-6b79-4d65-64b4-d8d385e9628e"
}
],
"IPv4Address":[
],
"IPv6Address":[
],
"Children":[
{
"Key":"uuid:55076f6e-6b79-4d65-64b4-d8d385e9628e",
"DiscoverySource":"upnpDev",
"Name":"Serveur M\E9dia",
"DeviceType":"",
"Active":false,
"Tags":"upnp root logical",
"LastConnection":"2014-11-20T17:00:22Z",
"LastChanged":"2014-11-20T17:00:33Z",
"Type":"urn:schemas-upnp-org:device:MediaServer:1",
"Manufacturer":"PacketVideo",
"ManufacturerURL":"http://www.pv.com",
"ModelDescription":"DLNA 1.5 Digital Media Server",
"ModelName":"Serveur M\E9dia Orange",
"ModelNumber":"6.0.30",
"ModelURL":"http://assistance.orange.fr/3512.php",
"SerialNumber":"6.0.30",
"UDN":"uuid:55076f6e-6b79-4d65-64b4-d8d385e9628e",
"UPC":"",
"PresentationURL":"http://192.168.1.22:9000/",
"Server":"Windows NT/5.0, UPnP/1.0, pvConnect UPnP SDK/1.0, TwonkyMedia UPnP SDK/1.1",
"Index":"34",
"Names":[
{
"Name":"device_34",
"Source":"default"
},
{
"Name":"Serveur M\E9dia",
"Source":"upnp"
}
],
"DeviceTypes":[
],
"Service":[
{
"ServiceType":"urn:schemas-upnp-org:service:ConnectionManager:1",
"ServiceId":"urn:upnp-org:serviceId:ConnectionManager",
"SCPDURL":"/TMSConnectionManager.xml",
"ControlURL":"/TMSConnectionManager/Control",
"EventSubURL":"/TMSConnectionManager/Event"
},
{
"ServiceType":"urn:schemas-upnp-org:service:ContentDirectory:1",
"ServiceId":"urn:upnp-org:serviceId:ContentDirectory",
"SCPDURL":"/TMSContentDirectory.xml",
"ControlURL":"/TMSContentDirectory/Control",
"EventSubURL":"/TMSContentDirectory/Event"
},
{
"ServiceType":"urn:microsoft.com:service:X_MS_MediaReceiverRegistrar:1",
"ServiceId":"urn:microsoft.com:serviceId:X_MS_MediaReceiverRegistrar",
"SCPDURL":"/TMSMediaReceiverRegistrar.xml",
"ControlURL":"/TMSMediaReceiverRegistrar/Control",
"EventSubURL":"/TMSMediaReceiverRegistrar/Event"
}
]
},
{
"Key":"uuid:57076f6e-6b79-4d65-64b4-d8d385e9628e",
"DiscoverySource":"upnpDev",
"Name":"Twonky NMC Stationary [sahnlpt0077]",
"DeviceType":"",
"Active":false,
"Tags":"upnp root logical",
"LastConnection":"2014-11-20T17:00:22Z",
"LastChanged":"2014-11-20T17:00:33Z",
"Type":"urn:schemas-upnp-org:device:RemoteUIServerDevice:1",
"Manufacturer":"PacketVideo",
"ManufacturerURL":"http://www.pv.com/",
"ModelDescription":"Twonky Network Media Controller Stationary",
"ModelName":"Twonky NMC Stationary",
"ModelNumber":"6.0.30",
"ModelURL":"http://www.twonky.com/",
"SerialNumber":"6.0.30",
"UDN":"uuid:57076f6e-6b79-4d65-64b4-d8d385e9628e",
"UPC":"",
"PresentationURL":"",
"Server":"Windows NT/5.0, UPnP/1.0, pvConnect UPnP SDK/1.0, TwonkyMedia UPnP SDK/1.1",
"Index":"35",
"Names":[
{
"Name":"device_35",
"Source":"default"
},
{
"Name":"Twonky NMC Stationary [sahnlpt0077]",
"Source":"upnp"
}
],
"DeviceTypes":[
],
"Service":[
{
"ServiceType":"urn:schemas-upnp-org:service:RemoteUIServer:1",
"ServiceId":"urn:upnp-org:serviceId:RemoteUIServer",
"SCPDURL":"/RemoteUIServer.xml",
"ControlURL":"/RemoteUIServer/Control",
"EventSubURL":"/RemoteUIServer/Event"
}
]
}
]
},
{
"Key":"BC:F2:AF:48:A0:66",
"DiscoverySource":"import",
"Name":"PC-12",
"DeviceType":"HomePlug",
"Active":true,
"Tags":"lan mac physical hnid homeplug_av atheros orange eth",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"2014-11-20T16:51:03Z",
"PhysAddress":"BC:F2:AF:48:A0:66",
"Ageing":false,
"Layer2Interface":"eth0",
"AveragePhyTx":0,
"AveragePhyRx":0,
"Manufacturer":"France Telecom Liveplug HD+ [MT2330;P:2330]",
"User":"Intellon Enabled Product",
"Version":"INT6000-MAC-4-4-4405-00-4497-20101201-FINAL-B",
"DeviceId":3,
"Index":"12",
"Actions":[
{
"Function":"setName",
"Name":"Edit Name",
"Arguments":[
{
"Name":"name",
"Type":"string",
"Mandatory":true
},
{
"Name":"source",
"Type":"string",
"Mandatory":false
}
]
}
],
"Names":[
{
"Name":"PC-12",
"Source":"default"
},
{
"Name":"France Telecom Liveplug HD+ [MT2330;P:2330]",
"Source":"homeplug"
}
],
"DeviceTypes":[
{
"Type":"HomePlug",
"Source":"webui"
},
{
"Type":"HomePlug",
"Source":"plc"
}
],
"Children":[
{
"Key":"BC:F2:AF:31:2F:D1",
"DiscoverySource":"import",
"Name":"France Telecom Liveplug HD+ [MT2330]",
"DeviceType":"HomePlug",
"Active":true,
"Tags":"lan mac physical hnid homeplug_av atheros orange",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"2014-11-26T16:57:27Z",
"PhysAddress":"BC:F2:AF:31:2F:D1",
"Ageing":false,
"Layer2Interface":"eth0",
"AveragePhyTx":49,
"AveragePhyRx":46,
"Manufacturer":"France Telecom Liveplug HD+ [MT2330]",
"User":"Intellon Enabled Product",
"Version":"INT6000-MAC-4-4-4405-00-4497-20101201-FINAL-B",
"DeviceId":3,
"Index":"20",
"Actions":[
{
"Function":"setName",
"Name":"Edit Name",
"Arguments":[
{
"Name":"name",
"Type":"string",
"Mandatory":true
},
{
"Name":"source",
"Type":"string",
"Mandatory":false
}
]
}
],
"Names":[
{
"Name":"PC-20",
"Source":"default"
},
{
"Name":"France Telecom Liveplug HD+ [MT2330]",
"Source":"homeplug"
}
],
"DeviceTypes":[
{
"Type":"HomePlug",
"Source":"webui"
},
{
"Type":"HomePlug",
"Source":"plc"
}
],
"Children":[
{
"Key":"00:1E:33:DF:F0:37",
"DiscoverySource":"bridge",
"Name":"sahnlpt0060",
"DeviceType":"Computer",
"Active":true,
"Tags":"lan edev mac physical eth ipv4 ipv6 dhcp",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"2014-11-26T16:57:27Z",
"PhysAddress":"00:1E:33:DF:F0:37",
"Ageing":false,
"Layer2Interface":"eth0",
"IPAddress":"192.168.1.103",
"IPAddressSource":"DHCP",
"VendorClassID":"MSFT 5.0",
"UserClassID":"",
"ClientID":"01:00:1E:33:DF:F0:37",
"SerialNumber":"",
"ProductClass":"",
"OUI":"",
"Index":"44",
"Actions":[
{
"Function":"setName",
"Name":"Edit Name",
"Arguments":[
{
"Name":"name",
"Type":"string",
"Mandatory":true
},
{
"Name":"source",
"Type":"string",
"Mandatory":false
}
]
}
],
"Names":[
{
"Name":"PC-44",
"Source":"default"
},
{
"Name":"sahnlpt0060",
"Source":"dhcp"
}
],
"DeviceTypes":[
{
"Type":"Computer",
"Source":"default"
},
{
"Type":"Computer",
"Source":"dhcp"
}
],
"IPv4Address":[
{
"Address":"192.168.1.103",
"Status":"reachable",
"Scope":"global",
"AddressSource":"DHCP",
"Reserved":false
}
],
"IPv6Address":[
]
}
]
}
]
},
{
"Key":"4C:17:EB:F4:47:A2",
"DiscoverySource":"import",
"Name":"decodeur",
"DeviceType":"stb",
"Active":true,
"Tags":"lan mac physical edev eth ipv4 ipv6 dhcp stb orange upnp",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"2014-11-20T16:56:26Z",
"PhysAddress":"4C:17:EB:F4:47:A2",
"Ageing":false,
"Layer2Interface":"eth0",
"IPAddress":"192.168.1.10",
"IPAddressSource":"DHCP",
"VendorClassID":"sagem",
"UserClassID":"STB_MLTV_UHD86",
"ClientID":"01:4C:17:EB:F4:47:A2",
"SerialNumber":"",
"ProductClass":"",
"OUI":"",
"Index":"3",
"Actions":[
{
"Function":"setName",
"Name":"Edit Name",
"Arguments":[
{
"Name":"name",
"Type":"string",
"Mandatory":true
},
{
"Name":"source",
"Type":"string",
"Mandatory":false
}
]
}
],
"Names":[
{
"Name":"decodeur",
"Source":"default"
},
{
"Name":"decodeur",
"Source":"webui"
},
{
"Name":"STB_MLTV_UHD86-1",
"Source":"UserClassID"
}
],
"DeviceTypes":[
{
"Type":"stb",
"Source":"webui"
},
{
"Type":"SetTopBox",
"Source":"dhcp"
},
{
"Type":"Basic",
"Source":"upnp-uuid:6756c12a-f729-11de-a71a-4c17ebf447a2"
}
],
"IPv4Address":[
{
"Address":"192.168.1.10",
"Status":"reachable",
"Scope":"global",
"AddressSource":"DHCP",
"Reserved":false
}
],
"IPv6Address":[
],
"Children":[
{
"Key":"uuid:6756c12a-f729-11de-a71a-4c17ebf447a2",
"DiscoverySource":"upnpDev",
"Name":"d\E9codeur TV d'Orange-1",
"DeviceType":"",
"Active":true,
"Tags":"upnp root logical",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"2014-11-20T16:56:26Z",
"Type":"urn:schemas-upnp-org:device:Basic:1",
"Manufacturer":"SAGEM",
"ManufacturerURL":"",
"ModelDescription":"",
"ModelName":"UHD86",
"ModelNumber":"",
"ModelURL":"",
"SerialNumber":"",
"UDN":"uuid:6756c12a-f729-11de-a71a-4c17ebf447a2",
"UPC":"",
"PresentationURL":"",
"Server":"Unspecified, UPnP/1.0, Unspecified",
"Index":"40",
"Names":[
{
"Name":"device_40",
"Source":"default"
},
{
"Name":"d\E9codeur TV d'Orange-1",
"Source":"upnp"
}
],
"DeviceTypes":[
],
"Service":[
{
"ServiceType":"urn:schemas-orange-com:service:X_OrangeSTBRemoteControl:1",
"ServiceId":"urn:orange-com:serviceId:X_OrangeSTBRemoteControl",
"SCPDURL":"/X_OrangeSTBRemoteControlDescription.xml",
"ControlURL":"/remoteControl/cmd",
"EventSubURL":""
}
]
}
]
},
{
"Key":"00:27:19:B1:0C:99",
"DiscoverySource":"bridge",
"Name":"sahncmp0074",
"DeviceType":"Computer",
"Active":true,
"Tags":"lan edev mac physical eth ipv4 ipv6 dhcp",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"2014-11-26T17:23:24Z",
"PhysAddress":"00:27:19:B1:0C:99",
"Ageing":false,
"Layer2Interface":"eth0",
"IPAddress":"192.168.1.12",
"IPAddressSource":"DHCP",
"VendorClassID":"MSFT 5.0",
"UserClassID":"",
"ClientID":"01:00:27:19:B1:0C:99",
"SerialNumber":"",
"ProductClass":"",
"OUI":"",
"Index":"43",
"Actions":[
{
"Function":"setName",
"Name":"Edit Name",
"Arguments":[
{
"Name":"name",
"Type":"string",
"Mandatory":true
},
{
"Name":"source",
"Type":"string",
"Mandatory":false
}
]
}
],
"Names":[
{
"Name":"PC-43",
"Source":"default"
},
{
"Name":"sahncmp0074",
"Source":"dhcp"
}
],
"DeviceTypes":[
{
"Type":"Computer",
"Source":"default"
},
{
"Type":"Computer",
"Source":"dhcp"
}
],
"IPv4Address":[
{
"Address":"192.168.1.12",
"Status":"reachable",
"Scope":"global",
"AddressSource":"DHCP",
"Reserved":false
}
],
"IPv6Address":[
{
"Address":"fe80::8158:fd7b:b7fe:8d80",
"Status":"reachable",
"Scope":"link",
"AddressSource":"Static"
}
]
}
]
}
]
},
{
"Key":"DECT",
"DiscoverySource":"voice_handsets",
"Name":"DECT",
"DeviceType":"Phone",
"Active":true,
"Tags":"voice interface dect physical",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"0001-01-01T00:00:00Z",
"Index":"26",
"Actions":[
{
"Function":"ring",
"Name":"Ring all"
},
{
"Function":"startPairing",
"Name":"Pair handset"
}
],
"Names":[
{
"Name":"DECT",
"Source":"default"
}
],
"DeviceTypes":[
{
"Type":"Phone",
"Source":"tags"
}
],
"Children":[
{
"Key":"HS0119B28775",
"DiscoverySource":"voice_handsets",
"Name":"DECT3",
"DeviceType":"Phone",
"Active":true,
"Tags":"voice handset dect physical",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"0001-01-01T00:00:00Z",
"DirectoryNumber":"204",
"EndpointType":"DECT CAT-iq 2.0",
"OutgoingTrunkLine":"LINE3",
"Index":"31",
"Actions":[
{
"Function":"setName",
"Name":"Edit Name",
"Arguments":[
{
"Name":"name",
"Type":"string",
"Mandatory":true
},
{
"Name":"source",
"Type":"string",
"Mandatory":false
}
]
},
{
"Function":"unPair",
"Name":"Unpair handset"
},
{
"Function":"ring",
"Name":"Ring handset"
}
],
"Names":[
{
"Name":"HS0119B28775",
"Source":"default"
},
{
"Name":"DECT3",
"Source":"handset"
},
{
"Name":"DECT3",
"Source":"webui"
}
],
"DeviceTypes":[
{
"Type":"Phone",
"Source":"tags"
},
{
"Type":"Computer",
"Source":"default"
}
]
},
{
"Key":"HS00A7A67E31",
"DiscoverySource":"voice_handsets",
"Name":"DECT2",
"DeviceType":"Phone",
"Active":true,
"Tags":"voice handset dect physical",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"0001-01-01T00:00:00Z",
"DirectoryNumber":"203",
"EndpointType":"DECT CAT-iq 1.0",
"OutgoingTrunkLine":"LINE3",
"Index":"32",
"Actions":[
{
"Function":"setName",
"Name":"Edit Name",
"Arguments":[
{
"Name":"name",
"Type":"string",
"Mandatory":true
},
{
"Name":"source",
"Type":"string",
"Mandatory":false
}
]
},
{
"Function":"unPair",
"Name":"Unpair handset"
},
{
"Function":"ring",
"Name":"Ring handset"
}
],
"Names":[
{
"Name":"HS00A7A67E31",
"Source":"default"
},
{
"Name":"DECT2",
"Source":"handset"
},
{
"Name":"DECT2",
"Source":"webui"
}
],
"DeviceTypes":[
{
"Type":"Phone",
"Source":"tags"
},
{
"Type":"Computer",
"Source":"default"
}
]
},
{
"Key":"HS0242D26D95",
"DiscoverySource":"voice_handsets",
"Name":"DECT4",
"DeviceType":"Phone",
"Active":true,
"Tags":"voice handset dect physical",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"0001-01-01T00:00:00Z",
"DirectoryNumber":"205",
"EndpointType":"DECT CAT-iq 1.0",
"OutgoingTrunkLine":"LINE3",
"Index":"33",
"Actions":[
{
"Function":"setName",
"Name":"Edit Name",
"Arguments":[
{
"Name":"name",
"Type":"string",
"Mandatory":true
},
{
"Name":"source",
"Type":"string",
"Mandatory":false
}
]
},
{
"Function":"unPair",
"Name":"Unpair handset"
},
{
"Function":"ring",
"Name":"Ring handset"
}
],
"Names":[
{
"Name":"HS0242D26D95",
"Source":"default"
},
{
"Name":"DECT4",
"Source":"handset"
},
{
"Name":"DECT4",
"Source":"webui"
}
],
"DeviceTypes":[
{
"Type":"Phone",
"Source":"tags"
},
{
"Type":"Computer",
"Source":"default"
}
]
}
]
},
{
"Key":"FXS",
"DiscoverySource":"voice_handsets",
"Name":"FXS",
"DeviceType":"Phone",
"Active":true,
"Tags":"voice interface physical",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"0001-01-01T00:00:00Z",
"Index":"27",
"Actions":[
{
"Function":"ring",
"Name":"Ring all"
}
],
"Names":[
{
"Name":"FXS",
"Source":"default"
}
],
"DeviceTypes":[
{
"Type":"Phone",
"Source":"tags"
}
],
"Children":[
{
"Key":"FXS1",
"DiscoverySource":"voice_handsets",
"Name":"FXS1",
"DeviceType":"Phone",
"Active":true,
"Tags":"voice handset physical",
"LastConnection":"2014-11-26T17:23:52Z",
"LastChanged":"0001-01-01T00:00:00Z",
"DirectoryNumber":"201",
"EndpointType":"FXS",
"OutgoingTrunkLine":"LINE3",
"Index":"30",
"Actions":[
{
"Function":"setName",
"Name":"Edit Name",
"Arguments":[
{
"Name":"name",
"Type":"string",
"Mandatory":true
},
{
"Name":"source",
"Type":"string",
"Mandatory":false
}
]
},
{
"Function":"ring",
"Name":"Ring handset"
}
],
"Names":[
{
"Name":"FXS1",
"Source":"default"
},
{
"Name":"FXS1",
"Source":"handset"
},
{
"Name":"FXS1",
"Source":"webui"
}
],
"DeviceTypes":[
{
"Type":"Phone",
"Source":"tags"
},
{
"Type":"Computer",
"Source":"default"
}
]
}
]
}
]
};
OrangeMapper.unitTest3={


			"Key":"HGW",
			"DiscoverySource":"selfhgw",
			"Name":"LIVEBOX",
			"DeviceType":"",
			"Active":true,
			"Tags":"self hgw physical wan",
			"LastConnection":"0001-01-01T00:00:00Z",
			"LastChanged":"2015-02-02T10:38:19Z",
			"Master":"",
			"Manufacturer":"Sagemcom",
			"ModelName":"SagemcomFast3965_LB2.8",
			"Description":"SagemcomFast3965_LB2.8 Sagemcom fr",
			"SerialNumber":"NQ1223404010117",
			"ProductClass":"Livebox 3",
			"HardwareVersion":"SG_LB3_1.2.0",
			"SoftwareVersion":"SG30_h323-fr-5.12.4.2",
			"BootLoaderVersion":"",
			"FirewallLevel":"Medium",
			"LinkType":"dsl",
			"LinkState":"up",
			"ConnectionProtocol":"ppp",
			"ConnectionState":"Connected",
			"LastConnectionError":"ERROR_NONE",
			"ConnectionIPv4Address":"92.154.80.235",
			"ConnectionIPv6Address":"",
			"RemoteGateway":"193.253.160.3",
			"DNSServers":"80.10.246.136,81.253.149.6",
			"Internet":true,
			"IPTV":true,
			"Telephony":true,
			"Index":"1",
			"Alternative":[
			],
			"Names":[
			{
			"Name":"LIVEBOX",
			"Source":"default"
			}
			],
			"DeviceTypes":[
			],
			"Children":[
			{
			"Key":"DECT",
			"DiscoverySource":"voice_handsets",
			"Name":"DECT",
			"DeviceType":"Phone",
			"Active":true,
			"Tags":"voice interface dect physical",
			"LastConnection":"2015-02-02T15:26:49Z",
			"LastChanged":"0001-01-01T00:00:00Z",
			"Master":"",
			"Index":"2",
			"Actions":[
			{
			"Function":"ring",
			"Name":"Ring all"
			},
			{
			"Function":"startPairing",
			"Name":"Pair handset"
			}
			],
			"Alternative":[
			],
			"Names":[
			{
			"Name":"DECT",
			"Source":"default"
			}
			],
			"DeviceTypes":[
			{
			"Type":"Phone",
			"Source":"tags"
			}
			],
			"Children":[
			{
			"Key":"HS0119B28309",
			"DiscoverySource":"voice_handsets",
			"Name":"DECT1",
			"DeviceType":"Phone",
			"Active":true,
			"Tags":"voice handset dect physical",
			"LastConnection":"2015-02-02T15:26:49Z",
			"LastChanged":"0001-01-01T00:00:00Z",
			"Master":"",
			"DirectoryNumber":"202",
			"EndpointType":"DECT CAT-iq 2.0",
			"OutgoingTrunkLine":"LINE3",
			"Index":"12",
			"Actions":[
			{
			"Function":"setName",
			"Name":"Edit Name",
			"Arguments":[
			{
			"Name":"name",
			"Type":"string",
			"Mandatory":true
			},
			{
			"Name":"source",
			"Type":"string",
			"Mandatory":false
			}
			]
			},
			{
			"Function":"unPair",
			"Name":"Unpair handset"
			},
			{
			"Function":"ring",
			"Name":"Ring handset"
			}
			],
			"Alternative":[
			],
			"Names":[
			{
			"Name":"HS0119B28309",
			"Source":"default"
			},
			{
			"Name":"DECT1",
			"Source":"handset"
			},
			{
			"Name":"DECT1",
			"Source":"webui"
			}
			],
			"DeviceTypes":[
			{
			"Type":"Phone",
			"Source":"tags"
			},
			{
			"Type":"Computer",
			"Source":"default"
			}
			]
			}
			]
			},
			{
			"Key":"FXS",
			"DiscoverySource":"voice_handsets",
			"Name":"FXS",
			"DeviceType":"Phone",
			"Active":true,
			"Tags":"voice interface physical",
			"LastConnection":"2015-02-02T15:26:49Z",
			"LastChanged":"0001-01-01T00:00:00Z",
			"Master":"",
			"Index":"3",
			"Actions":[
			{
			"Function":"ring",
			"Name":"Ring all"
			}
			],
			"Alternative":[
			],
			"Names":[
			{
			"Name":"FXS",
			"Source":"default"
			}
			],
			"DeviceTypes":[
			{
			"Type":"Phone",
			"Source":"tags"
			}
			],
			"Children":[
			{
			"Key":"FXS1",
			"DiscoverySource":"voice_handsets",
			"Name":"FXS1",
			"DeviceType":"Phone",
			"Active":true,
			"Tags":"voice handset physical",
			"LastConnection":"2015-02-02T15:26:49Z",
			"LastChanged":"0001-01-01T00:00:00Z",
			"Master":"",
			"DirectoryNumber":"201",
			"EndpointType":"FXS",
			"OutgoingTrunkLine":"LINE3",
			"Index":"11",
			"Actions":[
			{
			"Function":"setName",
			"Name":"Edit Name",
			"Arguments":[
			{
			"Name":"name",
			"Type":"string",
			"Mandatory":true
			},
			{
			"Name":"source",
			"Type":"string",
			"Mandatory":false
			}
			]
			},
			{
			"Function":"ring",
			"Name":"Ring handset"
			}
			],
			"Alternative":[
			],
			"Names":[
			{
			"Name":"FXS1",
			"Source":"default"
			},
			{
			"Name":"FXS1",
			"Source":"handset"
			},
			{
			"Name":"FXS1",
			"Source":"webui"
			}
			],
			"DeviceTypes":[
			{
			"Type":"Phone",
			"Source":"tags"
			},
			{
			"Type":"Computer",
			"Source":"default"
			}
			]
			}
			]
			},
			{
			"Key":"sysbus_USBHost",
			"DiscoverySource":"selfusb",
			"Name":"USBHost",
			"DeviceType":"",
			"Active":true,
			"Tags":"self usb interface sysbus",
			"LastConnection":"2015-02-02T15:26:49Z",
			"LastChanged":"0001-01-01T00:00:00Z",
			"Master":"",
			"BusName":"sysbus",
			"Index":"4",
			"Alternative":[
			],
			"Names":[
			{
			"Name":"USBHost",
			"Source":"default"
			}
			],
			"DeviceTypes":[
			],
			"Children":[
			{
			"Key":"Port2",
			"DiscoverySource":"selfusb",
			"Name":"Port2",
			"DeviceType":"",
			"Active":true,
			"Tags":"self usb port interface sysbus",
			"LastConnection":"2015-02-02T15:26:49Z",
			"LastChanged":"0001-01-01T00:00:00Z",
			"Master":"",
			"BusName":"sysbus",
			"Port":0,
			"USBHost":"sysbus.USBHosts.Host.1",
			"Index":"9",
			"Alternative":[
			],
			"Names":[
			{
			"Name":"Port2",
			"Source":"default"
			}
			],
			"DeviceTypes":[
			]
			},
			{
			"Key":"Port1",
			"DiscoverySource":"selfusb",
			"Name":"Port1",
			"DeviceType":"",
			"Active":true,
			"Tags":"self usb port interface sysbus",
			"LastConnection":"2015-02-02T15:26:49Z",
			"LastChanged":"0001-01-01T00:00:00Z",
			"Master":"",
			"BusName":"sysbus",
			"Port":1,
			"USBHost":"sysbus.USBHosts.Host.1",
			"Index":"10",
			"Alternative":[
			],
			"Names":[
			{
			"Name":"Port1",
			"Source":"default"
			}
			],
			"DeviceTypes":[
			]
			}
			]
			},
			{
			"Key":"lan",
			"DiscoverySource":"selflan",
			"Name":"lan",
			"DeviceType":"",
			"Active":true,
			"Tags":"self lan bridge mac nemo interface ipv4 ipv6 dhcpserver upnp",
			"LastConnection":"2015-02-02T15:26:49Z",
			"LastChanged":"2015-02-02T10:26:16Z",
			"Master":"",
			"PhysAddress":"3C:81:D8:CE:BA:72",
			"Ageing":false,
			"Layer2Interface":"",
			"NetDevName":"bridge",
			"NetDevIndex":9,
			"IPAddress":"192.168.1.1",
			"IPAddressSource":"self",
			"DHCPv4ServerPool":"default",
			"DHCPv4ServerEnable":true,
			"DHCPv4ServerMinAddress":"192.168.1.10",
			"DHCPv4ServerMaxAddress":"192.168.1.150",
			"DHCPv4ServerNetmask":"255.255.255.0",
			"DHCPv4DomainName":"home",
			"Index":"5",
			"Alternative":[
			],
			"Names":[
			{
			"Name":"lan",
			"Source":"default"
			}
			],
			"DeviceTypes":[
			],
			"IPv4Address":[
			{
			"Address":"192.168.1.1",
			"Status":"reachable",
			"Scope":"global",
			"AddressSource":"self",
			"Reserved":true
			}
			],
			"IPv6Address":[
			{
			"Address":"fe80::3e81:d8ff:fece:ba72",
			"Status":"reachable",
			"Scope":"link",
			"AddressSource":"self"
			}
			],
			"Children":[
			{
			"Key":"wl0",
			"DiscoverySource":"selflan",
			"Name":"wl0",
			"DeviceType":"",
			"Active":true,
			"Tags":"self lan vap wifi nemo interface",
			"LastConnection":"2015-02-02T15:26:49Z",
			"LastChanged":"2015-02-02T13:50:27Z",
			"Master":"",
			"NetDevName":"wl0",
			"NetDevIndex":12,
			"SSID":"Livebox-BA72BA72",
			"BSSID":"3C:81:D8:CE:BA:72",
			"OperatingFrequencyBand":"2.4GHz",
			"Index":"6",
			"Alternative":[
			],
			"Names":[
			{
			"Name":"wl0",
			"Source":"default"
			}
			],
			"DeviceTypes":[
			]
			},
			{
			"Key":"wl1",
			"DiscoverySource":"selflan",
			"Name":"wl1",
			"DeviceType":"",
			"Active":true,
			"Tags":"self lan vap wifi nemo interface",
			"LastConnection":"2015-02-02T15:26:49Z",
			"LastChanged":"2015-02-02T13:56:28Z",
			"Master":"",
			"NetDevName":"wl1",
			"NetDevIndex":15,
			"SSID":"Livebox-BA72BA72",
			"BSSID":"3C:81:D8:CE:BA:73",
			"OperatingFrequencyBand":"5GHz",
			"Index":"7",
			"Alternative":[
			],
			"Names":[
			{
			"Name":"wl1",
			"Source":"default"
			}
			],
			"DeviceTypes":[
			],
			"Children":[
			{
			"Key":"1C:14:48:DA:F3:53",
			"DiscoverySource":"bridge",
			"Name":"liveplug.Wi-Fi.F352",
			"DeviceType":"LivePlug WiFi",
			"Active":true,
			"Tags":"lan edev mac physical wifi ipv4 ipv6 wifi_bridge eth dhcp manageable orange",
			"LastConnection":"2015-02-02T15:26:49Z",
			"LastChanged":"2015-02-02T15:18:07Z",
			"Master":"1C:14:48:DA:F3:53",
			"PhysAddress":"1C:14:48:DA:F3:53",
			"Ageing":false,
			"Layer2Interface":"wl1",
			"IPAddress":"192.168.1.16",
			"IPAddressSource":"DHCP",
			"Index":"16",
			"Actions":[
			{
			"Function":"setName",
			"Name":"Edit Name",
			"Arguments":[
			{
			"Name":"name",
			"Type":"string",
			"Mandatory":true
			},
			{
			"Name":"source",
			"Type":"string",
			"Mandatory":false
			}
			]
			}
			],
			"VendorClassID":"Motorola.AccessPoint.VAP2404E",
			"UserClassID":"",
			"ClientID":"01:1C:14:48:DA:F3:52",
			"SerialNumber":"M91136YA085D",
			"ProductClass":"VAP2404E",
			"OUI":"0024A0",
			"Alternative":[
			"1C:14:48:DA:F3:52"
			],
			"Names":[
			{
			"Name":"wifi bridge",
			"Source":"default"
			},
			{
			"Name":"liveplug.Wi-Fi.F352",
			"Source":"dhcp"
			}
			],
			"DeviceTypes":[
			{
			"Type":"WiFi Bridge",
			"Source":"default"
			},
			{
			"Type":"LivePlug WiFi",
			"Source":"dhcp"
			}
			],
			"IPv4Address":[
			{
			"Address":"192.168.1.16",
			"Status":"reachable",
			"Scope":"global",
			"AddressSource":"DHCP",
			"Reserved":false
			}
			],
			"IPv6Address":[
			{
			"Address":"fe80::1e14:48ff:feda:f352",
			"Status":"reachable",
			"Scope":"link",
			"AddressSource":"Static"
			}
			],
			"Children":[
			{
			"Key":"D8:6C:E9:3C:91:8C",
			"DiscoverySource":"bridge",
			"Name":"PC_MLTV_IHD92",
			"DeviceType":"SetTopBox",
			"Active":true,
			"Tags":"lan edev mac physical eth ipv4 ipv6 dhcp stb orange upnp",
			"LastConnection":"2015-02-02T15:26:49Z",
			"LastChanged":"2015-02-02T15:18:08Z",
			"Master":"",
			"PhysAddress":"D8:6C:E9:3C:91:8C",
			"Ageing":false,
			"Layer2Interface":"eth0",
			"IPAddress":"192.168.1.11",
			"IPAddressSource":"DHCP",
			"VendorClassID":"sagem",
			"UserClassID":"PC_MLTV_IHD92",
			"ClientID":"01:D8:6C:E9:3C:91:8C",
			"SerialNumber":"",
			"ProductClass":"",
			"OUI":"",
			"Index":"19",
			"Actions":[
			{
			"Function":"setName",
			"Name":"Edit Name",
			"Arguments":[
			{
			"Name":"name",
			"Type":"string",
			"Mandatory":true
			},
			{
			"Name":"source",
			"Type":"string",
			"Mandatory":false
			}
			]
			}
			],
			"Alternative":[
			],
			"Names":[
			{
			"Name":"PC-19",
			"Source":"default"
			},
			{
			"Name":"PC_MLTV_IHD92",
			"Source":"UserClassID"
			}
			],
			"DeviceTypes":[
			{
			"Type":"Computer",
			"Source":"default"
			},
			{
			"Type":"SetTopBox",
			"Source":"dhcp"
			},
			{
			"Type":"Basic",
			"Source":"upnp-uuid:204a2782-23b7-11e2-ac77-d86ce93c918c"
			}
			],
			"IPv4Address":[
			{
			"Address":"192.168.1.11",
			"Status":"reachable",
			"Scope":"global",
			"AddressSource":"DHCP",
			"Reserved":false
			}
			],
			"IPv6Address":[
			{
			"Address":"fe80::da6c:e9ff:fe3c:918c",
			"Status":"reachable",
			"Scope":"link",
			"AddressSource":"Static"
			}
			],
			"Children":[
			{
			"Key":"uuid:204a2782-23b7-11e2-ac77-d86ce93c918c",
			"DiscoverySource":"upnpDev",
			"Name":"décodeur TV d'Orange",
			"DeviceType":"",
			"Active":true,
			"Tags":"upnp root logical",
			"LastConnection":"2015-02-02T15:26:49Z",
			"LastChanged":"2015-02-02T15:17:18Z",
			"Master":"",
			"Type":"urn:schemas-upnp-org:device:Basic:1",
			"Manufacturer":"SAGEM",
			"ManufacturerURL":"",
			"ModelDescription":"",
			"ModelName":"IHD92",
			"ModelNumber":"",
			"ModelURL":"",
			"SerialNumber":"",
			"UDN":"uuid:204a2782-23b7-11e2-ac77-d86ce93c918c",
			"UPC":"",
			"PresentationURL":"",
			"Server":"UPnP/1.0, Portable SDK for UPnP devices",
			"Index":"20",
			"Alternative":[
			],
			"Names":[
			{
			"Name":"device_20",
			"Source":"default"
			},
			{
			"Name":"décodeur TV d'Orange",
			"Source":"upnp"
			}
			],
			"DeviceTypes":[
			],
			"Service":[
			{
			"ServiceType":"urn:schemas-orange-com:service:X_OrangeSTBRemoteControl:1",
			"ServiceId":"urn:orange-com:serviceId:X_OrangeSTBRemoteControl",
			"SCPDURL":"/X_OrangeSTBRemoteControlDescription.xml",
			"ControlURL":"/remoteControl/cmd",
			"EventSubURL":"/remoteControl/notifyEvent"
			}
			]
			}
			]
			}
			]
			},
			{
			"Key":"84:B1:53:AE:C6:C5",
			"DiscoverySource":"bridge",
			"Name":"Wei",
			"DeviceType":"Computer",
			"Active":false,
			"Tags":"lan edev mac physical wifi ipv4 ipv6 dhcp",
			"LastConnection":"2015-02-02T13:59:58Z",
			"LastChanged":"2015-02-02T13:59:59Z",
			"Master":"",
			"PhysAddress":"84:B1:53:AE:C6:C5",
			"Ageing":true,
			"Layer2Interface":"wl1",
			"IPAddress":"192.168.1.12",
			"IPAddressSource":"DHCP",
			"VendorClassID":"",
			"UserClassID":"",
			"ClientID":"01:84:B1:53:AE:C6:C5",
			"SerialNumber":"",
			"ProductClass":"",
			"OUI":"",
			"Index":"18",
			"Actions":[
			{
			"Function":"setName",
			"Name":"Edit Name",
			"Arguments":[
			{
			"Name":"name",
			"Type":"string",
			"Mandatory":true
			},
			{
			"Name":"source",
			"Type":"string",
			"Mandatory":false
			}
			]
			}
			],
			"Alternative":[
			],
			"Names":[
			{
			"Name":"PC-18",
			"Source":"default"
			},
			{
			"Name":"Wei",
			"Source":"dhcp"
			},
			{
			"Name":"Wei",
			"Source":"mdns"
			}
			],
			"DeviceTypes":[
			{
			"Type":"Computer",
			"Source":"default"
			}
			],
			"IPv4Address":[
			{
			"Address":"192.168.1.12",
			"Status":"not reachable",
			"Scope":"global",
			"AddressSource":"DHCP",
			"Reserved":true
			}
			],
			"IPv6Address":[
			]
			},
			{
			"Key":"0C:8B:FD:70:79:57",
			"DiscoverySource":"bridge",
			"Name":"PC-22",
			"DeviceType":"Computer",
			"Active":false,
			"Tags":"lan edev mac physical wifi ipv4 ipv6",
			"LastConnection":"2015-02-02T13:58:27Z",
			"LastChanged":"2015-02-02T13:58:28Z",
			"Master":"",
			"PhysAddress":"0C:8B:FD:70:79:57",
			"Ageing":true,
			"Layer2Interface":"wl1",
			"IPAddress":"",
			"IPAddressSource":"",
			"Index":"22",
			"Actions":[
			{
			"Function":"setName",
			"Name":"Edit Name",
			"Arguments":[
			{
			"Name":"name",
			"Type":"string",
			"Mandatory":true
			},
			{
			"Name":"source",
			"Type":"string",
			"Mandatory":false
			}
			]
			}
			],
			"Alternative":[
			],
			"Names":[
			{
			"Name":"PC-22",
			"Source":"default"
			}
			],
			"DeviceTypes":[
			{
			"Type":"Computer",
			"Source":"default"
			}
			],
			"IPv4Address":[
			],
			"IPv6Address":[
			]
			}
			]
			},
			{
			"Key":"eth0",
			"DiscoverySource":"selflan",
			"Name":"eth0",
			"DeviceType":"",
			"Active":true,
			"Tags":"self lan eth nemo interface",
			"LastConnection":"2015-02-02T15:26:49Z",
			"LastChanged":"2015-02-02T15:17:40Z",
			"Master":"",
			"MaxBitRateSupported":1000,
			"CurrentBitRate":100,
			"NetDevName":"eth0",
			"NetDevIndex":5,
			"Index":"8",
			"Alternative":[
			],
			"Names":[
			{
			"Name":"eth0",
			"Source":"default"
			}
			],
			"DeviceTypes":[
			],
			"Children":[
			{
			"Key":"00:80:C8:3C:0B:9E",
			"DiscoverySource":"bridge",
			"Name":"sahnlpt0223",
			"DeviceType":"Computer",
			"Active":true,
			"Tags":"lan edev mac physical eth ipv4 ipv6 mdns",
			"LastConnection":"2015-02-02T15:26:49Z",
			"LastChanged":"2015-02-02T15:17:50Z",
			"Master":"",
			"PhysAddress":"00:80:C8:3C:0B:9E",
			"Ageing":false,
			"Layer2Interface":"eth0",
			"IPAddress":"192.168.1.100",
			"IPAddressSource":"Static",
			"Index":"14",
			"Actions":[
			{
			"Function":"setName",
			"Name":"Edit Name",
			"Arguments":[
			{
			"Name":"name",
			"Type":"string",
			"Mandatory":true
			},
			{
			"Name":"source",
			"Type":"string",
			"Mandatory":false
			}
			]
			}
			],
			"Alternative":[
			],
			"Names":[
			{
			"Name":"PC-14",
			"Source":"default"
			},
			{
			"Name":"sahnlpt0223",
			"Source":"mdns"
			}
			],
			"DeviceTypes":[
			{
			"Type":"Computer",
			"Source":"default"
			},
			{
			"Type":"Computer",
			"Source":"mdns"
			}
			],
			"IPv4Address":[
			{
			"Address":"192.168.1.100",
			"Status":"reachable",
			"Scope":"global",
			"AddressSource":"Static",
			"Reserved":false
			}
			],
			"IPv6Address":[
			{
			"Address":"fe80::280:c8ff:fe3c:b9e",
			"Status":"reachable",
			"Scope":"link",
			"AddressSource":"Static"
			}
			],
			"mDNSService":[
			{
			"Name":"sahnlpt0223 [00:80:c8:3c:0b:9e]",
			"ServiceName":"_workstation._tcp",
			"Domain":"local",
			"Port":"9",
			"Text":""
			},
			{
			"Name":"Virtualization Host sahnlpt0223",
			"ServiceName":"_libvirt._tcp",
			"Domain":"local",
			"Port":"65535",
			"Text":""
			},
			{
			"Name":"sahnlpt0223",
			"ServiceName":"_udisks-ssh._tcp",
			"Domain":"local",
			"Port":"22",
			"Text":""
			}
			]
			}
			]
			},
			{
			"Key":"uuid:3a4a3f38-4b3f-fa4c-f948-3e39074a3f38",
			"DiscoverySource":"upnpDev",
			"Name":"WPS Access Point",
			"DeviceType":"",
			"Active":true,
			"Tags":"upnp root logical",
			"LastConnection":"2015-02-02T15:26:49Z",
			"LastChanged":"2015-02-02T10:38:44Z",
			"Master":"",
			"Type":"urn:schemas-wifialliance-org:device:WFADevice:1",
			"Manufacturer":"Sagemcom",
			"ManufacturerURL":"Sagemcom",
			"ModelDescription":"",
			"ModelName":"SagemcomFast3965_LB2.8",
			"ModelNumber":"SG_LB3_1.2.0",
			"ModelURL":"",
			"SerialNumber":"NQ12234FF",
			"UDN":"uuid:3a4a3f38-4b3f-fa4c-f948-3e39074a3f38",
			"UPC":"",
			"PresentationURL":"",
			"Server":"Unspecified, UPnP/1.0, Unspecified",
			"Index":"17",
			"Alternative":[
			],
			"Names":[
			{
			"Name":"device_17",
			"Source":"default"
			},
			{
			"Name":"WPS Access Point",
			"Source":"upnp"
			}
			],
			"DeviceTypes":[
			],
			"Service":[
			{
			"ServiceType":"urn:schemas-wifialliance-org:service:WFAWLANConfig:1",
			"ServiceId":"urn:wifialliance-org:serviceId:WFAWLANConfig1",
			"SCPDURL":"wps_scpd.xml",
			"ControlURL":"wps_control",
			"EventSubURL":"wps_event"
			},
			{
			"ServiceType":"urn:schemas-wifialliance-org:service:WFAWLANConfig:1",
			"ServiceId":"urn:wifialliance-org:serviceId:WFAWLANConfig1",
			"SCPDURL":"wps_scpd.xml",
			"ControlURL":"wps_control",
			"EventSubURL":"wps_event"
			}
			]
			}
			]
			}
			]

  
};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/admin/saveRestore.js */

Admin.SaveRestore = {};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/admin/saveRestore/reset.js */

/**
 * Administration Reset
 */

Admin.SaveRestore.Reset = Class.create(Sah.AuthenticatedForm,
/** @lends Admin.Save_Restore.Reset# */
{

	initialize: function ($super, form){
		$super(form);
		this.resetDelay = "5";
		this.factoryDefaults = "1";		
		this.progressBar = new Sah.Widget.ProgressBar("test-progress",{});
		$("bt_yes").observe("click",this.onReset.bind(this));              
		$("bt_no").observe("click",function(e){
			e.preventDefault();
			Sah.redirect('/supportLedsStatus.html');
			return false;
		});              
		document.observe('sah:translations:loaded',function(){          
			if($("linkspan-restore").select('a')&&$("linkspan-restore").select('a')[0])
				$("linkspan-restore").select('a')[0].href = Sah.link("/supportBackup.html");
		});
		
		this.needs("UserManagement.User", {
		    path: "sysbus.UserManagement:getUsers",
		    method : "execute"
		});
		
		this.form.disable();
		this.load();
	},
	
	objectsLoaded: function ()
	{
		this.fromObject(this.objects);
		this.form.enable();
		if($("linkspan-restore").select('a')&&$("linkspan-restore").select('a')[0])
			$("linkspan-restore").select('a')[0].href = Sah.link("/supportBackup.html");
        
        
        
	},
	
	onDisplayMsgBox: function(event)
	{
		event.stop(event);
		ctl.msgbox.Show(ctl.msgbox.QUESTION.YES_NO,t('support.restartreset.reset.info.question','X Are you sure to reset?'),undefined,(function(){
			this.onReset();
		}).bind(this)); 
	},
	
	onReset: function(){
		this.client.execute("sysbus.NMC:reset",
		{},
		{
			"onSuccess":this.whenSaved.bind(this),
			"onFailure":this.whenNotSaved.bind(this)
		} 
		);  
       
		return false;
	},
	
	whenSaved: function (obj){
		$('firststep').hide();
		$('endstep').show();
		
		var tmpUser = this.objects.UserManagement.User;
		var tmpRUser = this.objects.userRemoteAdmin;
		
		var rebootTime = 138000;
		var progressDelay = 1837;
				
		if (config.BUILD_PROJECT.indexOf("2.8") >= 0) {
			rebootTime = 105000;
			progressDelay = 1225;
		}
		
		
		this.progressBar.animate(progressDelay);
				
		setTimeout(function(){
			if (tmpUser) {
			      var login = Cookie.get('login');
			      tmpUser.each(function (user) {     
				  user.UserGroupParticipation = user.groups.join(" ");
				  if ((user.name == login) && user.UserGroupParticipation.indexOf("remoteadmin")>=0 && (user.name != "support")) {
				     tmpRUser = user;
				  }            
			      }, this);
			}			
			if (!tmpRUser){
			      Sah.detectReboot('/');
			}
		},rebootTime); 
		
	/*	this.progressBar.animate(1837);     
		setTimeout(function(){
			Sah.detectReboot('/')
		},138000);    */       
	},
	
	whenNotSaved: function (obj){
		this.logger.warn("Reset factory failed");
		this.logger.warn(obj);
	},
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/admin/saveRestore/save.js */

/**
 * Admin.Save & Restore
 */

Admin.SaveRestore.Save = Class.create(Sah.AuthenticatedForm,
/** @lends Admin.SaveRestore.Save# */
{

	initialize: function ($super, form)
	{
		$super(form);
		
		this.needs("UserManagement.User", {
			  path: "sysbus.UserManagement:getUsers",
			  method : "execute"
		});
		//add for Network backup/restore
		this.needs("NetworkConfig", {
			path: "sysbus.NMC.NetworkConfig:get", 
			method:"execute"
		});

		$('content').setStyle("visibility:hidden");
                //add for Network backup/restore
		$$(".saveRestore-disabled").each(Element.hide);
		$$(".saveRestore-enabled").each(Element.hide);
		$("bt_disable").observe("click", this.onDisableNetworkConfig.bind(this));
		$("bt_enable").observe("click", this.onEnableNetworkConfig.bind(this));
		this.load();
	},
	
	objectsLoaded: function () {
		// redirect if remote user
		this.redirectWhenRemote();
	},

	redirectWhenRemote: function () {
		if (this.objects.UserManagement.User){
			this.searchRAUser();	
			if (this.objects.userRemoteAdmin){
				Sah.redirect('/');
			}else{
				$('content').setStyle("visibility:visible");
				$("bt_save").observe("click", this.onSave.bind(this));
				//add for Network backup/restore
				 this.updateNetworkConfigStatus();
			}
		}else{
			Sah.redirect('/');
		}
	},
	
	searchRAUser: function () {
	    var login = Cookie.get('login');
	    this.objects.UserManagement.User.each(function (user) {     
		user.UserGroupParticipation = user.groups.join(" ");
		if ( (user.name == login) && user.UserGroupParticipation.indexOf("remoteadmin")>=0 && (user.name != "support") ) {
		    this.objects.userRemoteAdmin = user;
		}            
	    }, this);
	}, 
    
	onSave: function(event)
	{
		Event.stop(event);
		this.markAsLoading();
		/* do the request twice:
       * - for the iframe to trigger the download dialog
       * - for the main window to know when to remove the loading mark
       * 
       * This has no impact on the gateway as the save script is launched only once.
       */
		var iframe = new Element("iframe");
		iframe.src = "/backup?context=" + Sah.Bus.contextID;
		iframe.style.display = "none";
		document.body.insert(iframe);
		new Ajax.Request("/backup?nocache", {
			method: "GET", 
			requestHeaders: {
				"X-Context" : Sah.Bus.contextID
			},
			onSuccess: this.whenSaved.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		});
	},
    
	whenSaved: function (obj)
	{
		this.markAsLoaded();
	},
    
	whenNotSaved: function (obj)
	{
		this.markAsLoaded();
		this.logger.warn("Configuration saving failed");
		this.logger.warn(obj);
	},
	//add for Network backup/restore
	updateNetworkConfigStatus: function ()
	{
		var id_Status = "general.label.inprogress";
		if( this.objects.NetworkConfig.Enable){
			$$(".saveRestore-disabled").each(Element.hide);
			$$(".saveRestore-enabled").each(Element.show);
			id_Status ="general.label.enabled";
		}else {
			$$(".saveRestore-disabled").each(Element.show);
			$$(".saveRestore-enabled").each(Element.hide);
			id_Status ="general.label.disabled";
		}
		Sah.translator.change($('id_Status'), id_Status, this.objects.NetworkConfig.status);
		//display date in format dd/MM/yyyy hh:mm:ss
		var str = new Date (this.objects.NetworkConfig.ConfigDate.replace(/-/g,"/").replace(/[TZ]/g," "));
		var lastUpdate = {
			year:((str.getFullYear()+"").length == 1)?"0"+str.getFullYear():str.getFullYear(),
			month:(((str.getMonth()+1)+"").length == 1)?"0"+(str.getMonth()+1):(str.getMonth()+1),
			day:((str.getDate()+"").length == 1)?"0"+str.getDate():str.getDate(),
			hour:((str.getHours()+"").length == 1)?"0"+str.getHours():str.getHours(),
			minute:((str.getMinutes()+"").length == 1)?"0"+str.getMinutes():str.getMinutes(),
			seconde:((str.getSeconds()+"").length == 1)?"0"+str.getSeconds():str.getSeconds()
		}
		var timeStr = lastUpdate.day+"/"+lastUpdate.month+"/"+lastUpdate.year+" "+lastUpdate.hour+":"+lastUpdate.minute+":"+lastUpdate.seconde;
		$('id_lastdate').update(timeStr);
	},

	onDisableNetworkConfig: function ()
	{
		this.client.execute("sysbus.NMC.NetworkConfig:enableNetworkBR",{
			state: "false"
		},{
			onSuccess: this.whenSavedNetworkConfig.bind(this),
			onFailure: this.whenNotSavedNetworkConfig.bind(this)
		});
    },
    
	onEnableNetworkConfig: function ()
	{
		this.client.execute("sysbus.NMC.NetworkConfig:enableNetworkBR",{
			state: "true"
		},{
			onSuccess: this.whenSavedNetworkConfig.bind(this),
			onFailure: this.whenNotSavedNetworkConfig.bind(this)
		});
	},
	
	whenSavedNetworkConfig: function (obj)
	{
		this.logger.warn("Configuration saving success");
		Sah.redirect("/supportBackup.html");
    },
    
	whenNotSavedNetworkConfig: function (obj)
	{
		this.logger.warn("Configuration saving failed");
		Sah.redirect("/supportBackup.html");
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/admin/saveRestore/restore.js */

/**
 * Administration Save & Restore
 */

Admin.SaveRestore.Restore = Class.create(Sah.AuthenticatedForm, /** @lends Admin.Save_Restore.Restore# */ {
	initialize: function ($super, form) {
		$super(form);
		this.progressBar = new Sah.Widget.ProgressBar("test-progress", {});
		
		this.isChrome = (navigator.userAgent.toLowerCase().indexOf('chrome/') > -1) ?   true : false;
		this.isSafari = (navigator.userAgent.toLowerCase().indexOf('safari/') > -1) ?   true : false;
		
		//~ if (Prototype.Browser.Chrome) 
			//~ $("file_name").setStyle({"border": 0});
		
		// Just for IE8 ~ PrototypeJS extension
		if (Prototype.Browser.IE ) {
		    if (/MSIE (\d+\.\d+);/.test(navigator.userAgent)) {
				Prototype.BrowserFeatures['Version'] = new Number(RegExp.$1);
		    }
		}
		
		if (Prototype.Browser.Gecko) {
		    this.version = (navigator.userAgent.match( /.+(?:Firefox)[\// ]([\d.]+)/ ) || [])[1];	    
		}

		$('file_name').observe("change", function(e){
			var fileName=$('file_name').value;
			$('file_browse').value =fileName.replace("C:\\fakepath\\","");
		});
		
		this.needs("UserManagement.User", {
			  path: "sysbus.UserManagement:getUsers",
			  method : "execute"
		});		
		this.load();
	},
	
	objectsLoaded: function () {	
	    // redirect if remote user
		this.redirectWhenRemote();
		// xhr2 support detection
		var progEv = !!(window.ProgressEvent);
		var fdata = !!(window.FormData);
		if(!progEv || !fdata) {
			this.displayErrorMessage(t('restoration.xhr2.error.description', 'X xhr2 not supported.'), "xhr2");
		}
	},
	
	redirectWhenRemote: function () {
	       if (this.objects.UserManagement.User) {
		    this.searchRAUser();	
		    if (this.objects.userRemoteAdmin){
			 Sah.redirect('/');
		    } else {
			document.observe('sah:models:System:state', this.uploadCompleted.bind(this));
			
			$("bt_restore").observe("click", this.onRestore.bind(this));
			$("bt_cancel").observe("click",function(e){
				e.preventDefault();
				Sah.redirect('/supportLedsStatus.html');
				return false;
			});
		    }
		}else {
		    Sah.redirect('/');
		}
	},
	
	searchRAUser: function () {
	    var login = Cookie.get('login');
	    this.objects.UserManagement.User.each(function (user) {     
		user.UserGroupParticipation = user.groups.join(" ");
		if ( (user.name == login) && user.UserGroupParticipation.indexOf("remoteadmin")>=0 && (user.name != "support") ) {
		    this.objects.userRemoteAdmin = user;
		}            
	    }, this);
	}, 
	
	onRestore: function () {
		$("support.saverestore.nofile.error").hide();
		if ($("file_name").getValue() != "") {
		  console.warn('estore')
			$("context").setValue(Sah.Bus.contextID);
			var formData = new FormData(this.form);			
			var req = new XMLHttpRequest();
			req.open("POST", "/restore", true);
			req.setRequestHeader("X-Context",Sah.Bus.contextID);
			req.onreadystatechange = function (aEvt) {
				if (req.readyState == 4 && req.status == 200) {
					document.getElementById("restoreResponse").innerHTML = req.responseText;
					var myScript = document.getElementById("restoreResponse").getElementsByTagName("script");
					for(var i=0; i<myScript.length; i++) {
						eval(myScript[i].innerHTML);
					}
				}
			 }
			req.send(formData);
		} else {
			$("restore-tryagain-label").style.display = "block";
			this.displayErrorMessage(t('restoration.nofile.error.description', 'X Insert the file to restore.'), "nofile");
		}		
		return true;
	},

	markAsLoading: function ($super) {
		//$super();
		$("restore-step2").style.display = "block";
		$("restore-upload-form").style.display = "none";
		$("restoration.specificpassword").style.display = "block";
	},

	markAsLoaded: function ($super) {
		//$super();
		if (this.uploadChecker) {
			this.uploadChecker.stop();
			this.uploadChecker = null;
		}

		if (this.timeout) {
			window.clearTimeout(this.timeout);
			this.timeout = null;
		}
	},

	uploadCompleted: function (event) {
		if (event.memo == "restore-success") {
			this.logger.info("restore upload successfully");
// this.timeout = window.setTimeout(this.checkUpload.bind(this), 1000);
// 			this.uploadChecker = new PeriodicalExecuter(this.checkUpload.bind(this), 5);
			this.markAsLoading();
			this.fileUploaded();
		} else {
			this.fileUploadError();
		}
	},

	checkUpload: function () {
		new Ajax.Request("/restore?status=true", {
			method: "get",
			onSuccess: function (response) {
				var status = response.responseJSON;
				if (status.active && status.action == "restore") {
					if (status.totalSize > 128 * 1024) {
						$("restore-upload-form").style.display = "block";
						$("restore-tryagain-label").style.display = "block";
						this.logger.warn("tried to upload a file which is too large");
						document.fire('sah:models:System:state', 'restore-failure');
						return;
					} else {
						this.markAsLoading();
						this.fileUploaded();
					}
				}
			}.bind(this)
		});
	},

	/**
	 ** display tooltip to control admin password
	 **/
	displayErrorMessage: function (msg, which) {		
		if(which === "nofile") {
			$("support.saverestore.nofile.error").show();
			$("support.saverestore.nofile.error.description").update(msg);
		}
		else if(which === "xhr2") {
			$("support.saverestore.xhr2.error").show();
			$("support.saverestore.xhr2.error.description").update(msg);
		}
	},

	fileUploaded: function (event) {
		this.markAsLoaded();
		var rebootTime = 138000;
		var progressDelay = 1837;
				
		if (config.BUILD_PROJECT.indexOf("2.8") >= 0) {
			rebootTime = 105000;
			progressDelay = 1225;
		}
		this.progressBar.animate(progressDelay);
		//var destinationUrl = "/";
		setTimeout(function () {
			Sah.detectReboot("/")
		}, rebootTime);
		//Cookie.set("language", "");
		Cookie.unset("language");
		$("restore-tryagain-label").hide();
		$("support.saverestore.nofile.error").hide();
		$("support.saverestore.upload.error").hide();

		return false;
	},

	fileUploadError: function (event) {
		this.markAsLoaded();
		$("restore-tryagain-label").style.display = "block";
		$("support.saverestore.upload.error").show();
		$("support.saverestore.upload.error.description").update(t('restoration.upload.error.description', 'X Invalid file.'));

		/* ensure that the frame is not loading anymore */
		$("upload_target").src = Sah.link("/legal.html");
	},

	onReboot: function () {
		// Set the reboot delay to 5 seconds to allow appWeb to finish this page before device is rebooted    
		this.client.execute("sysbus.NMC:reboot", {}, {
			"onSuccess": this.fileUploaded.bind(this),
			"onFailure": function () {
				this.logger.error("error rebooting try manually")
			}.bind(this)
		});

		return false;
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/admin/saveRestore/firmwareupgrade.js */

/**
 * Administration Save & Restore
 */

Admin.SaveRestore.Firmwareupgrade = Class.create(Sah.AuthenticatedForm, /** @lends Admin.Save_Restore.Restore# */ {
	initialize: function ($super, form) {
		$super(form);
		//this.progressBar = new Sah.Widget.ProgressBar("test-progress", {});
		
		this.isChrome = (navigator.userAgent.toLowerCase().indexOf('chrome/') > -1) ?   true : false;
		this.isSafari = (navigator.userAgent.toLowerCase().indexOf('safari/') > -1) ?   true : false;
		
		//~ if (Prototype.Browser.Chrome) 
			//~ $("file_name").setStyle({"border": 0});
		
		// Just for IE8 ~ PrototypeJS extension
		if (Prototype.Browser.IE ) {
		    if (/MSIE (\d+\.\d+);/.test(navigator.userAgent)) {
				Prototype.BrowserFeatures['Version'] = new Number(RegExp.$1);
		    }
		}
		
		if (Prototype.Browser.Gecko) {
		    this.version = (navigator.userAgent.match( /.+(?:Firefox)[\// ]([\d.]+)/ ) || [])[1];	    
		}
   
   
/*                $('bt_browse_usb').observe("change", function(e){
			var fileName=$('bt_browse_usb').value;
			$('file_browse_usb').value =fileName.replace("C:\\fakepath\\","");
		});
*/		
		
		$('bt_browse_local').observe("change", function(e){
			var fileName=$('bt_browse_local').value;
			$('file_browse_local').value =fileName.replace("C:\\fakepath\\","");
		});
		
		this.load();
	},
	
	objectsLoaded: function () {	
	       // redirect if remote user
		this.upgradefireware();
	},
	
	upgradefireware: function () {
		document.observe('sah:models:System:state', this.uploadCompleted.bind(this));			
		$("bt_save").observe("click", this.onSave.bind(this));
		$("bt_cancel").observe("click",function(e){
			e.preventDefault();
			Sah.redirect('/');
			return false;
			});
	},

	onSave: function () {
/*	  if($("file_browse_usb").getValue() != ""){
	     console.warn('Save pour local usb');
	     
	  }
*/	  if($("file_browse_local").getValue() != "")
	  { 
		  console.warn('Save pour local file');
		  $("context").setValue(Sah.Bus.contextID);
			var formData = new FormData(this.form);			
			var req = new XMLHttpRequest();
			req.open("POST", "/firmware-upgrade", true);
			req.setRequestHeader("X-Context",Sah.Bus.contextID);
			req.onreadystatechange = function (aEvt) {
				if (req.readyState == 4 && req.status == 200) {
					document.getElementById("restoreResponse").innerHTML = req.responseText;
					var myScript = document.getElementById("restoreResponse").getElementsByTagName("script");
					for(var i=0; i<myScript.length; i++) {
						eval(myScript[i].innerHTML);
					}
				}
			 }
			req.send(formData);
	  }
	  else {
			$("save-tryagain-label").style.display = "block";
			//this.displayErrorMessage(t('restoration.nofile.error.description', 'X Insert the file to restore.'), "nofile");
		}		
	  return true;
	},

	markAsLoading: function ($super) {
		//$super();
		$("restore-step2").style.display = "block";
		$("restore-upload-form").style.display = "none";
		$("restoration.specificpassword").style.display = "block";
	},

	markAsLoaded: function ($super) {
		//$super();
		if (this.uploadChecker) {
			this.uploadChecker.stop();
			this.uploadChecker = null;
		}

		if (this.timeout) {
			window.clearTimeout(this.timeout);
			this.timeout = null;
		}
	},

	uploadCompleted: function (event) {
		if (event.memo == "restore-success") {
			this.logger.info("restore upload successfully");
// this.timeout = window.setTimeout(this.checkUpload.bind(this), 1000);
// 			this.uploadChecker = new PeriodicalExecuter(this.checkUpload.bind(this), 5);
			this.markAsLoading();
			this.fileUploaded();
		} else {
			this.fileUploadError();
		}
	},

	checkUpload: function () {
		new Ajax.Request("/restore?status=true", {
			method: "get",
			onSuccess: function (response) {
				var status = response.responseJSON;
				if (status.active && status.action == "restore") {
					if (status.totalSize > 128 * 1024) {
						$("restore-upload-form").style.display = "block";
						$("restore-tryagain-label").style.display = "block";
						this.logger.warn("tried to upload a file which is too large");
						document.fire('sah:models:System:state', 'restore-failure');
						return;
					} else {
						this.markAsLoading();
						this.fileUploaded();
					}
				}
			}.bind(this)
		});
	},

	/**
	 ** display tooltip to control admin password
	 **/
	displayErrorMessage: function (msg, which) {		
		if(which === "nofile") {
			$("support.saverestore.nofile.error").show();
			$("support.saverestore.nofile.error.description").update(msg);
		}
		else if(which === "xhr2") {
			$("support.saverestore.xhr2.error").show();
			$("support.saverestore.xhr2.error.description").update(msg);
		}
	},

	fileUploaded: function (event) {
		this.markAsLoaded();
		var rebootTime = 138000;
		var progressDelay = 1837;
				
		if (config.BUILD_PROJECT.indexOf("2.8") >= 0) {
			rebootTime = 105000;
			progressDelay = 1225;
		}
		this.progressBar.animate(progressDelay);
		//var destinationUrl = "/";
		setTimeout(function () {
			Sah.detectReboot("/")
		}, rebootTime);
		//Cookie.set("language", "");
		Cookie.unset("language");
		$("restore-tryagain-label").hide();
		$("support.saverestore.nofile.error").hide();
		$("support.saverestore.upload.error").hide();

		return false;
	},

	fileUploadError: function (event) {
		this.markAsLoaded();
		$("restore-tryagain-label").style.display = "block";
		$("support.saverestore.upload.error").show();
		$("support.saverestore.upload.error.description").update(t('restoration.upload.error.description', 'X Invalid file.'));

		/* ensure that the frame is not loading anymore */
		$("upload_target").src = Sah.link("/legal.html");
	},

	onReboot: function () {
		// Set the reboot delay to 5 seconds to allow appWeb to finish this page before device is rebooted    
		this.client.execute("sysbus.NMC:reboot", {}, {
			"onSuccess": this.fileUploaded.bind(this),
			"onFailure": function () {
				this.logger.error("error rebooting try manually")
			}.bind(this)
		});

		return false;
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/admin/adslFtth.js */

Admin.AdslFtth = Class.create(Sah.AuthenticatedForm, /** @lends Admin.AdslFtth*/ {
	initialize: function ($super, form) {
		$super(form);
		
		
		this.needs("Status", {
			path: "sysbus.NMC:getWANStatus",
			method: "execute"
		});
		

		this.load();
	},

	objectsLoaded: function () {
		var is_DSL = "";
		
		is_DSL = (this.objects.Status.LinkType !== "ethernet") ? "DSL" : "Ethernet";
		Cookie.set('WanInterfaceConfig', is_DSL);		
		
		if (is_DSL === "Ethernet") {
			$("support.systeminformation.adsl.label.title").hide();
			$("support.systeminformation.ftth.label.title").show();
		} else {
			$("support.systeminformation.adsl.label.title").show();
			$("support.systeminformation.ftth.label.title").hide();
		}
	}
});
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/admin/remote.js */

Admin.Remote = Class.create(Sah.AuthenticatedForm, /** @lends Admin.Remote */ {

    initialize: function ($super, form) {
        $super(form);
 
        this.needs("UserManagement.Group", {
            path: "sysbus.UserManagement:getGroups",
            method:"execute"
        });
		this.needs("RemoteAccess", {
            path: "sysbus.RemoteAccess",
            depth: 1
        });
        this.needs("UserManagement.User", {
            path: "sysbus.UserManagement:getUsers",
            method : "execute"
        });
        this.needs("DynamicDns", {
            path: "sysbus.DynDNS:getHosts",
            method : "execute",
            methodParams : {}
        });
        this.needs("Wan.Status",{
            path:"sysbus.NMC:getWANStatus",
            method:"execute"
        });
        this.needs("ipv6_gua", {
			path: "sysbus.NeMo.Intf.lan:luckyAddrAddress", 
			method:"execute",
			methodParams:{
				flag:"ipv6 && global"
			}
		});
        
        $('content').setStyle("visibility:hidden");
        $("show_or_not").observe("click", this.showPasswordOrNot.bind(this));
        //this.markAsLoading();
	
        this.form.disable();
        this.load();
	
	
    },

    objectsLoaded: function () {
 
	this.redirectWhenRemote();
        this.prepareForm();
        this.form.enable();
        this.onRemoteAdminChange();
        this.markAsLoaded();
	
	
    },
    
    redirectWhenRemote: function () {
		if (this.objects.UserManagement.User){
			this.isRemoteUser();	
			if (this.objects.userRemoteAdmin){
				Sah.redirect('/');
			}else{
				$('content').setStyle("visibility:visible");
				$("bt_cancel").observe("click", this.onCancel.bind(this));
				$("bt_save").observe("click", this.onSave.bind(this));
				$("RemoteAccess.Enable").observe("click", this.onRemoteAdminChange.bind(this));
			}
		}else{
			Sah.redirect('/');
		}
	},
	
	isRemoteUser: function () {
	    var login = Cookie.get('login');
	    this.objects.userRemoteAdmin="";
	    this.objects.UserManagement.User.each(function (user) {     
			user.UserGroupParticipation = user.groups.join(" ");
			
			if ( user.name === login && user.UserGroupParticipation.indexOf("remoteadmin")>=0 && user.name != "support" ) {				
				this.objects.userRemoteAdmin = user;
			}            
	    }, this);
	}, 

    prepareForm: function () {
        // Find RemoteAdmin group
        var remoteAdminGroupDoesNotExist = true;
        if (this.objects.UserManagement.Group) {
            $A(this.objects.UserManagement.Group).each(function (group) {
               
                if (group.name.toLowerCase() == "remoteadmin") {
                    remoteAdminGroupDoesNotExist = false;
                }
            }, this);
        }
        if (remoteAdminGroupDoesNotExist) {
            this.logger.warn("Missing RemoteAdmin group");
            return;
        }

        // Find user associated to RemoteAdmin group		
        if (this.objects.UserManagement.User) {
            this.searchRAUser();
        }
       
    
        // Setting current state and external IP address	
        if ((($("RemoteAccess.Enable").checked)||(this.objects.RemoteAccess.Enable == true)) && this.objects.userRemoteAdmin) {
            $("RemoteAccess.Enable").checked = true;
            this.fillForm();
            if (config.BUILD_PROJECT.indexOf("lbv2pl") > -1 && this.objects.Wan.Status.IPv6Address)
				$("Wan.Status.IPAddress").update(this.objects.Wan.Status.IPv6Address);
            else
				$("Wan.Status.IPAddress").update(this.objects.Wan.Status.IPAddress);
        } else {
            $("RemoteAccess.Enable").checked = false;
            this.hideUserInfo();
        }
    },

    searchRAUser: function () {
        this.objects.UserManagement.User.each(function (user) {     
            user.UserGroupParticipation = user.groups.join(" ");
            if (user.UserGroupParticipation.indexOf("remoteadmin")>=0 && (user.name != "support")) {
                this.objects.userRemoteAdmin = user;
            }            
        }, this);
    },

    hideUserInfo: function () {
        $("userRemoteAdmin.Password").setValue("");
        $("userRemoteAdmin.UserName").setValue("");
        $("userRemoteAccess.PortNumber").setValue("10011");
        $("RemoteAccess.URL").innerHTML = "";
        $("Wan.Status.IPAddress").innerHTML = "";
    },

    fillForm: function () {
        
        this.fromObject(this.objects);
        
        if ((this.objects.userRemoteAdmin) && ((this.objects.RemoteAccess.Enable)||($("RemoteAccess.Enable").checked))) {
            $("userRemoteAdmin.Password").setValue("************");
	    $("userRemoteAdmin.UserName").setValue(this.objects.userRemoteAdmin.name);
	    $("userRemoteAccess.PortNumber").setValue(this.objects.RemoteAccess.Port);
						
            if (this.objects.DynamicDns[0]) {                 
                $("RemoteAccess.URL").update("https://" + this.objects.DynamicDns[0].hostname + ":" + this.objects.RemoteAccess.Port);
            } else {
                if(this.objects.Wan.Status.IPAddress ){ 
					if (config.BUILD_PROJECT.indexOf("lbv2pl") > -1 && this.objects.Wan.Status.IPv6Address){              
						$("RemoteAccess.URL").update("https://" + this.objects.Wan.Status.IPv6Address + ":" + this.objects.RemoteAccess.Port);
					} else {
						$("RemoteAccess.URL").update("https://" + this.objects.Wan.Status.IPAddress + ":" + this.objects.RemoteAccess.Port);
					}
                }
            }
        }
    },

    onSave: function () {
        if ($("RemoteAccess.Enable").checked) {
            this.objects.RemoteAccess.Enable = "1";
            var uName = $("userRemoteAdmin.UserName").value;
            var uPassword = $("userRemoteAdmin.Password").value;
            var uPort = $("userRemoteAccess.PortNumber").value;

            if (this.validateForm(uName, uPassword, uPort)) {
                //this.markAsLoading();
                this.objects.RemoteAccess.Port =   uPort;
                this.objects.RemoteAccess.Enable =   true;
                this.client.execute("sysbus.NMC:enableRemoteAccess",{
                    username : uName,
                    password: uPassword,
                    port: uPort,
                    timeout:0
                },{
                    onSuccess:this.whenSaved.bind(this),
                    onFailure:this.whenNotSaved.bind(this)
                })     
                
	    } 
	  }else {
            this.markAsLoading();
            this.searchRAUser();
            this.objects.RemoteAccess.Enable = false;
            this.client.execute("sysbus.RemoteAccess:disable",{},{
                onSuccess: this.whenSaved.bind(this),
                onFailure: this.whenNotSaved.bind(this)
            });
           
        }

        return true;
    },

    whenSavedOK: function () {
        this.searchRAUser();
        this.prepareForm();
        this.fillForm();
        this.markAsLoaded();
    },


    whenSaved: function (obj) { /* force remote user to re-login */
        new Ajax.Request("/logout?remote=1", {
            method: 'get'
        });
        this.client.execute("sysbus.UserManagement:getUsers",{},{
            onSuccess:function(result){
                this.objects.UserManagement.User = result.result.status;
                this.whenSavedOK();
            }.bind(this),
            onFailure:this.whenNotSaved.bind(this)
        });
	$("show_or_not").checked=false;
       
    },

    whenNotSaved: function () {
        this.logger.warn("Remote access activation failed");
        //this.logger.warn(obj);
        this.fillForm();
        this.markAsLoaded();
    },

    onRemoteAdminChange: function () {
				 
        if ($("RemoteAccess.Enable").checked) {
					if(this.objects.userRemoteAdmin)
							this.prepareForm();
							
            this.form.enable();         
        } else {
            this.form.disable();
        }
        $("RemoteAccess.Enable").enable();
    },

    validateForm: function (login, password, port) { /* Validate login */
	
        if (login === "" || login === "admin" || login === "root" || login === "support" || !login.match(/^[\w-]{0,32}$/)) {
            $("support.remoteaccess.login.error").show();
            bLoginValid = false;
        } else {
            $("support.remoteaccess.login.error").hide();
            bLoginValid = true;
        }

        /* Validate Password */
        var value = $F("userRemoteAdmin.Password");
        if (value.length <= 7 || !value.match(/\d/) || !value.match(/[^\da-zA-Z]/)) {
            $("support.remoteaccess.password.error").show();
            bPasswordValid = false;
        } else {
            $("support.remoteaccess.password.error").hide();
            bPasswordValid = true;
        }

        /* Validate Port */
        var intPort = parseInt(port, 10);
        if (!Sah.Validations.isValidNumber(port, 10000, 30000)) {
            $("support.remoteaccess.port.error").show();
            bPortValid = false;
        } else {
            $("support.remoteaccess.port.error").hide();
            bPortValid = true;
        }

        return (bLoginValid && bPortValid && bPasswordValid);
    },

    

    onCancel: function () {
        this.objectsLoaded();
        $("support.remoteaccess.login.error").hide();
        $("support.remoteaccess.password.error").hide();
        $("support.remoteaccess.port.error").hide();
    },
    showPasswordOrNot: function (obj) {
		if ($("show_or_not").checked) {
			$('userRemoteAdmin.Password').type = "text";
		} else {
			$('userRemoteAdmin.Password').type = "password";
		}
   }
    
});
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/admin/homeGateway.js */

Admin.HomeGateway = {};
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/admin/homeGateway/upgrade.js */

/**
 *
 * Admin Home Gateway Upgrade
 *
 */
Admin.HomeGateway.Upgrade = Class.create(Sah.AuthenticatedForm, /** @lends Admin.HomeGateway.Upgrade# */ {
	initialize: function ($super, form) {
		$super(form);

		/* when the form is submitted, call the onSave method of this class */
		$("bt_findnewestversion").observe("click", this.onUpgrade.bind(this));
		$("bt_findupgrade_yes").observe("click", this.onSaveUpgrade.bind(this));
		$("bt_findupgrade_no").observe("click", this.onCancelUpgrade.bind(this));
	},
	
	onUpgrade: function (event) {
		event.stop(event);
		$("bt_findnewestversion").disable();
		$("bt_findnewestversion").hide();
		$("lbl-firmwareupgrade").hide();
		$("firmwareupgrade.warning").show();
		$("firmwareupgrade.nofirmware").hide();
		$("firmwareupgrade.firmwarefound").hide();
		Sah.translator.refresh();
	},
	
	onCancelUpgrade: function (event) {
		event.stop(event);
		$("bt_findnewestversion").enable();
		$("firmwareupgrade.warning").hide();
		$("bt_findnewestversion").show();
		$("lbl-firmwareupgrade").show();
		$("firmwareupgrade.nofirmware").hide();
		$("firmwareupgrade.firmwarefound").hide();
	},
	
	onSaveUpgrade: function (event) {
		event.stop(event);
		$("firmwareupgrade.warning").hide();
		$("bt_findnewestversion").hide();
		$("lbl-firmwareupgrade").hide();
		$("firmwareupgrade.nofirmware").hide();
		$("firmwareupgrade.firmwarefound").hide();
		$("upgrade-stepend").show();
		
		this.client.execute("sysbus.NMC:checkForUpgrades", {}, {
			onSuccess: this.whenSaved.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		});
	},
	
	whenSaved: function (obj) {
		$('animation').hide();
		$('firmwareupgrade.searching').hide();
			
		if (obj.result && obj.result.status == true && !obj.result.errors) {
			$("firmwareupgrade.firmwarefound").show();
		} else {
			$("firmwareupgrade.nofirmware").show();
			this.logger.warn("failed to save object");
		}
	},
	
	whenNotSaved: function (obj) {
		$('animation').hide();
		$('firmwareupgrade.searching').hide();
		$("firmwareupgrade.nofirmware").show();
		this.logger.warn("failed to save object");
	}
});
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/admin/homeGateway/reboot.js */

/**
 * Administration Reboot
 */

Admin.HomeGateway.Reboot = Class.create(Sah.AuthenticatedForm,
/** @lends Admin.HomeGateway.Reboot# */
{

	initialize: function ($super, form)
	{
		$super(form);
	/*	this.resetDelay = "5";
		this.rebootAction = "1";      */
		this.progressBar = new Sah.Widget.ProgressBar("test-progress",{});
	/*	this.needs("DeviceConfig", {
			path: "sysbus.DeviceConfig", 
			depth: 1
		});*/
		$("bt_yes").observe("click",this.onReboot.bind(this)); 
		$("bt_no").observe("click",function(e){
			e.preventDefault();
			Sah.redirect('/supportLedsStatus.html');
			return false;
		});       
		
		this.needs("UserManagement.User", {
		    path: "sysbus.UserManagement:getUsers",
		    method : "execute"
		});
		 
		this.form.disable();
		this.load();
	},
	
	objectsLoaded: function ()
	{
		this.fromObject(this.objects);
		this.form.enable();
	},
	
	
	onReboot: function(){       
		// Set the reboot delay to 5 seconds to allow appWeb to finish this page before device is rebooted    
	/*	this.objects.DeviceConfig.RebootDelay = this.resetDelay; 
		this.objects.DeviceConfig.Reboot = this.rebootAction;  */
		this.client.execute("sysbus.NMC:reboot",
		{},
		{
			"onSuccess":this.whenSaved.bind(this),
			"onFailure":this.whenNotSaved.bind(this)
		} 
		);  
       
		return false;
	},
	
	whenSaved: function (obj){
		$('firststep').hide();
		$('endstep').show(); 
		
		var tmpUser = this.objects.UserManagement.User;
		var tmpRUser = this.objects.userRemoteAdmin;
		
		var rebootTime = 138000;
		var progressDelay = 1837;
				
		if (config.BUILD_PROJECT.indexOf("2.8") >= 0) {
			rebootTime = 105000;
			progressDelay = 1225;
		}
		
		
		this.progressBar.animate(progressDelay);
				
		setTimeout(function(){
			if (tmpUser) {
			      var login = Cookie.get('login');
			      tmpUser.each(function (user) {     
				  user.UserGroupParticipation = user.groups.join(" ");
				  if ((user.name == login) && user.UserGroupParticipation.indexOf("remoteadmin")>=0 && (user.name != "support")) {
				     tmpRUser = user;
				  }            
			      }, this);
			}			
			if (!tmpRUser){
			      Sah.detectReboot('/');
			}
		},rebootTime); 
	},
/*	detectRebootDone : function(){
		setTimeout(function(){
			new Ajax.Request(Sah.link("DeviceConfig?_restDepth=-1"+"&" + Math.random()),
			{
				method: "get",
				onSuccess: function(transport) {
					Sah.redirect('/');
				},
				onFailure: this.detectRebootDone.bind(this)
			});
		}.bind(this),5000);
	},
*/	
	whenNotSaved: function (obj){
		this.logger.warn("Reboot failed");
		this.logger.warn(obj); 
    
	}
	
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/admin/npt.js */

/**
 *
 *
 * Admin NPT
 *
 *
 */
Admin.Npt = Class.create(Sah.AuthenticatedForm,
/** @lends Admin.Npt# */
{
	initialize: function ($super, form) {
		$super(form);

		/* initialize events handler */
		$("bt_save").observe("click", this.onSave.bind(this));
		$("bt_cancel").observe("click", this.onCancel.bind(this));
		$("Time.LocalTimeZoneName").observe("change", this.onChangeImg.bind(this));
		document.observe('sah:admin:language:change', this.onChangeImg.bind(this));

		this.needs("LocalTimeZone", {
			path: "sysbus.Time:getLocalTimeZoneName",
			method: "execute"
		});
		this.needs("Time.CurrentLocalTime", {
			path: "sysbus.Time:getTime",
			method: "execute"
		});

		this.load();

		this.addHour=0;

		var timeRefresh = new PeriodicalExecuter(function (pe) {
			this.client.execute("sysbus.Time:getTime", {}, {
				onSuccess: function (result) {
					if (this.objects.Time.CurrentLocalTime) {
						this.objects.Time.CurrentLocalTime = result.result.data;
					}
					this.onChangeImg();
				}.bind(this),
				onFailure: function () {}
			});
		}.bind(this), 50);
	},

	objectsLoaded: function () {
		if (appConfig !== "amea" /*|| this.objects.AMEA.Settings.CountryCode === "OTHER"*/ ) {
			$('Time.LocalTimeZoneName').enable();
		}
		this.objects.Time.LocalTimeZone = this.objects.LocalTimeZone.timezone;
		this.objects.Time.LocalTimeZoneName = this.objects.LocalTimeZone.timezone;
		this.fromObject(this.objects);
		this.onChangeImg();
	},

	onSave: function (event) {
		event.stop(event);

		var localtimezone = this.toObject().Time;
		this.objects.Time.LocalTimeZone = localtimezone.LocalTimeZoneName;
		this.objects.Time.LocalTimeZoneName = localtimezone.LocalTimeZoneName;

		this.client.execute("sysbus.Time:setLocalTimeZoneName", {
			timezone: this.objects.Time.LocalTimeZone
		}, {
			onSuccess: this.whenSaved.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		});
		return false;
	},

	whenSaved: function (obj) {
		this.logger.info("object saved");
		this.fromObject(this.objects);
		this.client.execute("sysbus.Time:getTime", {}, {
			onSuccess: function (result) {
				if (this.objects.Time.CurrentLocalTime) {
					this.objects.Time.CurrentLocalTime = result.result.data;
				}
				this.onChangeImg();
			}.bind(this),
			onFailure: function () {
				this.onChangeImg();
			}.bind(this)
		});

	},

	whenNotSaved: function (obj) {
		this.logger.warn("failed to save object");
		this.logger.warn(obj);
	},

	onCancel: function (event) {
		event.stop(event);
		this.fromObject(this.objects);
		this.onChangeImg();
	},

	onChangeImg: function () {

		var chosenOffsetWebui = $("Time.LocalTimeZoneName")[$("Time.LocalTimeZoneName").selectedIndex].text;
		var getTimeZoneFullName = function (oSel, val) {
				var len = oSel.options.length;
				for (var i = 0; i < len; i++) {
					if (oSel.options[i].value == val) {
						return i;

					}
				}
				return -1;
			}
		var DMindex = getTimeZoneFullName($("Time.LocalTimeZoneName"), this.objects.Time.LocalTimeZone);
		
		var chosenOffsetDM = (DMindex >= 0) ? $("Time.LocalTimeZoneName")[DMindex].text : null;
		var currentTime = this.objects.Time.CurrentLocalTime.time;
		if (currentTime.indexOf("+")>=0) { 
			if (currentTime.split("+")[1].substr(0,2)=="00" && ($("Time.LocalTimeZoneName")[DMindex].text.substr(5,2)==" C"  || $("Time.LocalTimeZoneName")[DMindex].text.substr(5,2)==" G")){ 
			      this.addHour=0;  
			}
			else 
			      this.addHour=currentTime.split("+")[1].substr(0,2)==$("Time.LocalTimeZoneName")[DMindex].text.substr(5,2)?0:1;
		}
		else if (currentTime.indexOf("-")>=0) {
			this.addHour=currentTime.split("-")[1].substr(0,2)==$("Time.LocalTimeZoneName")[DMindex].text.substr(5,2)?0:1;
		}
		var newTime = this.calcTime(chosenOffsetDM, currentTime, chosenOffsetWebui);

	 $('Time.WeekDay').update(newTime);
		
		/*var formattedCurrentTime = this.formatCurrentTime(currentTime);
		$('Time.WeekDay').update(formattedCurrentTime);*/

		var chosenOffset = $("Time.LocalTimeZoneName")[$("Time.LocalTimeZoneName").selectedIndex].text;
		this.drawImg(chosenOffset);
		this.objects.LocalTimeZone = $("Time.LocalTimeZoneName").getValue();
	},

	formatCurrentTime: function (currentTime) {
		currentTime = currentTime.substring(0, 25);
		var currentDate = new Date(currentTime);

		var hourStr = currentDate.getHours();
		var minStr = currentDate.getMinutes();
		if (hourStr < 10) {
			hourStr = '0' + hourStr;
		}
		if (minStr < 10) {
			minStr = '0' + minStr;
		}

		// French Date Form :  'mercredi 5 mai 2010' + 24 hour
		var timeStr = '';

		if (Cookie.get("language") == "fr") {
			timeStr += t(Admin.Npt.Days[currentDate.getDay()], currentDate.getDay());
			timeStr += " " + currentDate.getDate();
			timeStr += " " + t(Admin.Npt.Months[currentDate.getMonth()], currentDate.getDay());
			timeStr += " " + currentDate.getFullYear();
			timeStr += " " + hourStr + ":" + minStr;
			return timeStr;
		}
		// Polish Date Form :  '5 maja 2010' + 24 hour
		else if (Cookie.get("language") == "pl") {
			timeStr += currentDate.getDate();
			timeStr += " " + t(Admin.Npt.Months[currentDate.getMonth()], currentDate.getDay());
			timeStr += " " + currentDate.getFullYear();
			timeStr += " " + hourStr + ":" + minStr;
			return timeStr;
		}
		// English & Default Date Form : 'Wednesday, May 05, 2010' + 24 hour
// 		else {  
// 			if (appConfig === "pl") {
// 				timeStr += t(Admin.Npt.Days[currentDate.getDay()], currentDate.getDay());
// 				timeStr += " " + t(Admin.Npt.Months[currentDate.getMonth()], currentDate.getDay());
// 				timeStr += " " + currentDate.getDate();
// 				timeStr += " " + currentDate.getFullYear();
// 				timeStr += " " + hourStr + ":" + minStr;
// 				return timeStr;
// 			} else {
// 				timeStr += t(Admin.Npt.Days[currentDate.getDay()], currentDate.getDay()) + ",";
// 				timeStr += " " + t(Admin.Npt.Months[currentDate.getMonth()], currentDate.getDay());
// 				timeStr += " " + currentDate.getDate() + ",";
// 				timeStr += " " + currentDate.getFullYear();
// 				timeStr += " " + hourStr + ":" + minStr;
// 				return timeStr;
// 			}
// 		}
		else {
			timeStr += t(Admin.Npt.Days[currentDate.getDay()], currentDate.getDay()) + ",";
			timeStr += " " + t(Admin.Npt.Months[currentDate.getMonth()], currentDate.getDay());
			timeStr += " " + currentDate.getDate() + ",";
			timeStr += " " + currentDate.getFullYear();
			timeStr += " " + hourStr + ":" + minStr;
			return timeStr;
		}
	},

	calcTime: function (offsetDM, currentTime, offsetWebui) {

		var hourOffWebui = 0;
		var minOffWebui = 0;

		if (offsetWebui.substring(4, 5) != ")") {
			hourOffWebui = parseInt(offsetWebui.substring(5, 7), 10);
			minOffWebui = parseInt(offsetWebui.substring(8, 10), 10);
		}
		if(this.addHour)
			hourOffWebui+=1;
		/*	var posGmt = 0;
	var gmt="GMT+0000";
	
	posGmt = currentTime.indexOf("GMT") ;
	gmt= currentTime.substring(posGmt,posGmt+8);
	
	var hourGmt,
	minGmt;	
	
	hourGmt = parseInt(gmt.substring(4,6), 10);
	minGmt = parseInt(gmt.substring(6,8), 10);*/

		var currentDate = new Date(Date.parse(currentTime));

		var utc = currentDate.getTime();

		var nd;

		// create new Date object for different city
		// using supplied offset
		if (offsetWebui.substring(4, 5) == '+') {

			nd = new Date(utc + (3600000 * (hourOffWebui) + 60000 * minOffWebui));

		} else {

			nd = new Date(utc - (3600000 * hourOffWebui + 60000 * minOffWebui));

		}

		/*   if(gmt.substring(3,4)=='+'){
            nd = new Date(utc + (3600000*(hourGmt)+60000*minGmt) );
        }else{
            nd = new Date(utc - (3600000*hourGmt+60000*minGmt));
        }*/

		return this.getUTCLocalTime(nd);
	},

	getUTCLocalTime: function (nd) {
		var hourStr = nd.getUTCHours();
		var minStr = nd.getUTCMinutes();
		if (hourStr < 10) {
			hourStr = '0' + hourStr;
		}
		if (minStr < 10) {
			minStr = '0' + minStr;
		}

		// French Date Form :  'mercredi 5 mai 2010' + 24 hour
		var timeStr = '';

		if (Cookie.get("language") == "fr") {
			timeStr += t(Admin.Npt.Days[nd.getUTCDay()], nd.getUTCDay());
			timeStr += " " + nd.getUTCDate();
			timeStr += " " + t(Admin.Npt.Months[nd.getUTCMonth()], nd.getUTCDay());
			timeStr += " " + nd.getUTCFullYear();
			timeStr += " " + hourStr + ":" + minStr;
			return timeStr;
		}
		// Polish Date Form :  '5 maja 2010' + 24 hour
		else if (Cookie.get("language") == "pl") {
			timeStr += nd.getUTCDate();
			timeStr += " " + t(Admin.Npt.Months[nd.getUTCMonth()], nd.getUTCDay());
			timeStr += " " + nd.getUTCFullYear();
			timeStr += " " + hourStr + ":" + minStr;
			return timeStr;
		}
		// English & Default Date Form : 'Wednesday, May 05, 2010' + 24 hour
		else {
// 			if (appConfig === "pl") {
// 				timeStr += t(Admin.Npt.Days[nd.getUTCDay()], nd.getUTCDay());
// 				timeStr += " " + t(Admin.Npt.Months[nd.getUTCMonth()], nd.getUTCDay());
// 				timeStr += " " + nd.getUTCDate();
// 				timeStr += " " + nd.getUTCFullYear();
// 				timeStr += " " + hourStr + ":" + minStr;
// 				return timeStr;
// 			} 
// 			else {
				timeStr += t(Admin.Npt.Days[nd.getUTCDay()], nd.getUTCDay()) + ",";
				timeStr += " " + t(Admin.Npt.Months[nd.getUTCMonth()], nd.getUTCDay());
				timeStr += " " + nd.getUTCDate() + ",";
				timeStr += " " + nd.getUTCFullYear();
				timeStr += " " + hourStr + ":" + minStr;
				return timeStr;
// 			}
		}
	},

	drawImg: function (offset) {
		$('ntpmapselection').setStyle({
			backgroundImage: 'url(' + Sah.img('/common/timezone.png') + ')'
		});

		if ($('divMap') !== null) $('divMap').remove();

		var hourOff = parseInt(offset.substring(5, 7), 10);
		var minOff = parseInt(offset.substring(8, 10) / 60, 10);
		var left = 1;

		if (isNaN(hourOff) || isNaN(minOff)) {
			hourOff = 0;
			minOff = 0;
		}
		/* Cursor Width = (image width) / (29 columns) */
		var widthCursor = 550 / 29;
		if (offset.substring(4, 5) == '+') left = widthCursor * hourOff + (widthCursor / 2) * minOff;
		else left = -(widthCursor * hourOff) - (widthCursor / 2) * minOff;

		var width = 1;

		/* add div in td */
		var divTag = new Element("div");
		divTag.addClassName("timezone-cursor");
		divTag.id = "divMap";
		divTag.style.left = (left - 8) + "px";
		divTag.makePositioned();
		divTag.style.left = (left - 8) + "px";
		$('ntpmapselection').insert(divTag);

	}
});

Admin.Npt.Days = {
	"0": "general.label.days.sunday",
	"1": "general.label.days.monday",
	"2": "general.label.days.tuesday",
	"3": "general.label.days.wednesday",
	"4": "general.label.days.thursday",
	"5": "general.label.days.friday",
	"6": "general.label.days.saturday"
};

Admin.Npt.Months = {
	"0": "general.label.months.january",
	"1": "general.label.months.february",
	"2": "general.label.months.march",
	"3": "general.label.months.april",
	"4": "general.label.months.may",
	"5": "general.label.months.june",
	"6": "general.label.months.july",
	"7": "general.label.months.august",
	"8": "general.label.months.september",
	"9": "general.label.months.october",
	"10": "general.label.months.november",
	"11": "general.label.months.december"
};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/admin/hotline.js */

/**
 * Admin hotline
 */

Admin.Hotline = Class.create(Sah.AuthenticatedForm, /** @lends Admin.Hotline# */ {

	initialize: function ($super, form) {
		$super(form);
		
		this.needs("UserManagement.User", {
			  path: "sysbus.UserManagement:getUsers",
			  method : "execute"
		});

		
		/* when the form is submitted, call the onAuthorize method of this class */
		$("bt_save").observe("click", this.onSave.bind(this));
		$("bt_cancel").observe("click", this.onCancel.bind(this));

		/* prepare to load the objects we need (RemoteAccess) */
       
		this.needs("RemoteAccess", {
			path: "sysbus.RemoteAccess",
			depth: -1
		});
		this.needs("DynamicDns", {
			path: "sysbus.DynDNS:getHosts",
			method : "execute",
			methodParams : {}
		});
		this.needs("Wan.Status",{
			path:"sysbus.NMC:getWANStatus",
			method:"execute"
		});
	
		this.needs("RemoteAccess.TimeLeft", {
			path: "sysbus.RemoteAccess:getTimeLeft",
			method : "execute",
			methodParams : {}
		});

		//this.markAsLoading();
		this.form.disable();
		$("bt_cancel").enable();
		$("bt_save").enable();
		this.load();
	},

	objectsLoaded: function () {	 
	        // redirect if remote user
		this.redirectWhenRemote();
		
		this.objects.elapsedTime = 0;
		this.prepareForm();
		$("bt_save").enable();
		this.markAsLoaded();
	},

	redirectWhenRemote: function () {
	       if (this.objects.UserManagement.User) {
		    this.searchRAUser();	
		    if (this.objects.userRemoteAdmin){
			 Sah.redirect('/');
		    }
		}
	},
	
	prepareForm: function () {
      
		// Setting current state
		if ((parseInt(this.objects.RemoteAccess.TimeLeft,10) > 0)) {
     
			Sah.translator.change($("bt_save"), "general.btn.extend", "X Extend");
			$("bt_save").enable();
			$("bt_cancel").enable();
			this.objects.elapsedTime = parseInt(this.objects.RemoteAccess.Timeout, 10)-parseInt(this.objects.RemoteAccess.TimeLeft,10);
			this.firstProgressBarChange();
			this.progressBar = new PeriodicalExecuter(this.progressBarChange.bind(this), 1);
			this.fillForm();
		} else {
			Sah.translator.change($("bt_save"), "general.btn.start", "X Start");
			this.objects.elapsedTime = 0;
			this.objects.widthImgProgress = 512;
			$("progressbar_id").setStyle("width:" + (this.objects.widthImgProgress) + "px");
		}
	},

	fillForm: function () {
		if (this.objects.RemoteAccess.Enable) {
			this.fromObject(this.objects);
			$("userRemoteAdmin.Password").setValue(this.uPassword||"******");
			if (config.BUILD_PROJECT.indexOf("lbv2pl") > -1 && this.objects.Wan.Status.IPv6Address){
				$("Wan_Ip.ExternalIPAddress").update(this.objects.Wan.Status.IPv6Address);
            } else {
				$("Wan_Ip.ExternalIPAddress").setValue(this.objects.Wan.Status.IPAddress);
			}
			$("userRemoteAdmin.Name").setValue("support");
			if (config.BUILD_PROJECT.indexOf("lbv2pl") > -1 && this.objects.Wan.Status.IPv6Address){
				$("RemoteAccess.Url").setValue("https://" + this.objects.Wan.Status.IPv6Address + ":" + this.objects.RemoteAccess.Port);
            } else {
				$("RemoteAccess.Url").setValue("https://" + this.objects.Wan.Status.IPAddress + ":" + this.objects.RemoteAccess.Port);
			}
		} else {
			this.form.reset();
		}
	},
	
	searchRAUser: function () {
	    var login = Cookie.get('login');
	    this.objects.UserManagement.User.each(function (user) {     
		user.UserGroupParticipation = user.groups.join(" ");
		if ( (user.name == login) && user.UserGroupParticipation.indexOf("remoteadmin")>=0 && (user.name != "support") ) {
		    this.objects.userRemoteAdmin = user;
		}            
	    }, this);
	}, 

	onSave: function () {
		this.markAsLoading();
       
		this.objects.widthImgProgress = 512;
		$("progressbar_id").setStyle("width:" + (this.objects.widthImgProgress) + "px");
		if (!this.progressBar) {
			this.objects.elapsedTime = parseInt(this.objects.RemoteAccess.Timeout, 10)-parseInt(this.objects.RemoteAccess.TimeLeft,10);
			this.firstProgressBarChange();
			this.progressBar = new PeriodicalExecuter(this.progressBarChange.bind(this), 1);
		}
		if ($("bt_save").value != t("general.btn.extend", "X Extend")) {
			this.objects.elapsedTime = 0;
			this.uPort = this.generatePort();
			this.uPassword = this.generatePassword(8);
			this.objects.RemoteAccess.Port =   this.uPort;
			this.objects.RemoteAccess.Enable =   true;
			this.client.execute("sysbus.NMC:enableRemoteAccess",{
				username : "support",
				password: this.uPassword,
				port: this.uPort,
				timeout:900
			},{
				onSuccess:this.whenSaved.bind(this),
				onFailure:this.whenNotSaved.bind(this)
			})
         
		} else {
           
			this.client.execute("sysbus.RemoteAccess:restartTimer",{},{
				onSuccess: this.whenSaved.bind(this,true),
				onFailure: this.whenNotSaved.bind(this)
			});
		//this.firstProgressBarChange();
		}

		this.form.disable();
		Sah.translator.change($("bt_save"), "general.btn.extend", "X Extend");
		$("bt_save").enable();
		$("bt_cancel").enable();
	},



	whenSaved: function (obj) {
		if(!obj){
			new Ajax.Request("/logout?remote=1", {
				method: 'get'
			});
		}
       
		this.objects.RemoteAccess._load({
			onSuccess: function(){
				this.fillForm();
				this.firstProgressBarChange();
			}.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		});
        
		this.markAsLoaded();
	},

	whenNotSaved: function (obj) {
        
		//this.onCancel();
		this.fillForm();
		this.markAsLoaded();
	},

	onCancel: function () {
		//this.markAsLoading();
		this.objects.elapsedTime = 0;
		this.objects.widthImgProgress = 512;
		$("progressbar_id").setStyle("width:" + (this.objects.widthImgProgress) + "px");
		if (this.progressBar) {
			this.progressBar.stop();
			this.progressBar = undefined;
		}
		this.objects.RemoteAccess.Enable =   false;
		this.client.execute("sysbus.NMC:disableRemoteAccess",{},{
			onSuccess: this.whenSaved.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		});

		this.form.disable();
		Sah.translator.change($("bt_save"), "general.btn.start", "X Start");
		$("bt_save").enable();
		$("bt_cancel").enable();
	},

	firstProgressBarChange: function () {
		this.objects.RemoteAccess._load({
			onSuccess: this.getElapsedTime.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		});
	},

	loadRemoteAccess: function () {
		this.objects.RemoteAccess._load({
			onSuccess: this.getElapsedTime.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		});
	},



	progressBarChange: function (event) {
		this.objects.elapsedTime += 1;
		var remainingTime = 512 - ((512 * this.objects.elapsedTime) / 900);
		this.objects.widthImgProgress = remainingTime;
		if (this.objects.widthImgProgress >= 0) {
			$("progressbar_id").setStyle("width:" + (this.objects.widthImgProgress) + "px");
		} else {
			//this.onCancel();
			this.fillForm();
		}
	},

	getElapsedTime: function () {
		this.objects.elapsedTime = parseInt(this.objects.RemoteAccess.Timeout, 10)-parseInt(this.objects.RemoteAccess.TimeLeft,10);
		var remainingTime = 512 - ((512 * this.objects.elapsedTime) / 900);
		this.objects.widthImgProgress = remainingTime;
        
		if (this.objects.widthImgProgress >= 0) {
			$("progressbar_id").setStyle("width:" + (this.objects.widthImgProgress) + "px");
		} else {
		//this.onCancel();
		}
	},
	generatePassword:function(length){
   
   
		var text = "";
		var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#%&()?+-;:";

		for( var i=0; i < length; i++ )
			text += possible.charAt(Math.floor(Math.random() * possible.length));

		return text;

        
	},
	generatePort : function(){
		return Math.floor((Math.random() * 20000) + 10000);;
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/admin/userInterface.js */

Admin.UserInterface = {};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/auth.js */

Sah.Auth = Class.create( /** @lends Sah.Auth# */ {
	/**
	 * @class Takes care of authentication
	 * @constructs
	 */
	initialize: function () {

	},

	/**
	 * Check if a user is authenticated
	 */
	authenticate: function () {
		var sessid = Cookie.get('sessid');
		return sessid && sessid.match(/\w/);
	},

	/**
	 * current user logged in
	 */
	username: function () {
		return Cookie.get('login');
	},

	/**
	 * Authenticate user
	 */
	login: function (username, password, handlers) {
		if (username.match(/^\s*$/)) {
			handlers["onFailure"](null, null);
			return;
		}
		
		var localHandlers = Sah.decorateHandlers(this, handlers, {
			onSuccess: function (oldHandler, object, response) { /* work arround for FF bug #488605 */
				if (!object) {
					handlers["onFailure"](null, response);
					return;
				}
				Sah.Bus.contextID = object.responseJSON.data.contextID;
				Cookie.set('context', Sah.Bus.contextID);
				Cookie.set('login', username);
				
				var sessionDuration = (config.SESSION_DURATION ? parseInt(config.SESSION_DURATION) : 600000);
				
				if (sessionDuration !== 0){				
					var d = new Date();
					d.setTime(d.getTime() + (sessionDuration * 1000));
					Cookie.set('expirydate', d);
					
				}
				oldHandler(object, response);
			}.bind(this),
			
			onFailure: function (oldHandler, object, response) {
				Cookie.unset('sessid');
				Event.fire(document, "sah:authentication:error", this);
			}.bind(this),
			
			on401: function (oldHandler, object, response) {
				Cookie.unset('sessid');
				Event.fire(document, "sah:authentication:error");
			}.bind(this),
			
			onException: function(){
			}

		});
		localHandlers.method = "post";
		localHandlers.parameters = {
			"username": username,
			"password": password
		};
		new Ajax.Request("/authenticate?" + Object.toQueryString(localHandlers.parameters),
			localHandlers);
	},

	/**
	 * Logout
	 */
	logout: function (handler) {
		Cookie.unset('sessid');
		if(Cookie.get('expirydate') !== null){
			Cookie.unset('expirydate');
		}
		if(Cookie.get('context') !== null){
			Cookie.unset('context');
		}
		if(Cookie.get('login') !== null){
			Cookie.unset('login');
		}
		new Ajax.Request("/logout", {
			onComplete: handler,
			method: "get"
		});
	}

});
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/admin/userInterface/account.js */

Admin.UserInterface.Account = Class.create(Sah.AuthenticatedForm, /** @lends Admin.UserInterface.Account# */ {
	_adminAccount: null,
	initialize: function ($super, form) {
		$super(form);
		this.auth = new Sah.Auth();
		
		$("cancel_bt").observe("click", this.onCancel.bind(this));
		
		this.needs("UserManagement", {
			path: "sysbus.UserManagement:getUsers",
			method: "execute"
		});
		
		this.form.disable();
		this.load();
	},
	
	objectsLoaded: function () {
		this.objects.UserManagement.each(function (user) {
			if (user.name === "admin" && user.enable == true) {
				this._adminAccount = user;
			}
		}, this);
		
		if (this._adminAccount !== null) {
			this.form.enable();
			this.fillForm();
			$("save_bt").observe("click", this.onSave.bind(this));
			
		} else {
			this.logger.error("admin user not found");
		}
	},
	
	fillForm: function () {
		$('Account.CurrentPassword').setValue("");
		$('Account.ConfirmPassword').setValue("");
		$('Account.NewPassword').setValue("");
	},
	
	onSave: function (event) {
		event.stop(event);
		$("support.configadmin.currentpassword.error").hide();
		$("support.configadmin.newpassword.error").hide();
		$("support.configadmin.confirmnewpassword.error").hide();
		
		if ($F('Account.CurrentPassword') == "") {
			this.displayErrorMessage("advconfig.admin.error.description.empty", "X Empty values.");
		} else if ($F('Account.NewPassword') != $F('Account.CurrentPassword')) {
			if (this.validateUserInterfaceAccount($F('Account.NewPassword'), $F('Account.ConfirmPassword'))) {
				this.client.execute("sysbus.UserManagement:authenticate", {
					name: "admin",
					password: $F('Account.CurrentPassword'),
					groups: this._adminAccount.groups
				}, {
					onSuccess: this.verifyCurrentPasswordAndSave.bind(this),
					onFailure: this.whenNotSaved.bind(this)
				});
			}
		} else {
			$("support.configadmin.newpassword.error").show();
			Sah.translator.change($("advconfig.admin.error.description.newpassword"), "advconfig.admin.error.description.newpassword", "X Wrong password. It should contain between 4 to 32 characters.");
			//this.displayErrorMessage("advconfig.admin.error.description.newpassword", "X password invalid.");
		}

		return false;
	},

	verifyCurrentPasswordAndSave: function (result) {
		if (!(result.result && result.result.status)) {
			var label = "advconfig.admin.error.description.currentpassword";
			var alternate = "X Wrong current password.";
			this.displayErrorMessage(label, alternate);
			this.whenNotSaved();
		} else {
			this.client.execute("sysbus.UserManagement:changePassword", {
				name: "admin",
				password: $F('Account.NewPassword')
			}, {
				onSuccess: this.whenSaved.bind(this, $F('Account.NewPassword')),
				onFailure: this.whenNotSaved.bind(this)
			});
		}
	},

	whenSaved: function (password, obj) {
		ctl.msgbox.Show(ctl.msgbox.QUESTION.OK, t('advconfig.admin.label.passwordmodified', 'X Your password has been modified'), (function () {
			this.auth.logout(this.redirect.bind(this, "/"));
		}).bind(this));
	},

	whenNotSaved: function (obj) {
		this.logger.warn("failed to save object");
		this.logger.warn(obj);
		this.fillForm(this.objects);
	},

	onCancel: function (event) {
		$("support.configadmin.currentpassword.error").hide();
		$("support.configadmin.newpassword.error").hide();
		$("support.configadmin.confirmnewpassword.error").hide();
		this.fillForm(this.objects);
	},

	/**
	 ** display tooltip to control admin password
	 **/
	displayErrorMessage: function (label, alternate) {
		if (label == "advconfig.admin.error.description.empty") {
			$("support.configadmin.currentpassword.error").show();
			Sah.translator.change($("advconfig.admin.error.description.currentpassword"), label, alternate);
		} else {
			if (label == "advconfig.admin.error.description.currentpassword") {
				$("support.configadmin.currentpassword.error").show();
				Sah.translator.change($("advconfig.admin.error.description.currentpassword"), label, alternate);
			} else {
				if (label == "advconfig.admin.error.description.newpassword") {
					$("support.configadmin.newpassword.error").show();
					Sah.translator.change($("advconfig.admin.error.description.newpassword"), label, alternate);
				} else {
					if (label == "advconfig.admin.error.description.confirmnewpassword") {
						$("support.configadmin.confirmnewpassword.error").show();
						Sah.translator.change($("advconfig.admin.error.description.confirmnewpassword"), label, alternate);
					}
				}
			}
		}
	},

	validateUserInterfaceAccount: function (newPassword, confirmPassword) {
		var bValid = true;
		var label = "";
		var alternate = "";

		if (newPassword == "" || newPassword.length < 4 || newPassword.length > 32) {
			label = "advconfig.admin.error.description.newpassword";
			alternate = "X Wrong password. It should contain between 4 to 32 characters.";
			bValid = false;
		} else if (confirmPassword != newPassword) {
				label = "advconfig.admin.error.description.confirmnewpassword";
				alternate = "X New and confirmation password are not the same. Please start over.";
				bValid = false;
		}


		if (!bValid) {
			this.displayErrorMessage(label, alternate);
		}

		return bValid;
	}
});
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/admin/userInterface/language.js */

/**
 *
 * Administration User Interface 
 *
 *         (Language)
 *
 */
Admin.UserInterface.Language = Class.create(Sah.Form, /** @lends Admin.UserInterface.Language# */ {
	initialize: function ($super, form) {
		$super(form);
		this.language = Cookie.get("language");
		this.possibleLanguagesString = (Cookie.get("possibleLanguages") ? Cookie.get("possibleLanguages") : "");
		this.languageSet();
	},

	languageSet: function () {
		if (this.possibleLanguagesString && this.possibleLanguagesString !== "" && this.language && this.language != "") {
			this.objects = {
				Languages: {
					status: this.language,
					availableLanguages: this.possibleLanguagesString.split(',')
				}
			};
			this.possibleLanguages = this.objects.Languages.availableLanguages;
			this.prepareForm();
		} else {
			new Ajax.Request("/sysbus/UserInterface:getLanguage",
			{
			    method: "post",
			    contentType:"application/x-sah-ws-1-call+json",
			    postBody: Object.toJSON({
				  "parameters": {}
			    }),
			    onSuccess: this.objectLoaded.bind(this)
			});
		}
	},
	
	
	objectLoaded: function(obj) {
		this.objects = {};
		this.objects.Languages = {
			status: obj.responseJSON.result.status,
			availableLanguages: obj.responseJSON.result.data.availableLanguages
		};
		
		this.possibleLanguages = this.objects.Languages.availableLanguages;
		this.language = this.objects.Languages.status;
		Cookie.set("language", this.language);
		Cookie.set("possibleLanguages", this.possibleLanguages.join(','));
		this.prepareForm();
	},
	
	prepareForm: function (obj) {
		Sah.translator = new Sah.Translate();
		Sah.translator.setup();
		
		document.documentElement.lang = this.language + "-" + this.language.toUpperCase();
		
		/* select Languages */
		$("Language-select").update();
		
		this.possibleLanguages.each(function (language) { /* create a new option element */
			var option = new Element("option", {
				value: language
			}); /* translate the option text */
			option.insert(Admin.UserInterface.Language.Label[language]);
			option.selected = (language == Sah.translator.language); /* insert the option in the select box */
			$("Language-select").insert(option);

		}, this);
		
		$("Language-select").observe("change", this.onChangeLanguage.bind(this));
		this.form.enable();
		this.form.show();

		if (!this.customSelectLoaded) {
			this.createCustomSelect();
		}
	},

	createCustomSelect: function () {
		this.newLangSelect = new Sah.Widget.LanguageSelect("Language-select", {
			"showEvent": "click",
			"onchange": this.onChangeLanguage.bind(this)
		});
		this.customSelectLoaded = true;
	},


	onChangeLanguage: function (a) {
		var newLanguage = a;
		//var newLanguage = $F("Language-select");
		Sah.translator.setAndSaveLanguage(newLanguage);
		//var flagImage = $("languagues-flag-icon");
		//flagImage.src = "/images/fr/languages/"+Admin.UserInterface.Language.Label[newLanguage].replace(/\s+$/,"").toLowerCase()+".png";
		/* Change Dom language default; */
		document.documentElement.lang = newLanguage + "-" + newLanguage.toUpperCase();
		document.fire("sah:admin:language:change", $F("Language-select"));
	}
});

Admin.UserInterface.Language.Label = {
	"en": "English ",
	"fr": "Français ",
	"sp": "Español ",
	"de": "Deutsche ",
	"pl": "Polski"
};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/eventListner.js */

/**
 * @namespace Holds the home entity and its associated forms
 */
var EventListner = {};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/eventListner/observeDisconnected.js */

EventListner.ObserveDisconnected = Class.create(Sah.Form, {
  
	_devices: {
		"ethernet": [],
		"wifi": [],
		"usb": []		
	},
	_UsbMenu: false,
	_DeviceMenu: false,
	_fillLists: false,
	_adjusted: false,
	
	_lastFocusedElt: "",
	  
	initialize: function  ($super, form) {
		$("bt_refresh").observe("click", function (event) {
			event.stop();
			window.location.reload();
		}.bind(this));

		$('left-discondevices-link').addClassName('current');
                
                if($$('#header-hmenu li.active').length > 0)
                    $$('#header-hmenu li.active')[0].removeClassName('active');
                
		$('hmenu-home').addClassName('active');
	
		$super(form);
		this.objects = new Object;
		
		$('dDevicescustomize').observe("keypress", function(e){
			if(e.keyCode === 9 && document.activeElement === $('dDevicescustomize')) {
				e.preventDefault();
				this._lastFocusedElt.focus();
				this.hideDeviceMenu();
			}
		}.bind(this));

		if (!this.catiqStatus || config.BUILD_PROJECT.indexOf("2.8") < 0  ) {
			this.adjustdisconnectedDevicesTable();
		}
		
		this.request = {
			"events": [
				{"service":"Devices.Device", "event":"topology_changed"},
				{"service":"Devices.Device", "event":"wifi_device_updated"},
				{"service":"Devices.Device", "event":"eth_device_updated"},
				{"service":"Devices.Device", "event":"usb_device_updated"},
				{"service":"Devices.Device", "event":"logical_device_updated"},
				{"service":"Devices.Device", "event":"self_device_updated"},
				{"service":"Devices.Device", "event":"device_error"},
				{"service":"Devices.Device", "event":"device_error_solved"}
			]
		};
		
		this.events = [];
		this.needs("Devices", {
			path: "sysbus.Devices:get",
			method :"execute",
			methodParams: {
				"expression":".Active==false",
				"traverse":"down",
				"flags": ""
			}
		});
		
		this.load();		
	},
	
	objectsLoaded: function () {
		Event.observe($('content'), "click", this.hideDeviceMenu.bind(this));
		var HGW = this.objects["Devices"],
		_devices = {
			"ethernet": [],
			"wifi" : [],
			"usb": []
		};
		
		var getList =  function(Node) {
			if (Node["DeviceTypes"] && Node["DeviceTypes"].length >0) {
				 Node["deviceType"] = [Node["DeviceTypes"][0]["Type"]];
			}
			if (Node["Tags"]) {
				  if ( Node["Tags"].indexOf("edev") >= 0 && Node["Tags"].indexOf("wifi") >= 0 && Node["Tags"].indexOf("physical") >= 0) {
					  Node._path = "wifi_" + _devices["wifi"].length;
					  Node["deviceType"]=["Computer"];
					  _devices["wifi"].push(Node);
				  } else if ( Node["Tags"].indexOf("edev") >= 0 && Node["Tags"].indexOf("eth") >= 0 && Node["Tags"].indexOf("physical") >= 0) {
					  Node._path = "ethernet_" + _devices["ethernet"].length;
					  Node["deviceType"]=["Computer"];
					  _devices["ethernet"].push(Node);
				  } else if (Node["Tags"].indexOf("storage") >= 0 && Node["Tags"].indexOf("usb") >= 0 && Node["Tags"].indexOf("logical") >= 0) {
					  Node._path = "usb_" + _devices["usb"].length;
					  Node["deviceType"] = ["Storage"];
					  _devices["usb"].push(Node);
				  } else if(Node["Tags"].indexOf("wmbus") >= 0 && Node["Tags"].indexOf("dongle") >= 0 && Node["Tags"].indexOf("logical") >= 0){
					 Node._path = "usb_" + _devices["usb"].length;
					 Node["deviceType"]=["dongle"];
					 _devices["usb"].push(Node);
				
				  }else if (Node["Children"] && Node["Children"].length > 0) {
					  for(var i=0; i<Node["Children"].length; i++) {
					      getList(Node["Children"][i]);
					  }
				  }

				
			} else if (Node["Children"] && Node["Children"].length > 0) {
					  for(var i=0; i<Node["Children"].length; i++) {
					      getList(Node["Children"][i]);
					  }
				}
		};
		
		for(var i=0; i<HGW.length; i++) {
			      getList(HGW[i]);
		}
		
		this._devices["wifi"] = _devices["wifi"];
		this._devices["ethernet"] = _devices["ethernet"];
		this._devices["usb"] = _devices["usb"];
		this.appendDevicesList();
		this.observe();
	},

	appendDevicesList: function () {
		var max = null;
		
		$$('#notconnecteddevices_table tbody .ethernet').each(function (td) {
			if (td.innerHTML !== ""){
				td.innerHTML = "";
				td.stopObserving('click');
			}
		});
		this._devices["ethernet"].each(function (device) {				      
			this.appendEthernetDevice(device);
		}, this);

		$$('#notconnecteddevices_table tbody .wireless').each(function (td) {
			if (td.innerHTML !== ""){
				td.innerHTML = "";
				td.stopObserving('click')
			}
		});
		this._devices["wifi"].each(function (device) {
			this.appendWirelessDevice(device);
		}, this);
					    
		$$('#notconnecteddevices_table tbody .usb').each(function (td) {
			if (td.innerHTML !== "")
				td.innerHTML = "";
		});	
		this._devices["usb"].each(function (device) {
			this.appendUsbDevice(device);
		}, this);
		
		//delete empty rows
			
		max = this._devices["ethernet"].length ; 
			
		if ( this._devices["wifi"].length > max) 
			max = this._devices["wifi"].length ;
			
		if ( this._devices["usb"].length > max) 
			max = this._devices["usb"].length ;

		$$(".row").each(function (elem) {
		    max = max -1;
		    if (max < 0)
			elem.remove();
		}, this);
	},
	
	observe: function () {
		this.rq = new Ajax.Request("/sysbus/eventmanager:get_events", {
			method: "post",
			postBody: Object.toJSON({
				"parameters": this.request
			}),
			contentType:"application/x-sah-ws-4-call+json",
			requestHeaders: {
				"X-Context":Sah.Bus.contextID,
				"X-Sah-Request-Type": "idle"
			},
			onSuccess: this.eventReceived.bind(this),
			onFailure: this.failed.bind(this)
		});
	},
	    
	failed: function (response) {
		var msg = "error monitoring events: " + response.status + " " + response.statusText;

		if (response.responseText) {
			msg += " " + response.responseText;
		}
		Sah.logger.error(msg);
	},
	    
	eventReceived: function (response) {
		var o;
		
		if (o = response.responseText) {
		        if ((o.indexOf("null")>=0)||(o.indexOf("errors")>=0)) {
			    return;
		        }
			else {
			    response = JSON.parse(o);
                this.events = this.events.concat(response.status.events);
                this.request.channelid = response.status.channelid;
                this.processEvents();
			}
		} else {
			    return;
		}
		
		//this.observe();
	},
	    
	processEvents: function (inputType) {
		var e = null,
		device = null,
		interfaceType = null,
		types = [],
		max = null,
		undef;
		
		// @toDo To be deleted & handle all events speratly
		this.needs("Devices", {
			path: "sysbus.Devices:get",
			method :"execute",
			methodParams: {
				"expression":".Active==false",
				"traverse":"down",
				"flags": ""
			}
		});
		this.loaded = false;
		this.load();
		/*
		while ((e = this.events.shift())) {	    
			if (e.data.object.attributes.Device != undef) {
				device = e.data.object.attributes.Device;
			} else {
				device = null;
			}
		
			if (device != null) {
				switch (e.data.object.reason) {
					case "device_changed":{	
						if ( device.interfaceType !== undef) { //Network ~ Ethernet & Wifi
							if ( device.interfaceType === "Ethernet" ) {
								if ( device.active === false ) {
									this.appendDevice(device, "ethernet");
								}else{
									this.removeDevice(device, "ethernet");
								}
								interfaceType = "ethernet";
							} else if ( device.interfaceType .indexOf("802.11")>=0 ) {
								if ( device.active === false ) {
									this.appendDevice(device, "wifi");
								}else{
									this.removeDevice(device, "wifi");
								}
								interfaceType = "wifi";
							}
						} else if (device.deviceSource !== undef && (device.deviceSource === "usb"||device.deviceSource === "storage") ) { //Usb ~ Storage & Printer
						    if (device.deviceType[0] === "Printer" || (device.deviceSource === "storage" && device.deviceType[0] === "Storage"  ) ) {	      
							if (!device.enable){
							    this.appendDevice(device, "usb");
							}else{
							    this.removeDevice(device, "usb");
							}						 
							interfaceType = "usb";
						    }
						};
					}
					break;
					
					case "device_deleted":{
							  
						if ( device.interfaceType !== undef) { //Network ~ Ethernet & Wifi
							if ( device.interfaceType === "Ethernet") {
								this.removeDevice(device, "ethernet");
								interfaceType = "ethernet";
							  } else if ( device.interfaceType .indexOf("802.11")>=0) {
								this.removeDevice(device, "wifi");
								interfaceType = "wifi";
							}
						} else if (device.deviceSource !== undef && (device.deviceSource === "usb"||device.deviceSource === "storage") ) { //Usb ~ Storage & Printer
							if ( device.deviceType[0] === "Printer" || (device.deviceSource === "storage" && device.deviceType[0] === "Storage" && !device.enable)){
								this.removeDevice(device, "usb");
								interfaceType = "usb";
							}
						};
					}
						
					break;
						
					case "device_added":{
												
						if ( device.interfaceType !== undef) { //Network ~ Ethernet & Wifi
							if ( device.interfaceType === "Ethernet" && !device.active ) {
								this.appendDevice(device, "ethernet");
								interfaceType = "ethernet";
							} else if ( device.interfaceType .indexOf("802.11")>=0 && !device.active ) {
								this.appendDevice(device, "wifi");
								interfaceType = "wifi";
							}
						} else if (device.deviceSource !== undef && (device.deviceSource === "usb"||device.deviceSource === "storage") ) { //Usb ~ Storage & Printer
							if ( device.deviceType[0] === "Printer" || (device.deviceSource === "storage" && device.deviceType[0] === "Storage" && !device.enable)){
										  
								this.appendDevice(device, "usb");
								interfaceType = "usb";
										    
							}
						} 
					}
					break;
					
					default:
						Sah.logger.error("Unrecognized event reason: %s", e.data.object.reason);
				}
					
				for (var i=0; i < types.length; i++) {
					if (types[i] === interfaceType) {
						break;
					}
				}
							    
				if ( i === types.length ) {
					types.push(interfaceType);
				}
			}
		}
			
			
			
		if (inputType !== undef) {
		    types.push(inputType);
		}
		
		for (var i=0; i<types.length; i++) {
			switch (types[i]) {
				case "ethernet" :			    
					$$('#notconnecteddevices_table tbody .ethernet').each(function (td) {
						if (td.innerHTML !== ""){
							td.innerHTML = "";
							td.stopObserving('click');
						}
					});
					this._devices["ethernet"].each(function (device) {				      
						this.appendEthernetDevice(device);
					}, this);
									
					break;								
				case "wifi":    
					$$('#notconnecteddevices_table tbody .wireless').each(function (td) {
						if (td.innerHTML !== ""){
							td.innerHTML = "";
							td.stopObserving('click')
						}
					});
					this._devices["wifi"].each(function (device) {
						this.appendWirelessDevice(device);
					}, this);
					break;
							    
				case "usb":							    
					$$('#notconnecteddevices_table tbody .usb').each(function (td) {
						if (td.innerHTML !== "")
							td.innerHTML = "";
					});	
					this._devices["usb"].each(function (device) {
						this.appendUsbDevice(device);
					}, this);
					break;	
			}
		}			
			
		 //delete empty rows
			
		max = this._devices["ethernet"].length ; 
			
		if ( this._devices["wifi"].length > max) 
			max = this._devices["wifi"].length ;
			
		if ( this._devices["usb"].length > max) 
			max = this._devices["usb"].length ;
			  
	
			
			
		$$(".row").each(function (elem) {
		    max = max -1;
		    if (max < 0)
			elem.remove();
		}, this);
		*/
	},
	    
	    
	appendDevice: function (device, interfaceType) {
		var exist = false;
		
		if ( interfaceType === "ethernet" || interfaceType === "wifi" ) {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if (this._devices[interfaceType][i].physAddress == device.PhysAddress) {
					exist = true;
					break;
				}
			}
		} else if ( interfaceType === "usb" && device.deviceType[0] === "Storage" ) {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if (this._devices[interfaceType][i].uri == device.uri ) {
					exist = true;
					break;
				}
			}
		} else if ( interfaceType === "usb" && device.deviceType[0] === "Printer" ) {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if ( this._devices[interfaceType][i].deviceUID == device.deviceUID ) {
					exist = true;
					break;
				}
			}
		} 	
			
		if ( !exist ) {
			device._path = interfaceType + "_" +  i;
			this._devices[interfaceType].push(device);
		}
	},
	    
	    
	removeDevice: function (device, interfaceType) {
		var list = [];

					
		if ( interfaceType === "ethernet" || interfaceType === "wifi" ) {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if (this._devices[interfaceType][i].physAddress == device.PhysAddress) {						    
					continue;
				} else {
					list.push(this._devices[interfaceType][i]);
				}
			}
		} else if ( interfaceType === "usb" && device.deviceType[0] === "Storage" ) {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if (this._devices[interfaceType][i].uri == device.uri ) {						      
					continue;
				} else {
					list.push(this._devices[interfaceType][i]);
				}
			}
		} else if ( interfaceType === "usb" && device.deviceType[0] === "Printer" ) {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if ( this._devices[interfaceType][i].deviceUID == device.deviceUID ) {
					continue;
				} else {
					list.push(this._devices[interfaceType][i]);
				}
			}
		} 
			
		this._devices[interfaceType] = list;		    
	},
	    
	    
	appendEthernetDevice: function (device) {
		    
		var appended = false,
		undef;
		var title = device.Name;		
		if (device.deviceType[0].toLowerCase().indexOf("stb") >=0 || device.deviceType[0].toLowerCase().indexOf("set-top box") >= 0){
			title = t("home.label.stb","X set-top box");
			document.observe("sah:admin:language:change",function (){
				title = t("home.label.stb","X set-top box");
			}.bind(this));
		}
			
		// Check if there any empty Td to append the ethernet device
		$$('#notconnecteddevices_table tbody .ethernet').each(function (td) {
				
			if (td.innerHTML == "" && !appended ) {				    
				td.addClassName(this.getIcon(device));						
				td.id = device._path;				
				td.update(
					'<a href="#"><div><div class="internet-restriction-icon2"><img class="internet-restriction-img"  src="' +
					this.getInternetRestrictionIcon(device.Tags)
					+ '" /></div><div class="icon png"><img width="55" height="43" alt="'+
					Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)) + "  " +this.getDeviceTranslation(device)
					+ '" src="' +
					this.getSrcIcon(this.getIcon(device).toLowerCase())
					+ '" class="img-zoom"/></div><div class="title">' +
					this.truncateDeviceName(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', title)), 16)
					+ '</div></div></a>'
				);
						
				document.observe("sah:admin:language:change",function (){
					$(device._path).getElementsByTagName("img")[1].alt = Sah.Tools.escapeString('js', device.Name) + "  " +this.getDeviceTranslation(device);
				}.bind(this));
				appended = true;
						
						
				var deviceType = "";
						
				if ( EventListner.DeviceClasses[device.deviceType[0].toLowerCase()] !== undef  ){						      
					deviceType = EventListner.DeviceClasses[device.deviceType[0].toLowerCase()];
				}else{
					deviceType = "desktop";
				}
						
			      /* if (deviceType.indexOf("tv") >= 0 || deviceType.indexOf("stb") >=0 || deviceType.indexOf("set-top box") >= 0 ) {
				// nothing to do its stb or tv device
				} else {*/
				td.observe('click', this.changeDevice.bind(this, device , td));
				td.observe('click', this.getLastFocusedElement.bind(this, td));
			    //    }
					    
			}
		}, this);
			
		if (!appended) {	
			
			var tr = new Element('tr', {
				'class': 'row'
			}).update(
				'<td id="' +
				device._path 
				+ '" class="' +
				this.getIcon(device)
				+ ' li-device ethernet"><a href="#"><div><div class="internet-restriction-icon2"><img class="internet-restriction-img"  src="' +
				this.getInternetRestrictionIcon(device.Tags)
				+ '" /></div><div class="icon png"><img width="55" height="43" alt="'+
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)) + "  " +this.getDeviceTranslation(device)
				+ '" src="' +
				this.getSrcIcon(this.getIcon(device).toLowerCase())
				+ '" class="img-zoom"/></div><div class="title">' + 
				this.truncateDeviceName(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', title)), 16)
				+ '</div></div></a></td><td class="li-device wireless"></td><td class="li-device usb"></td>'
			);
			$$('#notconnecteddevices_table tbody')[0].appendChild(tr);
				    
			document.observe("sah:admin:language:change",function (){
				$(device._path).getElementsByTagName("img")[1].alt = Sah.Tools.escapeString('js', device.Name) + "  " +this.getDeviceTranslation(device);
			}.bind(this));
				    
			var deviceType = "";
				    
			if ( EventListner.DeviceClasses[device.deviceType[0].toLowerCase()] !== undef  ){					  
			    deviceType = EventListner.DeviceClasses[device.deviceType[0].toLowerCase()];
			}else{
			    deviceType = "desktop";
			}
				    
			var td = tr.getElementsByTagName("td")[0];
			$(device._path).observe('click', this.changeDevice.bind(this, device , td));
			$(device._path).observe('click', this.getLastFocusedElement.bind(this, td));
		}
		    
	},
	    
	    
	appendWirelessDevice: function (device) {
	    
		var appended = false;
		// Check if there any empty Td to append the Wireless device
		$$('#notconnecteddevices_table tbody .wireless').each(function (td) {
			if (td.innerHTML == "" && !appended) {
				td.addClassName(this.getIcon(device));
				td.setAttribute('id',device._path);
				td.update(
					'<a href="#"><div><div class="internet-restriction-icon2"><img class="internet-restriction-img"  src="' +
					this.getInternetRestrictionIcon(device.Tags)
					+ '" /></div><div class="icon png"><img width="55" height="43" alt="'+
					Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)) + "  " +this.getDeviceTranslation(device)
					+ '" src="' +
					this.getSrcIcon(this.getIcon(device).toLowerCase())
					+ '" class="img-zoom"/></div><div class="title">' +
					this.truncateDeviceName(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)), 16)
					+ '</div></div></a>'
				);
						
				appended = true;
				td.observe('click', this.changeDevice.bind(this, device , td));
				td.observe('click', this.getLastFocusedElement.bind(this, td));
				document.observe("sah:admin:language:change",function (){
					$(device._path).getElementsByTagName("img")[1].alt = Sah.Tools.escapeString('js', device.Name) + "  " +this.getDeviceTranslation(device);
				}.bind(this));
			}
		}, this);
		
		if (!appended) {
			
			var tr = new Element('tr', {
				'class': 'row'
			}).update(
				'<td class="li-device ethernet"></td><td id ="' + device._path + '" class="' + this.getIcon(device) + 
				' li-device wireless"><a href="#"><div><div class="internet-restriction-icon2"><img class="internet-restriction-img"  src="' +
				this.getInternetRestrictionIcon(device.Tags)
				+ '" /></div><div class="icon png"><img width="55" height="43" alt="'+
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)) + "  " +this.getDeviceTranslation(device)
				+ '" src="' +
				this.getSrcIcon(this.getIcon(device).toLowerCase())
				+ '" class="img-zoom"/></div><div class="title">' + 
				this.truncateDeviceName(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)), 16)
				+ '</div></div></a></td><td class="li-device usb"></td>'
			);
					    
			    
			document.observe("sah:admin:language:change",function (){
				$(device._path).getElementsByTagName("img")[1].alt = Sah.Tools.escapeString('js', device.Name) + "  " +this.getDeviceTranslation(device);
			}.bind(this));
				    
			$$('#notconnecteddevices_table tbody')[0].appendChild(tr);
				    
			var td = tr.getElementsByTagName("td")[0];
			$(device._path).observe('click', this.changeDevice.bind(this, device , td));
			$(device._path).observe('click', this.getLastFocusedElement.bind(this, td));
		}
		this.setScheduleIcon(device._path, device.Tags);
		    
	},
	    
	appendUsbDevice: function (device) {		    
		var appended = false;		
		// Check if there is any empty Td to append the usb device
		$$('#notconnecteddevices_table tbody .usb').each(function (td) {			  
			if (td.innerHTML == "" && !appended ) {					
				td.addClassName("usb");
				td.id = device._path;
				if(device.deviceType[0]=="dongle"){
							td.update(
							'<div class="icon png"><img width="55" height="43" alt="'+
							Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)) + "  " +this.getDeviceTranslation(device)
							+ '" src="' +
							this.getSrcIcon("dongle")
							+ '" class="img-zoom"/></div><div class="title">' +
							this.truncateDeviceName(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)), 16)
							+ '</div>'
					);

				}else{
					
					    td.update(
							'<div class="icon png"><img width="55" height="43" alt="'+
							Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)) + "  " +this.getDeviceTranslation(device)
							+ '" src="' +
							this.getSrcIcon("mass-storage")
							+ '" class="img-zoom"/></div><div class="title">' +
							this.truncateDeviceName(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)), 16)
							+ '</div>'
					);
			  }
				document.observe("sah:admin:language:change",function (){
					$(device._path).getElementsByTagName("img")[0].alt = Sah.Tools.escapeString('js', device.Name) + "  " +this.getDeviceTranslation(device);
				}.bind(this));
				appended = true;					    
			}
		}, this);
			
			
		if (!appended) {				
		    var tr = new Element('tr', {
			'class': 'row'
		    }).update(
			'<td class="li-device ethernet"></td><td class="li-device wireless"></td><td id="'+
			device._path 
			+ '" class="li-device usb"><div class="icon png"><img width="55" height="43" alt="'+
			Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)) + "  " +this.getDeviceTranslation(device)
			+ '" src="' +
			this.getSrcIcon("mass-storage")
			+ '" class="img-zoom"/></div><div class="title">' +
			this.truncateDeviceName(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)), 16)
			+ '</div></td>'
			);
		    document.observe("sah:admin:language:change",function (){
				  
			$(device._path).getElementsByTagName("img")[0].alt = Sah.Tools.escapeString('js', device.Name) + "  " +this.getDeviceTranslation(device);
		    }.bind(this));
		    $$('#notconnecteddevices_table tbody')[0].appendChild(tr);
				
		}    
	},
	    
	hideDeviceMenu: function ( evnt ) {
		this.removeBodyFocus();
			
		if (this._DeviceMenu) {
			$('accessscheduling').stopObserving('click');
// 			$('deletedevicemenuitem').stopObserving('click');
			$('devicescustomize').stopObserving('click');			
			$$('#disconnectedDeviceMenu')[0].setStyle({
				display: 'none',
				top: 'auto',
				left: 'auto'
			});
				    
			this._DeviceMenu = false;
		}
		if (evnt) {
			evnt.stop();
		}
	},	    
	    
	removeBodyFocus : function(){
		if(this.globalFocusHandler)this.removeFocusEvent($(document.body), "focus", true,this.globalFocusHandler);
		this.logger.info("body focus event removed");
	},
	    
	getIcon: function (device) {
		var ico = null;
		
		if (device.DeviceType && device.DeviceType.length > 0) {
			ico = EventListner.DeviceClasses[device.DeviceType.toLowerCase()];
		}
		
		if (ico) {
			return ico;
		} else if (device.Name.match(/liveradio|vintage/i)) {
			return "liveradio";
		} else {
			return "desktop";
		}
	},
	
	setScheduleIcon: function (path, tags) {
		var setted = false;		
		
		if (tags.toLowerCase().indexOf("wan-blocked") >= 0) {
		     
			$$("#" + path + " div.internet-restriction-icon2")[0].removeClassName("internet-restriction-green");
			$$("#" + path + " div.internet-restriction-icon2")[0].addClassName("internet-restriction-red");
			setted = true;
		}
		
				
		if (!setted) {
			$$("#" + path + " div.internet-restriction-icon2")[0].removeClassName("internet-restriction-red");
			$$("#" + path + " div.internet-restriction-icon2")[0].addClassName("internet-restriction-green");
		}
	},
	
	getSrcIcon: function (deviceCat) {
		if (deviceCat==="dongle") {
		  return "/images/fr/devices/icons-devices-edf.png";
		}   
		return appUrl + "/images/"+ appConfig + EventListner.IconPath[deviceCat];
	},
	    
	getDeviceTranslation: function (device) {
		var deviceType = "",
		deviceLabelTranslation = "",
		undef;
				
		if (device.deviceType && device.deviceType.length > 0 && EventListner.DeviceClasses[device.deviceType[0].toLowerCase()] !== undef  ){
			deviceType = EventListner.DeviceClasses[device.deviceType[0].toLowerCase()];
		}else{
			deviceType = "desktop";
		}
				
		if (device.deviceType && device.deviceType.length > 0 && EventListner.DeviceLabelTranslation[device.deviceType[0].toLowerCase()] !== undef  ){
			deviceLabelTranslation = EventListner.DeviceLabelTranslation[device.deviceType[0].toLowerCase()];
		}else{
			deviceLabelTranslation = EventListner.DeviceLabelTranslation["desktop"];
		}
		return t(deviceLabelTranslation , deviceType) ;
				
	},
	    
	getInternetRestrictionIcon: function (tags) {		    
		var setted = false;				    
		if (tags.toLowerCase().indexOf("wan-blocked") >= 0) {				    
			return appUrl + "/images/"+ appConfig + "/home/internet-blocked.png";
			setted = true;
		}	    
		if (!setted) {
			return appUrl + "/images/"+ appConfig + "/home/internet-avail.png";
		}
	},
	    
	    
	removeFocusEvent : function(someElement,someEvent,capture,someFunction){
		if (!someElement.removeEventListener) {
			this.removeFocusEvent = function(someElement,someEvent,capture,someFunction){
				if(someEvent === "focus"){
					someElement.detachEvent("onfocusin", someFunction); 
				}else if(someEvent === "blur"){
					someElement.someFunction("onfocusout",someFunction); 
				}         
			}
			return this.removeFocusEvent(someElement,someEvent,capture,someFunction);
					  
		}else {
			this.removeFocusEvent = function(someElement,someEvent,capture,someFunction){
				if(capture){
					someElement.removeEventListener(someEvent,someFunction,capture);
				}else{
					someElement.stopObserving(someEvent);
				}
			}
			return this.removeFocusEvent(someElement,someEvent,capture,someFunction);
		}
	},
	    
	truncateDeviceName: function (deviceName, limit) {
		if (deviceName.length > limit) {
			return deviceName.substring(0, limit) + "...";
		} else {
			return deviceName;
		}
	},
	    
	changeDevice: function (device,element,event) {
		var deviceType = "desktop";
		if (device.deviceType && device.deviceType.length > 0){
			deviceType = device.deviceType[0];

		}
		
		$('dHostName').update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)));
		this.removeBodyFocus();
		if (deviceType.indexOf("tv") >= 0 || deviceType.indexOf("stb") >=0 || deviceType.indexOf("set-top box") >= 0 ) {
			$('dAccessscheduling').hide();
			setTimeout(function(){
				$('dDevicescustomize').focus();
			},100);
		} else {
			$('dAccessscheduling').show();
			$('dAccessscheduling').observe('click', function (e) {
				e.preventDefault();
				Sah.redirect('/configAccessScheduling.html?' + encodeURIComponent(device.PhysAddress)+"#disconnected");
				return false;
			});
			setTimeout(function(){
				$('dAccessscheduling').focus();
			},100);
		}
		
// 		$('deletedevicemenuitem').observe('click', function (e) {
// 			e.preventDefault();
// 			this.client.execute("sysbus.Devices:destroyDevice", {"key": device.Key}, {
// 				onSuccess: function() {
// 					this.logger.info("Device successfully removed: " + device.PhysAddress);
// 					if ( device.interfaceType === "Ethernet" ) {
// 						this.removeDevice(device, "ethernet");
// 						this.processEvents("ethernet");
// 					} else {
// 						this.removeDevice(device, "wifi");
// 						this.processEvents("wifi");
// 					}
// 					this.hideDeviceMenu();	
// 				}.bind(this),
// 				onFailure: function () {
// 					this.logger.warn("removing device failure: " + device.PhysAddress);
// 					this.hideDeviceMenu();	
// 				}.bind(this)
// 			}); 
// 			return false;
// 		}.bind(this));
		
		this.globalFocusHandler = this.focusOutsideMenu.bind(this,element,"disconnectedDeviceMenu");
		this.addFocusEvent($(document.body),this.globalFocusHandler ,"focus",true);
		$('dDevicescustomize').observe('click', function (e) {
			e.preventDefault();
			Sah.redirect('/homeDevicesCustomize.html?' + encodeURIComponent(device.PhysAddress)+"#disconnected");
			return false;
		});
		
		this.displayDeviceMenu(event);
		return false;
	},

	focusOutsideMenu : function(element,menu,event){	
		    
		var nextElement= event.target ||window.event.srcElement||"a";		
			
		if( nextElement && nextElement.tagName != "BODY" && !nextElement.descendantOf(menu)){	
			element.down("a").focus();		
			this.removeBodyFocus();
			this.hideDeviceMenu();						
		}	
		return true
			    
	},
	addFocusEvent: function(someElement,someFunction,someEvent,capture){				
		if (!someElement.addEventListener) {		
			this.addFocusEvent=function(someElement, someFunction, someEvent, capture){
				if(someEvent === "focus"){
					someElement.attachEvent("onfocusin", someFunction); 
				}else if(someEvent === "blur"){
					someElement.attachEvent("onfocusout", someFunction); 
				}
			}
			return this.addFocusEvent(someElement, someFunction, someEvent, capture);
		}
		else {
			this.addFocusEvent=function(someElement, someFunction, someEvent, capture){
				if(capture){
					someElement.addEventListener(someEvent,someFunction,capture);
				}else{
					someElement.observe(someEvent, someFunction);
				}
			}
			return this.addFocusEvent(someElement, someFunction, someEvent, capture);
		}
	},
	    
	displayDeviceMenu: function ( evnt ) {
				    
		evnt.preventDefault();
		var target = evnt.target || window.event.srcElement;
			
		var position = target.cumulativeOffset();
		var newPosition = {};
		if(Math.abs(position.left-evnt.clientX)<40 && Math.abs(position.top-evnt.clientY)<40){
			newPosition.top = evnt.clientY;
			newPosition.left = evnt.clientX;
		}else{
			newPosition.top = position.top+20;
			newPosition.left = position.left+20;
		}
		$$('#disconnectedDeviceMenu')[0].setStyle({
			display: 'block',
			top: newPosition.top + 'px',
			left: newPosition.left + 'px'
		});		
		//Sah.translator.change($("ipaddress-device-menu"),"general.label.ip","address IP");
		this._DeviceMenu = true;
		evnt.stop();
	},
	    
	    
	adjustdisconnectedDevicesTable: function () {
		$$("#notconnecteddevices_table thead tr:first th.first")[0].setAttribute("colspan", 3);
		$$('.dectphone').each(function(tdElm) {
			tdElm.remove();    
		});
		// Adjust displaying Mode.
		if ( !($('notconnecteddevices_table').hasClassName('adjusted')) ) {
			$('notconnecteddevices_table').addClassName('adjusted');
		}
	},
	getLastFocusedElement: function(elt) {
		if(elt.getElementsByTagName('a')[0]) {
			this._lastFocusedElt = elt.getElementsByTagName('a')[0];// TODO
		}
		else {
			this._lastFocusedElt = elt;
		}
	}  
}); 

EventListner.DeviceLabelTranslation = {
	"phone": "home.devicescustomize.label.type.mobile",
	"mobile": "home.devicescustomize.label.type.mobile",
	"notebook": "home.devicescustomize.label.type.notebook",
	"smartphone": "home.devicescustomize.label.type.mobile",
	"tablette": "home.devicescustomize.label.type.tablet",
	"laptop": "home.devicescustomize.label.type.laptop",
	"computer": "home.devicescustomize.label.type.computer",
	"desktop": "home.devicescustomize.label.type.computer",
	"printer": "home.devicescustomize.label.type.printer",
	"gameconsole": "home.devicescustomize.label.type.game",
	"game": "home.devicescustomize.label.type.game",
	"set-top box orange": "home.devicescustomize.label.type.stb",
        "set-top box": "home.devicescustomize.label.type.stb",
	"stb": "home.devicescustomize.label.type.stb",
	"audio/video": "home.devicescustomize.label.type.stb",
	"tv": "home.devicescustomize.label.type.tv",
	"liveradio": "home.devicescustomize.label.type.liveradio",
	"photo": "photoframe",
	"photoframe": "photo",
	"storage": "home.devicescustomize.label.type.massstorage",
	"mass-storage": "home.devicescustomize.label.type.massstorage",
	"Unknown": "home.devicescustomize.label.type.computer",	
	"unik": "unik",
	"dect-phone": "home.devicescustomize.label.type.dectphone",
	"homelibrary": "home.devicescustomize.label.type.homelibrary",
	"ampliav":"home.devicescustomize.label.type.homelibrary",
	"femtocell":"home.devicescustomize.label.type.homelibrary",
	"homelive":"home.devicescustomize.label.type.homelibrary",
	"homepoint":"home.devicescustomize.label.type.homelibrary",
	"ipcamera":"home.devicescustomize.label.type.homelibrary",
	"leblocorange":"home.devicescustomize.label.type.homelibrary",
	"tvdongle":"home.devicescustomize.label.type.homelibrary",
	"stbplay":"home.devicescustomize.label.type.homelibrary"
};

EventListner.DeviceClasses = {
	"phone": "mobile",
	"mobile": "Phone",
	"notebook": "notebook",
	"smartphone": "smartphone",
	"tablette": "tablette",
	"laptop": "laptop",
	"computer": "desktop",
	"desktop": "Computer",
	"printer": "printer",
	"gameconsole": "game",
	"game": "GameConsole",
	"set-top box orange": "stb",
        "set-top box": "stb",
	"stb": "Set-top Box Orange",
	"audio/video": "stb",
	"tv": "tv",
	"liveradio": "liveradio",
	"photo": "photoframe",
	"photoframe": "photo",
	"storage": "mass-storage",
	"mass-storage": "Storage",
	"Unknown": "desktop",
	"unik": "unik",
	"dect-phone": "dect-phone",
	"homelibrary": "homelibrary",
	"livephone": "Livephone",
	"homeplug": "liveplug",
		"ampliav":"ampliav",
	"femtocell":"femtocell",
	"homelive":"homelive",
	"homepoint":"homepoint",
	"ipcamera":"ipcamera",
	"leblocorange":"leblocorange",
	"tvdongle":"tvdongle",
	"stbplay":"stbplay"
	
};

EventListner.IconPath = {
	"phone": "/devices/icons-devices-mobile.png",
	"mobile": "/devices/icons-devices-mobile.png",
	"smartphone": "/devices/icons-devices-smartphone.png",
	"tablette": "/devices/icons-devices-tablet.png",
	"dectPhone": "/devices/icons-devices-telephoneparinternet.png",
	"notebook": "/devices/icons-devices-notebook.png",
	"laptop": "/devices/icons-devices-laptop.png",
	"computer": "/devices/icons-devices-desktop.png",
	"desktop": "/devices/icons-devices-desktop.png",
	"printer": "/devices/icons-devices-printer.png",
	"gameconsole": "/devices/icons-devices-game.png",
	"game": "/devices/icons-devices-game.png",
	"set-top box orange": "/devices/icons-devices-stb.png",
        "set-top box": "/devices/icons-devices-stb.png",
	"stb": "/devices/icons-devices-stb.png",
	"audio/video": "/devices/icons-devices-stb.png",
	"tv": "/devices/icons-devices-tv.png",
	"liveradio": "/devices/icons-devices-liveradio.png",
	"photo": "/devices/icons-devices-photoframe.png",
	"photoframe": "/devices/icons-devices-photoframe.png",
	"storage": "/devices/icons-devices-usb-hdd.png",
	"mass-storage": "/devices/icons-devices-usb-hdd.png",
	"Unknown": "/devices/icons-devices-desktop.png",
	"desktop-gray": "/devices/icons-devices-desktop-gray.png",
	"laptop-gray": "/devices/icons-devices-laptop-gray.png",
	"mobile-gray": "/devices/icons-devices-mobile-gray.png",
	"printer-gray": "/devices/icons-devices-printer-gray.png",
	"stb-gray": "/devices/icons-devices-stb-gray.png",
	"tv-gray": "/devices/icons-devices-tv-gray.png",
	"game-gray": "/devices/icons-devices-game-gray.png",
	"liveradio-gray": "/devices/icons-devices-liveradio-gray.png",
	"photoframe-gray": "/devices/icons-devices-photoframe-gray.png",
	"mass-storage-gray": "/devices/icons-devices-usb-hdd-gray.png",
	"unik": "/devices/icons-devices-unik.png",
	"dect-phone": "/devices/icons-devices-telephoneparinternet.png",
	"homelibrary": "/devices/icons-devices-homelibrairy.png",
	"livephone": "/devices/icons-devices-livephone.png",
	"liveplug":"/devices/icons-devices-liveplugwifi.png",
	"ampliav":"/devices/icons-devices-ampliAV.png",
	"femtocell":"/devices/icons-devices-femtocell.png",
	"homelive":"/devices/icons-devices-homelive.png",
	"homepoint":"/devices/icons-devices-homepoint.png",
	"ipcamera":"/devices/icons-devices-ipcamera.png",
	"leblocorange":"/devices/icons-devices-leblocorange.png",
	"tvdongle":"/devices/icons-devices-TVdongle.png",
	"stbplay":"/devices/icons-devices-stbplay.png"
};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/eventListner/freeApplications.js */

EventListner.FreeApplications = Class.create(Sah.Form, {
  
	
	initialize: function  ($super, form) {
		$("bt_refresh").observe("click", function (event) {
			event.stop();
			window.location.reload();
		}.bind(this));

		$('left-freeapplications-link').addClassName('current');
		$$('#header-hmenu li.active')[0].removeClassName('active');
		$('hmenu-home').addClassName('active');
		$super(form);
		this.objects = new Object;
		this.load();
	},	
	objectsLoaded: function () {
		
	}	

  
}); 






/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/eventListner/observe.js */

EventListner.Observe = Class.create(Sah.Form, {
	_devices: {
		"ethernet": [],
		"wifi": [],
		"usb": [],
		"dect": []
	},
	_UsbMenu: false,
	_DeviceMenu: false,
	_fillLists: false,
	_adjusted: false,	
	
	_lastFocusedElt: "",
	
	initialize: function  ($super, form) {
		this.services = new EventListner.Service(form);
		$('left-home-link').addClassName('current');
		$$('#header-hmenu li.active')[0].removeClassName('active');
		$('hmenu-home').addClassName('active');
		
		// only available in 2.8 project build
		if (config.BUILD_PROJECT.indexOf("2.8") >= 0) {
			$('home-dashboard').setStyle({
				backgroundImage: 'url(./images/'+appConfig+'/home/dashboard_2.8.png)',
				backgroundRepeat : "no-repeat"
			});
		} else if ( !this._adjusted && config.BUILD_PROJECT != "generic")  {
			this.adjustdashBoard();
		}
	
		$super(form);
		this.objects = new Object;
		
		$("bt_refresh").observe("click", function (event) {
			event.stop();
			window.location.reload();
		}.bind(this));
		$('home-dashboard-usb-printers-tip').observe("click",function(e){
			e.preventDefault();
			Sah.redirect("/configPrinter.html");
			return false;
		}.bind(this));
		$('devicescustomize').observe("keypress", function(e){
			if(e.keyCode === 9 && document.activeElement === $('devicescustomize')) {
				e.preventDefault();
				this._lastFocusedElt.focus();
				this.hideDeviceMenu();
			}
		}.bind(this));
		$('catIqCustomize').observe("keypress", function(e){
			if(e.keyCode === 9 && document.activeElement === $('catIqCustomize')) {
				e.preventDefault();
				this.hideDeviceMenu();
			}
		}.bind(this));
		$('usbEject').observe("keypress", function(e){
			if(e.keyCode === 9 && document.activeElement === $('usbEject')) {
				e.preventDefault();
				this.hideDeviceMenu();
			}
		}.bind(this));
		this.request = {"channelid":0,
				"events":[ {"service":"Devices.Device", "event":"topology_changed"},
					    {"service":"Devices.Device", "event":"wifi_device_updated"},
					    {"service":"Devices.Device", "event":"eth_device_updated"},
					    {"service":"Devices.Device", "event":"usb_device_updated"},
					    {"service":"Devices.Device", "event":"logical_device_updated"},
					    {"service":"Devices.Device", "event":"self_device_updated"},
					    {"service":"Devices.Device", "event":"device_error"},
					    {"service":"Devices.Device", "event":"device_error_solved"},
					  ]
                                   };
		
		
		
		this.events = [];
		this.needs("Devices", {
			path: "sysbus.Devices:get",
			method :"execute",
			methodParams: {
				"expression":{/*"liveplug":"physical && homeplug_av  and .Active==true and .Layer2Interface !=''",*/ "usbM2M":" usb && wmbus and .Active==true and .Master==\"\" ","usb":" printer && physical and .Active==true and .Master==\"\" " ,"usblogical":"volume && logical and .Active==true and .Master==\"\" ","wifi":"wifi && (edev || hnid) and !homeplug_av and !homeplug_devolo and .Active==true and .Master==\"\" ","eth":"eth && (edev || hnid) and !homeplug_av and !homeplug_devolo and .Active==true  and .Master==\"\" ","dect":"voice && dect && handset && physical and .Active==true  and .Master==\"\"  "}
			}
		});	

		this.load();
	},
	
	objectsLoaded: function () {
		Event.observe($('content'), "click", this.hideDeviceMenu.bind(this));
		
		// Fake date to be deleted !!!!!
		//this.objects.Devices=EventListner.TestUnitaire2;
// 		var HGW = this.objects["Devices"][0],
// 		linkState = this.getLinkState(this.objects["Devices"][0]),
// 		_devices = {
// 			"ethernet": [],
// 			"wifi" : [],
// 			"usb": [],
// 			"dect": []
// 		};
// 		
// 		var getList =  function(Node) {
// 			if (Node["DeviceTypes"] && Node["DeviceTypes"].length >0) {
// 				 //Node["DeviceType"] = Node["DeviceTypes"][0]["Type"];
// 				 Node["deviceType"] = [Node["DeviceTypes"][0]["Type"]];
// 			}
// 			
// 			if ( Node["Tags"].indexOf("edev") >= 0 && Node["Tags"].indexOf("wifi") >= 0 && Node["Tags"].indexOf("physical") >= 0 && Node["Active"]) {
// 				Node._path = "wifi_" + _devices["wifi"].length;
// 				_devices["wifi"].push(Node);
// 			} else if ( Node["Tags"].indexOf("edev") >= 0 && Node["Tags"].indexOf("eth") >= 0 && Node["Tags"].indexOf("physical") >= 0 && Node["Active"]) {
// 				Node._path = "ethernet_" + _devices["ethernet"].length;
// 				_devices["ethernet"].push(Node);
// 			} else if (Node["Tags"].indexOf("edev") >= 0 && Node["Tags"].indexOf("usb") >= 0 && Node["Tags"].indexOf("physical") >= 0 && Node["Active"]) {
// 				 Node._path = "usb_" + _devices["usb"].length;
// 				 if(Node["Tags"].indexOf("storage")>=0) {
// 					Node["deviceType"] = ["Storage"];
// 					if(Node["Children"]) {
// 					      Child=Node["Children"][0];
// 					      if(Child.LogicalVolumeIndex) {
// 						    Node["uri"]=Child.LogicalVolumeIndex;
// 					      }
// 					} 
// 				 } else if(Node["Tags"].indexOf("livephone")>=0) {
// 					Node["deviceType"] = ["Livephone"]; 
// 					} else {
// 					      Node["deviceType"] = ["printer"]; 	
// 					}
// 				_devices["usb"].push(Node);
// 			} else if ( Node["Tags"].indexOf("voice") >= 0 && Node["Tags"].indexOf("dect") >= 0 && Node["Tags"].indexOf("handset") >= 0 && Node["Tags"].indexOf("physical") >= 0) {
// 				Node._path = "dect_" + _devices["dect"].length;
// 				Node["deviceType"] = ["dect"];
// 				_devices["dect"].push(Node);
// 			} else if (Node["Children"] && Node["Children"].length > 0) {
// 				for(var i=0; i<Node["Children"].length; i++) {
// 				    getList(Node["Children"][i]);
// 				}
// 			}
// 		};
// 		
// 		for(var i=0; i<HGW["Children"].length; i++) {
// 			if (HGW["Children"][i]["Key"] === "lan" || (HGW["Children"][i]["Key"].indexOf("USBHost")>= 0) || HGW["Children"][i]["Key"] === "Voice" ||  HGW["Children"][i]["Key"]==="DECT") {
// 			  getList(HGW["Children"][i]);
// 			}
// 		}

		

		this._devices["wifi"] = this.objects["Devices"]["wifi"];
		this._devices["ethernet"] =this.objects["Devices"]["eth"];
// 		for(var i=0;i<this.objects["Devices"]["liveplug"].length;i++){
// 			
// 			if(this.objects["Devices"]["liveplug"][i].Tags.indexOf("wifi")>0)
// 				this._devices["wifi"]=this._devices["wifi"].concat(this.objects["Devices"]["liveplug"][i]);
// 			else
// 				this._devices["ethernet"]=this._devices["ethernet"].concat(this.objects["Devices"]["liveplug"][i]);
// 		}
		this._devices["usb"] =this.objects["Devices"]["usb"].concat(this.objects["Devices"]["usblogical"].concat(this.objects["Devices"]["usbM2M"]));
		this._devices["dect"]  =this.objects["Devices"]["dect"];
		this._devices["dect"].each(function (node) {
			node["deviceType"] = ["dect"];
		});
		this._devices["usb"].each(function (node) {
			if (node.Tags.indexOf("storage")>=0) {
			  node["deviceType"]=["Storage"];
			} else if(node["Tags"].indexOf("livephone")>=0) {
				    node["deviceType"] = ["Livephone"]; 
			      } else if (node["Tags"].indexOf("print")>=0){
					node["deviceType"] = ["printer"]; 
				      }
			  
			if (node.LogicalVolumeIndex){
			      node["uri"]=node.LogicalVolumeIndex;
			}
			if (node.Tags.indexOf("wmbus")>=0){
			      node["deviceType"]=["dongle"];
			}
			  
		});
		this.appendDevicesList();
		this.observe();
	},
	
	appendDevicesList: function () {
		
		if (!this._fillLists) {
			this._fillLists = true;
			
			this.ethernetDeviceTemplate = Sah.Templates['ethernetDevice'];
			this.ethernetDeviceTemplate.callback = this.appendEthernetDevice.bind(this);
			this.fillEthernetLists();
			
			this.wirelessDeviceTemplate = Sah.Templates['wirelessDevice'];
			this.wirelessDeviceTemplate.callback = this.appendWirelessDevice.bind(this);
			this.fillWirelessLists();
				
			this.usbDeviceTemplate = Sah.Templates['usbDevice'];
			this.usbDeviceTemplate.callback = this.appendUsbDevice.bind(this);
			this.fillUsbLists();
				
			// only available in 2.8 project build
			if (config.BUILD_PROJECT.indexOf("2.8") >= 0 || config.BUILD_PROJECT.indexOf("generic") >= 0) {
				this.catIQDeviceTemplate = Sah.Templates['ipPhoneDectDevice'];
				this.catIQDeviceTemplate.callback = this.appendCatIQ.bind(this);
				this.fillCatIqLists();
			}
		} else {
			$$(".li-device-ethernet").each(function (elem) {
				elem.remove();
			});
			this.fillEthernetLists();
				
			$$(".li-device-wireless").each(function (elem) {
				elem.remove();
			});
			this.fillWirelessLists();
			
			$$(".li-device-usb").each(function (elem) {
				elem.remove();
			});
			this.fillUsbLists();

			$$(".li-device-catIq").each(function (elem) {
				elem.remove();
			});
			
			if (config.BUILD_PROJECT.indexOf("2.8") >= 0) {
				    this.fillCatIqLists();
			}
		}
		this.tabindexSort();
	},
	
	getLinkState: function (HGW) {
		var link = false;
		var protocol = false;

		if (HGW["LinkState"] == "up") {
		    link = true;
		} else {
		    link = false;
		}

		if (HGW["ConnectionProtocol"] == "ppp") {
		    if (HGW["ConnectionState"] == "Connected") {
			protocol = true;
		    } else {
			protocol = false;
		    }
		}

		if (HGW["ConnectionProtocol"] == "dhcp") {
		    if (HGW["ConnectionState"] == "Bound") {
			protocol = true;
		    } else {
			protocol = false;
		    }
		}

		if(link && protocol){
		    return true;
		}else{
		    return false;
		}
	},
	
	observe: function () {
		this.rq = new Ajax.Request("/sysbus/eventmanager:get_events", {
			method: "post",
			postBody: Object.toJSON({
				"parameters": this.request
			}),
			contentType:"application/x-sah-ws-4-call+json",
			requestHeaders: {
				"X-Context":Sah.Bus.contextID,
				"X-Sah-Request-Type": "idle"
			},
			onSuccess: this.eventReceived.bind(this),
			onFailure: this.failed.bind(this)
		});
		
		document.fire("sah:home:service:refreshStatus");
	},
	
	failed: function (response) {
		var msg = "error monitoring events: " + response.status + " " + response.statusText;

		if (response.responseText) {
			msg += " " + response.responseText;
		}
		Sah.logger.error(msg);
		this.observe();
	},
	
	eventReceived: function (response) {
		var o;
		if (o = response.responseText) {
		        if ((o.indexOf("null")<0)&&(o.indexOf("error")<0)) {
			    response = JSON.parse(o);
                this.events = this.events.concat(response.status.events);
                this.request.channelid = response.status.channelid;
                this.processEvents();
			    } else 
			      this.observe();
		} else 
			    this.observe();
	},
	
	processEvents: function () {
		var e = null,
		device = null,
		interfaceType = null,
		types = [],
		undef;

		this.needs("Devices", {
			path: "sysbus.Devices:get",
			method :"execute",
			methodParams: {
				"expression":{/*"liveplug":"physical && homeplug_av  and .Active==true and .Layer2Interface !=''",*/ "usbM2M":" usb && wmbus and .Active==true and .Master==\"\" ","usb":" printer && physical and .Active==true and .Master==\"\" " ,"usblogical":"volume && logical and .Active==true and .Master==\"\" ","wifi":"wifi && (edev || hnid) and !homeplug_av and !homeplug_devolo and .Active==true and .Master==\"\" ","eth":"eth && (edev || hnid) and !homeplug_av and !homeplug_devolo and .Active==true and .Master==\"\" ","dect":"voice && dect && handset && physical and .Active==true  and .Master==\"\"  "}
			}
		});
		this.loaded = false;
		//console.warn("before loading");
 		this.load();
		//console.warn("after loading")
		
		
		
		
		/*
		while ((e = this.events.shift())) {
			if (e.data.object.attributes.Device != undef) {
				device = e.data.object.attributes.Device;
			} else {
				device = null;
			}
			
			//console.info(e.data.object.reason);
		
			if (e.data.object.reason === "device_error") {
				ctl.popup.Open('<span id="usb-eject-popup"></span>', '', '400', '200');
				Sah.translator.change($("usb-eject-popup"), "home.label.devices.massstorage.unsupported","");
				this.logger.info("Your USB mass storage is not recognized by the HomeGateway");
				var timeout = setTimeout(function () {
					ctl.popup.Close();
				}, 30000);
			}
			if (device != null) {
				switch (e.data.object.reason) {
					case "device_changed":
						if ( device.interfaceType !== undef) { //Network ~ Ethernet & Wifi
							if ( device.interfaceType === "Ethernet" ) {
								this.updateDevice(device, "ethernet");
								interfaceType = "ethernet";
							} else if ( device.interfaceType .indexOf("802.11")>=0 ) {
								this.updateDevice(device, "wifi");
								interfaceType = "wifi";
							}
						} else if ( device.deviceSource !== undef && (device.deviceSource === "usb"||device.deviceSource === "storage") ) { //Usb ~ Storage & Printer & Livephone
							if ( device.deviceType[0] === "Printer" || device.deviceType[0] === "Livephone" || (device.deviceSource === "storage"&& device.deviceType[0] === "Storage") ) {
								this.updateDevice(device, "usb");
								interfaceType = "usb";
							}						
						} else if ( device.deviceType[0] === "Phone" && device.enable === "Enabled" && (device.endpointType.toLowerCase().indexOf("cat-iq") >= 0 ||
								device.endpointType.toLowerCase().indexOf("undefined") >= 0 || device.endpointType.toLowerCase().indexOf("dect gap") >= 0) ) {
							this.updateDevice(device, "dect");
							interfaceType = "dect";
						}							
						break;
							
					case "device_deleted":
						if ( device.interfaceType !== undef) { //Network ~ Ethernet & Wifi
							if ( device.interfaceType === "Ethernet") {
								this.removeDevice(device, "ethernet");
								interfaceType = "ethernet";
							} else if ( device.interfaceType.indexOf("802.11")>=0) {
								this.removeDevice(device, "wifi");
								interfaceType = "wifi";
							}
						} else if ( device.deviceSource !== undef && (device.deviceSource === "usb"||device.deviceSource === "storage")) { //Usb ~ Storage & Printer & Livephone
							if ( device.deviceType[0] === "Printer" || device.deviceType[0] === "Livephone" || (device.deviceSource === "storage"&& device.deviceType[0] === "Storage") ) {
								this.removeDevice(device, "usb");
								interfaceType = "usb";
							}
							
						} else if ( device.deviceType[0] === "Phone" && device.enable === "Enabled" && (device.endpointType.toLowerCase().indexOf("cat-iq") >= 0 ||
								device.endpointType.toLowerCase().indexOf("undefined") >= 0 || device.endpointType.toLowerCase().indexOf("dect gap") >= 0) ) { //Dect phones
							this.removeDevice(device, "dect");
							interfaceType = "dect";
						}
							
						break;
							
					case "device_added":
						if ( device.interfaceType !== undef) { //Network ~ Ethernet & Wifi
							if ( device.interfaceType === "Ethernet" && device.active ) {
								this.appendDevice(device, "ethernet");
								interfaceType = "ethernet";
							} else if ( device.interfaceType .indexOf("802.11")>=0 && device.active ) {
								this.appendDevice(device, "wifi");
								interfaceType = "wifi";
							}
						} else if ( device.deviceSource !== undef && (device.deviceSource === "usb"||device.deviceSource === "storage") ) { //Usb ~ Storage & Printer & Livephone
							if ( device.deviceType[0] === "Printer" || device.deviceType[0] === "Livephone" || (device.deviceSource === "storage" && device.deviceType[0] === "Storage" && device.enable ) ) {
								this.appendDevice(device, "usb");
								interfaceType = "usb";
							}
							else if(device.deviceType[0] !== "Printer" && device.deviceType[0] !== "Storage" && device.deviceType[0] !== "Livephone" && device.deviceType[0] !== "Hub")
							{
							    ctl.popup.Open('<span id="usb-eject-popup"></span>', '', '400', '100');
							    Sah.translator.change($("usb-eject-popup"), "home.label.devices.massstorage.unsupportedDevice","");
							    this.logger.info("Your USB device is not recognized by the HomeGateway");
							    var timeout = setTimeout(function () {
								    ctl.popup.Close();
							    }, 30000);
							}
						} else if ( device.deviceType[0] === "Phone" && device.enable === "Enabled" && (device.endpointType.toLowerCase().indexOf("cat-iq") >= 0 ||
								device.endpointType.toLowerCase().indexOf("undefined") >= 0 || device.endpointType.toLowerCase().indexOf("dect gap") >= 0) ) { //Dect phones
							this.appendDevice(device, "dect");
							interfaceType = "dect";
						}
						break;
					
					default:
						Sah.logger.error("Unrecognized event reason: %s", e.data.object.reason);
				}
			}
					
			for (var i=0; i < types.length; i++) {
				if (types[i] === interfaceType) {
					break;
				}
			}
				
			if ( i === types.length ) {
				types.push(interfaceType);
			}
		}
		
		if (!this._fillLists) {
			this._fillLists = true;
			
			this.ethernetDeviceTemplate = Sah.Templates['ethernetDevice'];
			this.ethernetDeviceTemplate.callback = this.appendEthernetDevice.bind(this);
			this.fillEthernetLists();
			
			this.wirelessDeviceTemplate = Sah.Templates['wirelessDevice'];
			this.wirelessDeviceTemplate.callback = this.appendWirelessDevice.bind(this);
			this.fillWirelessLists();
				
			this.usbDeviceTemplate = Sah.Templates['usbDevice'];
			this.usbDeviceTemplate.callback = this.appendUsbDevice.bind(this);
			this.fillUsbLists();
				
				// only available in 2.8 project build
			if (config.BUILD_PROJECT.indexOf("2.8") >= 0 || config.BUILD_PROJECT.indexOf("generic") >= 0) {
				this.catIQDeviceTemplate = Sah.Templates['ipPhoneDectDevice'];
				this.catIQDeviceTemplate.callback = this.appendCatIQ.bind(this);
				this.fillCatIqLists();
			}
		} else {
			for (var i=0; i<types.length; i++) {
				switch (types[i]) {
					case "ethernet" :
						$$(".li-device-ethernet").each(function (elem) {
							elem.remove();
						});
						this.fillEthernetLists();
						break;
							
					case "wifi":
						$$(".li-device-wireless").each(function (elem) {
							elem.remove();
						});
						this.fillWirelessLists();
						break;
						
					case "usb":
						$$(".li-device-usb").each(function (elem) {
							elem.remove();
						});
						this.fillUsbLists();
						break;
						
					case "dect":
						$$(".li-device-catIq").each(function (elem) {
							elem.remove();
						});
						
						if (config.BUILD_PROJECT.indexOf("2.8") >= 0) {
							    this.fillCatIqLists();
						}
						break;
				}
			}
		}
// 		}*/
	},
	
	updateDevice: function (device, interfaceType) {
		var list = [],
		exist = false;

		if (device.CIFS && device.CIFS.uri){
		      device.cif = device.CIFS.uri ;
		}
		
		if ( interfaceType === "ethernet" || interfaceType === "wifi" ) {
			if ( device.active ) {
				// online
				for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
					if (this._devices[interfaceType][i].physAddress == device.PhysAddress) {
						device._path = interfaceType + "_" +  i;
						list.push(device);
						exist = true;
					} else {
						list.push(this._devices[interfaceType][i]);
					}
				}
				
				if (!exist) {
					list.push(device);
				}
			} else {
				// Offline
				for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
					if (this._devices[interfaceType][i].physAddress == device.PhysAddress) {
						continue;
					} else {
						list.push(this._devices[interfaceType][i]);
					}
				}
			}
		} else if ( interfaceType === "usb" && device.deviceType[0] === "Storage" ) {
			if (device.enable && device.status == "Online" && device.PhysicalMedium.uri) {
				for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
					if (this._devices[interfaceType][i].PhysicalMedium.uri == device.PhysicalMedium.uri) {
						this._devices[interfaceType][i].cif = "\\\\Livebox";
						device._path = interfaceType + "_" +  i;
						list.push(this._devices[interfaceType][i]);
						exist = true;
						//break;
					} else {
						list.push(this._devices[interfaceType][i]);
					}
					
				}
				if (!exist) {
					list.push(device);
				}
			}else {
				for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
					if (this._devices[interfaceType][i].PhysicalMedium.uri == device.PhysicalMedium.uri  ) {
						break;
					} else {						
						list.push(this._devices[interfaceType][i]);
					}
				}
			}
		
		} else if ( interfaceType === "usb" && device.deviceType[0] === "Printer" ) {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if ( this._devices[interfaceType][i].deviceUID == device.deviceUID ) {
					device._path = interfaceType + "_" +  i;
					list.push(device);
					exist = true;
				} else {
					list.push(this._devices[interfaceType][i]);
				}
			}
			
			if (!exist) {
				list.push(device);
			}
		} else if ( interfaceType === "usb" && device.deviceType[0] === "Livephone" ) {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if ( this._devices[interfaceType][i].deviceUID == device.deviceUID ) {
					device._path = interfaceType + "_" +  i;
					list.push(device);
					exist = true;
				} else {
					list.push(this._devices[interfaceType][i]);
				}
			}
			
			if (!exist) {
				list.push(device);
			}
		} else if ( interfaceType === "dect") {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if ( this._devices[interfaceType][i].line == device.line ) {
					device._path = interfaceType + "_" +  i;
					list.push(device);
					exist = true;
				} else {
					list.push(this._devices[interfaceType][i]);
				}
			}
			
			if (!exist) {
				list.push(device);
			}
		}
		
		this._devices[interfaceType] = list;
	},
	
	removeDevice: function (device, interfaceType) {
		var list = [];

		if ( interfaceType === "ethernet" || interfaceType === "wifi" ) {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if (this._devices[interfaceType][i].physAddress == device.PhysAddress) {
					continue;
				} else {
					list.push(this._devices[interfaceType][i]);
				}
			}
		} else if ( interfaceType === "usb" && device.deviceType[0] === "Storage" ) {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if (this._devices[interfaceType][i].PhysicalMedium.uri == device.PhysicalMedium.uri) {
					continue;
				} else {
					list.push(this._devices[interfaceType][i]);
				}
			}
		} else if ( interfaceType === "usb" && device.deviceType[0] === "Printer" ) {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if ( this._devices[interfaceType][i].deviceUID == device.deviceUID ) {
					continue;
				} else {
					list.push(this._devices[interfaceType][i]);
				}
			}
		} else if ( interfaceType === "usb" && device.deviceType[0] === "Livephone" ) {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if ( this._devices[interfaceType][i].deviceUID == device.deviceUID ) {
					continue;
				} else {
					list.push(this._devices[interfaceType][i]);
				}
			}
		} else if ( interfaceType === "dect" ) {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if ( this._devices[interfaceType][i].line == device.line ) {
					continue;
				} else {
					list.push(this._devices[interfaceType][i]);
				}
			}
		}
			
		this._devices[interfaceType] = list;
		
	},
	
	appendDevice: function (device, interfaceType) {
		var exist = false;
		
		if (device.CIFS && device.CIFS.uri){
		      device.cif = device.CIFS.uri ;
		}
		
		if ( interfaceType === "ethernet" || interfaceType === "wifi" ) {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if (this._devices[interfaceType][i].physAddress == device.PhysAddress) {
					exist = true;
					break;
				}
			}
		} else if ( interfaceType === "usb" && device.deviceType[0] === "Storage" ) {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if (this._devices[interfaceType][i].PhysicalMedium.uri == device.PhysicalMedium.uri) {
					this._devices[interfaceType][i].cif = "\\\\Livebox";
					exist = true;
					break;
				}
			}
		} else if ( interfaceType === "usb" && device.deviceType[0] === "Printer" ) {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if ( this._devices[interfaceType][i].deviceUID == device.deviceUID ) {
					exist = true;
					break;
				}
			}
		} else if ( interfaceType === "usb" && device.deviceType[0] === "Livephone" ) {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if ( this._devices[interfaceType][i].deviceUID == device.deviceUID ) {
					exist = true;
					break;
				}
			}
		} else if ( interfaceType === "dect" ) {
			for ( var i = 0; i < this._devices[interfaceType].length; i++ ) {
				if ( this._devices[interfaceType][i].line == device.line ) {
					exist = true;
					break;
				}
			}
		}
		
		if ( !exist ) {
			device._path = interfaceType + "_" +  i;
			this._devices[interfaceType].push(device);
			
		}
	},
	
	fillEthernetLists: function () {		
		if (this._devices["ethernet"].length == 0) {
			$("home-dashboard-wired-nodevices").show();
			$("home-dashboard-wired-devices-scroll-left").hide();
			$("home-dashboard-wired-devices-scroll-right").hide();
			$("home-dashboard-wired-devices").hide();
		} else {
			$("home-dashboard-wired-nodevices").hide();
			$("home-dashboard-wired-devices").show();
			$("home-dashboard-wired-devices-scroll-right").show();
			$("home-dashboard-wired-devices-scroll-left").show();

			this.ethernetDeviceTemplate.apply(this._devices["ethernet"]);
			this.adjustWiredElements("home-dashboard-wired-devices", this._devices["ethernet"].length);

			if (this._devices["ethernet"].length < 5) {
				$("home-dashboard-wired-devices-scroll-right").hide();
				$("home-dashboard-wired-devices-scroll-left").hide();
			} else {
				var hEthCarrossel = new UI.Carousel("home-dashboard-wired-devices", {
					direction: "horizontal",
					previousButton: ".left",
					nextButton: ".right",
					container: ".hCarrossel"
				});
				this.setupCarrouselTabsEvents("home-dashboard-wired-devices",hEthCarrossel);
			}
		}
	},
	
	
	fillWirelessLists : function () {
		if (this._devices["wifi"].length == 0) {
			$("home-dashboard-wireless-nodevices").show();
			$("home-dashboard-wireless-devices-scroll-left").hide();
			$("home-dashboard-wireless-devices-scroll-right").hide();
			$("home-dashboard-wireless-devices").hide();
		} else {
			$("home-dashboard-wireless-nodevices").hide();
			$("home-dashboard-wireless-devices").show();
			$("home-dashboard-wireless-devices-scroll-right").show();
			$("home-dashboard-wireless-devices-scroll-left").show();

			this.wirelessDeviceTemplate.apply(this._devices["wifi"]);

			if (this._devices["wifi"].length <= 3) {
				$("home-dashboard-wireless-devices-scroll-right").hide();
				$("home-dashboard-wireless-devices-scroll-left").hide();
			} else {
				var hWifiCarrossel = new UI.Carousel("home-dashboard-wireless-devices", {
					direction: "horizontal",
					previousButton: ".left",
					nextButton: ".right",
					container: ".hCarrossel"
				});
				this.setupCarrouselTabsEvents("home-dashboard-wireless-devices",hWifiCarrossel);
			}
		}
	},
	
	fillUsbLists: function () {	
		if (this._devices["usb"].length == 0) {
			$("home-dashboard-usb-devices-top").hide();
			$("home-dashboard-usb-devices-bottom").hide();
			$("home-dashboard-usb-devices").hide();
			$("home-dashboard-usb-nodevices").show();
		} else {
			$("home-dashboard-usb-nodevices").hide();
			$("home-dashboard-usb-devices").show();
			this.usbDeviceTemplate.apply(this._devices["usb"]);
			this.adjustUSBElements(this._devices["usb"].length);
			
			
			if (this._devices["usb"].length <= 3) {
				$("home-dashboard-usb-devices-top").hide();
				$("home-dashboard-usb-devices-bottom").hide();
			} else {
				var vCarrossel = new UI.Carousel("home-dashboard-usb-devices", {
					direction: "vertical",
					previousButton: ".top",
					nextButton: ".bottom",
					container: ".vCarrossel"
				});
				this.setupCarrouselTabsEvents("home-dashboard-usb-devices",vCarrossel);
				$("home-dashboard-usb-devices-bottom").show();
				$("home-dashboard-usb-devices-top").show();
			}
		}
	},
	
	fillCatIqLists: function () {
		if (this._devices["dect"].length == 0) {
			$("home-dashboard-dect-nodevices").show();
			$("home-dashboard-dect-devices-scroll-left").hide();
			$("home-dashboard-dect-devices-scroll-right").hide();
			$("home-dashboard-dect-devices").hide();
		} else {
			$("home-dashboard-dect-nodevices").hide();
			$("home-dashboard-dect-devices").show();
			$("home-dashboard-dect-devices-scroll-left").show();
			$("home-dashboard-dect-devices-scroll-right").show();
				
			this.catIQDeviceTemplate.apply(this._devices["dect"]);
			this.adjustDectElements(this._devices["dect"].length);
			
			// hCarrossel
			if (this._devices["dect"].length < 3) {
				$("home-dashboard-dect-devices-scroll-left").hide();
				$("home-dashboard-dect-devices-scroll-right").hide();
			} else {
				var hWifiCarrossel = new UI.Carousel("home-dashboard-dect-devices", {
					direction: "horizontal",
					previousButton: ".left",
					nextButton: ".right",
					container: ".hCarrossel"
				});
				this.setupCarrouselTabsEvents("home-dashboard-dect-devices",hWifiCarrossel);
			}
		}
	},
	
	
		
	appendCatIQ: function (element, device) {
		element.id = device._path;
		
		if (device.Name.length > 7) {
			element.down(".title").setAttribute("x-sah-tooltip", Sah.Tools.escapeString('js', Sah.Tools.escapeString('html',device.Name)));
			this.truncateDeviceName(element.down(".title"), Sah.Tools.escapeString('js', Sah.Tools.escapeString('html',device.Name)), 7);
		} else {
			element.down(".title").update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)));
		}
		element.down("img").alt = Sah.Tools.escapeString('js', device.Name) + "  " +this.getDeviceTranslation(device) ;
		element.down("img").src = this.getSrcIcon("dectPhone");
		element.addClassName("li-device");
		element.addClassName("li-device-catIq");
		this.catIQDeviceTemplate.showForm(element);
		$('ipPhoneDectDevices').insert(element);
		document.observe("sah:admin:language:change",function (){
			element.down("img").alt = Sah.Tools.escapeString('js', device.Name) + "  " +this.getDeviceTranslation(device) ;
		}.bind(this));
		element.observe('click', this.changeCatIq.bind(this, element.sahObject,element));
		element.observe('click', this.getLastFocusedElement.bind(this, element));
	},
	
	appendEthernetDevice: function (element, device) {		
		element.id = device._path;
		var webuiName="";
		device.Names.each(function (elem) {
			if (elem.Source.toLowerCase()==="webui")
			  webuiName=elem.Name;
			//detecte femtocelll device and change DeviceType value because DeviceType= femtocell v2.X and we don't have any icon with this name  
			if ((device.DeviceType.indexOf("femtocell") >=0) && (device.Tags.indexOf("femto")>=0 )){
				device.DeviceType = "femtocell" ;
			}	
		});
		if (webuiName.length!=0)
		   device.Name=webuiName;
		if (device.Name.length > 7) {
			element.down(".title").setAttribute("x-sah-tooltip", Sah.Tools.escapeString('js', Sah.Tools.escapeString('html',device.Name)));
			
			this.truncateDeviceName(element.down(".title"), Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)), 7);
		} else {
			element.down(".title").update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)));
		}
		
		element.addClassName(this.getIcon(element.sahObject));
		element.down("img.img-zoom").alt = this.getIcon(device);
		
		if (device.DeviceType && device.DeviceType.length > 0 ) {			
			element.down("img.img-zoom").src = this.getSrcIcon(EventListner.DeviceClasses[device.DeviceType.toLowerCase()]);
			if (device.Tags.indexOf("stb")>=0 || device.DeviceType.toLowerCase().indexOf("set-top")>=0 ||device.DeviceType.toLowerCase().indexOf("stb")>=0 ||device.DeviceType.toLowerCase().indexOf("settopbox")>=0){
				element.down("img.img-zoom").src = this.getSrcIcon("set-top box");
				if (webuiName.length!=0) {
					element.down(".title").update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)));
				} else {
					var stbLabel = t("home.label.stb","X set-top box");
					element.down(".title").setAttribute("x-sah-tooltip", Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', stbLabel)));
					this.truncateDeviceName(element.down(".title"),stbLabel, 7);
					document.observe("sah:admin:language:change",function (){
						stbLabel = t("home.label.stb","X set-top box");
						element.down(".title").setAttribute("x-sah-tooltip", Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', stbLabel)));
						this.truncateDeviceName(element.down(".title"),Sah.Tools.escapeString('js', stbLabel), 7);
					}.bind(this));
				}
			}
			if(device.DeviceType.toLowerCase()=="liveplugwifi")
			{
			  element.down("img.img-zoom").src = this.getSrcIcon("liveplug");			  
			}
		} else {
			if((device.Tags.indexOf("stb")>=0)&&(device.Tags.indexOf("dhcp")>=0)&&(device.Tags.indexOf("lan")>=0)){
				element.down("img.img-zoom").src = this.getSrcIcon("set-top box");
				if (webuiName.length!=0) {
					element.down(".title").update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)));
				} else {
					var stbLabel = t("home.label.stb","X set-top box");
					element.down(".title").setAttribute("x-sah-tooltip", Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', stbLabel)));
					this.truncateDeviceName(element.down(".title"),stbLabel, 7);
					document.observe("sah:admin:language:change",function (){
						stbLabel = t("home.label.stb","X set-top box");
						element.down(".title").setAttribute("x-sah-tooltip", Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', stbLabel)));
						this.truncateDeviceName(element.down(".title"),Sah.Tools.escapeString('js', stbLabel), 7);
					}.bind(this));
				}
			} else if (device.DeviceType.toLowerCase()=="liveplugwifi") {
				  element.down("img.img-zoom").src = this.getSrcIcon("liveplug");
			    } else{
					element.down("img.img-zoom").src = this.getSrcIcon("desktop");
				}
		}
		
		//element.getElementsByTagName("img")[1].alt = this.getIcon(device);
		//element.getElementsByTagName("img")[1].src = this.getSrcIcon(EventListner.DeviceClasses[device.deviceType[0].toLowerCase()]);
		
		element.addClassName("li-device");
		element.addClassName("li-device-ethernet");
		this.ethernetDeviceTemplate.showForm(element);

		$('ethernetDevices').insert(element);
		
		var deviceType = "",
		undef;
			
		if (device.DeviceType && device.DeviceType.length > 0 && EventListner.DeviceClasses[device.DeviceType.toLowerCase()] !== undef) {
			deviceType = EventListner.DeviceClasses[device.DeviceType.toLowerCase()];
		} else {
			if((device.Tags.indexOf("upnp")>=0)&&(device.Tags.indexOf("dhcp")>=0)&&(device.Tags.indexOf("lan")>=0)){
				deviceType = "set-top box";	
			}else{
				deviceType = "desktop";
			}
		}
			
// 			if (deviceType.indexOf("tv") >= 0 || deviceType.indexOf("stb") >=0 || deviceType.indexOf("set-top box") >= 0 ) {
// 		// nothing to do its stb or tv device
// 		} else {
			element.observe('click', this.changeDevice.bind(this, element.sahObject,element));
			element.observe('click', this.getLastFocusedElement.bind(this, element));
// 		}
		
		element.getElementsByTagName("img")[0].src = this.getInternetRestrictionIcon(device.Tags);
		this.setScheduleIcon(device._path, device.Tags);
	},
	
	appendWirelessDevice: function (element, device) {
		element.id = device._path;
		
		if (device.Name.length > 7) {
			element.down(".title").setAttribute("x-sah-tooltip", Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)));
			this.truncateDeviceName(element.down(".title"), Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)), 7);

		} else {
			element.down(".title").update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)));
		}
		element.addClassName(this.getIcon(element.sahObject));
		element.addClassName("li-device");
		element.addClassName("li-device-wireless");
		
		element.down("img.img-zoom").alt = this.getIcon(device);
		if (device.DeviceType && device.DeviceType.length > 0 && device.Tags.toLowerCase().indexOf("wifi_bridge")<0) {
			element.down("img.img-zoom").src = this.getSrcIcon(EventListner.DeviceClasses[device.DeviceType.toLowerCase()]);
		} else if (device.Tags.toLowerCase().indexOf("homeplug")>=0 || device.Tags.toLowerCase().indexOf("wifi_bridge")>=0) {
			element.down("img.img-zoom").src = this.getSrcIcon("liveplug"); 
		}else{
			element.down("img.img-zoom").src = this.getSrcIcon("desktop");
		}

		//element.getElementsByTagName("img")[1].alt = this.getIcon(device);
		//element.getElementsByTagName("img")[1].src = this.getSrcIcon(EventListner.DeviceClasses[device.deviceType[0].toLowerCase()]);
		this.wirelessDeviceTemplate.showForm(element);

		$('wirelessDevices').insert(element);
		
		element.observe('click', this.changeWirlessDevice.bind(this, element.sahObject,element));
		element.observe('click', this.getLastFocusedElement.bind(this, element));
		
		element.getElementsByTagName("img")[0].src = this.getInternetRestrictionIcon(device.Tags);
		this.setScheduleIcon(device._path, device.Tags);
	},
	
	appendUsbDevice: function (element, device) {
		element.addClassName("li-device");
		element.addClassName("li-device-usb");
		
		element.id = device._path;
		if (device.deviceType[0] === "Storage") {
			element.cif = "\\\\Livebox";
			element.down("img").alt = Sah.Tools.escapeString('js', device.Name) + "  " +this.getDeviceTranslation(device);
			element.down("img").src = this.getSrcIcon("mass-storage");
			element.addClassName("mass-storage");
			element.addClassName("mass-storage-notempty");
			element.observe('click', this.changeUsbDevice.bind(this, element.sahObject,element));
			element.observe('click', this.getLastFocusedElement.bind(this, element));
			element.down('.title').update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)));
			document.observe("sah:admin:language:change",function (){
			element.down("img").alt = Sah.Tools.escapeString('js', device.Name) + "  " +this.getDeviceTranslation(device);
			}.bind(this));
		} else if (device.deviceType[0] === "Livephone") {
			element.down("img").alt = this.getDeviceTranslation(device);
			element.down("img").src = this.getSrcIcon("livephone");
			element.addClassName("livephone");
			element.down('.title').update(device.productClass);
			document.observe("sah:admin:language:change",function (){
			element.down("img").alt = this.getDeviceTranslation(device);
			}.bind(this));
			
		} else if (device.deviceType[0]==="dongle") {
			element.observe('click', this.changeUsbDongle.bind(this, element.sahObject,element));
			element.observe('click', this.getLastFocusedElement.bind(this, element));
			element.addClassName("mass-storage");
			element.addClassName("mass-storage-notempty");
			var dongleLabel = t("home.label.usbdongle","X dongle");
			element.down(".title").setAttribute("x-sah-tooltip", Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', dongleLabel)));
			this.truncateDeviceName(element.down(".title"),dongleLabel, 45);
			document.observe("sah:admin:language:change",function (){
				dongleLabel = t("home.label.usbdongle","X set-top box");
				element.down(".title").setAttribute("x-sah-tooltip", Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', dongleLabel)));
				this.truncateDeviceName(element.down(".title"),dongleLabel, 45);
			}.bind(this));
			element.down("img").src = this.getSrcIcon("dongle");

		} else {
			element.setStyle({cursor:'default'});
			element.firstDescendant().setStyle({cursor:'default'});
			element.down("img").alt = this.getDeviceTranslation(device);
			element.observe('click',function(event) { event.preventDefault(); });
			element.observe('click', this.getLastFocusedElement.bind(this, element));
			element.down("img").src = this.getSrcIcon("printer");
			element.addClassName("printer");
			element.down('.title').update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)));
			document.observe("sah:admin:language:change",function (){
				element.down("img").alt = this.getDeviceTranslation(device);
			}.bind(this));
		}
		/* show the lement form */
		this.usbDeviceTemplate.showForm(element);
		$('usbDevices').insert(element);
	},
	
	changeUsbDevice: function (device,element, event) {
		this.hideDeviceMenu();
		$('UdbDevicemenuheader').update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)));
		this.globalFocusHandlerUSB = this.focusOutsideMenu.bind(this,element,"usbDeviceMenu");
		this.addFocusEvent($(document.body),this.globalFocusHandlerUSB ,"focus",true);
		$('usbBrowse').observe('click', this.browseUsbFiles.bind(this, device));
		$('usbEject').observe('click', this.onEjectUSB.bind(this, device));
		this.displayUsbMenu(event);
		setTimeout(function(){
			$('usbBrowse').focus();
		},100);	
		return true;
	},
	
	changeUsbDongle: function (device,element, event) {
		this.hideDeviceMenu();
		$('UdbDevicemenuheader').update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)));
		var dongleLabel = t("home.label.usbdongle","X dongle");
		$('UdbDevicemenuheader').update(dongleLabel);
		document.observe("sah:admin:language:change",function (){
			dongleLabel = t("home.label.usbdongle","X dongle");
			$('UdbDevicemenuheader').update(dongleLabel);
		}.bind(this));
		this.globalFocusHandlerUSB = this.focusOutsideMenu.bind(this,element,"usbDeviceMenu");
		this.addFocusEvent($(document.body),this.globalFocusHandlerUSB ,"focus",true);
		$('usbBrowse').setStyle({display: 'none'});
		var ejectLabel = t("general.btn.about","X dongle");
		$('usbEject').update(ejectLabel);
		document.observe("sah:admin:language:change",function (){
			ejectLabel = t("general.btn.about","X dongle");
			$('usbEject').update(ejectLabel);
		}.bind(this));
		$('usbEject').observe('click', this.OnRedirect.bind(this));
		this.displayUsbMenu(event);
		return true;
	},
	
	OnRedirect: function () {
		document.location='http://www.orange-programmepartenaires.com/fr/m2m';
	},
	
	changeCatIq: function (device,element, event) {
		this.hideDeviceMenu();
		
		$('catIqName').update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)));
		$('model').update(device.Key);
		$('lastupdate').update(device.EndpointType);
		this.globalFocusHandlerCATIQ = this.focusOutsideMenu.bind(this,element,"catIqMenu");
		this.addFocusEvent($(document.body),this.globalFocusHandlerCATIQ ,"focus",true);
		$('catIqCustomize').observe('click', function (e) {
			e.preventDefault();
			Sah.redirect('/homeDevicesCustomize.html?' + encodeURIComponent(device.Key));
			return false;
		});
		this.displayCatIqMenu(event);
		setTimeout(function(){
			$('catIqCustomize').focus();
		},100);	
		return true;
	},
	
	browseUsbFiles: function (element, event) {
		this.hideDeviceMenu(event);
		if (appConfig === 'fr') {
			ctl.popup.Open("<img id='ct-msgbox-img' class='mb-ok' src='images/fr/common/transparent.gif'>" +"<div id='ct-msgbox-msg1'><span id='usb-browse-popup'></span><br> "+"<span>\\\\Livebox"+"\\</span></div>"+"<input id='ct-msgbox-button4' class='input-btn input-btn-orange-small translation Translations.general.btn.ok' type='submit' value='ok' style='display: block;'>", '', '340', '200');
			$('ct-msgbox-button3').setStyle({display: 'block'});
			Sah.translator.change($("usb-browse-popup"), "home.usb.access.comment","Copiez le chemin d'accès ci-dessous dans la barre d'adresse de votre fenêtre d'exploration pour accéder a vos fichiers ");
		} else if (appConfig === 'pl') {
			return Sah.redirect('myFiles.html');
		}
	},
	
	onEjectUSB: function (element, event) {
		this.hideDeviceMenu();
		event.stop();
                
		this.client.execute("sysbus.StorageService:checkLogicalVolumeUsed", {
			uri: element.uri
		}, {
			onSuccess: this.volumeUsedStatus.bind(this, element),
			onFailure: this.volumeUsedStatus.bind(this)
		});
	},
		
	volumeUsedStatus: function(element, obj){
		if (obj.status === true) {
// 			ctl.popup.Open('<span id="usb-eject-popup"></span>', '', '400', '90');
// 			Sah.translator.change($("usb-eject-popup"), "home.label.devices.massstorage.busy","");
			
			ctl.msgbox.Show(ctl.msgbox.QUESTION.INFO, t('home.label.devices.massstorage.busy', 'X '), (function () {
					}.bind(this)), undefined);

			this.logger.info("mass storage is in use");
			
			var timeout = setTimeout(function () {
				ctl.msgbox.Close();
			}, 3000);
		} else {
			this.client.execute("sysbus.StorageService:ejectLogicalVolume", {
				uri: element.uri
			}, {
				onSuccess: this.whenUSBEjected.bind(this, element),
				onFailure: this.whenNotEjected.bind(this)
			});
		}
	},
	
	whenUSBEjected: function (element, obj) {
// 		ctl.popup.Open('<span id="usb-eject-popup"></span>', '', '400', '90');
// 		Sah.translator.change($("usb-eject-popup"), "home.label.devices.massstorage.ejected","");
		
		ctl.msgbox.Show(ctl.msgbox.QUESTION.INFO, t('home.label.devices.massstorage.ejected', 'X '), (function () {
				}.bind(this)), undefined);
		
		this.logger.info("mass storage is ejected");
		var timeout = setTimeout(function () {
// 			ctl.msgbox.Hide();
			$("ct-msgbox").setStyle({display: 'none'});
			$("ct-backlayer").setStyle({display: 'none'});
                       
		}, 3000);
	},

	whenNotEjected: function (obj) {
		// Nothing toDo ~ pcb error
	},
	
	displayUsbMenu: function (evnt) {
                this.removeBodyFocus();
		var target = evnt.target || window.e.srcElement;
		var position = target.cumulativeOffset();
		var newPosition = {};
		if(Math.abs(position.left-evnt.clientX)<40&&Math.abs(position.top-evnt.clientY)<40){
			newPosition.top = evnt.clientY;
			newPosition.left = evnt.clientX;
		} else {
			newPosition.top = position.top+20;
			newPosition.left = position.left+20;
		}
		$$('#usbDeviceMenu')[0].setStyle({
			display: 'block',
			top: newPosition.top + 'px',
			left: newPosition.left + 'px'
		});
		this._UsbMenu = true;
		evnt.stop();
	},
	
	adjustUSBElements: function (nbElems) {
		if (nbElems == 1) {
			$("home-dashboard-usb-devices").setStyle("top:170px;");
		} else if (nbElems == 2) {
			$("home-dashboard-usb-devices").setStyle("top:135px;");
		} else {
			$("home-dashboard-usb-devices").setStyle("top:140px;");
		}
	},
	
	adjustDectElements: function (lnth) {
		if (lnth == 1) {
			$$("#home-dashboard-dect-devices .hCarrossel")[0].setStyle("margin-left: 74px;");
		} else {
			$$("#home-dashboard-dect-devices .hCarrossel")[0].setStyle("margin-left: 24px;");
		}
	},
	
	setScheduleIcon: function (path, tags) {
		var setted = false;
		
		if (tags.toLowerCase().indexOf("wan-blocked") >= 0) {
			$$("#" + path + " div.internet-restriction-icon")[0].removeClassName("internet-restriction-green");
			$$("#" + path + " div.internet-restriction-icon")[0].addClassName("internet-restriction-red");
			setted = true;
		}
		
		if (!setted) {
			$$("#" + path + " div.internet-restriction-icon")[0].removeClassName("internet-restriction-red");
			$$("#" + path + " div.internet-restriction-icon")[0].addClassName("internet-restriction-green");
		}
	},
	
	getInternetRestrictionIcon: function (tags) {	
		
		var setted = false;		
		
		if (tags.toLowerCase().indexOf("wan-blocked") >= 0) {
		     
			
		        return appUrl + "/images/"+ appConfig + "/home/internet-blocked.png";
			setted = true;
		}
		
				
		if (!setted) {
			
		        return appUrl + "/images/"+ appConfig + "/home/internet-avail.png";
		}
	  
	},
	
	changeDevice: function (device, element, event) {
                this.hideDeviceMenu();
		var deviceType="";
		var webuiName="";
		device.Names.each(function (elem) {
			if (elem.Source.toLowerCase()==="webui")
			  webuiName=elem.Name;
		});
		if (webuiName.length!=0)
		   device.Name=webuiName;
		
                if (device.DeviceType) {
                   deviceType = device.DeviceType.toLowerCase();
		} else {
		      if (device.DeviceTypes) {
				device.DeviceTypes.each(function (elem) {
				   deviceType = elem.Type;
			});
		      }       
		} 
		
		if (device.IPAddress){
			$('ip').update(device.IPAddress);
		}else{
			$('ip').update("");
		}
		
		$('hostName').update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)));
		if (device.Tags.indexOf("stb")>=0) {
		  if (webuiName.length===0) {
			var stbLabel = t("home.label.stb","X set-top box");
			$('hostName').setAttribute("x-sah-tooltip", Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', stbLabel)));
			$('hostName').update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', stbLabel)));
			document.observe("sah:admin:language:change",function (){
				stbLabel = t("home.label.stb","X set-top box");
				$('hostName').setAttribute("x-sah-tooltip", Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', stbLabel)));
				$('hostName').update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', stbLabel)));
			}.bind(this));
		  }
		  
		  
		}
		this.removeBodyFocus();
               
                if (deviceType.indexOf("tv") >= 0 || deviceType.indexOf("stb") >=0 || deviceType.indexOf("set-top box") >= 0 ) {
                     $('accessscheduling').hide();
                     setTimeout(function(){
                            $('devicescustomize').focus();
                     },100);
                } else {
                     $('accessscheduling').show();
                     $('accessscheduling').observe('click', function (e) {
                            e.preventDefault();
                            Sah.redirect('/configAccessScheduling.html?' + encodeURIComponent(device.PhysAddress));
                            return false;
                     });
                     
                    setTimeout(function(){
                            $('accessscheduling').focus();
                    },100);
                }
		this.globalFocusHandler = this.focusOutsideMenu.bind(this,element,"deviceMenu");
		
		this.addFocusEvent($(document.body),this.globalFocusHandler ,"focus",true);
		$('devicescustomize').observe('click', function (e) {
			e.preventDefault();			
			Sah.redirect('/homeDevicesCustomize.html?' + encodeURIComponent(device.PhysAddress));
			return false;
		});
		                
		this.displayDeviceMenu(event);
		return true;
	},
	changeWirlessDevice: function (device, element, event) {	
		this.hideDeviceMenu();
		var deviceType="";
                if (device.DeviceType) {
                   deviceType = device.DeviceType.toLowerCase();
		} else {
		      if (device.DeviceTypes) {
				device.DeviceTypes.each(function (elem) {
				   deviceType = elem.Type;
			});
		      }       
		} 
		if (device.IPAddress){
			$('ip').update(device.IPAddress);
		}
		$('hostName').update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name)));		
		this.removeBodyFocus();
               
                if (deviceType.indexOf("tv") >= 0 || deviceType.indexOf("stb") >=0 || deviceType.indexOf("set-top box") >= 0 ) {
                     $('accessscheduling').hide();
                     setTimeout(function(){
                            $('devicescustomize').focus();
                     },100);
                } else {
                     $('accessscheduling').show();
                     $('accessscheduling').observe('click', function (e) {
                            e.preventDefault();
                            Sah.redirect('/configAccessScheduling.html?' + encodeURIComponent(device.PhysAddress));
                            return false;
                     });
                     
                    setTimeout(function(){
                            $('accessscheduling').focus();
                    },100);
                }
		this.globalFocusHandler = this.focusOutsideMenu.bind(this,element,"deviceMenu");
		
		this.addFocusEvent($(document.body),this.globalFocusHandler ,"focus",true);
		$('devicescustomize').observe('click', function (e) {
			e.preventDefault();			
			Sah.redirect('/homeDevicesCustomize.html?' + encodeURIComponent(device.PhysAddress));
			return false;
		});
		                
		this.displayDeviceMenu(event);
		return true;
	},
	focusOutsideMenu : function(element,menu,event){	
		
		var nextElement= event.target ||window.event.srcElement||"a";		
		
		if( nextElement && nextElement.tagName != "BODY" && !nextElement.descendantOf(menu)){	
			element.down("a").focus();		
			//this.removeBodyFocus();
			this.hideDeviceMenu();		
		}	
		return true
			
	},
	
	removeBodyFocus : function(){
		if(this.globalFocusHandler)this.removeFocusEvent($(document.body), "focus", true,this.globalFocusHandler);
		if(this.globalFocusHandlerUSB)this.removeFocusEvent($(document.body), "focus", true,this.globalFocusHandlerUSB);
		if(this.globalFocusHandlerCATIQ)this.removeFocusEvent($(document.body), "focus", true,this.globalFocusHandlerCATIQ);
	},
	
	truncateDeviceName: function (elem, deviceName, limit) {
		elem.update(deviceName.substring(0, limit) + "...");
	},
	
	adjustWiredElements: function (id, nbElems) {
		if (nbElems == 1) {
			$(id).down("ul").setStyle("margin-left:120px;");
		} else if (nbElems == 2) {
			$(id).down("ul").setStyle("margin-left:80px;");
		} else if (nbElems == 3) {
			$(id).down("ul").setStyle("margin-left:40px;");
		} else {
			$(id).down("ul").setStyle("margin-left:auto;");
		}
	},
	
	adjustWirelessElements: function (id, nbElems) {		
		if (nbElems == 1) {
			$(id).down("ul").setStyle("margin-left:80px;");
		} else if (nbElems == 2) {
			$(id).down("ul").setStyle("margin-left:40px;");
		} else {
			$(id).down("ul").setStyle("margin-left:auto;");
		}
	},
	
	hideDeviceMenu: function (evnt) {
		this.removeBodyFocus();
		if (this._UsbMenu) {
			$('usbEject').stopObserving('click');
			$('usbBrowse').stopObserving('click');			
			$$('#usbDeviceMenu')[0].setStyle({
				display: 'none',
				top: 'auto',
				left: 'auto'
			});
			this._UsbMenu = false;
		}

		if (this._DeviceMenu) {
			$('accessscheduling').stopObserving('click');
			$('devicescustomize').stopObserving('click');			
			$('catIqCustomize').stopObserving('click');
			$$('#deviceMenu')[0].setStyle({
				display: 'none',
				top: 'auto',
				left: 'auto'
			});

			$$('#catIqMenu')[0].setStyle({
				display: 'none',
				top: 'auto',
				left: 'auto'
			});
			this._DeviceMenu = false;
		}
		if (evnt) {
			evnt.stop();
		}
	},	
	displayDeviceMenu: function (evnt) {
                this.removeBodyFocus();
		var target = evnt.target || window.event.srcElement;
		
		var position = target.cumulativeOffset();
		var newPosition = {};
		if(Math.abs(position.left-evnt.clientX)<40&&Math.abs(position.top-evnt.clientY)<40){
			newPosition.top = evnt.clientY;
			newPosition.left = evnt.clientX;
		}else{
			newPosition.top = position.top+20;
			newPosition.left = position.left+20;
		}
		$$('#deviceMenu')[0].setStyle({
			display: 'block',
			top: newPosition.top + 'px',
			left: newPosition.left + 'px'
		});		
		//Sah.translator.change($("ipaddress-device-menu"),"general.label.ip","address IP");
		this._DeviceMenu = true;
		evnt.stop();
	},
	displayWirlessDeviceMenu: function (evnt) {
		this.removeBodyFocus();
		var target = evnt.target || window.event.srcElement;
	
		var position = target.cumulativeOffset();
		var newPosition = {};
		if(Math.abs(position.left-evnt.clientX)<40&&Math.abs(position.top-evnt.clientY)<40){
			newPosition.top = evnt.clientY;
			newPosition.left = evnt.clientX;
		}else{
			newPosition.top = position.top+20;
			newPosition.left = position.left+20;
		}
		$$('#wirlessdeviceMenu')[0].setStyle({
			display: 'block',
			top: newPosition.top + 'px',
			left: newPosition.left + 'px'
		});		
		//Sah.translator.change($("ipaddress-device-menu"),"general.label.ip","address IP");
		this._DeviceMenu = true;
		evnt.stop();
	},
	
	displayCatIqMenu: function (evnt) {
                this.removeBodyFocus();
		var target = evnt.target || window.event.srcElement;
		var position = target.cumulativeOffset();
		var newPosition = {};
		if(Math.abs(position.left-evnt.clientX)<40&&Math.abs(position.top-evnt.clientY)<40){
			newPosition.top = evnt.clientY;
			newPosition.left = evnt.clientX;
		}else{
			newPosition.top = position.top+20;
			newPosition.left = position.left+20;
		}
		$$('#catIqMenu')[0].setStyle({
			display: 'block',
			top: newPosition.top + 'px',
			left: newPosition.left  + 'px'
		});
		this._DeviceMenu = true;
		evnt.stop();
	},
	
	getIcon: function (device) {
		var ico = null;
		
		if (device.deviceType && device.deviceType.length > 0) {
			ico = EventListner.DeviceClasses[device.deviceType[0].toLowerCase()];
		}
		
		if (ico) {
			return ico;
		} else if (device.Name.match(/liveradio|vintage/i)) {
			return "liveradio";
		} else {
			return "desktop";
		}
	},
	
	getSrcIcon: function (deviceCat) {
		if (deviceCat==="dongle") {
		  return "/images/fr/devices/icons-devices-edf.png";
		}/*else if (deviceCat==="liveplug") {
		  return "/images/fr/devices/icons-devices-liveplugwifi.png";
		} */else if(!EventListner.IconPath[deviceCat]){
			return appUrl + "/images/"+ appConfig + EventListner.IconPath["desktop"];
			
		}
		return appUrl + "/images/"+ appConfig + EventListner.IconPath[deviceCat];
	},
	
	getDeviceTranslation: function (device) {
		var deviceType = "",
		deviceLabelTranslation = "",
		undef;
			
		if ( EventListner.DeviceClasses[device.deviceType[0].toLowerCase()] !== undef  ){
			deviceType = EventListner.DeviceClasses[device.deviceType[0].toLowerCase()];
		}else{
			deviceType = "desktop";
		}
			
		if ( EventListner.DeviceLabelTranslation[device.deviceType[0].toLowerCase()] !== undef  ){
			deviceLabelTranslation = EventListner.DeviceLabelTranslation[device.deviceType[0].toLowerCase()];
		}else{
			deviceLabelTranslation = EventListner.DeviceLabelTranslation["desktop"];
		}
		return t(deviceLabelTranslation , deviceType) ;
			     
	},
	
	addFocusEvent: function(someElement,someFunction,someEvent,capture){		
		if (!someElement.addEventListener) {
			this.addFocusEvent=function(someElement, someFunction, someEvent, capture){
				if(someEvent === "focus"){
					someElement.attachEvent("onfocusin", someFunction); 
				}else if(someEvent === "blur"){
					someElement.attachEvent("onfocusout", someFunction); 
				}
			}
			return this.addFocusEvent(someElement, someFunction, someEvent, capture);
		}
		else {
			this.addFocusEvent=function(someElement, someFunction, someEvent, capture){
			
				if(capture){
					someElement.addEventListener(someEvent,someFunction,capture);
				}else{
					someElement.observe(someEvent, someFunction);
				}
			}
			return this.addFocusEvent(someElement, someFunction, someEvent, capture);
		}
	},
	removeFocusEvent : function(someElement,someEvent,capture,someFunction){
		if (!someElement.removeEventListener) {
			this.removeFocusEvent = function(someElement,someEvent,capture,someFunction){
				if(someEvent === "focus"){
					someElement.detachEvent("onfocusin", someFunction); 
				}else if(someEvent === "blur"){
					someElement.someFunction("onfocusout",someFunction); 
				}         
			}
			return this.removeFocusEvent(someElement,someEvent,capture,someFunction);
			          
		}
		else {
			this.removeFocusEvent = function(someElement,someEvent,capture,someFunction){
				if(capture){
					someElement.removeEventListener(someEvent,someFunction,capture);
				}else{
					someElement.stopObserving(someEvent);
				}
			}
			return this.removeFocusEvent(someElement,someEvent,capture,someFunction);
		}
	},
	getIndex : function(node){
		var childs = node.parentNode.childNodes;                                                      
		for (var i=0;i < childs.length;i++){
                                                               
			if (node === childs[i])  return i;
		}
		return 0;
                                                       
	},
	setupCarrouselTabsEvents : function(carrouselDivId,carrouselObject){
		$$("#"+carrouselDivId+" div.hCarrossel ul li").each(function(li){
			this.addFocusEvent(li, function(e){
				var target = e.target || window.event.srcElement;				
				var li = target.parentNode;                                       
				var index = this.getIndex(li);
				(index-3>0)&& carrouselObject.scrollTo(index-3);
				
			}.bind(this),"focus",true);
		},this); 
	
		
	},
	
	adjustdashBoard: function () {
		$('home-dashboard').setStyle({
			backgroundImage: 'url(/images/'+appConfig+'/home/dashboard.png)',
			backgroundRepeat : "no-repeat"
		});
		$('home-dashboard-dect-label').remove();
		$('home-dashboard-dect-devices').remove();
		$('home-dashboard-dect-nodevices').remove();
		$('home-dashboard-wireless-label').setStyle("left:300px;");
		$('home-dashboard-wireless-nodevices').setStyle("left:345px");
		$('home-dashboard-wireless-devices').setStyle("left:270px");
		this._adjusted = true;
	},
	
	tabindexSort: function() {
		var tabIndexCount = 1;
		var tabIndexArray = [];
		// 1- Services status
		var InternetTitleElt = document.getElementsByClassName('Translations.general.label.internet')[0];
		var InternetValueElt = $('Services.InternetConnection');
		var TelephoneTitleElt = document.getElementsByClassName('Translations.general.label.phone')[0];
		var TelephoneValueElt = $('Services.Phone');
		var TvTitleElt = document.getElementsByClassName('Translations.general.label.tv')[0];
		var TvValueElt = $('Services.TV');
		var tabIndexArrayService = [ InternetTitleElt, InternetValueElt, TelephoneTitleElt, TelephoneValueElt, TvTitleElt, TvValueElt ];
		tabIndexArray = tabIndexArray.concat(tabIndexArrayService);
		// 2- Wired connexion
		var tabIndexArrayEthDeviceLi = document.getElementsByClassName('li-device-ethernet');
		var tabIndexArrayEthDevice = [];
		for(var i=0; i < tabIndexArrayEthDeviceLi.length; i++) {
			tabIndexArrayEthDevice.push(tabIndexArrayEthDeviceLi[i].getElementsByTagName('a')[0]);
		}
		tabIndexArray = tabIndexArray.concat(tabIndexArrayEthDevice);
		// 3- Wifi connexion
		var tabIndexArrayWirelessDeviceLi = document.getElementsByClassName('li-device-wireless');
		var tabIndexArrayWirelessDevice = [];
		for(var i=0; i < tabIndexArrayWirelessDeviceLi.length; i++) {
			tabIndexArrayWirelessDevice.push(tabIndexArrayWirelessDeviceLi[i].getElementsByTagName('a')[0]);
		}
		tabIndexArray = tabIndexArray.concat(tabIndexArrayWirelessDevice);
		// 4- High definition handset connexion
		var tabIndexArrayCatIqDeviceLi = document.getElementsByClassName('li-device-catIq');
		var tabIndexArrayCatIqDevice = [];
		for(var i=0; i < tabIndexArrayCatIqDeviceLi.length; i++) {
			tabIndexArrayCatIqDevice.push(tabIndexArrayCatIqDeviceLi[i].getElementsByTagName('a')[0]);
		}
		tabIndexArray = tabIndexArray.concat(tabIndexArrayCatIqDevice);
		// 5- USB connexion
		var tabIndexArrayUsbDeviceLi = document.getElementsByClassName('li-device-usb');
		var tabIndexArrayUsbDevice = [];
		for(var i=0; i < tabIndexArrayUsbDeviceLi.length; i++) {
			tabIndexArrayUsbDevice.push(tabIndexArrayUsbDeviceLi[i].getElementsByTagName('a')[0]);
		}
		tabIndexArray = tabIndexArray.concat(tabIndexArrayUsbDevice);
		// Numbers in right order
		for(var i=0; i < tabIndexArray.length; i++) {
			tabIndexArray[i].setAttribute('tabindex',tabIndexCount++);
		}
	},
	getLastFocusedElement: function(elt) {
		if(elt.getElementsByTagName('a')[0]) {
			this._lastFocusedElt = elt.getElementsByTagName('a')[0];// TODO
		}
		else {
			this._lastFocusedElt = elt;
		}
	}
}); 

EventListner.DeviceLabelTranslation = {
	"phone": "home.devicescustomize.label.type.mobile",
	"mobile": "home.devicescustomize.label.type.mobile",
	"notebook": "home.devicescustomize.label.type.notebook",
	"smartphone": "home.devicescustomize.label.type.mobile",
	"tablette": "home.devicescustomize.label.type.tablet",
	"laptop": "home.devicescustomize.label.type.laptop",
	"computer": "home.devicescustomize.label.type.computer",
	"desktop": "home.devicescustomize.label.type.computer",
	"printer": "home.devicescustomize.label.type.printer",
	"gameconsole": "home.devicescustomize.label.type.game",
	"game": "home.devicescustomize.label.type.game",
	"set-top box orange": "home.devicescustomize.label.type.stb",
	"set-top box": "home.devicescustomize.label.type.stb",
	"stb": "home.devicescustomize.label.type.stb",
	"audio/video": "home.devicescustomize.label.type.stb",
	"tv": "home.devicescustomize.label.type.tv",
	"liveradio": "home.devicescustomize.label.type.liveradio",
	"photo": "home.devicescustomize.label.type.liveradio",
	"photoframe": "home.devicescustomize.label.type.liveradio",
	"storage": "home.devicescustomize.label.type.massstorage",
	"mass-storage": "home.devicescustomize.label.type.massstorage",
	"Unknown": "home.devicescustomize.label.type.computer",	
	"unik": "home.devicescustomize.label.type.liveradio",
	"dect-phone": "home.devicescustomize.label.type.dectphone",
	"homelibrary": "home.devicescustomize.label.type.homelibrary",
	"livephone": "home.devicescustomize.label.type.homelibrary",
	"homeplug": "home.devicescustomize.label.type.homelibrary",	
	"ampliav":"home.devicescustomize.label.type.homelibrary",
	"femtocell":"home.devicescustomize.label.type.homelibrary",
	"homelive":"home.devicescustomize.label.type.homelibrary",
	"homepoint":"home.devicescustomize.label.type.homelibrary",
	"ipcamera":"home.devicescustomize.label.type.homelibrary",
	"leblocorange":"home.devicescustomize.label.type.homelibrary",
	"tvdongle":"home.devicescustomize.label.type.homelibrary",
	"stbplay":"home.devicescustomize.label.type.homelibrary"
};

EventListner.DeviceClasses = {
	"phone": "mobile",
	"mobile": "Phone",
	"notebook": "notebook",
	"smartphone": "smartphone",
	"tablette": "tablette",
	"laptop": "laptop",
	"computer": "desktop",
	"desktop": "Computer",
	"printer": "printer",
	"gameconsole": "game",
	"game": "GameConsole",
	"set-top box orange": "stb",
	"set-top box": "stb",
	"stb": "stb",
	"audio/video": "stb",
	"tv": "tv",
	"liveradio": "liveradio",
	"photo": "photoframe",
	"photoframe": "photo",
	"storage": "mass-storage",
	"mass-storage": "Storage",
	"Unknown": "desktop",
	"unik": "unik",
	"dect-phone": "dect-phone",
	"homelibrary": "homelibrary",
	"livephone": "Livephone",
	"homeplug": "liveplug",	
	"ampliav":"ampliav",
	"femtocell":"femtocell",
	"homelive":"homelive",
	"homepoint":"homepoint",
	"ipcamera":"ipcamera",
	"leblocorange":"leblocorange",
	"tvdongle":"tvdongle",
	"stbplay":"stbplay"
};

EventListner.IconPath = {
	"phone": "/devices/icons-devices-mobile.png",
	"mobile": "/devices/icons-devices-mobile.png",
	"smartphone": "/devices/icons-devices-smartphone.png",
	"tablette": "/devices/icons-devices-tablet.png",
	"dectPhone": "/devices/icons-devices-telephoneparinternet.png",
	"notebook": "/devices/icons-devices-notebook.png",
	"laptop": "/devices/icons-devices-laptop.png",
	"computer": "/devices/icons-devices-desktop.png",
	"desktop": "/devices/icons-devices-desktop.png",
	"printer": "/devices/icons-devices-printer.png",
	"gameconsole": "/devices/icons-devices-game.png",
	"game": "/devices/icons-devices-game.png",
	"set-top box orange": "/devices/icons-devices-stb.png",
	"set-top box": "/devices/icons-devices-stb.png",
	"stb": "/devices/icons-devices-stb.png",
	"audio/video": "/devices/icons-devices-stb.png",
	"tv": "/devices/icons-devices-tv.png",
	"liveradio": "/devices/icons-devices-liveradio.png",
	"photo": "/devices/icons-devices-photoframe.png",
	"photoframe": "/devices/icons-devices-photoframe.png",
	"storage": "/devices/icons-devices-usb-hdd.png",
	"mass-storage": "/devices/icons-devices-usb-hdd.png",
	"Unknown": "/devices/icons-devices-desktop.png",
	"desktop-gray": "/devices/icons-devices-desktop-gray.png",
	"laptop-gray": "/devices/icons-devices-laptop-gray.png",
	"mobile-gray": "/devices/icons-devices-mobile-gray.png",
	"printer-gray": "/devices/icons-devices-printer-gray.png",
	"stb-gray": "/devices/icons-devices-stb-gray.png",
	"tv-gray": "/devices/icons-devices-tv-gray.png",
	"game-gray": "/devices/icons-devices-game-gray.png",
	"liveradio-gray": "/devices/icons-devices-liveradio-gray.png",
	"photoframe-gray": "/devices/icons-devices-photoframe-gray.png",
	"mass-storage-gray": "/devices/icons-devices-usb-hdd-gray.png",
	"unik": "/devices/icons-devices-unik.png",
	"dect-phone": "/devices/icons-devices-telephoneparinternet.png",
	"homelibrary": "/devices/icons-devices-homelibrairy.png",
	"livephone": "/devices/icons-devices-livephone.png",
	"liveplug":"/devices/icons-devices-liveplugwifi.png",
	"ampliav":"/devices/icons-devices-ampliAV.png",
	"femtocell":"/devices/icons-devices-femtocell.png",
	"homelive":"/devices/icons-devices-homelive.png",
	"homepoint":"/devices/icons-devices-homepoint.png",
	"ipcamera":"/devices/icons-devices-ipcamera.png",
	"leblocorange":"/devices/icons-devices-leblocorange.png",
	"tvdongle":"/devices/icons-devices-TVdongle.png",
	"stbplay":"/devices/icons-devices-stbplay.png"
};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/eventListner/service.js */

EventListner.Service = Class.create(Sah.Form, {
	initialize: function  ($super, form) {
		$super(form);
		this.objects = new Object;
		
		document.observe("sah:home:service:refreshStatus", function (event) {
			this.loaded = false;

			/*	this.client.execute("sysbus.NMC.OrangeTV:isIPTVAvailable", {}, {
				onSuccess: this.setTvStatus.bind(this),
				onFailure: this.setTvStatus.bind(this)
			});*/
			
			if (config.BUILD_CUSTOMER != "sah") {
				this.client.execute("sysbus.NMC.OrangeTV:getIPTVStatus", {}, {
					onSuccess: this.setTvStatus.bind(this),
					onFailure: this.setTvStatus.bind(this)
				});
                        }else{
				this.client.execute("sysbus.NeMo.Intf.iptv:isUp", {}, {
					onSuccess: this.setTvStatus.bind(this),
					onFailure: this.setTvStatus.bind(this)
				});
			}
			
			this.needs("PhoneTrunk", {
				path: "sysbus.VoiceService.VoiceApplication:listTrunks",
				method: "execute"
			});
			
			this.needs("wanStatus", {
				path: "sysbus.NMC:getWANStatus",
				method: "execute"
			});
			this.needs("WLAN", {
				path: "sysbus.NMC.Wifi:get",
				method: "execute"
			});
	
			this.load();
		}.bind(this));
		
		this.request = {
			"events": [{
				"handler": "DeviceManager.Connectivity"
			}]
		};	
		
		this.events = [];
		this.load();
		this.observe();
		
		
		
		
		if ( $('Services.TV').innerHTML === t("general.label.nonsubscribe")){
			$('Services.TV').setStyle({
				color: 'black'
			});
		} 
		
		$("header-controls-accessibility-contrast3").observe("click", function(){
			if ( $('Services.TV').innerHTML === t("general.label.nonsubscribe")){
				$('Services.TV').setStyle({
					color: 'white'
				});
			} 
			
		});
		
		$("header-controls-accessibility-contrast2").observe("click", function(){
			if ( $('Services.TV').innerHTML === t("general.label.nonsubscribe")){
				$('Services.TV').setStyle({
					color: 'black'
				});
			} 
			
		});
		
		$("header-controls-accessibility-contrast1").observe("click", function(){
			if ( $('Services.TV').innerHTML === t("general.label.nonsubscribe")){
				$('Services.TV').setStyle({
					color: 'black'
				});
			} 
			
		});
	},
	
	objectsLoaded: function () {
		this.setPhoneStatus();
		this.setWanStatus();
		this.setWifiStatus();
	},	
	
 	observe: function () {
 		/*this.rq = new Ajax.Request("/ws", {
 			postBody: Object.toJSON(this.request),
 			contentType:'application/x-sah-event-1-call+json',
 			requestHeaders: {
 				"X-Context":Sah.Bus.contextID,
 				"X-Sah-Request-Type": "idle"
 			},
 			onSuccess: this.eventReceived.bind(this),
 			onFailure: this.failed.bind(this)
 		});*/
 		
 	},

	setTvStatus: function (result) {
	  
		if (typeof (result) !== "undefined") {
		  
			 if (config.BUILD_CUSTOMER.indexOf("sah")===0) {
			        this.objects.OrangeMltv = (result.result.status === true) ? "Available" : "Unavailable";
			 }else{
			this.objects.OrangeMltv = result.result.data.IPTVStatus;
			 }
			 
		} else {
			this.objects.OrangeMltv = "Unavailable";
		}
		
		if (this.objects.OrangeMltv == "Available") {
    
			$('Services.TV').setStyle({
				color: '#3caa0a'
			});
			
			Sah.translator.change($("Services.TV"), "general.label.available", "X available");
			this.setSmallIconMoreClasses($$('.icon-tv')[0], "icons-leds-small-black" , "icons-leds-small-gray", "icons-leds-small-green");
			
		} else if (this.objects.OrangeMltv == "Unavailable") {
		  
 			$('Services.TV').setStyle({
 				color: 'gray'
 			});
                        
			Sah.translator.change($("Services.TV"), "general.label.unavailable", "X unavailable");
			this.setSmallIconMoreClasses($$('.icon-tv')[0], "icons-leds-small-black",  "icons-leds-small-green", "icons-leds-small-gray");
			
		} else if (this.objects.OrangeMltv == "Unknown") {
			if (document.body.hasClassName("accessibility-contrast3") ){			  
 			      $('Services.TV').setStyle({
 				      color: 'white'
 			      });
			} else{
 			      $('Services.TV').setStyle({
 				      color: 'black'
 			      });
			}
			
			Sah.translator.change($("Services.TV"), "general.label.nonsubscribe", "X unknown status");
			this.setSmallIconMoreClasses($$('.icon-tv')[0], "icons-leds-small-green", "icons-leds-small-gray" ,"icons-leds-small-black");
		}
	},
	
	setSmallIcon: function (element, classToRemove, classToAdd) {
		if (element.hasClassName(classToRemove)) {
			element.removeClassName(classToRemove);
		}

		if (!element.hasClassName(classToAdd)) {
			element.addClassName(classToAdd);
		}
	},
	
	setSmallIconMoreClasses: function (element, firstClassToRemove, secondClassToRemove ,classToAdd) {
		if (element.hasClassName(firstClassToRemove)) {
			element.removeClassName(firstClassToRemove);
		}
		
		if (element.hasClassName(secondClassToRemove)) {
			element.removeClassName(secondClassToRemove);
		}
		
		if (!element.hasClassName(classToAdd)) {
			element.addClassName(classToAdd);
		}
	},
	
	failed: function (response) {
		var msg = "error monitoring service events: " + response.status + " " + response.statusText;

		if (response.responseJSON) {
			msg += " " + response.responseText;
		}
		
		Sah.logger.error(msg);
	},
	
 	eventReceived: function (response) {
 		var o;
 		if (o = response.responseText) {
 		        if ((o.indexOf("null")>=0)||(o.indexOf("errors")>=0)) {
 			    return;
 		        }
 			else {
 			    response = JSON.parse(o);
 			    console.warn("SERVICE");
 			    this.events = this.events.concat(o.events);
 			    this.request.channelid = o.channelid;
 			    this.processEvents();
 			}
 		} else {
 			    return;
 		}
 		this.observe();
 	},
	
	processEvents: function () {
		var e = null,
		status = null,
		undef;
		
		while ((e = this.events.shift())) {
			if (e.data.object.attributes.status != undef) {
				status = e.data.object.attributes.status;
			} else {
				status = null;
			}
			
			if (status != null) {
				if ( e.data.object.reason === "status_changed" ) {
					if ( status.data != undef ) {
						this.objects.wanStatus = status.data;
						this.setWanStatus();
					}

					if ( status.wl0 != undef ) {
						this.objects.WLAN = status.wl0;
						this.setWifiStatus();
					}
					
					if ( status.voip != undef ) {
						this.objects.Lines = status.voip;
					}
				} else {
					Sah.logger.error("Unrecognized service event reason: %s", e.data.object.reason);
				}
			}
		}
	},
	
	setPhoneStatus: function () {
		
		$('Services.Phone').setStyle({
			color: 'red'
		});
		
		Sah.translator.change($("Services.Phone"), "general.label.unavailable", "X unavailable");
		this.setSmallIcon($$('.icon-phone')[0], "icons-leds-small-green", "icons-leds-small-red");
		$("Services.PhoneNumber1").update();
		var undef;
		this.objects.Lines=$A();
		if ( this.objects.PhoneTrunk !== undef ) {
			for (var i = 0; i < this.objects.PhoneTrunk.length; i++) {
				for (var j = 0; j < this.objects.PhoneTrunk[i]["trunk_lines"].length; j++) {
					if (this.objects.PhoneTrunk[i]["trunk_lines"][j].status === "Up" && this.objects.PhoneTrunk[i]["trunk_lines"][j].enable === "Enabled") {
						$('Services.Phone').setStyle({
							color: '#3caa0a'
						});
						this.objects.Lines.push(this.objects.PhoneTrunk[i]["trunk_lines"][j]);
						Sah.translator.change($("Services.Phone"), "general.label.available", "X available");
						this.setSmallIcon($$('.icon-phone')[0], "icons-leds-small-red", "icons-leds-small-green");
					}
				}
			}
		}
		if(this.objects.Lines.length>0)
		{
		  for (var i = 0; i < this.objects.Lines.length; i++) {
			    if(i===0)
			    {
					  $("Services.PhoneNumber1").update("N° " + Sah.Tools.formatCountryCode(this.objects.Lines[i].directoryNumber));
			    }
			    if(i===1)
			    {	if($("Services.PhoneNumber2")){
					  $("Services.PhoneNumber2").show();	
					  $("Services.PhoneNumber2").update("N° " + Sah.Tools.formatCountryCode(this.objects.Lines[i].directoryNumber));}
					}
				}
			}
		else if(this.objects.Lines.length==1)
		{	if($("Services.PhoneNumber2")){
			  $("Services.PhoneNumber2").hide();}
		}
		else if (this.objects.Lines.length==0){
		$('Services.Phone').setStyle({
			color: 'red'
		});
		
		Sah.translator.change($("Services.Phone"), "general.label.unavailable", "X unavailable");
		this.setSmallIcon($$('.icon-phone')[0], "icons-leds-small-green", "icons-leds-small-red");
			$("Services.PhoneNumber1").update();
			if($("Services.PhoneNumber2")){
			$("Services.PhoneNumber2").update();}

		}
	},
	
	setWanStatus: function () {
		$('Services.InternetConnection').setStyle({
			color: 'red'
		});
		Sah.translator.change($("Services.InternetConnection"), "general.label.unavailable", "X unavailable");
		this.setSmallIcon($$('.icon-internet')[0], "icons-leds-small-green", "icons-leds-small-red");		

		if( (this.objects.wanStatus)&&(this.objects.wanStatus.LinkState == "down")){
			if($("left-datarate-link"))
				$("left-datarate-link").hide();
			
		}else if( (this.objects.wanStatus)&&(this.objects.wanStatus.LinkState == "up")){
			if($("left-datarate-link"))
				if(this.objects.wanStatus.LinkType == "ethernet") {
					$("left-datarate-link").hide();
				}
				else {
					$("left-datarate-link").show();
				}
		}		


		if ( (this.objects.wanStatus)&&(this.objects.wanStatus.LinkState == "up")&&((this.objects.wanStatus.ConnectionState === "Connected")||(this.objects.wanStatus.ConnectionState === "Bound")) ) {
			$('Services.InternetConnection').setStyle({
				color: '#3caa0a'
			});
			Sah.translator.change($("Services.InternetConnection"), "general.label.available", "X available");
			this.setSmallIcon($$('.icon-internet')[0], "icons-leds-small-red", "icons-leds-small-green");
		}
	},
	
	setWifiStatus: function () {
		var elem = $("home-dashboard-wireless-label").down(".label").down("span");
		if(this.objects.WLAN){
			if (this.objects.WLAN.Status == true) {
				this.setSmallIcon($("home-dashboard-wireless-label").down(".icons"), "icons-leds-small-red", "icons-leds-small-green");
				elem.setStyle({
					color: '#3caa0a'
				});
				Sah.translator.change(elem, "general.label.wifienable", "X available");
			} else {
				this.setSmallIcon($("home-dashboard-wireless-label").down(".icons"), "icons-leds-small-green", "icons-leds-small-red");
				elem.setStyle({
					color: 'red'
				});
				Sah.translator.change(elem, "general.label.wifidisable", "X unavailable");
			}
		}
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/lan.js */

/**
 * @namespace Holds the lan entity and its associated forms
 */
var Lan = {};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/security/upnp.js */

Security.Upnp = Class.create(Sah.AuthenticatedForm,{
	initialize : function($super,form){
		$super(form);

		/* setup events */
		$("bt_save").observe("click",this.onSave.bind(this));
		$("bt_cancel").observe("click",this.onCancel.bind(this));
		$("bt_update").observe("click",this.onUpdate.bind(this));
		$("UPNPService.Enable").observe("click", this.alertUser.bind(this));
       
		this.needs("UPNPService", {
			path: "sysbus.UPnP-IGD", 
			depth: 0
		});
       
		this.needs("PortMappingRules", {
			path: "sysbus.Firewall:getPortForwarding", 
			method:"execute",
			methodParams : {
				origin : Sah.Config.Upnp.Identifier
			}
		});
		this.needs("PinHoleRules", {
			path: "sysbus.Firewall:getPinhole", 
			method:"execute",
			methodParams : {
				"origin" : "upnp"
			}
		});
		this.markAsLoading();
		this.form.disable();
		this.load();

	},

	objectsLoaded : function () {
		/* setup needed templates */
		this.upnpTemplate = Sah.Templates['UPNP'];
		this.upnpTemplate.callback = this.appendUpnp.bind(this);
		this.fillForm();   

	},

	getProtocolName : function(protocolId){
		var protocolName;
		if (protocolId == "6")
			protocolName = "TCP";
		else if (protocolId == "17")
			protocolName = "UDP";
		else
			protocolName = t("advconfig.firewalladv.label.bothprotocol", "both");
		return protocolName;
	},

	fillForm: function () {
		this.hiddenElements= $A();
		this.UPNP = $A();

		$H(this.objects.PortMappingRules).each(function (rule){
			if(rule &&  rule[1]){
				rule= rule[1];                
				rule.PortMappingProtocol = this.getProtocolName(rule.Protocol);
				rule.RemoteHost = rule.DestinationIPAddress;
				rule.DestinationIPAddress = rule.SourcePrefix;
				this.UPNP.push(rule);
			} 


		},this);
		$H(this.objects.PinHoleRules).each(function (rule){
			if(rule &&  rule[1]){
				rule= rule[1];                
				rule.PortMappingProtocol = this.getProtocolName(rule.Protocol);
				rule.RemoteHost = rule.DestinationIPAddress;
				rule.DestinationIPAddress = rule.SourcePrefix;
				rule.ExternalPort = rule.SourcePort; 
				rule.InternalPort = rule.DestinationPort;
				this.UPNP.push(rule);
			} 


		},this);

		this.upnpTemplate.apply(this.UPNP);
		$('UPNPService.Enable').checked = this.objects.UPNPService.Enabled;
		this.fromObject(this.objects);
		this.form.enable();
		this.markAsLoaded();
		this.form.show();
	},

	appendUpnp : function(element, upnp){
		element.id = upnp._path;
		/* show the lement form */
		this.upnpTemplate.showForm(element);
		/* when clicking delete remove the element */
		/* element.del = element.down(".delete");
        element.del.observe("click", this.onDisplayMsgBox.bind(this, element, upnp));*/

		$('SecurityUpnp').down("tbody").insert(element);

	},



	onSave : function(event){
		$("upnp_error").update();
		$("config.lan.upnp").hide();
   
		this.objects.UPNPService._update(this.toObject().UPNPService);
		if (this.objects.UPNPService._changed()) {
			this.objects.UPNPService._save({
				onSuccess: this.whenSaved.bind(this), 
				onFailure: this.whenNotSaved.bind(this)
			});
		}else{
			this.logger.info("skipping save");
		}
		if($('UPNPService.Enable').checked === false){
			$$(".rule").each(function(elt){
				elt.remove();
			});
		}
	},

  

	onCancel : function ( event ){
		$("upnp_error").update();
		$("config.lan.upnp").hide();		
// 		this.fromObject(this.objects);
		$('UPNPService.Enable').checked = this.objects.UPNPService.Enabled;
		this.fromObject(this.objects);
		this.alertUser();
	},

	onUpdate: function (event){
		event.stop();
		this.markAsLoading();
		$("upnp_error").update();
		$("config.lan.upnp").hide();
		$("SecurityUpnp").select("tbody tr").each(function (tr) {
			if (tr.sahObject)
				tr.remove();
		},this);

		this.objects.PortMappingRules._childs = new Array();
		this.client.execute("sysbus.Firewall:getPortForwarding", {      
			"origin" : Sah.Config.Upnp.Identifier
		},{    
			onSuccess: this.reloadUpnpRules.bind(this), 
			onFailure: this.whenNotSaved.bind(this)
		});
	},
	reloadUpnpRules : function(Response){  
        
		this.objects.PortMappingRules=(Response.result && Response.result.status)? Response.result.status : {};
		this.client.execute("sysbus.Firewall:getPinhole", {      
			"origin" : "upnp"
		},{    
			onSuccess: this.reloadPinholeRules.bind(this), 
			onFailure: this.whenNotSaved.bind(this)
		});
      
	},
	reloadPinholeRules:function(Response){
		this.objects.PinHoleRules=(Response.result && Response.result.status)? Response.result.status : {};
		this.fillForm();
	},
	whenSaved : function(obj){
		//commiting changes
		this.client.execute("sysbus.Firewall:commit",{},{});
	},

	whenNotSaved : function (obj) {
		this.logger.warn("Failed to enable or disable the upnp");
	},
	
	alertUser: function (obj) {
		if (!$("UPNPService.Enable").checked) {
			$('upnp.warning').show();
		} else {
			$('upnp.warning').hide();
		}
	}
});


/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/security/rule.js */

/**
 * @class Security.rule
 * @augments Sah.Form
 */
Security.Rule = Class.create(Sah.AuthenticatedForm,/** @lends Security.Rule# */{
	initialize: function ($super, form){
		$super(form);

		this.tbody = this.form.down("tbody");
		this.description = this.form.down("select[name='Rule.Description']");
		this.description.observe("change", this.onRuleChanged.bind(this));
		document.observe("sah:admin:language:change",this.onLanguageChange.bind(this));
		this.custom = $("rule_custom_description");
		this.customDescription = this.custom.down("input[name='Rule.CustomDescription']");
		this.custom.down("a").observe("click", this.resetRule.bind(this));
		this.form.down(".SecurityRuleSave").observe("click", this.onSave.bind(this));
		this.target = this.form.down("select[name='Rule.Target']");
		this.ipVersion =0;
    
		this.needs("Rule", {
			path:  "sysbus.Firewall:getCustomRule",
			method :"execute",
			methodParams : {
				"chain":"Custom" 			
			}
		});
		this.needs("Ruleipv6", {
			path:  "sysbus.Firewall:getCustomRule",
			method :"execute",
			methodParams : {
 				"chain":"Custom_V6In"
 			}
		});
		this.needs("Status", {
			path: "sysbus.NMC:getWANStatus",
			method: "execute"
		});
		this.form.disable();
		this.load();
	},

	objectsLoaded: function (){		
		var rules = $A();

		this.objects.CombinedRule = $A();
		this.objects.defaultRules = $H(Sah.Config.Firewall.defaults.customRules);
		/* Add tooltip */
		this.form.down("input[name='Rule.SourcePort']").setAttribute("x-sah-tooltip",t("advconfig.firewalladv.tooltip.sourceport","X (ex:1000-2000)"));
		this.form.down("input[name='Rule.DestinationPort']").setAttribute("x-sah-tooltip",t("advconfig.firewalladv.tooltip.destinationport","X (ex:1000-2000)"));

		rules = this.objects.defaultRules.merge ($H(this.objects.Rule));
		rulesipv6 = this.objects.defaultRules.merge($H(this.objects.Ruleipv6));
				
   		rules.each(function(r){
			if(r[1].Id && (r[1].Protocol == "6"||"7"||"6,17"||"17,6") ){
                this.objects.CombinedRule.push(r.value);	
			}
		},this);
		
		rulesipv6.each(function(r){
 			if(r[1].Id && (r[1].Protocol == "6"||"7"||"6,17"||"17,6")){
                this.objects.CombinedRule.push(r.value);
			}
		 },this);

		rulesipv6.each(function(r){
		    rules.each(function(b){
			    if(r[1].Id === b[1].Id)
			        this.objects.CombinedRule.remove(r.value);
			},this);
        },this);
		/* set the protocol text */
		// this.objects.CombinedRule.each(this.setRuleProtocolText.bind(this));
		this.objects.CombinedRule.each(this.setAttributes.bind(this));
		/* fetch the enabled/disabled rules */
		var partitionEnabled = [];
		var partitionDisabled = [];
		var listID = [];
		this.objects.CombinedRule.each(function (r) {
            if (r.Enable == true)
                partitionEnabled.push(r);
			else
                partitionDisabled.push(r);
		});
	
		this.objects.EnabledRules = partitionEnabled;
		this.objects.DisabledRules = partitionDisabled;

		/* fill the select box */
		this.fillDescriptionSelect();
		 		
		/* setup needed templates */
		this.ruleTemplate = Sah.Templates['Rule'];
		this.ruleTemplate.callback = this.appendRule.bind(this);		
		this.ruleTemplate.apply(this.objects.EnabledRules);
		this.objects.EnabledRules.each(function(r){
		     listID.push(r.Id);
			  var acceptTarget = t("advconfig.firewalladv.label.accept", "Accept");
			  var rejectTarget = t("advconfig.firewalladv.label.drop", "Drop");
			  var target = (r.Target == "Accept" ? acceptTarget : rejectTarget );
		 	  var value=r.Id || r.Description;
			  $$('#'+value+ ' .target div')[0].innerHTML=target;
		},this);
		
		this.onRuleChanged();
		this.form.enable();
		this.markAsLoaded();
	},
	setAttributes : function(rule){
		if (rule.Protocol == "6")
			rule.ProtocolText = "TCP";
		else if (rule.Protocol == "17")
			rule.ProtocolText = "UDP";
		else
		rule.ProtocolText = t("advconfig.firewalladv.label.bothprotocol", "both");
		this.setupPorts(rule);
		if((!Sah.IPAddress.isValid(rule.SourceIP) && rule.SourceIP!="" )||(!Sah.IPAddress.isValid(rule.DestinationIP) && rule.DestinationIP !=""))
		{
		  this.setupIP6s(rule);
		}
		this.setupIPs(rule);
	},
	setupIPs:function(rule){ 
        var sourceIp = new Sah.IPAddress(rule.SourcePrefix);
		var destinationIp = new Sah.IPAddress(rule.DestinationPrefix);
		if(sourceIp.bytes && sourceIp.bytesMask){
			rule.SourceIP = sourceIp.bytes.join(".");
			rule.SourceIPMask = sourceIp.bytesMask.join(".");
		}
		if(destinationIp.bytes && destinationIp.bytesMask){
			rule.DestinationIP = destinationIp.bytes.join(".");
			rule.DestinationIPMask = destinationIp.bytesMask.join(".");
		}
	},
    setupIP6s:function(rule){
        rule.SourceIP = rule.SourcePrefix.split("/")[0];
        rule.SourceIPMask = rule.SourcePrefix.split("/")[1];
        rule.DestinationIP = rule.DestinationPrefix.split("/")[0];
        rule.DestinationIPMask = rule.DestinationPrefix.split("/")[1];
    },
	setupPorts:function(rule){
		var portRangeReg = new RegExp("^\\s*(\\d+)\\s*-\\s*(\\d+)\\s*$");
		var sourcePort = rule.SourcePort;
		rule["SourcePortRangeEnd"]="";
		if (sourcePort.match(portRangeReg)) {
			rule.SourcePort = sourcePort.split("-")[0];
			rule.SourcePortRangeEnd = sourcePort.split("-")[1];
		} else {
			rule.SourcePortRangeEnd = rule.SourcePort;
		}

		var destinationPort = rule.DestinationPort;
		rule["DestinationPortRangeEnd"]="";
		if (destinationPort.match(portRangeReg)) {
			rule.DestinationPort = destinationPort.split("-")[0];
			rule.DestinationPortRangeEnd = destinationPort.split("-")[1] ;
		} else {
			rule.DestinationPortRangeEnd = rule.DestinationPort;
		}
		rule.SourcePortExclude = "0";
		rule.DestinationPortExclude = "0";
		rule.protocolExclude = "0";
	},
	fillDescriptionSelect: function (){
		var select = this.description;
		select.update("");

		this.objects.DisabledRules.each(function (rule) {
			var option = new Element("option");
			option.update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', rule.Id)));
			option.rule = rule;
			select.insert(option);
		}, this);

		this.newRuleOption = new Element("option", {
			"value": "CUSTOM"
		});
		this.newRuleOption.update(t("advconfig.firewalladv.label.editnewrule", "Edit New Rule"));
		select.insert(this.newRuleOption);
		
		document.observe("sah:admin:language:change",function (){
			this.newRuleOption.update(t("advconfig.firewalladv.label.editnewrule", "Edit New Rule"));
		}.bind(this));
	},
	loadRuleInForm: function (rule){
		if (rule) {
			this.fromObject({
				"Rule": rule
			});
		}
		if (rule.DestinationPort !== rule.DestinationPortRangeEnd)
			$('Rule.DestinationPort').value = rule.DestinationPort+"-"+rule.DestinationPortRangeEnd;
		if (rule.SourcePort !== rule.SourcePortRangeEnd)
			$('Rule.SourcePort').value = rule.SourcePort+"-"+rule.SourcePortRangeEnd;
	},

	/**
     * @param {Object} element element in the form
     * @param {Object} rule an instance in sahbus
     * Add each row of the template and create the event handler for buttons */
	appendRule: function (element, rule)
	{       
		element.id = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', rule.Id || rule.Description));
		rule._element = element;
		
		if (rule.SourcePortRangeEnd != rule.SourcePort && rule.SourcePortRangeEnd!="")
		{
			element.down(".SourcePort").update(rule.SourcePort+"-"+ rule.SourcePortRangeEnd);
		}
		if (rule.DestinationPortRangeEnd != rule.DestinationPort && rule.DestinationPortRangeEnd!="")
		{
			element.down(".DestinationPort").update(rule.DestinationPort+"-"+ rule.DestinationPortRangeEnd);
		}     
		/* when clicking delete remove the element */
		element.del = element.down(".btn-delete");
		element.del.observe("click", this.onDelete.bind(this, element, rule));
		this.tbody.insert(element);
		if((!Sah.IPAddress.isValid(rule.SourceIP) && rule.SourceIP!="" )||(!Sah.IPAddress.isValid(rule.DestinationIP)&& rule.DestinationIP!="" )){
			element.down(".SourceIP").setAttribute("x-sah-tooltip", rule.SourceIP);
 			this.truncateIpAdress(element.down(".SourceIP"), rule.SourceIP, 10);
			element.down(".DestinationIP").setAttribute("x-sah-tooltip", rule.DestinationIP);
 			this.truncateIpAdress(element.down(".DestinationIP"), rule.DestinationIP, 10);
		}
	},
	setupRule: function (rule, tr)
	{
		var anyReg = new RegExp("^\s*(" + t("advconfig.firewalladv.label.bothprotocol", "both") + ")?\\s*$", "i");
		
		if (!rule.SourceIP || rule.SourceIP.match(anyReg))
			rule.SourceIP = "";
		if (!rule.SourceIPMask || rule.SourceIPMask.match(anyReg))
			rule.SourceIPMask = "";
		if (!rule.SourcePort || rule.SourcePort.match(anyReg))
			rule.SourcePort = "";
		if (!rule.DestinationIP || rule.DestinationIP.match(anyReg))
			rule.DestinationIP = "";
		if (!rule.DestinationIPMask || rule.DestinationIPMask.match(anyReg))
			rule.DestinationIPMask = "";
		if (!rule.DestinationPort || rule.DestinationPort.match(anyReg))
			rule.DestinationPort = "";
		/* configure port */
		this.setupPorts(rule);
	},

	onRuleChanged: function () {
		var selectedEntry = this.description.selectedIndex;
		var rule = this.description.options[selectedEntry].rule;
		if (rule) {
			this.loadRuleInForm(rule);
			this.description.show();
			this.custom.hide();
		} else {
			this.form.reset();
			this.description.selectedIndex = selectedEntry;
			this.description.hide();
			this.custom.show();
		}
	},
	onSave: function (event){
		Event.stop(event);
		$("firewalladv_error").update();
		$("config.security.firewalladverror").hide();
		var rule = {};
		rule.Id = this.description.options[this.description.selectedIndex].Id;
		this.deleteRules(rule, this.saveRules.bind(this));
		return false;
	},
	deleteRules: function (rule, handler){
		if(rule && rule.Id){
			this.client.execute("sysbus.Firewall:deleteCustomRule",{
				"id": rule.Id,
				"chain": "Custom"
			},
			handler);
		}else{
			handler();
		}
	},
	disableRules: function (rule, handler){
		if(rule){
            var parameters = {
				id : rule.Id || rule.Description,
				action : rule.Target,
				destinationPort : (rule.DestinationPortRangeEnd)?rule.DestinationPort + "-"+rule.DestinationPortRangeEnd:rule.DestinationPort,
                destinationPrefix : rule.DestinationIP,
				sourcePort :(rule.SourcePortRangeEnd)?rule.SourcePort+"-"+rule.SourcePortRangeEnd: rule.SourcePort,
                sourcePrefix : rule.SourceIP,              
				description : rule.Description,
				protocol : rule.Protocol,
				ipversion : this.ipVersion,
				enable : false,
				persistent : true
			};
			var parametersV4 = {
				id : rule.Id || rule.Description,
				action : rule.Target,
				destinationPort : (rule.DestinationPortRangeEnd)?rule.DestinationPort + "-"+rule.DestinationPortRangeEnd:rule.DestinationPort,
			    destinationPrefix : rule.DestinationIP,
				sourcePort :(rule.SourcePortRangeEnd)?rule.SourcePort+"-"+rule.SourcePortRangeEnd: rule.SourcePort,
                sourcePrefix : rule.SourceIP,                               
				description : rule.Description,
				protocol : rule.Protocol,
				ipversion : 4,
				enable : false,
			    chain:"Custom",
				persistent : true
			};
			var parametersV6IN = {
			       id : rule.Id || rule.Description,  
			       action : rule.Target,
			       destinationPort : (rule.DestinationPortRangeEnd)?rule.DestinationPort + "-"+rule.DestinationPortRangeEnd:rule.DestinationPort,
			       destinationPrefix : rule.DestinationIP,
			       sourcePort :(rule.SourcePortRangeEnd)?rule.SourcePort+"-"+rule.SourcePortRangeEnd: rule.SourcePort,
			       sourcePrefix : rule.SourceIP,
			       description : rule.Description,
			       protocol : rule.Protocol,
			       ipversion :6,
			       enable : false,			       
			       chain:"Custom_V6In",
			       persistent : true			
		       };	
		       var parametersV6OUT = {
			       id : rule.Id || rule.Description,
			       action : rule.Target,
			       destinationPort : (rule.DestinationPortRangeEnd)?rule.DestinationPort + "-"+rule.DestinationPortRangeEnd:rule.DestinationPort,
			       destinationPrefix : rule.DestinationIP,
			       sourcePort :(rule.SourcePortRangeEnd)?rule.SourcePort+"-"+rule.SourcePortRangeEnd: rule.SourcePort,
			       sourcePrefix : rule.SourceIP,
			       description : rule.Description,
			       protocol : rule.Protocol,
			       ipversion :6,
			       enable : false,
			       chain:"Custom_V6Out",
			       persistent : true
		       };
                if (rule.DestinationIPMask != "" ){
		            parametersV6IN.destinationPrefix  = rule.DestinationIP+"/"+rule.DestinationIPMask;
                    parametersV6OUT.destinationPrefix = rule.DestinationIP+"/"+rule.DestinationIPMask;
                }
                if (rule.SourceIPMask != "" ){
	    	        parametersV6IN.sourcePrefix  = rule.SourceIP+"/"+rule.SourceIPMask;
                    parametersV6OUT.sourcePrefix = rule.SourceIP+"/"+rule.SourceIPMask;
                }

                if((rule.SourceIP!="" && Sah.IPAddress.isValid(rule.SourceIP)) || (rule.DestinationIP!="" && Sah.IPAddress.isValid(rule.DestinationIP))) {
                    this.client.execute("sysbus.Firewall:setCustomRule", parametersV4, handler);
                }
                else if((rule.SourceIP!="" && !Sah.IPAddress.isValid(rule.SourceIP)) || (rule.DestinationIP!="" && !Sah.IPAddress.isValid(rule.DestinationIP))){
                    this.client.execute("sysbus.Firewall:setCustomRule",parametersV6IN, handler);
                    this.client.execute("sysbus.Firewall:setCustomRule",parametersV6OUT, handler);
                }
                else {
                    this.client.execute("sysbus.Firewall:setCustomRule",parameters, handler);
                    this.client.execute("sysbus.Firewall:setCustomRule",parametersV6IN, handler);
                    this.client.execute("sysbus.Firewall:setCustomRule",parametersV6OUT, handler);
                }
            }
	},
	saveRules: function (){     
		var rule = this.description.options[this.description.selectedIndex].rule;
		var json = null;
		if (!rule) {
			this.logger.info("adding custom rule");
			json = this.toObject().Rule;
			json.Enable = "0";
			rule = json;
			rule.Description = this.customDescription.getValue();
			rule.Id = this.customDescription.getValue();
		}else{
			var merge = function (o,ob) {
				for (var z in ob) {
					if (ob.hasOwnProperty(z)) {
						o[z] = ob[z];
					}
				}
				return o;
			}
			json = this.toObject().Rule;
			rule.Description = this.customDescription.getValue();
			rule.CustomDescription = null;
			rule = merge(rule,json);
		}
		this.setupRule(rule, this.form);

		if(!this.validateSecurityRule(rule)){
			$("config.security.firewalladverror").show();
			return false;
		}
		// rule.Order = "";
		rule.Enable = "1";
		rule.Target = (this.target.selectedIndex == 0 ? "Accept" : "Drop");
		if (rule.Protocol == "both") {
			rule.rules = null;
			this.saveRule(rule, [ 6, 17 ]);
		} else {
			this.saveRule(rule, [ rule.Protocol ]);
		}
	},
	saveRule: function (rule, protocols, object){
		if (object) {
			if (rule.Protocol == "both") {
				if (!rule.rules)
					rule.rules = $A();
				rule.Order = object.Order;
				rule.rules.push(object);
			} else {
				rule = object;
			}
		}
		/**/
		 var sourceIPPrefix = new Sah.IPAddress(rule.SourceIP,rule.SourceIPMask);
		 var destinationIPPrefix = new Sah.IPAddress(rule.DestinationIP,rule.DestinationIPMask);
		 var parameters = {
			action : rule.Target,
			destinationPort : (rule.DestinationPortRangeEnd)?rule.DestinationPort + "-"+rule.DestinationPortRangeEnd:rule.DestinationPort,
			destinationPrefix : destinationIPPrefix.toString(),
			sourcePort :(rule.SourcePortRangeEnd)?rule.SourcePort+"-"+rule.SourcePortRangeEnd: rule.SourcePort,
			sourcePrefix : sourceIPPrefix.toString(),
			description : rule.Description,
			//ipversion : this.ipVersion,
			ipversion :4,
			enable : true,
			persistent : true,
			chain:"Custom",
			//etat:"added",
			id:rule.Id||rule.Description
		};
		var parametersV6IN = {
			action : rule.Target,
			destinationPort : (rule.DestinationPortRangeEnd)?rule.DestinationPort + "-"+rule.DestinationPortRangeEnd:rule.DestinationPort,
			destinationPrefix : rule.DestinationIP,
			sourcePort :(rule.SourcePortRangeEnd)?rule.SourcePort+"-"+rule.SourcePortRangeEnd: rule.SourcePort,
			sourcePrefix : rule.SourceIP,
			description : rule.Description,
			protocol : rule.Protocol,
			ipversion :6,
			enable : true,
			persistent : true,
			chain:"Custom_V6In",
			//etat:"added",
			id:rule.Id||rule.Description
		};
		var parametersV6OUT = {
			action : rule.Target,
			destinationPort : (rule.DestinationPortRangeEnd)?rule.DestinationPort + "-"+rule.DestinationPortRangeEnd:rule.DestinationPort,
			destinationPrefix :rule.DestinationIP,
			sourcePort :(rule.SourcePortRangeEnd)?rule.SourcePort+"-"+rule.SourcePortRangeEnd: rule.SourcePort,
			sourcePrefix : rule.SourceIP,
			description : rule.Description,
			protocol : rule.Protocol,
			ipversion :6,
			enable : true,
			persistent : true,
			chain:"Custom_V6Out",
			//etat:"added",
			id:rule.Id||rule.Description
		};
		if(rule.SourceIP==="" && rule.DestinationIP==="" )
		{ 
		  console.warn('rule.SourceIP and rule.DestinationIP are empty.');
		  if (rule.Id) parameters.id =  rule.Id ;
		  if (rule.Protocol == "both") {
			  parameters.protocol = "6,17";
			  parametersV6IN.protocol = "6,17";
			  parametersV6OUT.protocol = "6,17";
		  } else {
			  parameters.protocol = rule.Protocol;
			  parametersV6IN.protocol = rule.Protocol;
			  parametersV6OUT.protocol = rule.Protocol;
		  }
		  this.client.execute("sysbus.Firewall:setCustomRule",parametersV6IN);
		  this.client.execute("sysbus.Firewall:setCustomRule",parametersV6OUT);
		  this.client.execute("sysbus.Firewall:setCustomRule",parameters, this.whenSaved.bind(this, rule));
		}
		
		// les 2 ipV6 
		else if( (rule.SourceIP!="" && !Sah.IPAddress.isValid(rule.SourceIP)) || (rule.DestinationIP!="" && !Sah.IPAddress.isValid(rule.DestinationIP)))
		{
            console.warn('rule.SourceIP or/and rule.DestinationIP are IPv6 addresses');
            if (rule.Protocol == "both") {
			    parametersV6IN.protocol = "6,17";
		        parametersV6OUT.protocol = "6,17";
            } else {
                parametersV6IN.protocol = rule.Protocol;
			    parametersV6OUT.protocol = rule.Protocol;
		    }
            if (rule.DestinationIPMask != "" ){
		        parametersV6IN.destinationPrefix  = rule.DestinationIP+"/"+rule.DestinationIPMask;
                parametersV6OUT.destinationPrefix = rule.DestinationIP+"/"+rule.DestinationIPMask;
            }
            if (rule.SourceIPMask != "" ){
		        parametersV6IN.sourcePrefix  = rule.SourceIP+"/"+rule.SourceIPMask;
                parametersV6OUT.sourcePrefix = rule.SourceIP+"/"+rule.SourceIPMask;
            }
            this.client.execute("sysbus.Firewall:setCustomRule",parametersV6IN);
            this.client.execute("sysbus.Firewall:setCustomRule",parametersV6OUT,this.whenSaved.bind(this, rule));  
		}
		// les 2 ipV4
		else if (Sah.IPAddress.isValid(rule.SourceIP)||Sah.IPAddress.isValid(rule.DestinationIP)){
		  console.warn('rule.SourceIP or/and rule.DestinationIP are IPv4 addresses');
		  if (rule.Id) parameters.id =  rule.Id ;
		  if (rule.Protocol == "both") {
			  parameters.protocol = "6,17";
		  } else {
			  parameters.protocol = rule.Protocol;
		  }
		  this.client.execute("sysbus.Firewall:setCustomRule",parameters, this.whenSaved.bind(this, rule));
		}
	},

	whenSaved: function (rule){
		if (rule.Protocol == "6")
			rule.ProtocolText = "TCP";
		else if (rule.Protocol == "17")
			rule.ProtocolText = "UDP";
		else
			rule.ProtocolText = t("advconfig.firewalladv.label.bothprotocol", "both");
		this.logger.info("rule saved", rule);
		//this.setAttributes(rule);
		this.ruleTemplate.apply(rule);
		
		var acceptTarget = t("advconfig.firewalladv.label.accept", "Accept");
		var rejectTarget = t("advconfig.firewalladv.label.drop", "Drop");
		var target = (this.target.selectedIndex == 0 ? acceptTarget : rejectTarget );
		var value=rule.Id || rule.Description;
                $$('#'+value+ ' .target div')[0].innerHTML=target;

		
		this.objects.EnabledRules.push(rule);
		this.objects.DisabledRules = this.objects.DisabledRules.select(function (r) {
			return (r.Id != rule.Id);
		});
		this.client.execute("sysbus.Firewall:commit",{},{});
		var tpl = $A(this.description.options).detect(function (o) {
			return (o.rule && o.rule.Id == rule.Id);
		});
		if (tpl)
			tpl.remove();
		
		this.form.reset();
		this.resetRule();
	},

	onDelete: function (tr, rule){
		this.disableRules(rule, this.whenDeleted.bind(this, tr, rule));
	},

	whenDeleted: function (tr, rule){
		tr.remove();
		var option = new Element("option");
		option.update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', rule.Id)));
		option.rule = rule;

		this.newRuleOption.insert({
			"before": option
		});
		this.objects.DisabledRules.push(rule);
		this.objects.EnabledRules = this.objects.EnabledRules.select(function (r) {
			return (r.Id != rule.Id);
		});
		this.description.selectedIndex = 0;
		this.onRuleChanged();
	},

	resetRule: function (){
		this.description.selectedIndex = 0;
		this.onRuleChanged();
	},

	validateSecurityRule: function (obj){
		var bValid = true ;
       
		if (!obj.Description.match(/\S/) || !obj.Description.match(/^([a-zA-Z0-9]*(\-)*(\_)*)*$/)) {
			Sah.translator.change($("firewalladv_error"), "advconfig.firewalladv.error.description", "X Invalid application name");
			return false;
		}
// 		if (obj.SourceIP && obj.SourceIP.match(/\S/) && !Sah.IPAddress.isValid(obj.SourceIP)) {
// 			Sah.translator.change($("firewalladv_error"),"advconfig.firewalladv.error.sourceip"," X Bad source ip address");
// 			this.logger.info("Bad source ip address.");
// 			return false;
// 		}
        if (obj.SourceIP !== "" && obj.DestinationIP !== ""){
	        if ((Sah.IPAddress.isValid(obj.SourceIP) && !Sah.IPAddress.isValid(obj.DestinationIP))
                ||(!Sah.IPAddress.isValid(obj.SourceIP)&&Sah.IPAddress.isValid(obj.DestinationIP))) {
		        console.warn('==> invalid rule.');
                Sah.translator.change($("firewalladv_error"), "advconfig.firewalladv.error.invalide", "X Invalid application name");
                return false;
            }
		}
		
		if (obj.SourceIPMask.match(/\S/) && !Sah.IPAddress.isValidMask(obj.SourceIPMask) && Sah.IPAddress.isValid(obj.SourceIP)) {
			Sah.translator.change($("firewalladv_error"),"advconfig.firewalladv.error.sourceipmask","Bad source ip mask");
			this.logger.info("Bad source ip mask.");
			return false;
		}
		if (obj.SourcePort !== ""){
			if (obj.SourcePort.match(/^\s*0?\s*$/) || !Sah.Validations.isValidPort(obj.SourcePort)) {
				Sah.translator.change($("firewalladv_error"),"advconfig.firewalladv.error.sourceport","Wrong source port. It should be a value between 1 to 65535");
				this.logger.info("Wrong source port. It should be a value between 1 to 65535");
				return false;
			}
			if (obj.SourcePortRangeEnd.match(/^\s*0?\s*$/) || !Sah.Validations.isValidPort(obj.SourcePortRangeEnd)) {
				Sah.translator.change($("firewalladv_error"),"advconfig.firewalladv.error.sourcerange","Wrong source port. It should be a value between 1 to 65535");
				this.logger.info("Wrong source port. It should be a value between 1 to 65535");
				return false;
			}
		}
// 		if (obj.DestinationIP&&obj.DestinationIP.match(/\S/) && !Sah.IPAddress.isValid(obj.DestinationIP)) {
// 			Sah.translator.change($("firewalladv_error"),"advconfig.firewalladv.error.destip", "Bad destination ip address");
// 			this.logger.info("Bad destination ip address.");
// 			return false;
// 		}
		if (obj.DestinationIPMask.match(/\S/) && !Sah.IPAddress.isValidMask(obj.DestinationIPMask)  && Sah.IPAddress.isValid(obj.DestinationIP)) {
			Sah.translator.change($("firewalladv_error"),"advconfig.firewalladv.error.destipmask", "Bad Destination ip mask");
			this.logger.info("Bad destination ip mask.");
			return false;
		}
		if (obj.DestinationPort !== ""){
			if (obj.DestinationPort.match(/^\s*0?\s*$/) || !Sah.Validations.isValidPort(obj.DestinationPort)) {
				Sah.translator.change($("firewalladv_error"),"advconfig.firewalladv.error.destport", "Wrong destination port. It should be a value between 1 to 65535.");
				this.logger.info("Wrong destination port. It should be a value between 1 to 65535");
				return false;
			}
			if (obj.DestinationPortRangeEnd.match(/^\s*0?\s*$/) || !Sah.Validations.isValidPort(obj.DestinationPortRangeEnd)) {
				Sah.translator.change($("firewalladv_error"),"advconfig.firewalladv.error.destrange", "Wrong destination port. It should be a value between 1 to 65535.");
				this.logger.info("Wrong destination port. It should be a value between 1 to 65535");
				return false;
			}
		}
		if( !this.isNotAdded(obj.Description)) {
			Sah.translator.change($("firewalladv_error"),"advconfig.network.natpat.label.error3", "");
			this.logger.info("rule already existe");
			return false;
		}
		return true;
	},

	onLanguageChange : function (event){
		this.form.down("input[name='Rule.SourcePort']").setAttribute("x-sah-tooltip",t("advconfig.firewalladv.tooltip.sourceport","X (ex:1000-2000)"));
		this.form.down("input[name='Rule.DestinationPort']").setAttribute("x-sah-tooltip",t("advconfig.firewalladv.tooltip.destinationport","X (ex:1000-2000)"));

	},
	isNotAdded : function (Description){
		this.logger.info("check for duplicate application");
		var rule =  this.objects.EnabledRules.detect(function(Description,e){
			return e.Description == Description;
		}.curry(Description));
		if(rule)
		{
			this.logger.info("application already exists");
			this.isExistedRuleName = true;
			return false ;
		}
		this.isExistedRuleName = false;
		return true ;
	},
	truncateIpAdress: function (elem, ipadress, limit) {
		elem.update(ipadress.substring(0, limit) + "...");
	},
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/security/level.js */

/**
 * Security Level
 * Firewall chain selection.
 */

Security.Level = Class.create(Sah.AuthenticatedForm,/** @lends Security.Level# **/{
	initialize: function ($super, form){
		$super(form);
		/* initialize events handler */
		$$(".SecurityLevelCustomize").each(function (b) {
			b.hide();
			b.observe("click", this.ruleCustomize.bind(this));
		}, this);
		$$(".SecurityLevelSave").each(function (b) {
			b.observe("click", this.onSave.bind(this));
		}, this);
		$$(".SecurityLevelCancel").each(function (b) {
			b.observe("click", this.onCancel.bind(this));
		}, this);

		if($$(".input-info-help") && $$(".input-info-help")[0]){
			$$(".input-info-help")[0].hide();
		}
		
		/* when the user chose customize, enable the customize button */
		this.form.down("input[name='Firewall.SelectedLevel'][value='Custom']").observe("click", this.toggleCustomize.bind(this, true));
		this.form.down("input[name='Firewall.SelectedLevel'][value='Low']").observe("click", this.toggleCustomize.bind(this, false));
		this.form.down("input[name='Firewall.SelectedLevel'][value='Medium']").observe("click", this.toggleCustomize.bind(this, false));
		this.form.down("input[name='Firewall.SelectedLevel'][value='High']").observe("click", this.toggleCustomize.bind(this, false));

		/* prepare to load the objects we need (Firewall) */
    
		this.needs("Firewall.Level", {
			path: "sysbus.Firewall:getFirewallLevel",      
			method : "execute",
			callbacks : {}
		});
		this.needs("Status", {
			path: "sysbus.NMC:getWANStatus",
			method: "execute"
		});
                this.needs("NMC", {
			path: "sysbus.NMC:get",
			method: "execute"
		});
 
		this.load();    
	},

	ruleCustomize: function () {
		/* if the customize button was clicked, go the customize page */
		this.redirect("/advConfigFirewallAdv.html");
	}, 

	getLevelRadios: function (){
		return $$("input[name='Firewall.SelectedLevel']");
	},

	getSelectedLevelRadio: function (){
		return this.getLevelRadios().detect(function (r) {
			return r.checked;
		});
	},

	toggleCustomize: function (enable){
		if (enable) {
			if (this.objects.Firewall.Level == "Custom") {
				$$(".SecurityLevelCustomize").each(function (b) {
					b.show();
					b.enable();
				});
			}
		} else {
			$$(".SecurityLevelCustomize").each(function (b) {
				b.disable();
				b.hide();
			});
		}
		if(this.form.down("input[name='Firewall.SelectedLevel'][value='High']").checked){
			$("config.wan.firewallHigh").show();
			Sah.translator.change($("firewallHigh_warn"), "advconfig.firewall.label.warn","X Applications (ex: LiveMessenger, peer-to-peer applications, games) relying on the NAT-traversal facilities provided by UPnP IGD will not work properly any more.");
		}else{
			$("firewallHigh_warn").update();
			$("config.wan.firewallHigh").hide();
		}
	},

	objectsLoaded : function (){       
		this.getLevelRadios().each(function (input) {
			input.checked = (input.value  == this.objects.Firewall.Level);
		}, this);

		this.loaded = true;
		/* disable customize button if we do not have the customized level set */
		this.toggleCustomize(this.objects.Firewall.Level == "Custom");
	},

	onSaveLevel: function(name) {

		this.logger.info("the onSaveLevel %s",name);
		this.client.execute("sysbus.Firewall:setFirewallIPv6Level",{
			"level":name
		},{
			onSuccess: this.whenSaved.bind(this), 
			onFailure: this.whenNotSaved.bind(this)
		});
		this.client.execute("sysbus.Firewall:setFirewallLevel",{
			"level":name
		},{
			onSuccess: this.whenSaved.bind(this), 
			onFailure: this.whenNotSaved.bind(this)
		});
		this.objects.Firewall.Level= name;
    },
    
	onSave: function (event){
		Event.stop(event);
		this.makeBusy();
		/* fetch the name */
		var name = this.getSelectedLevelRadio().value;
      
		/* Set the path of the selected Level into the parameter (Firewall.SelectedLevel) */
		if (name !=  this.objects.Firewall.Level) {
			if ((name == "High") && (this.objects.NMC.IPTVMode == "Internet")){
				this.logger.info("the Level is changed to High ");
				ctl.msgbox.Show(ctl.msgbox.QUESTION.VALID_CANCEL, t("advconfig.firewall.label.warnTv",
				"X Attention ! Ce niveau de sécurité restreint le service TV d'Orange aux chaînes en direct uniquement.<br>Pour accéder à l'ensemble du service TV d'Orange, choisissez un niveau moyen ou personnalisé. Retrouvez les règles de personnalisation sur assistance.orange.fr"), (function () {}),(function () { this.onSaveLevel (name); }.bind(this,name))  );

				return false;
            }
			this.onSaveLevel (name);
		} else{
			this.logger.info("nothing has changed, skipping save");
		}
		return false;
	},

	whenSaved: function (obj){
		this.logger.info("object saved");
		this.makeIdle();
		this.toggleCustomize(this.objects.Firewall.Level == "Custom");
		this.markAsLoaded();
	},

	whenNotSaved: function (obj){
		this.markAsLoaded();
		this.makeIdle();
		this.logger.warn("failed to save object");
	},

	/**
   * When clicking cancel, restore the old values in the form and stop the event
   */
	onCancel: function(event){
		Event.stop(event);
		this.objectsLoaded();
		return false;
	}
}
);



/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/security/ping.js */

/**
 * Security Ping
 * Firewall RespondToPing in the custom level.
 */

Security.Ping = Class.create(Sah.AuthenticatedForm,/** @lends Security.Summary# */{
    initialize: function ($super, form){
        $super (form);

        /* when the form is submitted, call the onSave method of this class */
        $$(".SecurityPingCancel").each(function (btn) {
            btn.observe("click", this.onCancel.bind(this));
        }, this);
      
        $$(".SecurityPingSave").each(function (btn) {
            btn.observe("click", this.onSave.bind(this));
        }, this);    

        this.checkbox = this.form.down("input[name='SelectedLevel.RespondToPing']");

        this.needs("RespondToPing", {
            path: "sysbus.Firewall:getRespondToPing", 
            method: "execute",
            methodParams:{
                "sourceInterface":"data"
            }
        });
        this.load();
    },

    objectsLoaded : function (){
        this.checkbox.checked = this.objects.RespondToPing.enableIPv4 ;
        this.initialCheckboxState = this.checkbox.checked ? true : false;
    },

    onSave: function (event){
        event.stop(event);

        this.objects.RespondToPing.enableIPv4 = (this.checkbox.checked ? true : false);

        if (this.objects.RespondToPing.enableIPv4 != this.initialCheckboxState ) {
            //this.markAsLoading();
            this.client.execute("sysbus.Firewall:setRespondToPing",{
                "sourceInterface": "data", 
                "service_enable": {
                    "enableIPv4" :this.objects.RespondToPing.enableIPv4,
                    "enableIPv6": this.objects.RespondToPing.enableIPv4
                }
            },{
                onSuccess: this.whenSaved.bind(this), 
                onFailure: this.whenNotSaved.bind(this)
            });
     
        }
        else{
            this.logger.info("nothing has changed in Time, skipping save");
        }

        return false;
    },

    /**
     * called when the form was correctly saved
     */
    whenSaved: function (obj){
        this.logger.info("object saved");
        this.markAsLoaded();
        this.objectsLoaded();

    },

    /**
     * called when the form was not correctly saved
     */
    whenNotSaved: function (obj){
        this.logger.warn("failed to save object");
        this.markAsLoaded();
        this.logger.warn(obj);
    },

    /**
     * cancel all modifcations to the form
     */
    onCancel: function(event){
        Event.stop(event);
        this.checkbox.checked = this.initialCheckboxState;
        this.objectsLoaded();
        return false;
    }
}
);

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/security/dmz.js */

/**
 * The security/DMZ form
 * @class
 * @augments Sah.Form
 */
Security.Dmz = Class.create(Sah.AuthenticatedForm,/** @lends Security.DMZ# */{
    initialize: function ($super, form){
        $super(form);

        this.createButton = $('Security/DMZ/Create');
        this.createButton.observe('click', this.createDMZ.bind(this));
        this.destroyButton = $('Security/DMZ/Delete');
        this.destroyButton.observe('click', this.destroyDMZ.bind(this));

      
        this.deviceSelect = this.form.down("select[name='webui.DestinationIPAddress']");
        this.status = $('SecurityDmzStatus');
        this.statusIpv6Addr = $('ipv6Address');
        this.ipv4Address = $('DeviceIPv4Address');
        this.ipv6Address = $('DeviceIPv6Address');
        this.labelIpv4Address = $('ipv4Label');
        this.labelIpv6Address = $('ipv6Label');
        this.macAddress = $('DeviceMACAddress');
		this.IP4IP6DMZ= $('ip4ipv6adress');
		this.NoDMZ= $('noDmzMessage');
        this.inputIp = this.form.down("input[name='Device.inputIPAddress']");
        this.formIpAddress = $('Device.IPAddress');
        this.formMacAddress = $('Device.MACAddress');
        this.deviceName = $('DeviceName');
        this.currentDevice = null;  
        this.needs("DHCP", {
            path: "sysbus.NMC:getLANIP",
            method : "execute"
        });
        this.needs("Hosts", {
	    path: "sysbus.Devices:get",
	    method: "execute",
	    methodParams: {
		    expression:""
	    }
        });
        this.needs("staticLeases", {
            path: "sysbus.DHCPv4.Server.Pool.default:getStaticLeases",
            method : "execute"
        });
	this.needs("DMZ", {
            path: "sysbus.Firewall:getDMZ",
            method:"execute",
            methodParams:{
            }
        }); 
       

        this.markAsLoading();
        this.form.disable();
        this.load();
    },

    getIPAddress: function (){
        return this.objects.DMZ&&this.objects.DMZ.webui&&this.objects.DMZ.webui.DestinationIPAddress;
    },

    getDeviceForIP: function (ip){
        return this.objects.Devices.detect(function (host) {
            return (host.IPAddress == ip);
        });
    },

    objectsLoaded: function (){
        this.staticHostsByIp = $H();
        this.staticHostsByMac = $H();
        $A(this.objects.staticLeases).each(function(h){
            this.staticHostsByIp[h.IPAddress] = h.MACAddress;
            this.staticHostsByMac[h.MACAddress] =h.IPAddress;            
        }.bind(this));
        this.objects.Devices = this.objects.Hosts.select(function (h) {
            return (h.Active &&  h.Name != "localhost" && !(h.Tags.indexOf("N/A")>0) && h.PhysAddress != "00:00:00:00:00:00"&&(( (h.Tags.indexOf("dhcp")>=0) && (this.staticHostsByIp[h.IPAddress]) && (this.staticHostsByMac[h.PhysAddress.toLowerCase()]))));
        }.bind(this));
        this.objects.DMZEnabled = (this.objects.DMZ&&this.objects.DMZ.webui);
        if (this.objects.DMZEnabled) {
            this.logger.info("DMZ is enabled");
            this.currentDevice = this.getDeviceForIP(this.getIPAddress());
        } else {
            this.logger.info("DMZ is disabled");
            this.currentDevice = this.objects.Devices[0];
        }
     
        this.ipGW = new Sah.IPAddress(
            this.objects.DHCP.Address,
            this.objects.DHCP.Netmask)

        this.prepareForm();
        this.form.enable();
      
        this.fillForm();
        this.deviceSelect.observe("change", this.changeDevice.bind(this));
        this.markAsLoaded();
    },

    prepareForm: function (){
        this.objects.Devices.each(function (host) {
            if(host.IPAddress != "0.0.0.0" && host.Name != "localhost" && !(host.Tags.indexOf("N/A")>0)){
                var option = new Element("option", {
                    "value": host.IPAddress
                });
                option.update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', host.Name)));
                option.host = host;
                this.deviceSelect.insert(option);
            }
        }, this);
        var option = new Element("option", {
            "value": "custom"
        });
        Sah.translator.change(option, "advconfig.network.dmz.label.staticip","X Static IP...");
        this.deviceSelect.insert(option);
    },

    fillForm: function (){
// 	if (appConfig === 'pl') {
// 		$("ipv6restrict.label").show();
// 	}
        this.deviceSelect.hide();
        this.deviceName.hide();
        this.inputIp.hide();
        //~ this.ipv4Address.hide();
        //~ this.ipv6Address.hide();
        this.labelIpv4Address.hide();
        this.labelIpv6Address.hide();
        this.ipv4Address.hide();
        this.ipv6Address.hide();
        this.formIpAddress.hide();
        this.formMacAddress.hide();

        if (this.currentDevice) {

            this.deviceSelect.setValue(this.currentDevice.IPAddress);
            this.deviceName.update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.currentDevice.Name)));
            
            var ipv4Adr = "", ipv6Adr = "";
			
				this.currentDevice.ipv4Address="";
				this.currentDevice.ipv6Address="";
            this.currentDevice.IPv4Address.each(function(adr){
				this.currentDevice.ipv4Address = adr.Address;	
			}.bind(this));
	    
			this.currentDevice.IPv6Address.each(function(adr){
				this.currentDevice.ipv6Address = adr.Address;	
			}.bind(this));
			
			if(this.currentDevice.ipv6Address && this.currentDevice.ipv6Address !== ""){
				this.ipv6Address.update(this.currentDevice.ipv6Address);				
				this.formIpAddress.update(this.currentDevice.ipv6Address);
				this.labelIpv6Address.show();
				this.ipv6Address.show();
				this.labelIpv4Address.hide();
				this.ipv4Address.hide();
			}else{
				this.labelIpv4Address.hide();
				this.ipv4Address.hide();
				this.labelIpv6Address.hide();
				this.ipv6Address.hide();
			}
			
            if (this.currentDevice.ipv4Address && this.currentDevice.ipv4Address !== ""){				
				this.ipv4Address.update(this.getIPAddress());
				this.formIpAddress.update(this.currentDevice.ipv4Address);
				this.labelIpv4Address.show();
				this.ipv4Address.show();
				this.labelIpv6Address.hide();
				this.ipv6Address.hide();
			}else{
				this.labelIpv4Address.hide();
				this.ipv4Address.hide();
				this.labelIpv6Address.hide();
				this.ipv6Address.hide();
			}			
			
            //~ this.ipv4Address.update(this.currentDevice.ipAddress);
            //~ this.formIpAddress.update(this.currentDevice.ipAddress);
            this.macAddress.update(this.currentDevice.PhysAddress);
            this.formMacAddress.update(this.currentDevice.PhysAddress);
        } else {
            this.inputIp.setValue(this.getIPAddress());
            this.formIpAddress.update(this.getIPAddress());
            this.ipv4Address.update(this.getIPAddress());
            this.macAddress.update("");
            this.formMacAddress.update("");
            Sah.translator.change(this.deviceName,"advconfig.network.dmz.label.staticip","X Static IP..."); //.update("Static IP address");
        }

        if (this.objects.DMZEnabled) {
            this.createButton.disable();
            this.showDevice();
			this.labelIpv4Address.show();
			this.ipv4Address.show();
			this.labelIpv6Address.hide();
			this.ipv6Address.hide();
            this.deviceName.show();
            this.status.update(this.getIPAddress());
            this.status.show();
            this.statusIpv6Addr.hide();
            if(this.currentDevice && this.currentDevice.ipv6Address && this.currentDevice.ipv6Address !== "" && (!this.currentDevice.ipv4Address || this.currentDevice.ipv4Address == "")){
	            this.statusIpv6Addr.update(this.currentDevice.ipv6Address);
	            this.statusIpv6Addr.show();
				this.status.hide();
				this.labelIpv6Address.show();
				this.ipv6Address.show();
				this.labelIpv4Address.hide();
				this.ipv4Address.hide();
				
			}
            this.status.removeClassName("translation");
        } else {
            this.createButton.enable();
            this.hideDevice();

            this.deviceSelect.show();
            if (this.currentDevice) {
                this.formMacAddress.show();
                this.formIpAddress.show();
            } else {
                this.inputIp.show();
            }
        this.IP4IP6DMZ.setStyle({display: "none"}); 
	    this.NoDMZ.setStyle({display: "inline"});
	    this.NoDMZ.update('no DMZ');
        this.statusIpv6Addr.update("");
        }
    },

    changeDevice: function (){
    
        this.currentDevice = this.deviceSelect.options[this.deviceSelect.selectedIndex].host || false;
        this.fillForm();
    },

    createDMZ: function (){
        // Initialize warning by default
        Sah.translator.change($("advconfig.network.dmz"),"advconfig.network.dmz.label.warning","X you need to associate a static IP address with this device on the DHCP settings");

        var ip = null;

        // The case of adding static address
        if (!this.currentDevice)
        {
            // IP Address should be validated
            if (this.validateForm(this.inputIp.getValue()))
            {
				console.warn("this.validateForm(this.inputIp.getValue())");
				console.warn(this.validateForm(this.inputIp.getValue()));
                //this.markAsLoading();
                ip = this.inputIp.getValue();

                this.markAsLoading();
        
                this.client.execute("sysbus.Firewall:setDMZ",
                {
                    "id": "webui",
                    "sourceInterface": "data",
                    "destinationIPAddress": ip,
                    "enable": true
                }, this.createDone.bind(this,ip));
            }
            else
            {
                Sah.translator.change($("advconfig.network.dmz"),"advconfig.network.dmz.error.ipaddress.bad","X Bad IP Address");
            }
        }
        // The case of adding connected device
        else
        {
            ip = this.currentDevice.IPAddress;

            this.markAsLoading();
            this.client.execute("sysbus.Firewall:setDMZ",
            {
                "id": "webui",
                "sourceInterface": "data",
                "destinationIPAddress": ip,
                "enable": true
            }, this.createDone.bind(this,ip));    
        }
    },

    createDone: function (ip){     
        /* the dmz has been added */
        this.logger.info("dmz created");
        this.objects.DMZEnabled = true;
	this.NoDMZ.setStyle({display: "inline"});
	this.NoDMZ.update(ip);
        this.objects.DMZ = {
            "webui":{
                "DestinationIPAddress":ip
            }
        };
        this.logger.info("dmz ip address is " + ip);
        this.currentDevice = this.getDeviceForIP(ip);
        this.fillForm();
        this.markAsLoaded();
    },

    destroyDMZ: function (){
   
        this.markAsLoading();      
   
        this.client.execute("sysbus.Firewall:deleteDMZ",
        {
            "id": "webui"
        }, this.destroyDone.bind(this)); 
   
    },

    destroyDone: function (){   
        /* the dmz has been destroyed */
        this.logger.info("dmz destroyed");
        this.objects.DMZEnabled = false; 
        this.currentDevice = this.objects.Devices[0];
        this.fillForm();
        this.markAsLoaded();
    },

    showDevice: function (){
        $$(".DmzDevice").each(Element.show);
        $$(".NoDmz").each(Element.hide);
    },

    hideDevice: function (){
        $$(".DmzDevice").each(Element.hide);
        $$(".NoDmz").each(Element.show);
    },

    validateForm : function (IPAddress){
        if (!this.ipGW.canJoin(IPAddress)) {
            return false;
        }
        return true;
    }
}
);

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/security/nat.js */

/**
 * Security.nat
 * Control Nat/Pat Rules. 
 */
Security.Nat = Class.create(Sah.AuthenticatedForm,/** @lends Security.Rule# */{
	initialize: function ($super, form){
		$super(form);

		this.tbody = this.form.down("tbody");
		this.application = this.form.down("select[name='Line.Name']");
		this.application.observe("change", this.onAppChanged.bind(this));
		this.custom = $("line_custom_box");
		this.customName = this.form.down("input[name='Line.CustomName']");
		this.custom.down("a").observe("click", this.resetName.bind(this));
		this.host = this.form.down("select[name='Line.HostName']");
		this.host.observe("change", this.onHostChanged.bind(this));
		this.ip = this.form.down("input[name='Line.HostIPAddress']");
		this.ipDiv = $("line_custom_host");
		this.ipDiv.down("a").observe("click", this.resetHost.bind(this));
		/* Add tooltip */
		this.form.down("input[name='Line.OutboundPort']").setAttribute("x-sah-tooltip",t("advconfig.network.natpat.tooltip.externalport","X (ex:1000-2000)"));
		this.form.down("input[name='Line.InboundPort']").setAttribute("x-sah-tooltip",t("advconfig.network.natpat.tooltip.internalport","X (ex:1000)"));
		this.form.down(".SecurityNatSave").observe("click", this.onSave.bind(this));

		this.needs("PortMappingRules", {
			path: "sysbus.Firewall:getPortForwarding", 
			method:"execute",
			methodParams : {
				origin : Sah.Config.Upnp.Identifier
			}
		});
		
		this.needs("Nat", {
			path:  "sysbus.Firewall:getPortForwarding",
			method :"execute",
			methodParams : {
				"origin":"webui"
			}
		});
		this.needs("DHCP", {
			path: "sysbus.NMC:getLANIP",
			method : "execute"
		});
		this.needs("AllHosts", {
			path: "sysbus.Devices:get",
			method: "execute",
			methodParams: {
				expression:""
			}
		});
		//this.markAsLoading();
		this.form.disable();
      
		this.load();
	},

	appToLine: function (app){
		if(app[1]){
			app = app[1];
		}

		if (!app.Rule) {
			this.logger.error("invalid application (no Rule object)", app);
			return null;
		}

    
		var line = {
			"Name": null,
			"HostIPAddress": null,
			"OutboundPortRangeEnd": null,
			"OutboundPort": null,
			"InboundPort": null,
			"HostName": null,
			"Protocol": null
		};
        
		/* if we have no matching rule, skip */
		var rule;
		if(app.Rule&&app.Rule.Protocol){
			rule = app.Rule;
			line.app = app;
			line.app.id = app.id;
			if(app.Rule.Protocol == "6"){
				line.tcp = rule;
				line.udp = null;
			}else if(app.Rule.Protocol == "17"){
				line.tcp = null;
				line.udp = rule;
			}else if(app.Rule.Protocol == "6,17"){
				line.tcp = rule;
				line.udp = rule;
			}
      
		}else{
			rule = null;
		}
    
		if (!rule) {
			this.logger.error("invalid application (no tcp or udp rule)", app);
			return null;
		}

		line.Name = app.Name;
		line.HostIPAddress = app.HostIPAddress;
		var OutboundPortRangeEnd = rule.ExternalPort.split("-");
		if (rule.ExternalPortEndRange > 0){
			line.OutboundPort= rule.ExternalPort +"-"+rule.ExternalPortEndRange; 
		} else {
			line.OutboundPort = rule.ExternalPort;	  
		}	
		line.InboundPort = rule.InternalPort;
		
		line.host = this.hostsByIPs[app.HostIPAddress];
		if (line.host)
			line.HostName = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', line.host.Name));
		else
			line.HostName = app.HostIPAddress;
   
		this.setProtocolName(rule.Protocol, line);
     
		this.linesByIPs[line.HostIPAddress] = line;

		return line;
	},
	setProtocolName : function(protocol, line){
		if(protocol){
			switch(protocol){
				case "UDP":
				case "17":
					line.Protocol = line.ProtocolDisplay =  "UDP";
					break;
				case "TCP":
				case "6" :
					line.Protocol = line.ProtocolDisplay =  "TCP";
					break;
				case "both":
				case "6,17":
					line.Protocol = "both";
					line.ProtocolDisplay = t("advconfig.network.natpat.label.bothprotocol", "X Both");
					break;
				default:
					line.Protocol = "both";
					line.ProtocolDisplay = t("advconfig.network.natpat.label.bothprotocol", "X Both");
					break;
			}
		}else{
			line.Protocol = "both";
			line.ProtocolDisplay = t("advconfig.network.natpat.label.bothprotocol", "X Both");
     
		}
	},

	objectsLoaded: function (){
		this.objects.AllHosts = $A(this.objects.AllHosts);
		this.objects.defaultApps = $H(Sah.Config.Firewall.defaults.natPat);
		this.objects.Apps = $H();
        
		$H(this.objects.Nat).each(function(rule){
                     
			var newApp = {};
			newApp.id = rule[0].slice(6);
			rule = rule[1];
			newApp.Rule = rule;
			newApp.Name = unescape(rule.Description);
			newApp.HostIPAddress = rule.DestinationIPAddress;
			newApp.Enable = rule.Enable;
			this.objects.Apps.set(newApp.Name, newApp);
		}.bind(this));

		this.objects.Apps = this.objects.defaultApps.merge(this.objects.Apps);
    
		/* filter hosts */
		this.objects.Hosts = this.objects.AllHosts.select(function (h) {
			return (h.PhysAddress != "00:00:00:00:00:00" && h.Name != "localhost" && (h.Tags.indexOf("N/A")<=0) && h.Active);
		});

		this.hostsByIPs = $H();
		this.linesByIPs = $H();

		this.objects.Hosts.each(function (h) {
		        if (h.IPAddress) {
			      this.hostsByIPs[h.IPAddress] = h;
			}
		}, this);

		/* create the lines */
		this.objects.Lines = this.objects.Apps.map(this.appToLine, this).select(function (l) {
			return (l != null);
		});

		/* fetch the enabled/disabled lines */
		var partition = this.objects.Lines.partition(function (l) {
			return l.HostIPAddress != "0.0.0.0";
		});
		this.objects.EnabledLines = partition[0];
		this.objects.DisabledLines = partition[1];
		this.ipGW = new Sah.IPAddress(this.objects.DHCP.Address,
			this.objects.DHCP.Netmask);
		
		/********** Workaround the restore configuration inbound port display ***************/
		
		this.objects.EnabledLines.each(function(elt){
			if(elt.OutboundPort.match(/-/) && elt.InboundPort.indexOf("-") < 0){
				var ret = elt.OutboundPort.split("-");
				var res = parseInt(ret[1]) - parseInt(ret[0]);
				var tmp;
				var internalports =  {
					f:tmp=parseInt(elt.InboundPort),
					l:tmp + (res || 0)
				};
				
				elt.InboundPort = internalports.f+"-"+internalports.l;
			}		  
		});
		/************************************************************************************/
		/* fill the select boxe */
		this.fillApplicationSelect();
		this.fillHostSelect();

		/* setup needed templates */
		this.lineTemplate = Sah.Templates.Line;
		this.lineTemplate.callback = this.appendLine.bind(this);
		this.lineTemplate.apply(this.objects.EnabledLines);

		this.onAppChanged();
		this.onHostChanged();
		this.form.enable();
// 		this.markAsLoaded();
	},

	fillApplicationSelect: function (){
		var select = this.application;
		select.update("");
		
		this.objects.DisabledLines.each(function (line) {
			
			var option = new Element("option");
			option.update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', line.Name)));
			if(line.Name == "Web Server (HTTP)"){
				option.setAttribute("selected","selected");
			}
			if (line.InboundPort.indexOf("-")>=0){
				line.InboundPort = line.InboundPort.split("-")[0];
			}
			option.line = line;
			select.insert(option);
		}, this);

		this.newLineOption = new Element("option", {
			"value": "CUSTOM"
		});
		Sah.translator.change(this.newLineOption, "advconfig.network.natpat.label.editnewline", "X New line");
		select.insert(this.newLineOption);
	},

	fillHostSelect: function (){
        
		var select = this.host;
		select.update("");

		this.objects.Hosts.each(function (host) {
		    if ((host.Tags.toLowerCase().indexOf("lan")>=0) && (host.DiscoverySource.toLowerCase().indexOf("self")<0)) {
			var option = new Element("option");
			option.update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', host.Name || host.PhysAddress)));
			option.host = host;
			select.insert(option);
		    }
		}, this);

		this.newIpOption = new Element("option", {
			"value": "CUSTOM"
		});
		Sah.translator.change(this.newIpOption, "advconfig.network.natpat.label.editnewhost", "X New host");
		select.insert(this.newIpOption);
	},

	loadLineInForm: function (line)
	{
		if (line) {
			this.fromObject({
				"Line": line
			});
		}
	},

	/**
     * @param {Object} element element in the form
     * @param {Object} line an instance in sahbus
     * Add each row of the template and create the event handler for buttons */
	appendLine: function (element, line)
	{        
		element.id = line.app.Id;
		line._element = element;

		if (!line.host)
			this.lineTemplate.getElementForParameter(element, "HostName").update(line.HostIPAddress);

		/* when clicking delete remove the element */
		element.del = element.down(".btn-delete");
		element.del.observe("click", this.onDelete.bind(this, element, line));

		/* when activating/deactivating line */
		element.enable = element.down("input[type=checkbox]");
		element.enable.observe("click", this.onEnable.bind(this, element, line));

		element.enable.checked = (line.app.Enable != "0");

		this.tbody.insert(element);
	},

	saveApplication: function (line, tr) {
                this.objects.PortMappingRules._childs = new Array();
                
                this.client.execute("sysbus.Firewall:getPortForwarding", {      
			"origin" : Sah.Config.Upnp.Identifier
		},{    
			onSuccess: this.check.bind(this, line), 
			onFailure: this.whenNotSaved.bind(this)
		});
                                
	},
 
	onAppChanged: function (){
		var line = this.application.options[this.application.selectedIndex].line;
		if (line) {
			this.loadLineInForm(line);
			this.application.show();
			this.custom.hide();
			this.host.show();
			this.host.selectedIndex = 0;
			this.ipDiv.hide();
			this.ip.setValue(line.HostIPAddress);
		} else {
			this.customName.setValue("");
			this.form.down("input[name='Line.OutboundPort']").setValue("");
			this.form.down("input[name='Line.InboundPort']").setValue("");
			this.application.hide();
			this.custom.show();
		}
	},

	onHostChanged: function (){
		var host = this.host.options[this.host.selectedIndex].host;
		if (host) {
			this.host.show();
			this.ipDiv.hide();
			this.ip.setValue(host.IPAddress);
		} else {
			this.ipDiv.show();
			this.host.hide();
		}
	},

	onSave: function (event){
		Event.stop(event);
		Sah.translator.change($("warning_msg"), "advconfig.network.natpat.label.warning","X warning : make sure you have not filtered these ports in the firewall.");

		var line = this.application.options[this.application.selectedIndex].line;
   
		if (!this.application.visible() || !line) {
     
			line = {
				"Name": null,
				"HostIPAddress": null,
				"OutboundPortRangeEnd": null,
				"OutboundPort": null,
				"InboundPort": null,
				"HostName": null,
				"Protocol": null
			};
			line.custom = true;
		}
       
		Object.extend(line,this.toObject().Line) ;

		if (this.host.visible()) {
			var host = this.host.options[this.host.selectedIndex].host;
			line.HostIPAddress = host.IPAddress;
			line.host = host;
      
		} else {
			line.HostIPAddress = this.ip.getValue();
		}
		this.setProtocolName(line.Protocol, line);
  
		this.saveApplication(line, this.form);
		
		this.addStaticLease(host);
		return false;
	},
	
	addStaticLease: function (host){
		this.client.execute("sysbus.DHCPv4.Server.Pool.default:addStaticLease", {
			"MACAddress": host.PhysAddress,
			"IPAddress": host.IPAddress
		}, function(){});
	},

	whenRuleSaved: function (line, protocol, object){
		this.logger.info("setting rule path to " + object._path);
		line[protocol] = object;
		this.whenSaved(line);
	},

	whenSaved: function (line){
		this.logger.info("line saved", line);
		this.lineTemplate.apply(line);
		this.objects.EnabledLines.push(line);
		this.objects.DisabledLines = this.objects.DisabledLines.select(function (l) {
			return (l.Name != line.Name);
		});
		if (!line.custom)
			$A(this.application.options).detect(function (o) {
				return (o.line && o.line.Name == line.Name);
			}).remove();
		this.client.execute("sysbus.Firewall:commit",{},{});
		this.application.selectedIndex = 0;
		this.host.selectedIndex = 0;
		this.onAppChanged();
		this.onHostChanged();
// 		this.markAsLoaded();
	},
        
	whenNotSaved:function(line){
// 		this.markAsLoaded();
		this.logger.warn("not saved");
	},

	onDelete: function (tr, line){
		line.app.HostIPAddress = "0.0.0.0";
		line.app.Enable ="0";
		
		if (line.InboundPort.indexOf("-")>=0){
			line.InboundPort = line.InboundPort.split("-")[0];
		}
		
		
		var params = this.lineToParams(line);
		this.client.execute("sysbus.Firewall:setPortForwarding",
			params,
			this.whenDeleted.bind(this, tr, line)
			);
  
	},
  
	lineToParams: function(line){
		var params = {};
		params.description = escape(line.Name);
		params.persistent = true;
		params.enable =  (line.app.Enable == true)?true:false;
		if(line.app.Rule & !line.Protocol){
			line.Protocol = line.app.Rule.Protocol;
		}
		var protocol = line.Protocol.toLowerCase();
		switch(protocol){
			case "tcp":
				params.protocol = "6";
				break;
			case "udp":
			        this._parsPorts('1813');
				params.protocol = "17";
				break;
			case "both":
				params.protocol = "6,17";
				break;
			default:
				params.protocol = "6,17";
				break;
		}
    
		params.destinationIPAddress =  line.app.HostIPAddress;
		params.internalPort = line.InboundPort;
		params.externalPort = line.OutboundPort;
		params.origin = "webui";
		params.sourceInterface = "data";
		params.sourcePrefix = "";
   
		if(line.app.id){
			params.id = line.app.id;
			this._parsPorts('1813')
		}else{
			params.id = params.description;
		}
          
		return params;
	},

	whenDeleted: function (tr, line){
		tr.remove();
		var option = new Element("option");
		option.update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', line.Name)));
		option.line = line;

		this.newLineOption.insert({
			"before": option
		});
		this.objects.DisabledLines.push(line);
		line.custom = false;
		this.objects.EnabledLines = this.objects.EnabledLines.select(function (l) {
			return (l.Name != line.Name);
		});
	},

	onEnable: function (el, line, event){
		event.stop();
		line.app.Enable = (el.enable.checked ? "1" : "0");
		var params = this.lineToParams(line);
		this.client.execute("sysbus.Firewall:setPortForwarding",params,function () {
			el.enable.checked = (line.app.Enable != "0");
		});
	},

	resetName: function (){
		this.application.selectedIndex = 0;
		this.onAppChanged();
		return false;
	},

	resetHost: function (){
		this.host.selectedIndex = 0;
		this.onHostChanged();
	},

	isNotRestricted : function (port){
		var portsRef = this._parsPorts(port);
		var restricteds = [
		this._parsPorts('51338'),
		this._parsPorts('1812'),
		this._parsPorts('1813'),
	        this._parsPorts('50222'),
		this._parsPorts('48911'),
		this._parsPorts('50805')
            
		];
		if (appConfig !== "pl"){		 
			for(var i=0; i < restricteds.length; i++){
				if(!this._checkPortRange(portsRef, restricteds[i])){
					return false;
				}
			}
			
		}
		return true;
	},

	isOrderedPort : function (port){
		var ports = this._parsPorts(port, 65536);
		if((config.BUILD_CUSTOMER == 'ft') && (ports.f>=1023) && ( ports.f< ports.l))
			return true;
		if(ports.f < ports.l)
			return true;
		return false;
	},

	isNotAdded : function (name){
		this.logger.info("check for duplicate application");
		var rule =  this.objects.EnabledLines.detect(function(name,e){
			return e.Name == name;
		}.curry(name));
		if(rule)
		{
			this.logger.info("application already exists");
			this.isExistedRuleName = true;
			return false ;
		}
		this.isExistedRuleName = false;
		return true ;
	},

	checkRuleConflict : function(line){
		var portsRef = this._parsPortsInOut(line.InboundPort, line.OutboundPort);
		var lines = this.objects.EnabledLines.toArray();
		for ( var i = 0; i <lines.length; i++){
			if((lines[i].Protocol == line.Protocol ||
				lines[i].Protocol =="both" ||
				line.Protocol=="both")&&
			!this._checkPortRanges(portsRef, this._parsPortsInOut(lines[i].InboundPort, lines[i].OutboundPort),
				lines[i].HostIPAddress === line.HostIPAddress)){
				return false;
			}
		}
		return true;
	},
	checkNameConflict:function(line){
		this.objects.EnabledLines.detect(function(h){
			}.bind(this));
	},

	checkRuleUpnpConflict : function (line) {      
                var portsRef = this._parsPortsInOut(line.InboundPort, line.OutboundPort);
		var isConflict = false;
                
		$H(this.objects.PortMappingRules).each(function(aLine){
			if(aLine &&  aLine[1]){
                            aLine= aLine[1];
                            aLine.PortMappingProtocol = this.getProtocolName(aLine.Protocol);
                            if((aLine.PortMappingProtocol == line.Protocol || aLine.PortMappingProtocol =="both" || line.Protocol=="both")
                                && !this._checkPortRanges(portsRef, this._setupPorts(aLine.InternalPort, aLine.$InternalPortEnd, aLine.ExternalPort, aLine.$ExternalPortEnd), aLine.DestinationIPAddress === line.HostIPAddress))
                            {
                                    isConflict = true;
                            }
			}
		}, this);
		
		if (isConflict)
			return false;
		else
			return true;
	},
	
	check : function(line, Response){
                this.objects.PortMappingRules=(Response.result && Response.result.status)? Response.result.status : {};

                if (line.custom)
			line.Name = this.customName.getValue();
		this.logger.info("using custom: " + line.Name);

		if (line.Name==="") {
			Sah.translator.change($("warning_msg"), "advconfig.network.natpat.label.error","X the fields shoud not be empty");
			return;
		}else if (!Sah.Validations.isValidPort(line.InboundPort)||
			line.InboundPort.match(/-/)||
			!Sah.Validations.isValidPort(line.OutboundPort)||
			!this.isOrderedPort(line.OutboundPort)) {
			Sah.translator.change($("warning_msg"), "advconfig.network.natpat.label.error1","X the fields shoud be between .. and ..");
			return;
		} else if ( !this.isNotAdded(line.Name)) {
			Sah.translator.change($("warning_msg"), "advconfig.network.natpat.label.error3","X this operation is forbidden and latest rule is not added.");
			return;
		} else if (!this.checkRuleConflict(line)) {
			Sah.translator.change($("warning_msg"), "advconfig.network.natpat.label.error4","X the new rule conflicts with previous one ");
			return;
		} else if (!this.checkRuleUpnpConflict(line)) {
			Sah.translator.change($("warning_msg"), "advconfig.network.natpat.label.error5","X the new rule conflicts with a existed upnp rule ");
			return;
		 } else if (!this.ipGW.canJoin(line.HostIPAddress)) {
			Sah.translator.change($("warning_msg"), "advconfig.network.natpat.label.error6","X the IP Address is invalid");
			return;
		} else if(!this.isNotRestricted(line.OutboundPort)) {
		  
			 /***********************/
			if (line.OutboundPort === '51338')
				Sah.translator.change($("warning_msg"), "advconfig.network.natpat.label.error7","X the port number should not be equal to 51338");
			else if (line.OutboundPort === '1812'){
			        console.warn('Port 1812 reserved for wificom!');
				Sah.translator.change($("warning_msg"), "advconfig.network.natpat.label.error8","X the port number should not be equal to 51338");
			}
			else if (line.OutboundPort === '50222'){
			        console.warn('Port 50222 reserved for SSH!');
				Sah.translator.change($("warning_msg"), "advconfig.network.natpat.label.error9","X the port number should not be equal to 51338");
			}
			else 
			/**********************/
				Sah.translator.change($("warning_msg"), "advconfig.network.natpat.label.error2","X the port number should not be equal to 51338");
			return;
		} else {
			if(line.OutboundPort.match(/-/)){
				var internalports = this._parsPorts(line.InboundPort, this._calculateRange(line.OutboundPort));
				line.InboundPort = internalports.f+"-"+internalports.l;
			}
			//this.markAsLoading();
			var params;
			if (!line.app) {
				/* if we do not have an application line, add it */
				line.app = {
					"HostIPAddress": line.HostIPAddress,
					"Name": line.Name,
					"Enable": "1"
				};
              
             
 
                
			} else {
				Object.extend(line.app,{
					"HostIPAddress": line.HostIPAddress,
					"Name": line.Name,
					"Enable": 1
				});
              
            
			}
			params = this.lineToParams(line);

			this.client.execute("sysbus.Firewall:setPortForwarding",
				params,
				{
					"onSuccess":this.whenSaved.bind(this, line),
					"onFailure":this.whenNotSaved.bind(this)
				});
		}
	},
	
	getProtocolName : function(protocolId){
		var protocolName;
		if (protocolId == "6")
			protocolName = "TCP";
		else if (protocolId == "17")
			protocolName = "UDP";
		else
			protocolName = t("advconfig.firewalladv.label.bothprotocol", "both");
		return protocolName;
	},


	_parsPorts:function(port, range){
		var tmp;
		var ret = /^\s*(\d+)\s*(-\s*(\d+)\s*)?$/.exec(port);
		return {
			f:tmp=parseInt(ret[1]),
			l:parseInt(ret[3]) || tmp + (range || 0)
		};
	},

	_parsPortsInOut:function(inp, outp){
		outp = this._parsPorts(outp);
		inp = this._parsPorts(inp, outp.l - outp.f);
		return {
			inp:inp,
			outp:outp
		};
	},

	_checkPortRanges:function(a, b, sameHost){
		return (sameHost === false ||
			(a.inp.l < b.inp.f || a.inp.f > b.inp.l))&&
		(a.outp.l >= b.outp.f || a.outp.f <= b.outp.l);
	},

	_checkPortRange:function(a, b){
		return (a.l < b.f || a.f > b.l);
	},

	_setupPorts:function(inpf, inpl, outf, outl){
		if(!inpl)inpl=inpf;
		if(!outl)outl=outf;
		return {
			inp:{
				f:parseInt(inpf),
				l:parseInt(inpl)
			},
			outp:{
				f:parseInt(outf),
				l:parseInt(outl)
			}
		};
	},
	_calculateRange:function(port){
		var ret = /^\s*(\d+)\s*(-\s*(\d+)\s*)?$/.exec(port);
		return parseInt(ret[3]) - parseInt(ret[1]);
	}
    
}
);


/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/security/ipv6Rule.js */

/**
 * Security Ipv6Rule
 * Firewall chain selection.
 */

Security.Ipv6Rule = Class.create(Sah.AuthenticatedForm,{
	initialize: function ($super, form){
		$super(form);
		
		this.host = $('Rule.Device');
		this.protocol=$('Rule.Protocol');
		this.Pinholes=[];
		/* setup events */
		
		$("bt_save").observe("click", this.onSave.bind(this));
		
		/* prepare to load the objects we need (Firewall) */
		this.needs("Status", {
			path: "sysbus.NMC:getWANStatus",
			method: "execute"
		});
		this.needs("Pinholes", {
			path: "sysbus.Firewall:getPinhole",
			method: "execute"/*,
			methodParams: {
				id:"1",
				origin:"webui"
			}*/
		});
		this.needs("AllHosts", {
			path: "sysbus.Devices:get",
			method: "execute"
		});

		this.load();    
	},

	objectsLoaded : function (){ 
		
		
		/* display IPv6 firewall port(s) opening table */
		if(this.objects.Status.IPv6Address != ""){
			$("ipv6rules").show();
		
			/* Fill Ipv6 Host Devices List */
			this.objects.AllHosts = $A(this.objects.AllHosts);
	
			this.objects.Hosts = this.objects.AllHosts.select(function (h) {
				//return h.IPv4Address!="";
				return (h.PhysAddress != "00:00:00:00:00:00" && h.Name != "localhost" && (h.Tags.indexOf("interface")<0) && h.Active);
			});
				
			this.fillHostSelect();
			
			for (var key in this.objects.Pinholes) {
			  if (this.objects.Pinholes.hasOwnProperty(key)) {
			   this.Pinholes.push(this.objects.Pinholes[key]);
			  
			  }
			}

			/* setup needed templates */
			this.portTemplate = Sah.Templates['IPv6'];
			this.portTemplate.callback = this.appendPinHole.bind(this);
			this.portTemplate.apply(this.Pinholes);
		}else{
			$("ipv6rules").hide();
		}
		this.loaded = true;
		this.form.enable();
		this._updateWanState();
	},
	appendPinHole: function (element, rule)
	{
			
	      console.warn(JSON.stringify(rule));
		
		var rule = rule;
		element.id = rule.Id;
       		if (rule.Protocol == "6")
			rule.ProtocolText = "TCP";
		else if (rule.Protocol == "17")
			rule.ProtocolText = "UDP";
		else {
			rule.ProtocolText = "advconfig.firewalladv.label.bothprotocol";
			Sah.translator.change(this.portTemplate.getElementForParameter(element, "Protocol"), rule.ProtocolText, rule.ProtocolText);
		}

		var ruleEnable = (rule.Enable)?"general.label.enabled":"general.label.disabled";        
		Sah.translator.change(this.portTemplate.getElementForParameter(element, "Enable"), ruleEnable, rule.Enable); 
		
		this.portTemplate.getElementForParameter(element, "Protocol").update(rule.ProtocolText);
		this.portTemplate.getElementForParameter(element, "Name").update(rule.Description);
		this.portTemplate.getElementForParameter(element, "Port").update(rule.DestinationPort);
		this.portTemplate.getElementForParameter(element, "Enable").update(ruleEnable);
		
		//element.addClassName('added');
        

		/* when clicking delete remove the element */
		element.del = element.down(".btn-delete");
		element.del.observe("click", this.deletePort.bind(this, element, rule));

		this.form.down("tbody").insert(element);
	},
	
	deletePort: function (tr, host)
	{
		var parameters = {
				origin :"webui" ,
				id :tr.id 
		};

		this.client.execute("sysbus.Firewall:deletePinhole",parameters,{
			"onSuccess":this.deleteClient.bind(this, tr),
			"onFailure":this.whenNotSaved.bind(this)
		} 
		);  
   
       
	},

	deleteClient: function (tr)
	{
		tr.remove();       
	},
	onSave : function ()
	{	
	  var ipv6DestAddress="";
	  for(var i=0;i<this.host.options[this.host.selectedIndex].host.IPv6Address.length;i++){
			//if(this.host.options[this.host.selectedIndex].host.IPv6Address[i].Scope=="link")
					//ipv6DestAddress=this.host.options[this.host.selectedIndex].host.IPv6Address[i].Address;
			if(this.host.options[this.host.selectedIndex].host.IPv6Address[i].Scope=="global")
			ipv6DestAddress=this.host.options[this.host.selectedIndex].host.IPv6Address[i].Address;
			destinationMACAddress=this.host.options[this.host.selectedIndex].host.PhysAddress;
			description=this.host.options[this.host.selectedIndex].host.Name;
			console.warn(this.host.options[this.host.selectedIndex].host.Name);
			
	  }
		var _protocol=this.protocol.options[this.protocol.selectedIndex].value;
		if(this.protocol.selectedIndex==2)
			_protocol="6,17";
		/*setPinhole(id:string, origin:string <mandatory>, 
		 * sourceInterface:string <mandatory>, 
		 * sourcePort:string, 
		 * destinationPort:string <mandatory>, 
		 * destinationIPAddress:string <mandatory>, 
		 * sourcePrefix:string, 
		 * protocol:string <mandatory>, 
		 * ipversion:int32, enable:bool,
		 * persistent:bool, 
		 * description:string,
		 * destinationMACAddress:string):string
               */
		
		var parameters = {
		 
				origin :"webui" ,
				sourceInterface :"data" ,
				sourcePort :"",
				description:description,
				destinationPort :$("pinhole.port").getValue(),
				destinationIPAddress :"",
				destinationMACAddress: destinationMACAddress,
				protocol :_protocol,
				ipversion : 6,
				enable : $("enable_pin").checked,
				persistent : true
			};
		if(this.validateSecurityRule(parameters)){
			this.client.execute("sysbus.Firewall:setPinhole",parameters, {
				"onSuccess":this.whenSaved.bind(this),
				"onFailure":this.whenNotSaved.bind(this)
			} );
		}else{
			$("error_port").show();
		}

	},
	whenSaved: function (res){
		$("error_port").hide();
		if(res && res.result && res.result.status){
			this.portTemplate.apply(res.result.data.rule);
		}
		
	},
	whenNotSaved: function (pinhole){
		$("error_port").show();
	},
	validateSecurityRule: function (obj){
		var bValid = true ;

		var portRangeReg = new RegExp("^\\s*(\\d+)\\s*-\\s*(\\d+)\\s*$");
		destinationPort = obj.destinationPort;
		destinationPortRangeEnd = obj.destinationPort;
		if (destinationPort.trim()==""){
			return false;
		}
		if (destinationPort.match(portRangeReg)) {
			destinationPort = obj.destinationPort.split("-")[0];
			destinationPortRangeEnd = obj.destinationPort.split("-")[1] ;
			
		} else {
			destinationPortRangeEnd = obj.destinationPort;
		}

		if (destinationPort !== ""){
			if (destinationPort.match(/^\s*0?\s*$/) || !Sah.Validations.isValidPort(destinationPort)) {
				
				this.logger.info("Wrong destination port. It should be a value between 1 to 65535");
				return false;
			}
			if (destinationPortRangeEnd.match(/^\s*0?\s*$/) || !Sah.Validations.isValidPort(destinationPortRangeEnd)) {
				
				this.logger.info("Wrong destination port. It should be a value between 1 to 65535");
				return false;
			}
		}
				
		
		return true;
	},


	fillHostSelect: function (){
        
		var select = this.host;
		select.update("");

		this.objects.Hosts.each(function (host) {
		if ((host.Tags.toLowerCase().indexOf("lan")>=0) && (host.Tags.toLowerCase().indexOf("bridge")<0) && (host.DiscoverySource.toLowerCase().indexOf("self")<0) && (host.Tags.indexOf("ipv6") >= 0)) {	
				var ipv6DestAddress="";
				
				for(var i=0;i<host.IPv6Address.length;i++){
						if(host.IPv6Address[i].Scope=="link")
									ipv6DestAddress=host.IPv6Address[i].Address;
		  		}
				
				if(ipv6DestAddress.length>0){
			
					var option = new Element("option");				
					option.update(host.Name ||ipv6DestAddress);				
					option.host = host;
					select.insert(option);

				}
			}
		}, this);

		

	},
	_updateWanState: function (result) {
		if (result) {
			this.objects.Status = result.result.data;
		}
			/* display IPv6 firewall port(s) opening table */
			if(this.objects.Status.IPv6Address != ""){
				$("ipv6rules").show();
			}else{
				$("ipv6rules").hide();
			}		
			
			if (this._timeout != null) {
					clearTimeout(this._timeout);
			}
			this._timeout = setTimeout(function () {
					this.client.execute("sysbus.NMC:getWANStatus", {}, this._updateWanState.bind(this));
			}.bind(this), 10000);
			
		
	},
});



/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/login.js */

var Login = Class.create(Sah.Form, /** @lends Login# */ {
	initialize: function ($super, form) {
		$super(form);
		this.login = $("login-inputs-div");
		this.logout = $("logout-link-div");
		this.loggedInUsername = $("logged_in_username");
		this.logoutLink = $("logout_link");

		this.auth = new Sah.Auth(this.client);
		this.isAuthenticated = false;
       
		if (this.auth.authenticate()) this.makeAuthenticated();
		else this.notAuthenticated();

		if (this.logoutLink) this.logoutLink.observe("click", this.doLogout.bind(this));

		this.form.observe("submit", this.doLogin.bind(this));
		this.form.observe("sah:login", this.doLogin.bind(this));
		Event.observe(document, "sah:authentication:error", this.authFailure.bind(this));
		Event.observe(document, "sah:redirect", this.tryRedirect.bind(this));
		
		$("PopupUsername").setAttribute("value", "admin");
		$("PopupPassword").setAttribute("placeholder", t("home.authentication.label.password","password"));
		
		Event.observe(document,'sah:admin:language:change', this.placeHolderSetup.bind(this));
		Event.observe(window, "load", this.placeHolderSetup.bind(this));
		
		
		this.load();
	},
    
	handle401: function () {
		this.logger.error("handled 401 status");
	},

	makeAuthenticated: function () {
		this.logger.info("user is authenticated"); /* if a redirect is needed, do it */
		if (this.nextLocation) {
			window.location = this.nextLocation;
			this.nextLocation = null;
			return;
		}

		Sah.Forms.each(function (form) {
			if (form.authenticated) {
				form.form.up("div").show();
				form.load();
			}
		});

		$$(".restricted").each(function (e) {
			e.show();
		});
		$$(".not-restricted").each(function (e) {
			e.hide();
		});
		$$(".auth-failure").each(function (e) {
			e.hide();
		});
		$$(".auth-success").each(function (e) {
			e.hide();
		});
		$$(".auth-failure-no-login-pass").each(function (e) {
			e.hide();
		});

		this.login.hide();
		if (this.loggedInUsername) this.loggedInUsername.update(this.auth.username());
		if (this.logout) this.logout.show();

		if (typeof CustomEvent === 'function') {
			var event = new CustomEvent("loginSuccessful");
			document.dispatchEvent(event);
		} else if (document.dispatchEvent) {
			console.log("Entered");
			var event = document.createEvent("CustomEvent");
			event.initEvent("loginSuccessful", true, true);
			document.dispatchEvent(event);
		} else {
			var event = document.createEventObject();
			event.eventType = "loginSuccessful";
			event.eventName = "loginSuccessful";
			document.fireEvent("on" + event.eventType, event);
		}
		
		this.isAuthenticated = true;
		
	//this.form.hide();
	},

	notAuthenticated: function (parameter) {
		this.logger.info("user is not authenticated");

		var re = new RegExp("^" + appUrl + "/(legal.html|index.html|notConnectedDevices.html|freeApplications.html)?$");
		if (!window.location.pathname.match(re) || (parameter && parameter == "logout" && window.location.href.toUpperCase().startsWith("HTTPS"))) this.redirect("/");
		Sah.Forms.each(function (form) {
			if (form.authenticated) {
				form.form.up("div").hide();
			}
		});
     
		
		$$(".restricted").each(function (e) {
			e.hide();
		});
		$$(".auth-failure").each(function (e) {
			e.hide();
		});
		$$(".auth-failure-no-login-pass").each(function (e) {
			e.hide();
		});
		$$(".auth-success").each(function (e) {
			e.hide();
		});
		$$(".not-restricted").each(function (e) {
			e.show();
		});
		$$(".auth-no-failure").each(function (e) {
			e.show();
		});

		if (this.logout) this.logout.hide();
		this.login.show();

		if (typeof CustomEvent === 'function') {
			var event = new CustomEvent("logoutSuccessful");
			document.dispatchEvent(event);
		} else if (document.dispatchEvent) {
			console.log("Entered");
			var event = document.createEvent("CustomEvent");
			event.initEvent("logoutSuccessful", true, true);
			document.dispatchEvent(event);
		} else {
			var event = document.createEventObject();
			event.eventType = "logoutSuccessful";
			event.eventName = "logoutSuccessful";
			document.fireEvent("on" + event.eventType, event);
		}
		
		window.authenticated = false;
		this.form.show();
	},

	noLoginPass: function () {
		Sah.Forms.each(function (form) {
			if (form.authenticated) {
				form.form.up("div").hide();
			}
		});
        
		$('authenticationerrors').show();
		$('emptyauthfields').show();
		$('emptyauthinvalid').hide();
  
	},

	doLogout: function (event) {
		this.isAuthenticated = false;
		this.auth.logout(this.notAuthenticated.bind(this, "logout"));
	},

	doLogin: function (event) {
		this.logger.info("loging in");
		event.stop(event);
		$('Username').setValue($F('PopupUsername'));
		$('Password').setValue($F('PopupPassword'));
		
		if ($F("Username").match(/^\s*$/) || $F("Password").match(/^\s*$/)||$F("Password")==t("home.authentication.label.password","password")) {
			this.noLoginPass();
			return false;
		}

		this.auth.login($F("Username"), $F("Password"), {
			onSuccess: this.authSuccessfull.bind(this),
			onFailure: this.authFailure.bind(this)
		});

		return false;
	},

	authSuccessfull: function (object) {
		this.makeAuthenticated();
		$('authenticationerrors').hide();
	},

	authFailure: function () {
		this.notAuthenticated();       
		$('authenticationerrors').show();	
		$('emptyauthinvalid').show();
		$('emptyauthfields').hide();
	},

	tryRedirect: function (event) {
		
		var location = appUrl + event.memo;
		this.logger.info("trying to redirect to " + location);
		var locationIsHome = false;
		if (location.lastIndexOf("/")>1){
			var locationLength = location.length;
			var index = location.lastIndexOf("/")+1;
			if (index === locationLength)
			      locationIsHome = true;
		}
		if (!this.isAuthenticated && !locationIsHome && (location != appUrl + "/") && (location != appUrl + "/notConnectedDevices.html")&& (location != appUrl + "/freeApplications.html") && (location != appUrl + "/legal.html") ) {
		  
			this.nextLocation = location;
			this.showPopup();
		} else {			
			this.nextLocation= null;
			window.location	= location;
		}
		return false;
	},

	showPopup: function () {
		this.logger.info("requesting login popup");
		$('PopupPassword').focus();
		ctl.popup.Open('<span class="translation Translations.home.authentication.label.subtitle"></span>', '<h4>identification</h4>','400', '90');
		Sah.translator.refresh();
		setTimeout(function(){
		  $('PopupPassword').focus();
		},110);
		
	},
	placeHolderSetup : function(){
		/** The color of the placeholder text. */
		var placeholderColor = "#A0A0A0";
   
		/** The color of normal text values. */
		var normalColor = "#000000";
		var xAddEventListener = function(elem, type, listener, useCapture) {
			if (elem.addEventListener)
				elem.addEventListener(type, listener, useCapture);
			else if (elem.attachEvent)
				elem.attachEvent("on" + type, listener);
			else
				elem["on" + type] = listener;
		}
		var native_support = (function() {
			var input = document.createElement("input");
			return "placeholder" in input;
		})();
		var AddPlaceHolder = function(input, placeholder) {
			if (typeof input == "string") {
				input = document.getElementById(input);
			}
 
			// Add the blur and focus events
			xAddEventListener(input, "focus", function() {
				if (input.value == placeholder) {
					input.value = "";
					input.style.color = normalColor;
				}
			}, true);
			var onBlur = function() {
				if (input.value == "" || input.value == placeholder) {
					input.value = placeholder;
					input.style.color = placeholderColor;
				}
			}
			xAddEventListener(input, "blur", onBlur, true);
       
			// Make sure the placeholder value isn't sent with the form.
			var pform = input;
			do {
				pform = pform.parentNode;
			} while (pform != document && pform.tagName.toLowerCase() != "form");
       
			if (pform && pform != document) {
				xAddEventListener(pform, "submit", function() {
					if (input.value == placeholder) {
						input.value = "";
					}
				}, true);
			}
       
			// Set the initial state of the input, showing the placeholder.
			input.value ="";
			onBlur();
		}
		var onReady = function() {
			if (!native_support) {
				var inputs = [ $("PopupUsername"), $("PopupPassword")];/*document.getElementsByTagName("input");*/
				for (var i = 0; i < inputs.length; ++i) {
					if (inputs[i] && inputs[i].tagName.toLowerCase() == "input") {
						var attr = inputs[i].getAttribute("placeholder");
						if (typeof attr == "string" && attr.length > 0) {
							AddPlaceHolder(inputs[i], attr);
						}
					}
				}
			}
		};

		//~ $("PopupUsername").setAttribute("value", "admin");
		//~ $("PopupPassword").setAttribute("placeholder", t("home.authentication.label.password","password"));
		onReady();
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/wifi.js */

/**
 * @namespace Holds the wifi entity and its associated forms
 */
var Wifi = {};

Wifi.getWifiInterfaces = function(hardware_build){
	if(!Wifi.interfaces){
		Wifi.getWifiInterfaces = function(hardware_build){
			var wlanvap = "wl0" , wlanvap1 = "wl1" ;
			var wifiradio1 ,wifiradio ;

			var alternatives = {
				"zte_h202n" : function(){
					wifiradio = "wifi0_ath";
					wifiradio1 = null;
					return;
				},
				"sagem_prov3" : function(){
					wifiradio = "wifi0_ath";
					wifiradio1 = "wifi1_ath";
					return;
				},
				"sagem_lbv28" : function(){
					wifiradio = "wifi0_ath";
					wifiradio1 = "wifi1_ath";
					return;
				},
				"sagem_lbv3" : function(){
					wifiradio = "wifi0_ath";
					wifiradio1 = "wifi1_ath";
					return;
				},
				"zte-h368n":function(){
					wifiradio = "wifi0_bcm";
					wifiradio1 = "wifi0_celeno";
					return;
				},
				"siligence-cut2":function(){
				    wifiradio = "wifi0_bcm";
				    wifiradio1 = "wifi1_bcm";
				    return;
				}
			}
			try {
				alternatives[hardware_build]();
			}
			catch(err) {
				alternatives['zte_h202n']();
				Sah.logger.error("error setting wifi interfaces. Using zte_h202n config", err);
			}
			Wifi.interfaces = {
				"wlanvap0" : wlanvap,
				"wlanvap1" : wlanvap1,
				"wlanradio0" : wifiradio,
				"wlanradio1" : wifiradio1
			}
			return Wifi.interfaces;
		}
		return Wifi.getWifiInterfaces(hardware_build);
	}else{
		Wifi.getWifiInterfaces = function(hardware_build){
			return Wifi.interfaces;
		}
		return Wifi.getWifiInterfaces(hardware_build);
	}
}

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/wifi/advanced.js */

Wifi.Advanced = Class.create(Sah.AuthenticatedForm, /** @lends Wifi.General.Basic */ {
	initialize: function ($super, form) {
		$('left-advwifi-link').addClassName('current');
		$$('#header-hmenu li.active')[0].removeClassName('active');
		$('hmenu-wifi').addClassName('active');
		this.urlHashes = this.getUrlHashes();
		this.isSameConfig=true;
		this.isWifi2_4G=true;
		this.isWifi5G=true;
		this.changeFromSecurityType=false;
		$super(form);               
		/*Security mode correspandance array*/
		this.securityModeHash = {
			"No security": "None",
			"WEP-128": "WEP-128",
			"WPA-PSK/TKIP": "WPA-Personal",
			"WPA2-PSK/AES": "WPA2-Personal",
			"WPA/WPA2 Mixed": "WPA-WPA2-Personal"
		};
                
                // only available in 2.8 project build
		if (config.BUILD_PROJECT.indexOf("2.8") < 0) {
			this.needs("EasyPairingStatus", {
				path: "sysbus.EasyPairing:getState",
				method: "execute"
			});
		} else {
			this.objects.EasyPairingStatus = {
				'Enable': false
			}
		}
		
		this.listLinks = [];
		var list = $("advWifiForm").getElementsByTagName("a");
		for (i=0; i<list.length; i++){
			this.listLinks.push(list[i].href);
		}
		
		$('bt_enable').observe('click', this.toggleWifi.bind(this, true));
		$('bt_disable').observe('click', this.toggleWifi.bind(this, false));
		
		$('wlan_wps_bt_enable').observe('click', this.toggleAllWps.bind(this));
		$('wlan_wps_pin_enable').observe('click', this.toggleWPSSelfPin.bind(this));
		$('bt_add').observe('click', this.addWPSClientPin.bind(this));
		$('bt_generate').observe('click', this.generateWPSelfPin.bind(this));
		$('bt_push').observe('click', this.triggerWPSPushButton.bind(this));
  
		$('wlan_wps_bt_enable24ghz').observe('click', this.toggleAllWps.bind(this, "2.4GHZ"));
		$('wlan_wps_pin_enable24ghz').observe('click', this.toggleWPSSelfPin.bind(this, "2.4GHZ"));		          
		$('bt_add24ghz').observe('click', this.addWPSClientPin.bind(this, "2.4GHZ"));
		$('bt_generate24ghz').observe('click', this.generateWPSelfPin.bind(this, "2.4GHZ"));
		$('bt_push24ghz').observe('click', this.triggerWPSPushButton.bind(this, "2.4GHZ"));
      
	        $('wlan_wps_bt_enable5ghz').observe('click', this.toggleAllWps.bind(this, "5GHZ"));
		$('wlan_wps_pin_enable5ghz').observe('click', this.toggleWPSSelfPin.bind(this,"5GHZ"));		          
		$('bt_add5ghz').observe('click', this.addWPSClientPin.bind(this, "5GHZ"));
		$('bt_generate5ghz').observe('click', this.generateWPSelfPin.bind(this, "5GHZ"));
		$('bt_push5ghz').observe('click', this.triggerWPSPushButton.bind(this, "5GHZ")); 
            	
		$('sameconfig').observe('click', this.hasSameConfig.bind(this, true));
		$('not_sameconfig').observe('click', this.hasSameConfig.bind(this, false));
		$('availablewifi24ghz').observe('click', this.selectWifiBand.bind(this, "2.4GHZ"));
		$('availablewifi5ghz').observe('click', this.selectWifiBand.bind(this, "5GHZ"));
		
		$('wlan_channel_select').observe('change', this.autoChannelButtonState.bind(this,"2.4GHZ"));
		$('wlan_channel_select5').observe('change', this.autoChannelButtonState.bind(this,"5GHZ"));
				
		$('wlan_channel_select24ghz').observe('change', this.autoChannelButtonState.bind(this,"2.4GHZ"));
		$('wlan_channel_select5ghz').observe('change', this.autoChannelButtonState.bind(this,"5GHZ"));
		$("bt_cancel").observe("click", this.onCancel.bind(this));
		$("bt_save").observe("click", this.onSave.bind(this));
		$("bt_scan").observe("click", this.onScanAutoChannel.bind(this));
		$("bt_scan24ghz").observe("click", this.onScanAutoChannel.bind(this,"2.4GHZ"));
		$("bt_scan5ghz").observe("click", this.onScanAutoChannel.bind(this,"5GHZ"));
		$('wlan_security_type').observe("change", function() { this.changeFromSecurityType=true; this.handleMacFiltering;this.onSave();}.bind(this));
		$('wlan_security_type24ghz').observe("change", function() { this.changeFromSecurityType=true; this.handleMacFiltering;this.onSave();}.bind(this));
		$('wlan_security_type5ghz').observe("change", function() { this.changeFromSecurityType=true; this.handleMacFiltering;this.onSave();}.bind(this));
		
		Event.observe(document, 'WPS:Desactivate', this.desactivateWPS.bind(this));
		Event.observe(document, 'WPS24GHZ:Desactivate', this.desactivateWPS.bind(this,"2.4GHZ"));
		Event.observe(document, 'WPS5GHZ:Desactivate', this.desactivateWPS.bind(this,"5GHZ"));
		//~Event.observe(document, 'WPSDisplay:Desactivate', this.WPSDisplayDisabled.bind(this));
		//~Event.observe(document, 'WPSDisplay:Activate', this.WPSDisplayEnabled.bind(this));

		this._macfilterInitialized = false;
		this._macfilterInitialized24ghz = false;
		this._macfilterInitialized5ghz = false;
		$('wlan_macfilter_enable24ghz').observe('click', this.toggleMacFiltring.bind(this,"2.4GHZ"));
		$('wlan_macfilter_enable5ghz').observe('click', this.toggleMacFiltring.bind(this,"5GHZ"));
		$('wlan_host_list24ghz').observe('change', this.selectHostMacFiltring.bind(this,"2.4GHZ"));
		$('bt_host_add24ghz').observe('click', this.addHostMacFiltring.bind(this,"2.4GHZ"));
		$('wlan_host_list5ghz').observe('change', this.selectHostMacFiltring.bind(this,"5GHZ"));
		$('bt_host_add5ghz').observe('click', this.addHostMacFiltring.bind(this,"5GHZ"));  
		Event.observe(document, 'MacFiltring24GHZ:Activate', this.activateMacFiltering.bind(this,"2.4GHZ"));
		Event.observe(document, 'MacFiltring24GHZ:Desactivate', this.desactivateMacFiltering.bind(this,"2.4GHZ"));
		Event.observe(document, 'MacFiltring5GHZ:Activate', this.activateMacFiltering.bind(this,"5GHZ"));
		Event.observe(document, 'MacFiltring5GHZ:Desactivate', this.desactivateMacFiltering.bind(this,"5GHZ"));


		this.interfaces = Wifi.getWifiInterfaces(config.BUILD_HARDWARE);
		this.checkingBoxModel();
		
	},
	
	/*setting default hgw model & wifisetting & loading them*/
	checkingBoxModel: function () { 
		this.needs("WIFI", {
			path: "sysbus.NeMo.Intf.lan:getMIBs",
			method:"execute",
			methodParams: {
				mibs:"base wlanvap wlanradio",
				flag:"wlanvap || wlanradio",
				traverse:"down"
			}
		});
		this.needs("WifiStatus", {
			path: "sysbus.NMC.Wifi:get",
			method:"execute",
			methodParams:{}    
		});
		this.needs("Hosts", {
			path: "sysbus.Devices:get",
			method: "execute",
			methodParams: {
				expression:""
			}
		});  
		this.load();
	},
	
	objectsLoaded: function () {
		this.objects.WifiStatus.ConfigurationMode
		this.objects.wlanRadios = [];
		this.objects.wlanVaps = [];
		for (var k in this.objects.WIFI.wlanradio) {
			if (!this.objects.WIFI.wlanradio.hasOwnProperty(k))
				continue;
			this.objects.wlanRadios.push(k);
		}

		if (this.objects.wlanRadios.length > 0) {
			if (this.objects.WIFI.wlanradio[this.objects.wlanRadios[0]].OperatingFrequencyBand === "2.4GHz") {
				this.interfaces.wlanradio0 = this.objects.wlanRadios[0];
				if (this.objects.wlanRadios[1]) {
					this.interfaces.wlanradio1 = this.objects.wlanRadios[1];
				}
			} else if (this.objects.wlanRadios[1]) {
				this.interfaces.wlanradio0 = this.objects.wlanRadios[1];
				this.interfaces.wlanradio1 = this.objects.wlanRadios[0];
			}
		}

		for (var k in this.objects.WIFI.wlanvap) {
			if (!this.objects.WIFI.wlanvap.hasOwnProperty(k))
				continue;
			this.objects.wlanVaps.push(k);
		}

		if (this.objects.wlanVaps.length > 0) {
			this.interfaces.wlanvap0 = this.objects.wlanVaps[0];
			if (this.objects.wlanVaps[1]) {
				this.interfaces.wlanvap1 = this.objects.wlanVaps[1];
			}
		}

		this.client.execute("sysbus.Wificom.OpenMode:getStatus", {}, {
			onSuccess: this.loadWifiCom.bind(this),
			onFailure: this.loadWifiCom.bind(this)
		});
	},
	
	loadWifiCom: function (result) {		
		if (result && result.result && result.result.data) {
			this.objects.Wificom = result.result.data;
		} else {
			this.objects.Wificom = {
				Active: false,
				Enable: false,
				Status: "disabled"
			};
		}
		this.client.execute("sysbus.Wificom.SecureMode:getStatus", {}, {
			onSuccess: this.loadWifiComSecureMode.bind(this),
			onFailure: this.loadWifiComSecureMode.bind(this)
		});
	},
	
	loadWifiComSecureMode: function (result) {
		if (result && result.result && result.result.data) {
			this.objects.wifiComSecureMode = result.result.data;
		} else {
			this.objects.wifiComSecureMode = {
				Enable: false,
				Status: "deactivated"
			};
		}
		if(this.interfaces.wlanradio1 && this.interfaces.wlanradio0){  
			this.objects.WLAN = this.objects.WIFI.wlanvap.wl0;
			this.objects.WLAN.Enable = this.objects.WIFI.base.wl0.Enable;
			this.objects.WLAN.Status = this.objects.WIFI.base.wl0.Status;
			this.objects.WLAN.SSID = this.objects.WIFI.wlanvap.wl0.SSID;
			this.objects.WLAN.Radio = this.objects.WIFI.wlanradio[this.interfaces.wlanradio0];
			this.objects.WLAN5G = this.objects.WIFI.wlanvap.wl1;	
			this.objects.WLAN5G.Enable = this.objects.WIFI.base.wl1.Enable;
			this.objects.WLAN5G.Status = this.objects.WIFI.base.wl1.Status;
			this.objects.WLAN5G.Radio = this.objects.WIFI.wlanradio[this.interfaces.wlanradio1];
			
			this.isWifi2_4G=true;
			this.isWifi5G=true;
			
			this._oldMacFiltering5ghz = this.objects.WLAN5G.MACFiltering.Mode;
			this._oldWPS5ghz = this.objects.WLAN5G.WPS.Enable;
			this.oldMode5ghz = this.objects.WLAN5G.Security.ModeEnabled;

			this._oldMacFiltering24ghz = this.objects.WLAN.MACFiltering.Mode;
			this._oldWPS24ghz = this.objects.WLAN.WPS.Enable;
			this.oldMode24ghz = this.objects.WLAN.Security.ModeEnabled;
		}
		else if(this.interfaces.wlanradio0){
			this.objects.WLAN = this.objects.WIFI.wlanvap.wl0;
			this.objects.WLAN.Enable = this.objects.WIFI.base.wl0.Enable;
			this.objects.WLAN.Status = this.objects.WIFI.base.wl0.Status;
			this.objects.WLAN.SSID = this.objects.WIFI.wlanvap.wl0.SSID;
			this.objects.WLAN.Radio = this.objects.WIFI.wlanradio[this.interfaces.wlanradio0];
		
		}else{
			this.objects.WLAN = this.objects.WIFI.wlanvap.wl1;	
			this.objects.WLAN.Enable = this.objects.WIFI.base.wl1.Enable;
			this.objects.WLAN.Status = this.objects.WIFI.base.wl1.Status;
			this.objects.WLAN.SSID = this.objects.WIFI.wlanvap.wl1.SSID;
			this.objects.WLAN.Radio = this.objects.WIFI.wlanradio[this.interfaces.wlanradio1];
		}
		if (this.objects.Wificom.Enable || this.objects.wifiComSecureMode.Enable) {
			$('orange-wifi-link').show();
		}
		
	 		
		this._oldMacFiltering = this.objects.WLAN.MACFiltering.Mode;
		this._oldWPS = this.objects.WLAN.WPS.Enable;
		this.oldMode = this.objects.WLAN.Security.ModeEnabled;
		
		

		if(this.urlHashes.indexOf("24ghz") !== -1){
			this.hasSameConfig(false);
		} else if(this.urlHashes.indexOf("5ghz") !== -1){
			this.hasSameConfig(false);
		}
		else{			
			this.hasSameConfig(this.objects.WifiStatus.ConfigurationMode);
		}		
		this.form.enable();
		this.markAsLoaded();
		$('selfpin-input').disable();
	},
	
	handleMacFiltering: function(band){
		var value;
		if(band==="2.4GHZ"){				
				value = $('wlan_security_type24ghz').getValue();
				if (value === "None") {
					document.fire('MacFiltring24GHZ:Activate',true);
					if($("top_wps24ghz").visible())
						this.enableMaskLayer($("wps_mask24ghz"), $("top_wps24ghz"), $("mac-filtring-tr24ghz"));
					$('wlan_security_type24ghz').value = "None";
				
				}else{					
					if(this._oldMacFiltering24ghz === "Off"){
							document.fire('MacFiltring24GHZ:Desactivate',true);
					}else{
						document.fire('MacFiltring24GHZ:Activate',true);
						if($("top_wps24ghz").visible())
							this.enableMaskLayer($("wps_mask24ghz"), $("top_wps24ghz"), $("mac-filtring-tr24ghz"));
					}
					if(this._oldWPS24ghz === true){
						Sah.translator.change($('wlan_wps_bt_enable24ghz'), "general.btn.disable", "X Disable");
						Sah.translator.change($('wlan_wps_bt_state24ghz'), "general.label.enabled", "X Enabled");
						$('wlan_wps_bt_state24ghz').style.color = "#38A403";
						$("wps_mask24ghz").hide();
					} else {
						Sah.translator.change($('wlan_wps_bt_enable24ghz'), "general.btn.enable", "X Enable");		
						Sah.translator.change($('wlan_wps_bt_state24ghz'), "general.label.disabled", "X Disabled");
						$('wlan_wps_bt_state24ghz').style.color = "red";
						$$('.cnt-wlan-wps-global24ghz').each(Element.show);
						$("wps_mask24ghz").show();
				
							this.enableMaskLayer($("wps_mask24ghz"), $("top_wps24ghz"), $("mac-filtring-tr24ghz"));
					}
			//}
				
					
						if($('wps-activation-tr24ghz').visible()) {
								$('nowps24ghz').hide();
						}else if($('wps-activation-tr5ghz').visible()){
								$('nowps24ghz').show();
						}else{
								$('nowps24ghz').hide();
						}
						
						if($('wps-activation-tr5ghz').visible()) {
								$('nowps5ghz').hide();
						}else if($('wps-activation-tr24ghz').visible()){
								$('nowps5ghz').show();
						}else{
								$('nowps5ghz').hide();
						}
						
				if(($('wps-activation-tr24ghz').visible()) || ($('wps-activation-tr5ghz').visible()) ){
					$$('.wpsmenu').each(Element.show);
				}else{
					$$('.wpsmenu').each(Element.hide);
				}
			
			}
		}else if(band==="5GHZ"){
				value = $('wlan_security_type5ghz').getValue();
				if (value === "None") {
					document.fire('MacFiltring5GHZ:Activate',true);
					if($("top_wps5ghz").visible())
						this.enableMaskLayer($("wps_mask5ghz"), $("top_wps5ghz"), $("mac-filtring-tr5ghz"));
					$('wlan_security_type5ghz').value = "None";
				
				}else{					
					if(this._oldMacFiltering5ghz === "Off"){
							document.fire('MacFiltring5GHZ:Desactivate',true);
					}else{
						document.fire('MacFiltring5GHZ:Activate',true);
						if($("top_wps5ghz").visible())
							this.enableMaskLayer($("wps_mask5ghz"), $("top_wps5ghz"), $("mac-filtring-tr5ghz"));
					}
					if(this._oldWPS5ghz === true){
						Sah.translator.change($('wlan_wps_bt_enable5ghz'), "general.btn.disable", "X Disable");
						Sah.translator.change($('wlan_wps_bt_state5ghz'), "general.label.enabled", "X Enabled");
						$('wlan_wps_bt_state5ghz').style.color = "#38A403";
						$("wps_mask5ghz").hide();
					} else {
						Sah.translator.change($('wlan_wps_bt_enable5ghz'), "general.btn.enable", "X Enable");		
						Sah.translator.change($('wlan_wps_bt_state5ghz'), "general.label.disabled", "X Disabled");
						$('wlan_wps_bt_state5ghz').style.color = "red";
						$$('.cnt-wlan-wps-global5ghz').each(Element.show);
						$("wps_mask5ghz").show();
						
							this.enableMaskLayer($("wps_mask5ghz"), $("top_wps5ghz"), $("mac-filtring-tr5ghz"));
					}
				
						if($('wps-activation-tr24ghz').visible()) {
								$('nowps24ghz').hide();
						}else if($('wps-activation-tr5ghz').visible()){
								$('nowps24ghz').show();
						}else{
								$('nowps24ghz').hide();
						}
						
						if($('wps-activation-tr5ghz').visible()) {
								$('nowps5ghz').hide();
						}else if($('wps-activation-tr24ghz').visible()){
								$('nowps5ghz').show();
						}else{
								$('nowps5ghz').hide();
						}
				if(($('wps-activation-tr24ghz').visible()) || ($('wps-activation-tr5ghz').visible()) ){
					$$('.wpsmenu').each(Element.show);
				}else{
					$$('.wpsmenu').each(Element.hide);
				}
			}
		}else{
			value = $('wlan_security_type').getValue();
			if (value === "None") {
				document.fire('MacFiltring:Activate',true);
				if($("top_wps").visible())
					this.enableMaskLayer($("wps_mask"), $("top_wps"), $("mac-filtring-tr"));
				$('wlan_security_type').value = "None";
			
			}else{					
				if(this._oldMacFiltering === "Off"){
					  document.fire('MacFiltring:Desactivate',true);
				}else{
					document.fire('MacFiltring:Activate',true);
				if($("top_wps").visible())
					this.enableMaskLayer($("wps_mask"), $("top_wps"), $("mac-filtring-tr"));
				}
				if(this._oldWPS === true){
					Sah.translator.change($('wlan_wps_bt_enable'), "general.btn.disable", "X Disable");
					Sah.translator.change($('wlan_wps_bt_state'), "general.label.enabled", "X Enabled");
					$('wlan_wps_bt_state').style.color = "#38A403";
					$("wps_mask").hide();
				} else {
					Sah.translator.change($('wlan_wps_bt_enable'), "general.btn.enable", "X Enable");		
					Sah.translator.change($('wlan_wps_bt_state'), "general.label.disabled", "X Disabled");
					$('wlan_wps_bt_state').style.color = "red";
					$$('.cnt-wlan-wps-global').each(Element.show);
					$("wps_mask").show();
					this.enableMaskLayer($("wps_mask"), $("top_wps"), $("mac-filtring-tr"));
				}
			}
		}
	},
	hasSameConfig:function (same) {
		// Cookie.set('WifiSameConfig',same);		
		this.client.execute("sysbus.NMC.Wifi:set", { 
			ConfigurationMode : same 
		}, {
			onSuccess: function (){},
			onFailure: function (){}
		});
		
		
		if(same){
			this.isSameConfig=true;
			$("two-wifi-config").hide();
			$("one-wifi-config").show();
			$("macfiltering").show();
			this.fillForm();
			$("band-row").hide();
			$('sameconfig').writeAttribute("checked","checked");
			
		}else{
			this.isSameConfig=false;
			$("two-wifi-config").show();
			$("one-wifi-config").hide();
			$("macfiltering").hide();
			this.fillForm2();
			$("band-row").show();
			$('not_sameconfig').writeAttribute("checked","checked");
		}
						
	},
	fillForm: function () {
		this.fromObject(this.objects);

		/** Wlan state **/
		/* Broadcast SSID*/
		(this.objects.WLAN.SSIDAdvertisementEnabled === true ? $("wlan_bssid_enable"): $("wlan_bssid_disable")).checked = true;

		/* Security mode*/
		var securityModesSelect = $('wlan_security_type');
		securityModesSelect.update("");
  
		$H(this.securityModeHash).each(function (s) {
			var option = new Element("option");
			
			if (s[1] === "None"){
				option.addClassName ("translation");
				option.addClassName ("Translations.advconfig.wifi.label.nosecurity");
			}
			
			option.update(s[0]);
			option.value = s[1];

			securityModesSelect.insert(option);
		});

		securityModesSelect.value = this.objects.WLAN.Security.ModeEnabled;
		$$('div.wlan-key').each(Element.hide);
// 		$$('.cnt-wlan-wps').each(Element.hide);
		$$('.bssid-activated').each(Element.hide);      


		if (this.objects.WLAN.Security.ModeEnabled.substring(0, 3) === "WEP" || this.objects.WLAN.Security.ModeEnabled === "WPA-Personal") {
			$('security-key-tr').show();
			
		
			$("wps_mask").hide();
                        
                        if (this.objects.WLAN.Security.ModeEnabled.substring(0, 3) === "WEP") {
                             $('wlan_key_wep').show();
                            $('wlan_key_wpa').hide();
                        } else {
                            $('wlan_key_wep').hide();
                            $('wlan_key_wpa').show();
                        }
                        
			$('modenerror').show();
			//$('wps-settings-title').hide();
		} else if (this.objects.WLAN.Security.ModeEnabled.substring(0, 3) === "WPA") { /*WPA settings*/
			$('wps-settings-title').show();
			$('security-key-tr').show();
			$('wlan_key_wpa').show();
			$('modenerror').hide();
			
			Sah.translator.change($('wlan_wps_bt_enable'), "general.btn.enable", "X Enabled");
			Sah.translator.change($('wlan_wps_pin_enable'), "general.btn.enable", "X Enabled");

			
			Sah.translator.change($('wlan_wps_bt_state'), "general.label.disabled", "X Disabled");
			Sah.translator.change($('wlan_wps_pin_state'), "general.label.disabled", "X Disabled");
			$('wlan_wps_pin_state').style.color = $('wlan_wps_bt_state').style.color = "red";
			$$('.cnt-wlan-wps-global').each(Element.show);
			$("wps_mask").show();
                        
			if (this.objects.WLAN.WPS.Enable) {
				Sah.translator.change($('wlan_wps_bt_enable'), "general.btn.disable", "X Disabled");
				Sah.translator.change($('wlan_wps_bt_state'), "general.label.enabled", "X Enabled");
				$('wlan_wps_bt_state').style.color = "#38A403";
				$("wps_mask").hide();
			
                        
				if (this.objects.WLAN.WPS.ConfigMethodsEnabled === "Keypad,Display,Ethernet") {
					Sah.translator.change($('wlan_wps_pin_enable'), "general.btn.disable", "X Disabled");
					Sah.translator.change($('wlan_wps_pin_state'), "general.label.enabled", "X Enabled");
					$('wlan_wps_pin_state').style.color = "#38A403";
					$$('.cnt-wlan-wps-pin').each(Element.show);
					$('selfpin-input').value = this.objects.WLAN.WPS.SelfPIN;
				}else {
					$$('.cnt-wlan-wps-pin').each(Element.hide);
					$$('.cnt-wlan-wps-global').each(Element.show);
				}
			}
			
					
			
		} else {
			/*in nosecurity mode enable mac filtering*/
			$("wps_mask").hide();
			$('security-key-tr').hide();
			$('wlan_key_na').show();
			$('modenerror').hide();
			//$('wps-settings-title').hide();
		}
		
		
		if (this.objects.WLAN.SSIDAdvertisementEnabled === false) {
		    /* When BSSID is disabled then show only easy wifi and mac filtering */
      $('security-key-tr').show();
			//$('wps-settings-title').hide();
//                         $$('.cnt-wlan-wps').each(Element.hide);
			$$('.bssid-activated').each(Element.hide);
		}
		
		/** Channels **/
		$$('#wlan_channel_select option').each(Element.hide);
		$$('#wlan_channel_select option.Europe').each(Element.show);
		$$('#wlan_channel_select5 option').each(Element.hide);
		$$('#wlan_channel_select5 option.Europe').each(Element.show);
		var btScan = $("bt_scan"), wlanChannelSelect = $('wlan_channel_select'), wlanChannelSelect5 = $('wlan_channel_select5');
		
		if (this.objects.WLAN.Radio.AutoChannelEnable === true) {
			btScan.show();
			wlanChannelSelect.value = "Auto";
		}
		if(this.objects.WLAN5G.Radio.AutoChannelEnable===true){
		  btScan.show();
		  wlanChannelSelect5.value = "Auto";
		}
		
		else {
			btScan.hide();
			wlanChannelSelect.value = this.objects.WLAN.Radio.Channel;
			wlanChannelSelect5.value = this.objects.WLAN5G.Radio.Channel;
		}
		$('wlan_channel').innerHTML = this.objects.WLAN.Radio.Channel;
		$('wlan_channel5').innerHTML = this.objects.WLAN5G.Radio.Channel;
		
                 if ((this.objects.WifiStatus.Enable === true && this.objects.WifiStatus.Status === true) || (this.objects.WifiStatus.Enable === false && this.objects.WifiStatus.Status === true)) {
			$("wlan_disable").hide();
			$("wlan_enable").show();
			$("wlan_mask").hide();
			this.enableForm();
		} else if ((this.objects.WifiStatus.Enable === false && this.objects.WifiStatus.Status === false) || (this.objects.WifiStatus.Enable === true && this.objects.WifiStatus.Status === false)) {
			$("wlan_enable").hide();
			$("wlan_disable").show();   			
			this.disableForm();
			if($("wps-activation-tr").visible()){
				this.enableMaskLayer($("wlan_mask"), $("wps-activation-tr"), $("bottom_right")); 
			}
			else{
				this.enableMaskLayer($("wlan_mask"), $("sameconfig-row"), $("bottom_right")); 
			}                
		}
  
		/*--if (this.objects.WLAN.Enable === true ) {
			$("wlan_disable").hide();
			$("wlan_enable").show();
			$("wlan_mask").hide();
			this.enableForm();
                    
		} else{
			$("wlan_enable").hide();
			$("wlan_disable").show();   			
			this.disableForm();
			this.enableMaskLayer($("wlan_mask"), $("wps-activation-tr"), $("bottom_right"));                       
                      
		}*/
                            
		 if ((!this.objects.WLAN.WPS.Enable) && $("wps-activation-tr").visible()) {
			 				if($("top_wps").visible())
									this.enableMaskLayer($("wps_mask"), $("top_wps"), $("mac-filtring-tr"));                     
		}
		
		if (this.objects.WLAN.Security.ModeEnabled.substring(0, 3) === "WPA") {
			var key = this.objects.WLAN.Security.KeyPassPhrase;
			$('wlan_key_wpa').innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', key));
		} else {
			$('wlan_key_wep').innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.objects.WLAN.Security.WEPKey));
		}
		
		var ssid = this.objects.WLAN.SSID;
		$('WLAN.SSID').innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', ssid));
		

	},
	fillForm2: function () {
		this.fromObject(this.objects);
		if(this.objects.WLAN.Enable) {
			$('availablewifi24ghz').checked=true;
			$('wlan_mask24ghz').hide();
			$('wlan_mask_mac24ghz').hide();
			
		}
		else {
			$('availablewifi24ghz').checked=false;
			$('wlan_mask24ghz').show();
			$('wlan_mask_mac24ghz').show();
			
		}
		if(this.objects.WLAN5G.Enable) {
			$('availablewifi5ghz').checked=true;
			$('wlan_mask5ghz').hide();
			$('wlan_mask_mac5ghz').hide();
		}
		else {
			$('availablewifi5ghz').checked=false;
			$('wlan_mask5ghz').show();
			$('wlan_mask_mac5ghz').show();
			
		}
		/** Wlan state **/
		/* Broadcast SSID*/
		(this.objects.WLAN.SSIDAdvertisementEnabled === true ? $("wlan_bssid_enable24ghz"): $("wlan_bssid_disable24ghz")).checked = true;
		(this.objects.WLAN5G.SSIDAdvertisementEnabled === true ? $("wlan_bssid_enable5ghz"): $("wlan_bssid_disable5ghz")).checked = true;
		/* Security mode*/
		var securityModesSelect = $('wlan_security_type24ghz');
		securityModesSelect.update("");
  
		$H(this.securityModeHash).each(function (s) {
			var option = new Element("option");
			
			if (s[1] === "None"){
				option.addClassName ("translation");
				option.addClassName ("Translations.advconfig.wifi.label.nosecurity");
			}
			
			option.update(s[0]);
			option.value = s[1];

			securityModesSelect.insert(option);
		});

		securityModesSelect.value = this.objects.WLAN.Security.ModeEnabled;
		$$('div.wlan-key24ghz').each(Element.hide);
// 		$$('.cnt-wlan-wps').each(Element.hide);
		$$('.bssid-activated24ghz').each(Element.hide);
		$('nowps24ghz').show();
		var securityModesSelect5G = $('wlan_security_type5ghz');
		securityModesSelect5G.update("");
		$H(this.securityModeHash).each(function (s) {
			var option = new Element("option");
			
			if (s[1] === "None"){
				option.addClassName ("translation");
				option.addClassName ("Translations.advconfig.wifi.label.nosecurity");
			}
			
			option.update(s[0]);
			option.value = s[1];

			securityModesSelect5G.insert(option);
		});

		securityModesSelect5G.value = this.objects.WLAN5G.Security.ModeEnabled;
		$$('div.wlan-key5ghz').each(Element.hide);
		$$('.bssid-activated5ghz').each(Element.hide); 
		$('nowps5ghz').show();     	
		if (this.objects.WLAN.Security.ModeEnabled.substring(0, 3) === "WEP" || this.objects.WLAN.Security.ModeEnabled === "WPA-Personal") {
			$('security-key-tr24ghz').show();
			$('nosecurity-key24ghz').hide();
			$("wps_mask24ghz").hide();
                        
                        if (this.objects.WLAN.Security.ModeEnabled.substring(0, 3) === "WEP") {
                             $('wlan_key_wep24ghz').show();
                            $('wlan_key_wpa24ghz').hide();
                        } else {
                            $('wlan_key_wep24ghz').hide();
                            $('wlan_key_wpa24ghz').show();
                        }
                        
			$('modenerror').show();
			//$('wps-settings-title').hide();
		} else if (this.objects.WLAN.Security.ModeEnabled.substring(0, 3) === "WPA") { /*WPA settings*/
			$('wps-settings-title').show();
			$('security-key-tr24ghz').show();
			$('nosecurity-key24ghz').hide();
			$('wlan_key_wpa24ghz').show();
			$('modenerror').hide();
			
			Sah.translator.change($('wlan_wps_bt_enable24ghz'), "general.btn.enable", "X Enabled");
			Sah.translator.change($('wlan_wps_pin_enable24ghz'), "general.btn.enable", "X Enabled");

			
			Sah.translator.change($('wlan_wps_bt_state24ghz'), "general.label.disabled", "X Disabled");
			Sah.translator.change($('wlan_wps_pin_state24ghz'), "general.label.disabled", "X Disabled");
			$('wlan_wps_pin_state24ghz').style.color = $('wlan_wps_bt_state24ghz').style.color = "red";
			$$('.cnt-wlan-wps-global24ghz').each(Element.show);
			
					
			$("wps_mask24ghz").show();
                        
			if (this.objects.WLAN.WPS.Enable ) {
				Sah.translator.change($('wlan_wps_bt_enable24ghz'), "general.btn.disable", "X Disabled");
				Sah.translator.change($('wlan_wps_bt_state24ghz'), "general.label.enabled", "X Enabled");
				$('wlan_wps_bt_state24ghz').style.color = "#38A403";
				$("wps_mask24ghz").hide();
			
                        
				if (this.objects.WLAN.WPS.ConfigMethodsEnabled === "Keypad,Display,Ethernet") {
					Sah.translator.change($('wlan_wps_pin_enable24ghz'), "general.btn.disable", "X Disabled");
					Sah.translator.change($('wlan_wps_pin_state24ghz'), "general.label.enabled", "X Enabled");
					$('wlan_wps_pin_state24ghz').style.color = "#38A403";
					$$('.cnt-wlan-wps-pin24ghz').each(Element.show);
					$('selfpin-input24ghz').value = this.objects.WLAN.WPS.SelfPIN;
				}else {
					$$('.cnt-wlan-wps-pin24ghz').each(Element.hide);
					$$('.cnt-wlan-wps-global24ghz').each(Element.show);
				}
			}
			
			
			
			
					
			
		} else {
			/*in nosecurity mode enable mac filtering*/
			$("wps_mask24ghz").hide();
			$('security-key-tr24ghz').hide();
			$('nosecurity-key24ghz').show();
			$('wlan_key_na24ghz').show();
			$('modenerror').hide();
			//$('wps-settings-title').hide();
		}
		
		
		if (this.objects.WLAN5G.Security.ModeEnabled.substring(0, 3) === "WEP" || this.objects.WLAN5G.Security.ModeEnabled === "WPA-Personal") {
											$('security-key-tr5ghz').show();
											$('nosecurity-key5ghz').hide();
											$("wps_mask5ghz").hide();
                        
                        if (this.objects.WLAN5G.Security.ModeEnabled.substring(0, 3) === "WEP") {
                             $('wlan_key_wep5ghz').show();
                            $('wlan_key_wpa5ghz').hide();
                        } else {
                            $('wlan_key_wep5ghz').hide();
                            $('wlan_key_wpa5ghz').show();
                        }
                        			
		} else if (this.objects.WLAN5G.Security.ModeEnabled.substring(0, 3) === "WPA") { /*WPA settings*/
			
			$('wps-settings-title').show();
			$('security-key-tr5ghz').show();
			$('nosecurity-key5ghz').hide();
			$('wlan_key_wpa5ghz').show();
			$('modenerror').hide();
			
					
			Sah.translator.change($('wlan_wps_bt_enable5ghz'), "general.btn.enable", "X Enabled");
			Sah.translator.change($('wlan_wps_pin_enable5ghz'), "general.btn.enable", "X Enabled");

			
			Sah.translator.change($('wlan_wps_bt_state5ghz'), "general.label.disabled", "X Disabled");
			Sah.translator.change($('wlan_wps_pin_state5ghz'), "general.label.disabled", "X Disabled");
			$('wlan_wps_pin_state5ghz').style.color = $('wlan_wps_bt_state5ghz').style.color = "red";
			$$('.cnt-wlan-wps-global5ghz').each(Element.show);
			
			
			$("wps_mask5ghz").show();
                        
		if (this.objects.WLAN5G.WPS.Enable) {
				Sah.translator.change($('wlan_wps_bt_enable5ghz'), "general.btn.disable", "X Disabled");
				Sah.translator.change($('wlan_wps_bt_state5ghz'), "general.label.enabled", "X Enabled");
				$('wlan_wps_bt_state5ghz').style.color = "#38A403";
				$("wps_mask5ghz").hide();
			
                        
				if (this.objects.WLAN5G.WPS.ConfigMethodsEnabled === "Keypad,Display,Ethernet") {
					Sah.translator.change($('wlan_wps_pin_enable5ghz'), "general.btn.disable", "X Disabled");
					Sah.translator.change($('wlan_wps_pin_state5ghz'), "general.label.enabled", "X Enabled");
					$('wlan_wps_pin_state5ghz').style.color = "#38A403";
					$$('.cnt-wlan-wps-pin5ghz').each(Element.show);
					$('selfpin-input5ghz').value = this.objects.WLAN5G.WPS.SelfPIN;
				}else {
					$$('.cnt-wlan-wps-pin5ghz').each(Element.hide);
					$$('.cnt-wlan-wps-global5ghz').each(Element.show);
				}
			}
			
	
		} else {
			/*in nosecurity mode enable mac filtering*/
			$("wps_mask5ghz").hide();
			$('security-key-tr5ghz').hide();
			$('nosecurity-key5ghz').show();
			$('wlan_key_na5ghz').show();
			$('modenerror').hide();		
		}
		

		if (this.objects.WLAN5G.SSIDAdvertisementEnabled === false) {
		    /* When BSSID is disabled then show only easy wifi and mac filtering */
			if(this.objects.WLAN5G.Security.ModeEnabled!="None"){
			      $('security-key-tr5ghz').show();
			      $('nosecurity-key5ghz').hide();
			}
			//$('wps-settings-title').hide();
//                         $$('.cnt-wlan-wps').each(Element.hide);
			$$('.bssid-activated5ghz').each(Element.hide);
			 $('nowps5ghz').show();
		}else{
			//$$('.bssid-activated5ghz').each(Element.show);
			 $('nowps5ghz').hide();
		}
		
		if (this.objects.WLAN.SSIDAdvertisementEnabled === false ) {
		    /* When BSSID is disabled then show only easy wifi and mac filtering */
			if(this.objects.WLAN5G.Security.ModeEnabled!="None"){
			      $('security-key-tr24ghz').show();
			      $('nosecurity-key24ghz').hide();
			}
			//$('wps-settings-title').hide();
//                         $$('.cnt-wlan-wps').each(Element.hide);
			$$('.bssid-activated24ghz').each(Element.hide);
			 $('nowps24ghz').show();
			
		}else{
			//$$('.bssid-activated24ghz').each(Element.show);
			 $('nowps24ghz').hide();
		}
		
		if (this.objects.WLAN.SSIDAdvertisementEnabled === false && this.objects.WLAN5G.SSIDAdvertisementEnabled === false) {

			$$('.wpsmenu').each(Element.hide);
			 $('nowps24ghz').hide();
			 $('nowps5ghz').hide();
			
		}	
		if($('wps-activation-tr24ghz').visible()) {
								$('nowps24ghz').hide();
		}else if($('wps-activation-tr5ghz').visible()){
								$('nowps24ghz').show();
		}else{
								$('nowps24ghz').hide();
		}
						
		if($('wps-activation-tr5ghz').visible()) {
								$('nowps5ghz').hide();
		}else if($('wps-activation-tr24ghz').visible()){
								$('nowps5ghz').show();
		}else{
								$('nowps5ghz').hide();
		}
		
		if(($('wps-activation-tr24ghz').visible()) || ($('wps-activation-tr5ghz').visible()) ){
				$$('.wpsmenu').each(Element.show);
			}else{
				$$('.wpsmenu').each(Element.hide);
			}
				
				
		if($('security-key-tr24ghz').visible()) {
								$('nosecurity-key24ghz').hide();
		}else if($('security-key-tr5ghz').visible()){
								$('nosecurity-key24ghz').show();
		}else{
								$('nosecurity-key24ghz').hide();
		}
						
		if($('security-key-tr5ghz').visible()) {
								$('nosecurity-key5ghz').hide();
		}else if($('security-key-tr24ghz').visible()){
								$('nosecurity-key5ghz').show();
		}else{
								$('nosecurity-key5ghz').hide();
		}
						
			if(($('security-key-tr24ghz').visible()) || ($('security-key-tr5ghz').visible()) ){
				$("securitykeytitle").show();
			}else{
				$("securitykeytitle").hide();
			}
			
		/** Channels **/
		$$('#wlan_channel_select24ghz option').each(Element.hide);
		$$('#wlan_channel_select24ghz option.Europe').each(Element.show);
		var btScan = $("bt_scan24ghz"), wlanChannelSelect = $('wlan_channel_select24ghz');
		

		if (this.objects.WLAN.Radio.AutoChannelEnable === true) {
			btScan.show();
			wlanChannelSelect.value = "Auto";
		} else {
			btScan.hide();
			wlanChannelSelect.value = this.objects.WLAN.Radio.Channel;
		}
		$('wlan_channel24ghz').innerHTML = this.objects.WLAN.Radio.Channel;
              
                 
		$$('#wlan_channel_select5ghz option').each(Element.hide);
		$$('#wlan_channel_select5ghz option.Europe').each(Element.show);
		var btScan5G = $("bt_scan5ghz"), wlanChannelSelect5G = $('wlan_channel_select5ghz');
		

		if (this.objects.WLAN5G.Radio.AutoChannelEnable === true) {
			btScan5G.show();
			wlanChannelSelect5G.value = "Auto";
		} else {
			btScan5G.hide();
			wlanChannelSelect5G.value = this.objects.WLAN5G.Radio.Channel;
		}
		$('wlan_channel5ghz').innerHTML = this.objects.WLAN5G.Radio.Channel;
  
		/*if (this.objects.WLAN.Enable === true ) {
			$("wlan_disable").hide();
			$("wlan_enable").show();
			$("wlan_mask").hide();
			this.enableForm();
                    
		} else{
			$("wlan_enable").hide();
			$("wlan_disable").show();   			
			this.disableForm();
			this.enableMaskLayer($("wlan_mask"), $("top_left"), $("bottom_right"));                       
                      
		}*/
                  
		 if ((this.objects.WifiStatus.Enable === true && this.objects.WifiStatus.Status === true) || (this.objects.WifiStatus.Enable === false && this.objects.WifiStatus.Status === true)) {
			$("wlan_disable").hide();
			$("wlan_enable").show();
			$("wlan_mask").hide();
			this.enableForm();
		} else if ((this.objects.WifiStatus.Enable === false && this.objects.WifiStatus.Status === false) || (this.objects.WifiStatus.Enable === true && this.objects.WifiStatus.Status === false)) {
			$("wlan_enable").hide();
			$("wlan_disable").show();   			
			this.disableForm();
			if($("wps-activation-tr").visible()){
				this.enableMaskLayer($("wlan_mask"), $("wps-activation-tr"), $("bottom_right")); 
			}
			else{
				this.enableMaskLayer($("wlan_mask"), $("sameconfig-row"), $("bottom_right")); 
				
			}                
		}
          	
		 if ((!this.objects.WLAN.WPS.Enable)&& $("wps-activation-tr24ghz").visible()) {
			 				if($("top_wps24ghz").visible())
										this.enableMaskLayer($("wps_mask24ghz"), $("top_wps24ghz"), $("mac-filtring-tr24ghz"));  
		}
		
		if ((!this.objects.WLAN5G.WPS.Enable)&& $("wps-activation-tr5ghz").visible()) {
							if($("top_wps5ghz").visible())
											this.enableMaskLayer($("wps_mask5ghz"), $("top_wps5ghz"), $("mac-filtring-tr5ghz"));  
		}
		
		if (this.objects.WLAN.Security.ModeEnabled.substring(0, 3) === "WPA") {
			var key = this.objects.WLAN.Security.KeyPassPhrase;
			$('wlan_key_wpa24ghz').innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', key));
		} else {
			$('wlan_key_wep24ghz').innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.objects.WLAN.Security.WEPKey));
		}
		
		var ssid = this.objects.WLAN.SSID;
		$('WLAN.SSID24ghz').innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', ssid));

		if (this.objects.WLAN5G.Security.ModeEnabled.substring(0, 3) === "WPA") {
			var key = this.objects.WLAN5G.Security.KeyPassPhrase;
			$('wlan_key_wpa5ghz').innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', key));
		} else {
			$('wlan_key_wep5ghz').innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.objects.WLAN5G.Security.WEPKey));
		}
		
		var ssid5G = this.objects.WLAN5G.SSID;
		$('WLAN.SSID5ghz').innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', ssid5G));
		if (this.objects.WLAN.SSIDAdvertisementEnabled === false || this.objects.WLAN5G.SSIDAdvertisementEnabled === false) {
			$("wps_mask5ghz").hide();
		}
		this.fillTwoMacFiltringForm();

	},

	disableForm: function(){
		setTimeout(function(){
		var listInputs = $("advWifiForm").getElementsByTagName("input");
			
			for(i=0; i<listInputs.length; i++){
				listInputs[i].disabled= true;
			}
			
			var listA = $("advWifiForm").getElementsByTagName("a");
			for(i=0; i<listA.length; i++){
				if(listA[i].id !== "scheduling-a"){
					listA[i].href="#";
				}
			}
			$('bt_enable').enable();
		}.bind(this), 500);
		
	},
	
	enableForm: function(){
		setTimeout(function(){
			var listInputs = $("advWifiForm").getElementsByTagName("input");
			
			for(i=0; i<listInputs.length; i++){
				listInputs[i].disabled=false;
			}
			var listA = $("advWifiForm").getElementsByTagName("a");
			for(i=0; i<listA.length; i++){
					listA[i].href=this.listLinks[i];
			}
		}.bind(this), 500);
	},
	
	createSavedObject : function(params,band){
		if(band=="2.4GHZ"){
			var savedObject = {
				wlanvap: {
					wl0: 
					params
		                        
				}
			};

			
		}else if(band=="5GHZ"){
			var savedObject = {
				wlanvap: {
					wl1: 
					params
		                        
				}
			};

			
		}else{
			var savedObject = {
				wlanvap: {
					wl0: 
					params
		                        
				}
			};

			if (this.interfaces.wlanradio1) {
				savedObject.wlanvap.wl1 =  params;
		                
			}
		}
		return savedObject;
	},
	enableMaskLayer : function(mask,topelement,lowelement){
		var top = topelement.positionedOffset()[1] + 2;
		var height = lowelement.positionedOffset()[1] - top;
		try {
			
			mask.setStyle({
				top: top + 'px',
				height: height + 'px',
				width: '100%'
			});
		} catch (e) {
			this.logger.warn("can't disable mask :%o",e);
		}
		this.form.setStyle({
			zIndex: 5
		});
		mask.show();
	},
	
	toggleWlanWPS: function () {
		$('cnt_wlan_wps_error').hide();
		this.objects.EasyPairingStatus.Enable = this.objects.EasyPairingStatus.Enable ? false : true;
		
// 		this.markAsLoading();
		this.client.execute("sysbus.EasyPairing:setState", {
			"Enable": this.objects.EasyPairingStatus.Enable
		}, {
			onSuccess: this.whenSaved.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		});

		
	},
       
	toggleWifiInterfaces: function (band,value, handlers) {
// 		this.markAsLoading();
		var configradio0 = {
			"mibs": {
				"wlanradio": {}
			}
		};
		var configradio1 = {
			"mibs": {
				"wlanradio": {}
			}
		};
		
		if(band=="2.4GHZ"){
			if(this.interfaces.wlanradio0 !== ""){
				configradio0.mibs.wlanradio[this.interfaces.wlanradio0] = {
					"PersistentEnable": value,
					"Enable": value
				};
				this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanradio0 + ":setWLANConfig", configradio0, handlers);

				if((this.objects.WLAN5G.Radio.RadioStatus=="Down")&&!value)
				{
					this.client.execute("sysbus.NMC.Wifi:set", {
					"Enable": value,
					"Status": value
					}, handlers);
				}
			}

			
		}
		else if(band=="5GHZ"){
			if(this.interfaces.wlanradio1 !== ""){
				configradio1.mibs.wlanradio[this.interfaces.wlanradio1] = {
					"PersistentEnable": value,
					"Enable": value
				};

				this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanradio1 + ":setWLANConfig", configradio1, handlers);


				if((this.objects.WLAN.Radio.RadioStatus=="Down")&&!value)
				{
					this.client.execute("sysbus.NMC.Wifi:set", {
					"Enable": value,
					"Status": value
					}, handlers);
				}
			}
			
		}else{
			this.client.execute("sysbus.NMC.Wifi:set", {
				"Enable": value,
				"Status": value
			}, handlers);
		}
	},

	toggleWifi: function (enable) {
		var handlers = {
			onSuccess: this.whenSaved.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		}

		if (!enable) {
			// this.objects.WLAN.Enable = false;
			this.objects.WifiStatus.Enable = false;
			this.objects.WifiStatus.Status = false;

			// All possible value are: "Enabled","Disabled","Waiting","Ongoing","Error"
			if (this.objects.Wificom.Enable) {
				ctl.msgbox.Show(ctl.msgbox.QUESTION.YES_NO, t('config.wifi.general.info.wificom', 'X wifi comm sera désactivé'), undefined, (function () {
					this.toggleWifiInterfaces("",false, handlers);
				}.bind(this)));
			} else {
				this.toggleWifiInterfaces("",false, handlers);

			}
		} else {
			this.objects.WifiStatus.Enable = true;
			this.objects.WifiStatus.Status = true;
			this.toggleWifiInterfaces("",true, handlers);

		}
	},

	toggleWPS: function () {
		$('cnt_wlan_wps_error').hide();
		this.objects.WLAN.WPS.Enable = this.objects.WLAN.WPS.Enable ? false : true;
		
// 		this.markAsLoading();
		var originParams = {
			WPS: {
				Enable: this.objects.WLAN.WPS.Enable
			}
		};                                
		var savedObject = this.createSavedObject(originParams); 
		this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap0 + ":setWLANConfig", {
			"mibs": savedObject
		}, {
			onSuccess: this.whenSaved.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		});

		
	},
	
	desactivateWPS:function(band) {
		if(band=="5GHZ"){
			if(this.objects.WLAN5G.WPS.Enable) {
				
				this.fillForm2();				
				var originParams = {
					WPS: {
						Enable: false
					}
				};                                
				var savedObject = this.createSavedObject(originParams,"5GHZ");
				this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap1 + ":setWLANConfig", {
					"mibs": savedObject
				}, {
					onSuccess: this.whenSaved.bind(this),
					onFailure: this.whenNotSaved.bind(this)
				});
		
			}
		}else if(band=="2.4GHZ"){

			if(this.objects.WLAN.WPS.Enable) {
				this.fillForm2();
				var originParams = {
					WPS: {
						Enable: false
					}
				};                                
				var savedObject = this.createSavedObject(originParams,"2.4GHZ"); 
				this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap0 + ":setWLANConfig", {
					"mibs": savedObject
				}, {
					onSuccess: this.whenSaved.bind(this),
					onFailure: this.whenNotSaved.bind(this)
				});
		
			}
				
		}else{

			if(this.objects.WLAN.WPS.Enable) {
				this.fillForm();
				var originParams = {
					WPS: {
						Enable: false
					}
				};                                
				var savedObject = this.createSavedObject(originParams); 
				this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap0 + ":setWLANConfig", {
					"mibs": savedObject
				}, {
					onSuccess: this.whenSaved.bind(this),
					onFailure: this.whenNotSaved.bind(this)
				});
		
			}
		}
	},
	
	WPSDisplayEnabled:function() {
		this.logger.info("Mac Filtring Enabled");
		$('wlan_macfilter_enable').checked = true;
		$('wlan_macfilter_state').style.color = "#38A403";
		Sah.translator.change($('wlan_macfilter_enable'), "general.btn.disable", "X Disabled");
		Sah.translator.change($('wlan_macfilter_state'), "general.label.enabled", "X Enabled");
		$('cnt_macfilter').show();
		this.fillMacFiltring();
		this.objects.WLAN.MACFiltering.Mode = "WhiteList";
	},
	
	WPSDisplayDisabled:function() {
		if(this.objects.WLAN.WPS.Enable) {
			this.objects.WLAN.WPS.Enable = false;
			this.fillForm();
			
			var originParams = {
				WPS: {
					Enable: this.objects.WLAN.WPS.Enable
				}
			};                                
			var savedObject = this.createSavedObject(originParams); 
			this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap0 + ":setWLANConfig", {
				"mibs": savedObject
			}, {
				onSuccess: this.whenSaved.bind(this),
				onFailure: this.whenNotSaved.bind(this)
			});
		
		}
	},

	toggleAllWps: function (band) {
		$('cnt_wlan_wps_error').hide();
		
		
		if(band=="2.4GHZ"){
			
			this.objects.WLAN.WPS.Enable = this.objects.WLAN.WPS.Enable ? false : true;
			
// 			this.markAsLoading();
			
			var originParams = {
				WPS: {
					Enable: this.objects.WLAN.WPS.Enable
				}
				
			};    
			if(this.objects.WLAN.WPS.Enable){
				document.fire('MacFiltring24GHZ:Desactivate',true);
				originParams.MACFiltering = {
					Mode: "Off"
				}
			}
																	
			var savedObject = this.createSavedObject(originParams,"2.4GHZ"); 
			if(this.interfaces.wlanvap0){
				this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap0 + ":setWLANConfig", {
					"mibs": savedObject
				}, {
					onSuccess: this.whenSaved.bind(this),
					onFailure: this.whenNotSaved.bind(this)
				});
			}
			
		}else if(band=="5GHZ"){
			this.objects.WLAN5G.WPS.Enable = this.objects.WLAN5G.WPS.Enable ? false : true;
			
// 			this.markAsLoading();
			
			var originParams = {
				WPS: {
					Enable: this.objects.WLAN5G.WPS.Enable
				}
				
			};    
			if(this.objects.WLAN5G.WPS.Enable){
				document.fire('MacFiltring5GHZ:Desactivate',true);
				originParams.MACFiltering = {
					Mode: "Off"
				}
			}
																	
			var savedObject = this.createSavedObject(originParams,"5GHZ"); 
			if(this.interfaces.wlanvap1){
				this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap1 + ":setWLANConfig", {
					"mibs": savedObject
				}, {
					onSuccess: this.whenSaved.bind(this),
					onFailure: this.whenNotSaved.bind(this)
				});
			}
		}else{
			this.objects.WLAN.WPS.Enable = this.objects.WLAN.WPS.Enable ? false : true;
			
// 			this.markAsLoading();
			
			var originParams = {
				WPS: {
					Enable: this.objects.WLAN.WPS.Enable
				}
				
			};    
			if(this.objects.WLAN.WPS.Enable){
				document.fire('MacFiltring:Desactivate',true);
				originParams.MACFiltering = {
					Mode: "Off"
				}
			}
																	
			var savedObject = this.createSavedObject(originParams); 
			if(this.interfaces.wlanvap0){
				this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap0 + ":setWLANConfig", {
					"mibs": savedObject
				}, {
					onSuccess: this.whenSaved.bind(this),
					onFailure: this.whenNotSaved.bind(this)
				});
			}
		}	
	
	},

	toggleWPSSelfPin: function (band) {
		$('cnt_wlan_wps_error').hide();

		if(band=="2.4GHZ"){
				
			this.objects.WLAN.WPS.ConfigMethodsEnabled = this.objects.WLAN.WPS.ConfigMethodsEnabled === "Keypad,Display,Ethernet" ? "PushButton,Label,Ethernet" : "Keypad,Display,Ethernet";
		
// 			this.markAsLoading();
			var originParams ={
				WPS: {
					ConfigMethodsEnabled: this.objects.WLAN.WPS.ConfigMethodsEnabled
				}
			};                                
			var savedObject = this.createSavedObject(originParams,"2.4GHZ");
			
				this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap0 + ":setWLANConfig", {
					"mibs": savedObject
				}, {
					onSuccess: this.whenSaved.bind(this),
					onFailure: this.whenNotSaved.bind(this)
				});
			
	}else if(band=="5GHZ"){
		this.objects.WLAN5G.WPS.ConfigMethodsEnabled = this.objects.WLAN5G.WPS.ConfigMethodsEnabled === "Keypad,Display,Ethernet" ? "PushButton,Label,Ethernet" : "Keypad,Display,Ethernet";
		
// 			this.markAsLoading();
			var originParams ={
				WPS: {
					ConfigMethodsEnabled: this.objects.WLAN5G.WPS.ConfigMethodsEnabled
				}
			};                                
			var savedObject = this.createSavedObject(originParams,"5GHZ");
			
			if(this.interfaces.wlanvap1){
				this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap1 + ":setWLANConfig", {
					"mibs": savedObject
				}, {
					onSuccess: this.whenSaved.bind(this),
					onFailure: this.whenNotSaved.bind(this)
				});
			}
	}else{
		this.objects.WLAN.WPS.ConfigMethodsEnabled = this.objects.WLAN.WPS.ConfigMethodsEnabled === "Keypad,Display,Ethernet" ? "PushButton,Label,Ethernet" : "Keypad,Display,Ethernet";
		
// 			this.markAsLoading();
			var originParams ={
				WPS: {
					ConfigMethodsEnabled: this.objects.WLAN.WPS.ConfigMethodsEnabled
				}
			};                                
			var savedObject = this.createSavedObject(originParams);
			
			if(this.interfaces.wlanvap0){
				this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap0 + ":setWLANConfig", {
					"mibs": savedObject
				}, {
					onSuccess: this.whenSaved.bind(this),
					onFailure: this.whenNotSaved.bind(this)
				});
			}
	}
		
	},

	addWPSClientPin: function (band) {
		$('cnt_wlan_wps_error').hide();		
		if(band=="2.4GHZ"){
			if (!Sah.Validations.isValidPinCode($('wlan_pin_code24ghz').value)) {
				Sah.translator.change($("wlan_wps_error"), "advconfig.wifi.error.wpsclientpin", "Invalid Client Pin Code");
				$('cnt_wlan_wps_error').show();
				return;
			}
			this.objects.WLAN.WPS.ConfigMethodsEnabled = "PushButton,Display,Ethernet";
			var PIN = $('wlan_pin_code24ghz').value;
			var originParams ={
				WPS: {
					ConfigMethodsEnabled: this.objects.WLAN.WPS.ConfigMethodsEnabled
				}
			};                                
			var savedObject = this.createSavedObject(originParams,"2.4GHZ");
			this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap0 + ":setWLANConfig", {
				"mibs": savedObject
			}, {
				onSuccess: function () {
					this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap0 + ".WPS:pushButton", {
						"clientPIN": PIN
					}, {
						onSuccess: this.whenSaved.bind(this),
						onFailure: this.whenNotSaved.bind(this)
					});					
				}.bind(this),
				onFailure: this.whenNotSaved.bind(this)
			});		
		}
		else if(band=="5GHZ"){
			if (!Sah.Validations.isValidPinCode($('wlan_pin_code5ghz').value)) {
				Sah.translator.change($("wlan_wps_error"), "advconfig.wifi.error.wpsclientpin", "Invalid Client Pin Code");
				$('cnt_wlan_wps_error').show();
				return;
			}
			this.objects.WLAN.WPS.ConfigMethodsEnabled = "PushButton,Display,Ethernet";
			var PIN = $('wlan_pin_code5ghz').value;
			var originParams ={
				WPS: {
					ConfigMethodsEnabled: this.objects.WLAN.WPS.ConfigMethodsEnabled
				}
			};                                
			var savedObject = this.createSavedObject(originParams,"5GHZ");
			this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap1 + ":setWLANConfig", {
				"mibs": savedObject
			}, {
				onSuccess: function () {
					this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap1 + ".WPS:pushButton", {
						"clientPIN": PIN
					}, {
						onSuccess: this.whenSaved.bind(this),
						onFailure: this.whenNotSaved.bind(this)
					});					
				}.bind(this),
				onFailure: this.whenNotSaved.bind(this)
			});
		}else{
			if (!Sah.Validations.isValidPinCode($('wlan_pin_code').value)) {
				Sah.translator.change($("wlan_wps_error"), "advconfig.wifi.error.wpsclientpin", "Invalid Client Pin Code");
				$('cnt_wlan_wps_error').show();
				return;
			}			
			var PIN = $('wlan_pin_code').value;
			this.client.execute("sysbus.NMC.Wifi:startPairing", {
				"clientPIN": PIN
			}, {
				onSuccess: this.whenSaved.bind(this),
				onFailure: this.whenNotSaved.bind(this)
			});	
		}
	},

	generateWPSelfPin: function (band) {
// 		this.markAsLoading();
		if(band=="2.4GHZ"){
			this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap0 + ".WPS:generateSelfPIN", {}, {
				onSuccess: this.whenSaved.bind(this),
				onFailure: this.whenNotSaved.bind(this)
			});
			
		}else if(band=="5GHZ"){
				this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap1 + ".WPS:generateSelfPIN", {}, {
				onSuccess: this.whenSaved.bind(this),
				onFailure: this.whenNotSaved.bind(this)
			});
		}else{
			this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap0 + ".WPS:generateSelfPIN", {}, {
				onSuccess: this.whenSaved.bind(this),
				onFailure: this.whenNotSaved.bind(this)
			});
		}
		$('cnt_wlan_wps_error').hide();

	},

	triggerWPSPushButton: function (band) {
		             
// 		this.markAsLoading();
		if(band=="2.4GHZ"){
			
				this.objects.WLAN.WPS.ConfigMethodsEnabled = "PushButton,Label,Ethernet";
				
// 				this.markAsLoading();
				var originParams ={
					WPS: {
						ConfigMethodsEnabled: this.objects.WLAN.WPS.ConfigMethodsEnabled
					}
				};                                
				var savedObject = this.createSavedObject(originParams,"2.4GHZ");
				this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap0 + ":setWLANConfig", {
					"mibs": savedObject
				}, {
					onSuccess: function () {
						this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap0 + ".WPS:pushButton", {}, {
							onSuccess: this.whenSaved.bind(this),
							onFailure: this.whenNotSaved(this)
						});						
					}.bind(this),
					onFailure: this.whenNotSaved.bind(this)
				});
		}else if(band=="5GHZ"){
				this.objects.WLAN5G.WPS.ConfigMethodsEnabled = "PushButton,Label,Ethernet";
				
// 				this.markAsLoading();
				var originParams ={
					WPS: {
						ConfigMethodsEnabled: this.objects.WLAN5G.WPS.ConfigMethodsEnabled
					}
				};                                
				var savedObject = this.createSavedObject(originParams,"5GHZ");
				this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap1 + ":setWLANConfig", {
					"mibs": savedObject
				}, {
					onSuccess: function () {
						this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap1 + ".WPS:pushButton", {}, {
							onSuccess: this.whenSaved.bind(this),
							onFailure: this.whenNotSaved(this)
						});
						
					}.bind(this),
					onFailure: this.whenNotSaved.bind(this)
				});
		}else{
				this.objects.WLAN.WPS.ConfigMethodsEnabled = "PushButton,Label,Ethernet";
				
// 				this.markAsLoading();
				var originParams ={
					WPS: {
						ConfigMethodsEnabled: this.objects.WLAN.WPS.ConfigMethodsEnabled
					}
				};                                
				var savedObject = this.createSavedObject(originParams);
				this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap0 + ":setWLANConfig", {
					"mibs": savedObject
				}, {
					onSuccess: function () {
						this.client.execute("sysbus.NMC.Wifi:startPairing", {}, {
							onSuccess: this.whenSaved.bind(this),
							onFailure: this.whenNotSaved(this)
						});
						
					}.bind(this),
					onFailure: this.whenNotSaved.bind(this)
				});
		}
		
	},        
	onSave: function () {		
		if(this.isSameConfig){							
// 			this.markAsLoading();
			if(!this.changeFromSecurityType)
				$("warning_msg").hide();
			else
				$("warning_msg").show();
			
			//security type none + mac filtering off + save button pushed (not by change on security type)
			 if(!this.changeFromSecurityType && ((($('wlan_security_type').value.toLowerCase()  === "none") &&(this.objects.WLAN.MACFiltering.Mode.toLowerCase() === "off")))){
					this.changeFromSecurityType=false;
					ctl.msgbox.Show(ctl.msgbox.QUESTION.VALID_CANCEL, t('advconfig.wifi.general.info.nosecurity2',
					 'X Be careful, if you validate, then your WiFi will be no more secured.'),(function (){
						var getSelectOption = $('wlan_security_type').getElementsByTagName('option');
							for(var i=0; i<getSelectOption.length; i++) {
								if(getSelectOption[i].value == this.objects.WLAN.Security.ModeEnabled) {
									getSelectOption[i].selected=true;
								}
							}
							$("warning_msg").hide();
						}.bind(this)),(function () {						
						this.onSaveProceed();
					}.bind(this))  );
				
			}
			//confirmation pairing again when security type changed
			else if($('wlan_security_type').value.toLowerCase()  != this.objects.WLAN.Security.ModeEnabled.toLowerCase()){
					ctl.msgbox.Show(ctl.msgbox.QUESTION.VALID_CANCEL, t('advconfig.wifi.general.info.confirmation', 
					'X You have modified your WiFi configuration.'),(function (){
						var getSelectOption = $('wlan_security_type').getElementsByTagName('option');
							for(var i=0; i<getSelectOption.length; i++) {
								if(getSelectOption[i].value == this.objects.WLAN.Security.ModeEnabled) {
									getSelectOption[i].selected=true;
								}
							}
							$("warning_msg").hide();
						}.bind(this)),(function () {						
						this.onSaveProceed();
					}.bind(this))  );
					
			}
			else{
				this.onSaveProceed();
			}			
		}
		else{
			//security type none + mac filtering off + save button pushed (not by change on security type)
			 if(!this.changeFromSecurityType && ((($('wlan_security_type24ghz').value.toLowerCase()  === "none") &&(this.objects.WLAN.MACFiltering.Mode.toLowerCase() === "off")) || (($('wlan_security_type5ghz').value.toLowerCase()  === "none") && (this.objects.WLAN5G.MACFiltering.Mode.toLowerCase() === "off")))){
					this.changeFromSecurityType=false;
					
					ctl.msgbox.Show(ctl.msgbox.QUESTION.VALID_CANCEL, t('advconfig.wifi.general.info.nosecurity2',
					 'X Be careful, if you validate, then your WiFi will be no more secured.'),(function () {
						this.fillForm2();
					}.bind(this)),(function () {
						this.onSave2();
					}.bind(this))  );
				
			}
			 //similar ssid control
			 else if((this.objects.WLAN.SSID==this.objects.WLAN5G.SSID)&&(($('wlan_security_type24ghz').value.toLowerCase()!=this.objects.WLAN.Security.ModeEnabled.toLowerCase())||($('wlan_security_type5ghz').value.toLowerCase()!=this.objects.WLAN5G.Security.ModeEnabled.toLowerCase()))) {
				
				 ctl.msgbox.Show(ctl.msgbox.QUESTION.OK, t('advconfig.wifi.general.info.ssidmustbedifferent', 'X You have configured differently the WiFi 2.4 GHz and 5 GHz.'),  (function () {
					 this.fillForm2();
				 }.bind(this)));
			
			 }			 
			//confirmation pairing again when security type changed
			else if(($('wlan_security_type24ghz').value.toLowerCase()  != this.objects.WLAN.Security.ModeEnabled.toLowerCase() ) || ($('wlan_security_type5ghz').value.toLowerCase()  != this.objects.WLAN5G.Security.ModeEnabled.toLowerCase() )){
					ctl.msgbox.Show(ctl.msgbox.QUESTION.VALID_CANCEL, t('advconfig.wifi.general.info.confirmation', 
					'X You have modified your WiFi configuration.'),(function () {
						this.fillForm2();
					}.bind(this)),(function () {
						this.onSave2();
					}.bind(this))  );
					
			}
			else{
				this.onSave2();
			}
		}
	}, 
	onSaveProceed: function(){
		var oldsecurity = this.objects.WLAN.Security.ModeEnabled;
		this.objects.WLAN.SSIDAdvertisementEnabled = $('wlan_bssid_enable').checked ? true : false;
		this.objects.WLAN.Radio.Channel = $('wlan_channel_select').value;
		this.objects.WLAN5G.Radio.Channel = $('wlan_channel_select5').value;
		console.warn(this.objects.WLAN.Radio.Channel);
		console.warn(this.objects.WLAN5G.Radio.Channel);
		this.objects.WLAN.Security.ModeEnabled = $('wlan_security_type').value;
	
		if (this.objects.WLAN.Security.ModeEnabled.toLowerCase()  === "wpa-personal" || this.objects.WLAN.Security.ModeEnabled.toLowerCase()  === "none" || this.objects.WLAN.SSIDAdvertisementEnabled === false){
			document.fire('WPS:Desactivate',true); 
		}

		this.oldMode = $('wlan_security_type').value;
		var savedObject = {
			wlanvap: {
				wl0: {
					SSIDAdvertisementEnabled: this.objects.WLAN.SSIDAdvertisementEnabled,
					Security: {
						ModeEnabled: this.objects.WLAN.Security.ModeEnabled
					}
				}
			},
			wlanradio: {},
			
		};
	       
		savedObject.wlanradio[this.interfaces.wlanradio0] = {
			AutoChannelEnable: false,
			Channel: this.objects.WLAN.Radio.Channel
		};
		if (this.objects.WLAN.Radio.Channel.toLowerCase() == "auto") {
			savedObject.wlanradio[this.interfaces.wlanradio0].Channel = null;
			delete savedObject.wlanradio[this.interfaces.wlanradio0].Channel;
			savedObject.wlanradio[this.interfaces.wlanradio0].AutoChannelEnable = true;
		}
		
		
		savedObject.wlanradio[this.interfaces.wlanradio1] = {
				AutoChannelEnable: false,
				Channel: this.objects.WLAN5G.Radio.Channel
				};
		console.warn(JSON.stringify(savedObject));

		if (this.objects.WLAN5G.Radio.Channel.toLowerCase() == "auto") {
				savedObject.wlanradio[this.interfaces.wlanradio1].Channel = null;
				delete savedObject.wlanradio[this.interfaces.wlanradio1].Channel;
				savedObject.wlanradio[this.interfaces.wlanradio1].AutoChannelEnable = true;
							}
		console.warn(JSON.stringify(savedObject));
		
		if (this.interfaces.wlanradio1) {
			savedObject.wlanvap.wl1 = {
				SSIDAdvertisementEnabled: this.objects.WLAN.SSIDAdvertisementEnabled,
				Security: {
					ModeEnabled: this.objects.WLAN.Security.ModeEnabled
				}
			};
// 			savedObject.wlanradio[this.interfaces.wlanradio1] = {
// 				AutoChannelEnable: true
// 			};
		}
		if (this.objects.WLAN.Security.ModeEnabled === "None" && oldsecurity != "None"){
			savedObject.wlanvap.wl0.MACFiltering = {
				Mode: "WhiteList"
			};
			if (this.interfaces.wlanradio1) {
				savedObject.wlanvap.wl1.MACFiltering = {
					Mode: "WhiteList"
				};
			}
			document.fire('MacFiltring:Activate',true); 
		
		}
	
		if (this.objects.WLAN.Security.ModeEnabled !== "None" && oldsecurity === "None"){
			savedObject.wlanvap.wl0.MACFiltering = {
				Mode: this._oldMacFiltering
			};
			if (this.interfaces.wlanradio1) {
				savedObject.wlanvap.wl1.MACFiltering = {
					Mode:this._oldMacFiltering
				};
			}
		
		}
	
		if (this.interfaces.wlanradio1) {
				savedObject.wlanvap.wl1.SSID= this.objects.WLAN.SSID;
				if($("wlan_key_wpa").visible()){	
					savedObject.wlanvap.wl1.Security={
									ModeEnabled: this.objects.WLAN.Security.ModeEnabled,
									KeyPassPhrase:this.objects.WLAN.Security.KeyPassPhrase,
									WEPKey : this.objects.WLAN.Security.WEPKey								
					}	
			}
			
			var originParams = {
				"MACFiltering": {
						"Mode": this.objects.WLAN.MACFiltering.Mode
				}
			};
			
			savedObject.wlanvap.wl1.WPS = this.objects.WLAN.WPS;				
			//savedObject.wlanvap.wl1.MACFiltering = this.objects.WLAN.MACFiltering;
			this.objects.WLAN5G.MACFiltering=this.objects.WLAN.MACFiltering;
			
		}
		this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanradio0 + ":setWLANConfig", {
				"mibs": savedObject
			},

			{
				onSuccess: this.whenSaved.bind(this),
				onFailure: this.whenNotSaved.bind(this)
			});
	},	
	onSave2: function(){
	
							var oldsecurity24ghz = this.objects.WLAN.Security.ModeEnabled;		
							this.objects.WLAN.SSIDAdvertisementEnabled = $('wlan_bssid_enable24ghz').checked ? true : false;
							this.objects.WLAN.Radio.Channel =""+ $('wlan_channel_select24ghz').value;
							this.objects.WLAN.Security.ModeEnabled =""+ $('wlan_security_type24ghz').value;
							var oldsecurity5G = this.objects.WLAN5G.Security.ModeEnabled;		
							this.objects.WLAN5G.SSIDAdvertisementEnabled = $('wlan_bssid_enable5ghz').checked ? true : false;
							this.objects.WLAN5G.Radio.Channel =""+ $('wlan_channel_select5ghz').value;
							this.objects.WLAN5G.Security.ModeEnabled =""+ $('wlan_security_type5ghz').value;
							
							
						
								
							if (this.objects.WLAN.Security.ModeEnabled.toLowerCase()  === "wpa-personal" || this.objects.WLAN.Security.ModeEnabled.toLowerCase()  === "none" || this.objects.WLAN.SSIDAdvertisementEnabled === false){
								document.fire('WPS24GHZ:Desactivate',true); 
								
							}

							if (this.objects.WLAN5G.Security.ModeEnabled.toLowerCase()  === "wpa-personal" || this.objects.WLAN5G.Security.ModeEnabled.toLowerCase()  === "none" || this.objects.WLAN5G.SSIDAdvertisementEnabled === false){
								document.fire('WPS5GHZ:Desactivate',true); 
								
							}


							this.oldMode24ghz = $('wlan_security_type24ghz').value;
							this.oldMode5ghz = $('wlan_security_type5ghz').value;
							var savedObject = {
								wlanvap: {
									wl0: {
										SSIDAdvertisementEnabled: this.objects.WLAN.SSIDAdvertisementEnabled,
										Security: {
											ModeEnabled: this.objects.WLAN.Security.ModeEnabled
										}
									},
									wl1: {
										SSIDAdvertisementEnabled: this.objects.WLAN5G.SSIDAdvertisementEnabled,
										Security: {
											ModeEnabled: this.objects.WLAN5G.Security.ModeEnabled
										}
									}
								},
								wlanradio: {}
							};
							
							savedObject.wlanradio[this.interfaces.wlanradio0] = {
								AutoChannelEnable: false,
								Channel: this.objects.WLAN.Radio.Channel
							};
							
					
							if (this.objects.WLAN.Radio.Channel.toLowerCase() == "auto") {
								savedObject.wlanradio[this.interfaces.wlanradio0].Channel = null;
								delete savedObject.wlanradio[this.interfaces.wlanradio0].Channel;
								savedObject.wlanradio[this.interfaces.wlanradio0].AutoChannelEnable = true;
							}

							if (this.interfaces.wlanradio1) {

								savedObject.wlanradio[this.interfaces.wlanradio1] = {
									AutoChannelEnable: false,
									Channel: this.objects.WLAN5G.Radio.Channel
								};
							}

							if (this.objects.WLAN5G.Radio.Channel.toLowerCase() == "auto") {
								savedObject.wlanradio[this.interfaces.wlanradio1].Channel = null;
								delete savedObject.wlanradio[this.interfaces.wlanradio1].Channel;
								savedObject.wlanradio[this.interfaces.wlanradio1].AutoChannelEnable = true;
							}
							
							if (this.objects.WLAN.Security.ModeEnabled === "None" && oldsecurity24ghz != "None"){
								savedObject.wlanvap.wl0.MACFiltering = {
									Mode: "WhiteList"
								};
								
								document.fire('MacFiltring24ghz:Activate',true); 
							
							}
						
							if (this.objects.WLAN5G.Security.ModeEnabled === "None" && oldsecurity5G != "None"){

								if (this.interfaces.wlanradio1) {
									savedObject.wlanvap.wl1.MACFiltering = {
										Mode: "WhiteList"
									};
								}
								document.fire('MacFiltring5ghz:Activate',true); 
							
							}

							if (this.objects.WLAN.Security.ModeEnabled !== "None" && oldsecurity24ghz === "None"){
								savedObject.wlanvap.wl0.MACFiltering = {
									Mode: this._oldMacFiltering24ghz
								};				
							
							}
							
							if (this.objects.WLAN5G.Security.ModeEnabled !== "None" && oldsecurity5G === "None"){
								
								if (this.interfaces.wlanradio1) {
									savedObject.wlanvap.wl1.MACFiltering = {
										Mode:this._oldMacFiltering5ghz
									};
								}
							
							}
													
						
				
// 							this.markAsLoading();
							this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanradio0 + ":setWLANConfig", {
								"mibs": savedObject
							},

							{
								onSuccess: this.whenSaved.bind(this),
								onFailure: this.whenNotSaved.bind(this)
							});

							
	},
	autoSelectChannel : function(band){
		if(band==="2.4GHZ"){
			this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanradio0 + ":startAutoChannelSelection", {

				}, {
					onSuccess: this.whenSaved.bind(this),
					onFailure: this.whenNotSaved.bind(this)
				});
		}else if(band==="5GHZ"){
			this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanradio1 + ":startAutoChannelSelection", {

				}, {
					onSuccess: this.whenSaved.bind(this),
					onFailure: this.whenNotSaved.bind(this)
				});
		}else{
			this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanradio0 + ":startAutoChannelSelection", {

				}, {
					onSuccess: this.whenSaved.bind(this),
					onFailure: this.whenNotSaved.bind(this)
				});
			this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanradio1 + ":startAutoChannelSelection", {

				}, function () {});
		}
	},
	onScanAutoChannel: function (band) {
// 		this.markAsLoading();
		var savedObject = {                       
			wlanradio: {}
		};
               if(band==="2.4GHZ"){
			if(!this.objects.WLAN.Radio.AutoChannelEnable){
				savedObject.wlanradio[this.interfaces.wlanradio0] = {
					AutoChannelEnable: true
		                       
				};                
				this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanradio0 + ":setWLANConfig", {
					"mibs": savedObject
				},
				{
					onSuccess: this.autoSelectChannel.bind(this,"2.4GHZ"),
					onFailure: this.whenNotSaved.bind(this)
				});
			}else{
				this.autoSelectChannel("2.4GHZ");
			}
		}else if(band==="5GHZ"){
			if(!this.objects.WLAN5G.Radio.AutoChannelEnable){
				savedObject.wlanradio[this.interfaces.wlanradio1] = {
					AutoChannelEnable: true
		                       
				};  
				this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanradio1 + ":setWLANConfig", {
					"mibs": savedObject
				},
				{
					onSuccess: this.autoSelectChannel.bind(this,"5GHZ"),
					onFailure: this.whenNotSaved.bind(this)
				});
			}else{
				this.autoSelectChannel("5GHZ");
			}
		}else{
			if(!this.objects.WLAN.Radio.AutoChannelEnable){
				savedObject.wlanradio[this.interfaces.wlanradio0] = {
					AutoChannelEnable: true
		                       
				};         
				this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanradio0 + ":setWLANConfig", {
					"mibs": savedObject
				},
				{
					onSuccess: this.autoSelectChannel.bind(this),
					onFailure: this.whenNotSaved.bind(this)
				});
			}else{
				this.autoSelectChannel();
			}
		}
                     
	},

	whenSaved: function () {
		this.logger.info("object saved");
		/*this.checkingBoxModel();
		this.loaded = false;
		this.load();*/
		window.location.reload();
	},

	whenNotSaved: function (obj) {
		this.logger.warn("failed to save object");
		this.logger.warn(obj);
		this.markAsLoaded();
	},

	onCancel: function () {
		
		
		if(this.isSameConfig){
			this.objects.WLAN.Security.ModeEnabled = this.oldMode;
			if(this.objects.WLAN5G.Security.ModeEnabled)
				this.objects.WLAN5G.Security.ModeEnabled = this.oldMode;
			this.fillForm();
		}else{
			this.objects.WLAN5G.Security.ModeEnabled = this.oldMode5ghz;
			this.objects.WLAN.Security.ModeEnabled = this.oldMode24ghz;
			this.fillForm2();
		}
		
		ctl.popup.Close();
		ctl.popup.open = 0;
		this.markAsLoaded();
	},
	autoChannelButtonState : function (band) {
		var wlan_channel_select;
		var wlan_channel_select5;
		var bt_scan;
		
		if(band==="2.4GHZ"){
			wlan_channel_select=$('wlan_channel_select24ghz');
			bt_scan=$("bt_scan24ghz");
		}else if(band==="5GHZ"){
			wlan_channel_select=$('wlan_channel_select5ghz');
			//wlan_channel_select5=$('wlan_channel_select5');
			bt_scan=$("bt_scan5ghz");
		}
		else{
			wlan_channel_select=$('wlan_channel_select');
			//wlan_channel_select5=$('wlan_channel_select5');
			bt_scan=$("bt_scan");
		}
		
		var val = wlan_channel_select.value;
		
		if (val === "Auto") {
			bt_scan.show();
			wlan_channel_select.value = "Auto";
			
		}
		
		else {
			bt_scan.hide();			
		}
	},
	buildKeyboardEvents : function(){
		this.kb = new Sah.Keyboard($('scheduling-tr'));         
		if (this.objects.WLAN.Enable === true) {                    
			this.kb.removeEvent('keydown');
		} else {                                        
			this.kb.down(["tab"], function() {                               
				$$('#footer-menu a')[0].focus();                               
				return false;                                
			}.bind(this));
			
			this.kb.down(["shift tab"], function() {                               
				$('bt_save').focus();                               
				return false;                                
			}.bind(this));
                        
                        
		}
		this.kb2 = new Sah.Keyboard($('wps-activation-tr'));                
		if (!this.objects.WLAN.WPS.Enable) {                     
			this.kb2.down(["tab"], function() {                               
				$("wlan_macfilter_enable").focus();                               
				return false;                                
			}.bind(this));
                                
		}else{
			this.kb2.removeEvent('keydown');
		}
	},
	selectWifiBand: function (wifiband) {
		var handlers = {
			onSuccess: this.whenSaved.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		}
		if(wifiband=="2.4GHZ"){

			
			if(!$('availablewifi24ghz').checked){
				ctl.msgbox.Show(ctl.msgbox.QUESTION.YES_NO, t('advconfig.wifi.general.info.disabling24ghz', 'X If you disable the WiFi 2.4 GHz the Orange WiFi service will also disabled. Would you like to continue?'), (function () {$('availablewifi24ghz').checked=true;}.bind(this)), (function () {
					this.toggleWifiInterfaces("2.4GHZ",false, handlers);
					/*$("two-wifi-config-title").setStyle("width:20%");
					$("two-wifi-config-24ghz").setStyle("width:0%");
					$("two-wifi-config-5ghz").setStyle("width:80%");
					$("cnt_macfilter24ghz").setStyle("width:0%");
					$("cnt_macfilter5ghz").setStyle("width:98%");
					$('availablewifi5ghz').checked=true;*/
				}.bind(this)));
			}
			else{
				ctl.msgbox.Show(ctl.msgbox.QUESTION.YES_NO, t('advconfig.wifi.general.info.enabling24ghz', 'X You have chosen to enable the WiFi 2.4 GHz. Would you like to continue?'), (function () {$('availablewifi24ghz').checked=false;}.bind(this)), (function () {			this.toggleWifiInterfaces("2.4GHZ",true, handlers);
					/*if(!$('availablewifi5ghz').checked){
						$("two-wifi-config-title").setStyle("width:20%");
						$("two-wifi-config-5ghz").setStyle("width:0%");
						$("two-wifi-config-24ghz").setStyle("width:80%");
						$("cnt_macfilter24ghz").setStyle("width:98%");
						$("cnt_macfilter5ghz").setStyle("width:0%");
					}
					else{
						$("two-wifi-config-title").setStyle("width:14%");
						$("two-wifi-config-5ghz").setStyle("width:43%");
						$("two-wifi-config-24ghz").setStyle("width:43%");
						$("cnt_macfilter24ghz").setStyle("width:49%");
						$("cnt_macfilter5ghz").setStyle("width:49%");
					}*/
				}.bind(this)));
			}
		}else{
			if(!$('availablewifi5ghz').checked){
				ctl.msgbox.Show(ctl.msgbox.QUESTION.YES_NO, t('advconfig.wifi.general.info.disabling5ghz', 'X You have chosen to disable the WiFi 5 GHz. Would you like to continue?'), (function () {$('availablewifi5ghz').checked=true;}.bind(this)), (function () {				this.toggleWifiInterfaces("5GHZ",false, handlers);
					/*$("two-wifi-config-title").setStyle("width:20%");
					$("two-wifi-config-5ghz").setStyle("width:0%");
					$("two-wifi-config-24ghz").setStyle("width:80%");
					$("cnt_macfilter24ghz").setStyle("width:98%");
					$("cnt_macfilter5ghz").setStyle("width:0%");
					$('availablewifi24ghz').checked=true;*/
				}.bind(this)));
			}
			else{
				ctl.msgbox.Show(ctl.msgbox.QUESTION.YES_NO, t('advconfig.wifi.general.info.enabling5ghz', 'X You have chosen to enable the WiFi 5 GHz. Would you like to continue?'), (function () {$('availablewifi5ghz').checked=false;}.bind(this)), (function () {				this.toggleWifiInterfaces("5GHZ",true, handlers);
					/*if(!$('availablewifi24ghz').checked){
						$("two-wifi-config-title").setStyle("width:20%");
						$("two-wifi-config-24ghz").setStyle("width:0%");
						$("two-wifi-config-5ghz").setStyle("width:80%");
						$("cnt_macfilter24ghz").setStyle("width:0%");
						$("cnt_macfilter5ghz").setStyle("width:98%");
					}
					else{
						$("two-wifi-config-title").setStyle("width:14%");
						$("two-wifi-config-24ghz").setStyle("width:43%");
						$("two-wifi-config-5ghz").setStyle("width:43%");
						$("cnt_macfilter24ghz").setStyle("width:49%");
						$("cnt_macfilter5ghz").setStyle("width:49%");
					}*/	
				}.bind(this)));
			}
		}
	}
	,
	fillTwoMacFiltringForm : function(){
		/** MAC filtering states **/
		var wlanMacFilterEnable24ghz =  $('wlan_macfilter_enable24ghz'),
		wlanMacFilterState24ghz = $('wlan_macfilter_state24ghz');
		cntMacFiltring24ghz = $('cnt_macfilter24ghz');
		if (this.objects.WLAN.MACFiltering.Mode === "Off") {
			wlanMacFilterEnable24ghz.checked = false;
			wlanMacFilterState24ghz.style.color = "red";
// 			wlanMacFilterEnable.value = t("general.btn.enable", "");
			Sah.translator.change(wlanMacFilterEnable24ghz, "general.btn.enable", "X Disabled");
			Sah.translator.change(wlanMacFilterState24ghz, "general.label.disabled", "X Disabled");
			cntMacFiltring24ghz.setStyle({visibility:'hidden'});
		} else if (this.objects.WLAN.MACFiltering.Mode === "WhiteList") {
			wlanMacFilterEnable24ghz.checked = true;
			wlanMacFilterState24ghz.style.color = "#38A403";
// 			wlanMacFilterEnable.value = t("general.btn.disable", "");
			Sah.translator.change(wlanMacFilterEnable24ghz, "general.btn.disable", "X Disabled");
			Sah.translator.change(wlanMacFilterState24ghz, "general.label.enabled", "X Enabled");
			cntMacFiltring24ghz.setStyle({visibility:'visible'});  
			this.fillTwoMacFiltring("2.4GHZ");
		}

		/** MAC filtering states **/
		var wlanMacFilterEnable5ghz =  $('wlan_macfilter_enable5ghz'),
		wlanMacFilterState5ghz = $('wlan_macfilter_state5ghz');
		cntMacFiltring5ghz = $('cnt_macfilter5ghz');
		if (this.objects.WLAN5G.MACFiltering.Mode === "Off") {
			wlanMacFilterEnable5ghz.checked = false;
			wlanMacFilterState5ghz.style.color = "red";
// 			wlanMacFilterEnable.value = t("general.btn.enable", "");
			Sah.translator.change(wlanMacFilterEnable5ghz, "general.btn.enable", "X Disabled");
			Sah.translator.change(wlanMacFilterState5ghz, "general.label.disabled", "X Disabled");
			cntMacFiltring5ghz.hide();
		} else if (this.objects.WLAN5G.MACFiltering.Mode === "WhiteList") {
			wlanMacFilterEnable5ghz.checked = true;
			wlanMacFilterState5ghz.style.color = "#38A403";
// 			wlanMacFilterEnable.value = t("general.btn.disable", "");
			Sah.translator.change(wlanMacFilterEnable5ghz, "general.btn.disable", "X Disabled");
			Sah.translator.change(wlanMacFilterState5ghz, "general.label.enabled", "X Enabled");
			cntMacFiltring5ghz.show();
			this.fillTwoMacFiltring("5GHZ");
		}
		if((this.objects.WLAN5G.MACFiltering.Mode === "Off")&&(this.objects.WLAN.MACFiltering.Mode === "Off")){
			$("macfilteringtwo").style="";
			$$(".mactitletable").each(Element.hide);
		}else{
			$("macfilteringtwo").style="display:inline-block;float:left;";
			$$(".mactitletable").each(Element.show);
		}

	},

	activateMacFiltering: function (band) {
		this.logger.info(band+" Mac Filtring Enabled "+band);
		if(band==="2.4GHZ"){
			$('wlan_macfilter_enable24ghz').checked = true;
			$('wlan_macfilter_state24ghz').style.color = "#38A403";
			Sah.translator.change($('wlan_macfilter_enable24ghz'), "general.btn.disable", "X Disabled");
			Sah.translator.change($('wlan_macfilter_state24ghz'), "general.label.enabled", "X Enabled");
			$('cnt_macfilter24ghz').setStyle({visibility:'visible'}); 
			this.fillTwoMacFiltring("2.4GHZ");
			this.objects.WLAN.MACFiltering.Mode = "WhiteList";
		
			// WPS graphical disabling 
			Sah.translator.change($('wlan_wps_bt_enable24ghz'), "general.btn.enable", "X Enabled");
			Sah.translator.change($('wlan_wps_pin_enable24ghz'), "general.btn.enable", "X Enabled");

			
			Sah.translator.change($('wlan_wps_bt_state24ghz'), "general.label.disabled", "X Disabled");
			Sah.translator.change($('wlan_wps_pin_state24ghz'), "general.label.disabled", "X Disabled");
			$('wlan_wps_pin_state24ghz').style.color = $('wlan_wps_bt_state24ghz').style.color = "red";
			//--$$('.cnt-wlan-wps-global').each(Element.show);
			//--$("wps_mask").show();
			//~document.fire('WPS:Desactivate',true); 
		}else if(band==="5GHZ"){
			$('wlan_macfilter_enable5ghz').checked = true;
			$('wlan_macfilter_state5ghz').style.color = "#38A403";
			Sah.translator.change($('wlan_macfilter_enable5ghz'), "general.btn.disable", "X Disabled");
			Sah.translator.change($('wlan_macfilter_state5ghz'), "general.label.enabled", "X Enabled");
			$('cnt_macfilter5ghz').show();
			this.fillTwoMacFiltring("5GHZ");
			this.objects.WLAN5G.MACFiltering.Mode = "WhiteList";
		
			// WPS graphical disabling 
			Sah.translator.change($('wlan_wps_bt_enable5ghz'), "general.btn.enable", "X Enabled");
			Sah.translator.change($('wlan_wps_pin_enable5ghz'), "general.btn.enable", "X Enabled");

			
			Sah.translator.change($('wlan_wps_bt_state5ghz'), "general.label.disabled", "X Disabled");
			Sah.translator.change($('wlan_wps_pin_state5ghz'), "general.label.disabled", "X Disabled");
			$('wlan_wps_pin_state5ghz').style.color = $('wlan_wps_bt_state5ghz').style.color = "red";
			//--$$('.cnt-wlan-wps-global').each(Element.show);
			//--$("wps_mask").show();
			//~document.fire('WPS:Desactivate',true); 

		}

	},
	desactivateMacFiltering: function (band) {
		if(band==="2.4GHZ"){
			if(this.objects.WLAN.MACFiltering.Mode !="Off") {
				$('wlan_macfilter_enable24ghz').checked = false;
				$('wlan_macfilter_state24ghz').style.color = "red";
				Sah.translator.change($('wlan_macfilter_enable24ghz'), "general.btn.enable", "X Enabled");
				Sah.translator.change($('wlan_macfilter_state24ghz'), "general.label.disabled", "X Disabled");
				$('cnt_macfilter24ghz').setStyle({visibility:'hidden'});	
				this.objects.WLAN.MACFiltering.Mode = "Off";
			}
		}else if(band==="5GHZ"){
			if(this.objects.WLAN5G.MACFiltering.Mode !="Off") {
				$('wlan_macfilter_enable5ghz').checked = false;
				$('wlan_macfilter_state5ghz').style.color = "red";
				Sah.translator.change($('wlan_macfilter_enable5ghz'), "general.btn.enable", "X Enabled");
				Sah.translator.change($('wlan_macfilter_state5ghz'), "general.label.disabled", "X Disabled");
				$('cnt_macfilter5ghz').hide();		
				this.objects.WLAN5G.MACFiltering.Mode = "Off";
			}
		}
	},

	fillTwoMacFiltring: function (band) {
		if(band==="2.4GHZ"){
			if (!this._macfilter24ghzInitialized) {			
				this._knownHosts24ghz = {};
				this._macs24ghz = {};
				this._macRows24ghz = {};
				$A(this.objects.Hosts).each(function (host) {
					this._knownHosts24ghz[host.PhysAddress] = host;
				}, this);
				this._macfilterRowTemplate24ghz = $("wlan_mac_template24ghz");
				$('wlan_mac_table24ghz').select("tr.simple").each(function (e) {
					e.remove();
				});
								
				$H(this.objects.WLAN.MACFiltering.Entry).each(function (reg) {				
					if(reg[1]&&reg[1].MACAddress){					
						this.addRowMacFiltring(reg[1].MACAddress,"2.4GHZ");
						this._macRows24ghz[reg[0]] = reg[1].MACAddress;
						this._macs24ghz[reg[1].MACAddress] = reg[1];
					}

				}, this);
				$('wlan_mac_table24ghz').select("tr.simple").each(function (e) {
					e.show();
				});
				
				$('wlan_host_list24ghz').innerHTML = "";
				this._hosts24ghz = {};
				$A(this.objects.Hosts).each(function (host) {
					if ((host.Tags.toLowerCase().indexOf("wifi")>=0) && (host.DiscoverySource.toLowerCase().indexOf("self")<0) &&  this._macs24ghz[host.PhysAddress] === undefined) {
						host.Name = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', host.Name || host.PhysAddress.replace(/:/g, '-')));
						$('wlan_host_list24ghz').appendChild(new Element('option', {
							value: host.PhysAddress
						}).update(host.Name));
						this._hosts24ghz[host.PhysAddress] = host;
					}
				}, this);
				this.AddCustomMac24ghz = new Element("option", {
					"value": "other"
				});
				this.AddCustomMac24ghz.update(t("advconfig.wifi.label.othername", "other"));
				$('wlan_host_list24ghz').insert(this.AddCustomMac24ghz);
				this.selectHostMacFiltring("2.4GHZ");
			}
		}else{
			if (!this._macfilter5ghzInitialized) {			
				this._knownHosts5ghz = {};
				this._macs5ghz = {};
				this._macRows5ghz = {};
				$A(this.objects.Hosts).each(function (host) {
					this._knownHosts5ghz[host.PhysAddress] = host;
				}, this);
				this._macfilterRowTemplate5ghz = $("wlan_mac_template5ghz");
				$('wlan_mac_table5ghz').select("tr.simple").each(function (e) {
					e.remove();
				});			
				$H(this.objects.WLAN5G.MACFiltering.Entry).each(function (reg) {				
					if(reg[1]&&reg[1].MACAddress){					
						this.addRowMacFiltring(reg[1].MACAddress,"5GHZ");
						this._macRows5ghz[reg[0]] = reg[1].MACAddress;
						this._macs5ghz[reg[1].MACAddress] = reg[1];
					}

				}, this);
				$('wlan_mac_table5ghz').select("tr.simple").each(function (e) {
					e.show();
				});
				$('wlan_host_list5ghz').innerHTML = "";
				this._hosts5ghz = {};
				$A(this.objects.Hosts).each(function (host) {
					if ((host.Tags.toLowerCase().indexOf("wifi")>=0) && (host.DiscoverySource.toLowerCase().indexOf("self")<0) &&  this._macs5ghz[host.PhysAddress] === undefined) {
						host.Name = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', host.Name || host.PhysAddress.replace(/:/g, '-')));
						$('wlan_host_list5ghz').appendChild(new Element('option', {
							value: host.PhysAddress
						}).update(host.Name));
						this._hosts5ghz[host.PhysAddress] = host;
					}
				}, this);
				this.AddCustomMac5ghz = new Element("option", {
					"value": "other"
				});
				this.AddCustomMac5ghz.update(t("advconfig.wifi.label.othername", "other"));
				$('wlan_host_list5ghz').insert(this.AddCustomMac5ghz);
				this.selectHostMacFiltring("5GHZ");
			}
		}
	},
	
	toggleMacFiltring: function (band) {
		var getband = band;
		// security type none + mac filtering off (careful logic is reversed!)
		 if((($('wlan_security_type24ghz').value.toLowerCase()  === "none") &&(this.objects.WLAN.MACFiltering.Mode.toLowerCase() === "whitelist")) || (($('wlan_security_type5ghz').value.toLowerCase()  === "none") && (this.objects.WLAN5G.MACFiltering.Mode.toLowerCase() === "whitelist"))){
					
				ctl.msgbox.Show(ctl.msgbox.QUESTION.VALID_CANCEL, t('advconfig.wifi.general.info.nosecurity1',
				 'X Be careful, if you validate, then your WiFi will be no more secured.'),(function () {
					this.fillForm2();
				}.bind(this)), this.toggleMacFiltringProceed.bind(this,getband)  );
			
		}
		else {
			this.toggleMacFiltringProceed(getband);
		}
	},
	
	toggleMacFiltringProceed: function(band) {
		if(band==="2.4GHZ"){
			this.objects.WLAN.MACFiltering.Mode = (this.objects.WLAN.MACFiltering.Mode === "WhiteList") ? "Off" : "WhiteList";
// 			this.markAsLoading();
		
			var originParams = {
				"MACFiltering": {
				    "Mode": this.objects.WLAN.MACFiltering.Mode
				}
			};
		
			if ( this.objects.WLAN.MACFiltering.Mode === "Off" ) {
				originParams.WPS = {
					"Enable": false
				};
			}
		
			var savedObject = this.createSavedObject(originParams,"2.4GHZ"); 
			this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap0 + ":setWLANConfig", {
				"mibs": savedObject
			}, {
				onSuccess: function (mode) {
					if (mode === "Off") {
						$('wlan_macfilter_enable24ghz').checked = false;
						$('wlan_macfilter_state24ghz').style.color = "red";
						Sah.translator.change($('wlan_macfilter_enable24ghz'), "general.btn.enable", "X Disabled");
						Sah.translator.change($('wlan_macfilter_state24ghz'), "general.label.disabled", "X Disabled");
						$('cnt_macfilter24ghz').setStyle({visibility:'hidden'});
						ctl.popup.Close();
						this.markAsLoaded();
						this.whenSaved();
					} else {
						document.fire('WPS24GHZ:Desactivate',true); 
						this.whenSaved();
					}
				}.bind(this, this.objects.WLAN.MACFiltering.Mode),
				onFailure: this.whenNotSaved.bind(this)
			});
		}else if(band==="5GHZ"){
			this.objects.WLAN5G.MACFiltering.Mode = (this.objects.WLAN5G.MACFiltering.Mode === "WhiteList") ? "Off" : "WhiteList";
// 			this.markAsLoading();
		
			var originParams = {
				"MACFiltering": {
				    "Mode": this.objects.WLAN5G.MACFiltering.Mode
				},
				"WPS": {
						"Enable": false
					}
			};
		
			if ( this.objects.WLAN5G.MACFiltering.Mode === "Off") {
				originParams.WPS = {
					"Enable": false
				};
			}
		
			var savedObject = this.createSavedObject(originParams,"5GHZ"); 
			this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanvap1 + ":setWLANConfig", {
				"mibs": savedObject
			}, {
				onSuccess: function (mode) {
					
					if (mode === "Off") {
						$('wlan_macfilter_enable5ghz').checked = false;
						$('wlan_macfilter_state5ghz').style.color = "red";
						Sah.translator.change($('wlan_macfilter_enable5ghz'), "general.btn.enable", "X Disabled");
						Sah.translator.change($('wlan_macfilter_state5ghz'), "general.label.disabled", "X Disabled");
						$('cnt_macfilter5ghz').hide();
						ctl.popup.Close();
						this.markAsLoaded();
						this.whenSaved();
					} else {
						document.fire('WPS5GHZ:Desactivate',true); 
						this.whenSaved();
					}
				}.bind(this, this.objects.WLAN5G.MACFiltering.Mode),
				onFailure: this.whenNotSaved.bind(this)
			});
			
		}     
	},

	selectHostMacFiltring: function (band) {
		if(band==="5GHZ"){ 
			if ($('wlan_host_list5ghz').value !== "other") {
				$('wlan_host_ip5ghz').update("");
				$('mac-filtring-physAddress5ghz').hide();
				$('wlan_host_mac5ghz').show();
				var host = this._hosts5ghz[$('wlan_host_list5ghz').value];
				if (host) {
					$('wlan_host_ip5ghz').update(host.IPAddress);
					$('wlan_host_mac5ghz').update(host.PhysAddress);
				}
			} else {
				$('wlan_host_ip5ghz').update(t("advconfig.wifi.label.othername", "other"));
				$('mac-filtring-physAddress5ghz').show();
				$('wlan_host_mac5ghz').hide();
			}

		}else{
			if ($('wlan_host_list24ghz').value !== "other") {
				$('wlan_host_ip24ghz').update("");
				$('mac-filtring-physAddress24ghz').hide();
				$('wlan_host_mac24ghz').show();
				var host = this._hosts24ghz[$('wlan_host_list24ghz').value];
				if (host) {
					$('wlan_host_ip24ghz').update(host.IPAddress);
					$('wlan_host_mac24ghz').update(host.PhysAddress);
				}
			} else {
				$('wlan_host_ip24ghz').update(t("advconfig.wifi.label.othername", "other"));
				$('mac-filtring-physAddress24ghz').show();
				$('wlan_host_mac24ghz').hide();
			}

		}
	},

	addHostMacFiltring: function (band) {
		if(band==="2.4GHZ"){ 
			var mac = $('wlan_host_list24ghz').value;
			if (mac === "other") {
				mac = $('mac-filtring-physAddress24ghz').value;
			}
			/*if (!Sah.Validations.isValidMacAddress(mac)) {
				$("mac_error").update(t("advconfig.wifi.error.macaddress", "Invalid MAC Address"));
				$("config.wifi.macerror").show();
				this.logger.error("unable to save mac", mac._errors);
				return false;
			}*/
			var host = this._knownHosts24ghz[mac];
// 			this.markAsLoading();
			var lastMacId = 0;
			for (var r in this._macRows24ghz) {
				row= parseInt(r,10);
				if (row > lastMacId) lastMacId = row;
			}
			this._macRows24ghz[parseInt(lastMacId) + 1] = mac;

			var macFiltringList = {};
			for (var row1 in this._macRows24ghz) {
				macFiltringList[row1] = {
					MACAddress: this._macRows24ghz[row1]
				};
			}
		        
			var originParams = {
				MACFiltering: {
					Entry: macFiltringList
				}
			};  
			this.macFiltringList= macFiltringList;                                
			var savedObject = this.createSavedObject(originParams,"2.4GHZ"); 
			this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanradio0 + ":setWLANConfig", {
				"mibs": savedObject
			}, {
				onSuccess: this.savedNewMac.bind(this, mac),
				onFailure: this.whenNotSaved.bind(this)
			});
		}else{
			var mac = $('wlan_host_list5ghz').value;
			if (mac === "other") {
				mac = $('mac-filtring-physAddress5ghz').value;
			}
			/*if (!Sah.Validations.isValidMacAddress(mac)) {
				$("mac_error").update(t("advconfig.wifi.error.macaddress", "Invalid MAC Address"));
				$("config.wifi.macerror").show();
				this.logger.error("unable to save mac", mac._errors);
				return false;
			}*/
			var host = this._knownHosts5ghz[mac];
// 			this.markAsLoading();
			var lastMacId = 0;
			for (var r in this._macRows5ghz) {
				row= parseInt(r,10);
				if (row > lastMacId) lastMacId = row;
			}
			this._macRows5ghz[parseInt(lastMacId) + 1] = mac;

			var macFiltringList = {};
			for (var row1 in this._macRows5ghz) {
				macFiltringList[row1] = {
					MACAddress: this._macRows5ghz[row1]
				};
			}
		        
			var originParams = {
				MACFiltering: {
					Entry: macFiltringList
				}
			}; 
			
			  this.macFiltringList= macFiltringList;                         
			
			var savedObject = this.createSavedObject(originParams,"5GHZ");   
			this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanradio1 + ":setWLANConfig", {
				"mibs": savedObject
			}, {
				onSuccess: this.savedNewMac.bind(this, mac,band),
				onFailure: this.whenNotSaved.bind(this)
			});
		}
	},
	savedNewMac: function (mac,band) {
   
		/*this.addRowMacFiltring(mac,band);
		this.whenSaved();*/
		Sah.redirect("/advConfigWifi.html");
	},

	addRowMacFiltring: function (mac,band) {
		
		var host ,tr;
			
		if(band==="5GHZ"){

			host = this._knownHosts5ghz[mac];
			// sanitizes name field
			for(var key in host) {
				if(key === "Name") {
					host[key] = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', host[key]));
				}			
			}
			tr = this._macfilterRowTemplate5ghz.clone(true);
		 }else{
			host = this._knownHosts24ghz[mac];
			// sanitizes name field
			for(var key in host) {
				if(key === "Name") {
					host[key] = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', host[key]));
				}			
			}
			tr = this._macfilterRowTemplate24ghz.clone(true);
		}
			if (!host) {
				tr.writeAttribute("id", mac);
				tr.writeAttribute("class", "simple");
				tr.select('[name]').each(function (e) {
					switch (e.readAttribute('name')) {
						case 'Name':
							e.update(t("advconfig.wifi.label.othername", "other"));
							break;
						case 'IPAddress':
							e.update(t("advconfig.wifi.label.othername", "other"));
							break;
						case 'PhysAddress':
							e.update(mac);
							break;

					}
				}, this);
				
				tr.down('.btn-delete').observe('click', this.deleteHostMacFiltring.bind(this, mac,band));
				if(band==="2.4GHZ"){
					$('wlan_mac_table24ghz').appendChild(tr);
				}else{
					$('wlan_mac_table5ghz').appendChild(tr);
				}
			} else {
				
				tr.writeAttribute("id", mac);
				tr.writeAttribute("class", "simple");
				tr.select('[name]').each(function (e) {
					e.update(host[e.readAttribute('name')]);
				}, this);
				tr.down('.btn-delete').observe('click', this.deleteHostMacFiltring.bind(this, mac,band));			
				if(band==="2.4GHZ"){	
					$('wlan_mac_table24ghz').appendChild(tr);
				}else{
					$('wlan_mac_table5ghz').appendChild(tr);
				}
			}
		
	},

	deleteHostMacFiltring: function (mac,band) {
// 		this.markAsLoading();
		var macFiltringList = {};
		if(band=="2.4GHZ"){
			for (var row1 in this._macRows24ghz) {
				if (this._macRows24ghz[row1] != mac) {
					macFiltringList[row1] = {
						MACAddress: this._macRows24ghz[row1]
					};
				}

			}
			var originParams = {
				MACFiltering: {
					Entry: macFiltringList
				}
			};                                
			var savedObject = this.createSavedObject(originParams,"2.4GHZ"); 
			this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanradio0 + ":setWLANConfig", {
				"mibs": savedObject
			}, {
				onSuccess: this.whenSaved.bind(this),
				onFailure: this.whenNotSaved.bind(this)
			});
		}else{
			for (var row1 in this._macRows5ghz) {
				if (this._macRows5ghz[row1] != mac) {
					macFiltringList[row1] = {
						MACAddress: this._macRows5ghz[row1]
					};
				}

			}
			var originParams = {
				MACFiltering: {
					Entry: macFiltringList
				}
			};                                
			var savedObject = this.createSavedObject(originParams,"5GHZ"); 
			this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanradio1 + ":setWLANConfig", {
				"mibs": savedObject
			}, {
				onSuccess: Sah.redirect("/advConfigWifi.html"),
				onFailure: this.whenNotSaved.bind(this)
			});
		}

	},
	getUrlHashes : function (){
		return location.hash.split("#")
	}
  
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/wifi/scheduling.js */

Wifi.Scheduling = {};
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/wifi/simple.js */

Wifi.Simple = Class.create(Sah.AuthenticatedForm, /** @lends Wifi.General.Basic */ {
	initialize: function ($super, form) {
		this.walnRadio0 = "";
		this.walnRadio1 = "";
		this.walnVap0 = "";
		this.walnVap1 = "";

		$('left-wifi-link').addClassName('current');
		$$('#header-hmenu li.active')[0].removeClassName('active');
		$('hmenu-wifi').addClassName('active');
		$("two-wifi-config").hide();
		$("one-wifi-config").hide();
		$super(form); /*checking for the number of wifi interfaces*/
		// this.interfaces = Wifi.getWifiInterfaces(config.BUILD_HARDWARE);
		this.checkingBoxModel();

		$('bt_enable').observe('click', this.toggleWifi.bind(this, true));
		$('bt_disable').observe('click', this.toggleWifi.bind(this, false));
		$('bt_enable2').observe('click', this.toggleWifi.bind(this, true));
		$('bt_disable2').observe('click', this.toggleWifi.bind(this, false));
		$("keydisplay").observe("click", this.toggleSecurityKeyDisplay.bind(this));
		$("keydisplay2").observe("click", this.toggleSecurityKeyDisplay.bind(this));

		this.client.execute("sysbus.Screen:getShowWifiPassword", {}, {
			onSuccess: function(resultObject) {$("keydisplay").checked = resultObject.result.status; $("keydisplay2").checked = resultObject.result.status;},
			onFailure: function() {$("keydisplay").checked = false; $("keydisplay2").checked = false;}
		});
	},

	checkingBoxModel: function (result) { /*setting default hgw model & wifisetting & loading them*/
		this.needs("WIFI", {
			path: "sysbus.NeMo.Intf.lan:getMIBs",
			method:"execute",
			methodParams:{
				mibs:"base wlanvap wlanradio",
				flag:"wlanvap || wlanradio",
				traverse:"down"
				
			}    
		});  
		this.needs("WifiStatus", {
			path: "sysbus.NMC.Wifi:get",
			method:"execute",
			methodParams:{}    
		});  

		this.load();
	},

	objectsLoaded: function () {		
		this.objects.wlanRadios = [];
		for (var k in this.objects.WIFI.wlanradio) {
			if (!this.objects.WIFI.wlanradio.hasOwnProperty(k))
				continue;
			this.objects.wlanRadios.push(k);
		}

		if (this.objects.wlanRadios.length > 0) {
			if (this.objects.WIFI.wlanradio[this.objects.wlanRadios[0]].OperatingFrequencyBand === "2.4GHz") {
				this.walnRadio0 = this.objects.wlanRadios[0];
				if (this.objects.wlanRadios[1]) {
					this.walnRadio1 = this.objects.wlanRadios[1];
				}
			} else if (this.objects.wlanRadios[1]) {
				this.walnRadio0 = this.objects.wlanRadios[1];
				this.walnRadio1 = this.objects.wlanRadios[0];
			}
		}

		this.client.execute("sysbus.Wificom.OpenMode:getStatus", {}, {
			onSuccess: this.loadWifiCom.bind(this),
			onFailure: this.loadWifiCom.bind(this)
		});
	},

	loadWifiCom: function (result) {	
		if (result && result.result && result.result.data) {
			this.objects.Wificom = result.result.data;
		} else {
			this.objects.Wificom = {
				Active: false,
				Enable: false,
				Status: "disabled"
			};
		}
		this.client.execute("sysbus.Wificom.SecureMode:getStatus", {}, {
			onSuccess: this.loadWifiComSecureMode.bind(this),
			onFailure: this.loadWifiComSecureMode.bind(this)
		});
	},
	
	loadWifiComSecureMode: function (result) {
		if (result && result.result && result.result.data) {
			this.objects.wifiComSecureMode = result.result.data;
		} else {
			this.objects.wifiComSecureMode = {
				Enable: false,
				Status: "deactivated"
			};
		}
		if (this.objects.Wificom.Enable || this.objects.wifiComSecureMode.Enable) {
			$('orange-wifi-link').show();
		}
		if((this.walnRadio0 !== "")&&(this.walnRadio1 !== "")){
			this.objects.WLAN = this.objects.WIFI.wlanvap.wl0;
			this.objects.WLAN.SSID = this.objects.WIFI.wlanvap.wl0.SSID;
			this.objects.WLAN.Status = this.objects.WIFI.base.wl0.Status;
			this.objects.WLAN5 = this.objects.WIFI.wlanvap.wl1;
			this.objects.WLAN5.SSID = this.objects.WIFI.wlanvap.wl1.SSID;
			this.objects.WLAN5.Status = this.objects.WIFI.base.wl1.Status;
			// $("WLAN.Security.AvailableWifi").update("WiFi 2.4 GHz");
			
		}else if(this.walnRadio0 !== ""){
			this.objects.WLAN = this.objects.WIFI.wlanvap.wl0;
			this.objects.WLAN.SSID = this.objects.WIFI.wlanvap.wl0.SSID;
			this.objects.WLAN.Status = this.objects.WIFI.base.wl0.Status;
		
			
		}else{
			this.objects.WLAN = this.objects.WIFI.wlanvap.wl1;
			this.objects.WLAN.SSID = this.objects.WIFI.wlanvap.wl1.SSID;
				this.objects.WLAN.Status = this.objects.WIFI.base.wl1.Status;
			
			
		}
		var same=this.objects.WifiStatus.ConfigurationMode;
				if(same){
			if(!this.objects.WLAN.Status) {
				this.objects.WLAN=this.objects.WLAN5
			}
			this.fillForm();			
		}else{						
			this.fillForm2();
		}
		this.checkActivatedWifiBand();
		this.form.enable();
	},
	
	checkActivatedWifiBand: function(){
		var same=this.objects.WifiStatus.ConfigurationMode;
		if(same) {
			$("WLAN.Security.AvailableWifi").show();
		}
		else {
			$("WLAN.Security.AvailableWifi").hide();
		}
		if ((this.objects.WifiStatus.Enable === true && this.objects.WifiStatus.Status === true) || (this.objects.WifiStatus.Enable === false && this.objects.WifiStatus.Status === true)) {
			if(this.objects.WIFI.base.wl0.Enable && this.objects.WIFI.base.wl1.Enable) {
				Sah.translator.change($("WLAN.Security.AvailableWifi"), "config.wifi.general.network.bothbandsactivated", "WiFi 2.4 GHz and WiFi 5 GHz");
				Sah.translator.change($("bothBandsActivated"), "config.wifi.general.network.bothbandsactivated", "WiFi 2.4 GHz and WiFi 5 GHz");
				$("onlyWifi24ghzActivated").hide();
				$("onlyWifi5ghzActivated").hide();
				$("bothBandsActivated").show();
			}
			else if(this.objects.WIFI.base.wl0.Enable){			
				$("onlyWifi24ghzActivated").show();
				$("onlyWifi5ghzActivated").hide();
				$("bothBandsActivated").hide();
			}
			else if(this.objects.WIFI.base.wl1.Enable){			
				$("onlyWifi24ghzActivated").hide();
				$("onlyWifi5ghzActivated").show();
				$("bothBandsActivated").hide();
			}
		}
		else {
			$("bothBandsActivated").hide();
			$("onlyWifi24ghzActivated").hide();
			$("onlyWifi5ghzActivated").hide();
			$("WLAN.Security.AvailableWifi").hide();
		}
	},

	fillForm: function () {
		$("one-wifi-config").show();
		$("two-wifi-config").hide();
		this.fromObject(this.objects);
		if (this.objects.WLAN.Security.ModeEnabled.substring(0, 3) === "WPA") {
			$("WLAN.Security.KeyPassPhrase").innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.objects.WLAN.Security.KeyPassPhrase));
		} else {
			$("WLAN.Security.KeyPassPhrase").innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.objects.WLAN.Security.WEPKey));
		}
		if (this.objects.WLAN.Security.ModeEnabled.toLowerCase() === "none") {
			$("security-key-tr").hide();
		}
		
		if ((this.objects.WifiStatus.Enable === true && this.objects.WifiStatus.Status === true) || (this.objects.WifiStatus.Enable === false && this.objects.WifiStatus.Status === true)) {
			$("wifiEnabled").show();
			$("wifiDisabled").hide();
		} else{
			$("wifiDisabled").show();
			$("wifiEnabled").hide();
		}
		var ssid = this.objects.WLAN.SSID;
		$("WLAN.SSID").innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', ssid));
	},
	fillForm2: function () {		
		$("two-wifi-config").show();
		$("one-wifi-config").hide();
		this.fromObject(this.objects);
		if (this.objects.WLAN.Security.ModeEnabled.substring(0, 3) === "WPA") {
			$("WLAN.Security.KeyPassPhrase2.4").innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.objects.WLAN.Security.KeyPassPhrase));
		} else {
			$("WLAN.Security.KeyPassPhrase2.4").innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.objects.WLAN.Security.WEPKey));
		}

		if (this.objects.WLAN5.Security.ModeEnabled.substring(0, 3) === "WPA") {
			$("WLAN.Security.KeyPassPhrase5").innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.objects.WLAN5.Security.KeyPassPhrase));
		} else {
			$("WLAN.Security.KeyPassPhrase5").innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.objects.WLAN5.Security.WEPKey));
		}

		if (this.objects.WLAN.Security.ModeEnabled.toLowerCase() === "none") {
			$("WLAN.Security.KeyPassPhrase2.4").hide();
		}
		if (this.objects.WLAN5.Security.ModeEnabled.toLowerCase() === "none") {
			$("WLAN.Security.KeyPassPhrase5").hide();
		}
		if ((this.objects.WifiStatus.Enable === true && this.objects.WifiStatus.Status === true) || (this.objects.WifiStatus.Enable === false && this.objects.WifiStatus.Status === true)) {
			$("wifiEnabled2").show();
			$("wifiDisabled2").hide();
		} else if ((this.objects.WifiStatus.Enable === false && this.objects.WifiStatus.Status === false) || (this.objects.WifiStatus.Enable === true && this.objects.WifiStatus.Status === false)) {
			$("wifiDisabled2").show();
			$("wifiEnabled2").hide();
		}
		var ssid2_4 = this.objects.WLAN.SSID;
		var ssid5 = this.objects.WLAN5.SSID;
		$("WLAN.SSID2.4").innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', ssid2_4));
		$("WLAN.SSID5").innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', ssid5));
	},
	toggleWifiInterfaces: function (value, handlers) {
		this.client.execute("sysbus.NMC.Wifi:set", {
			"Enable": value,
			"Status": value
		}, handlers);
	},

	toggleWifi: function (enable) {
		var handlers = {
			onSuccess: this.whenSaved.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		}

		if (!enable) {
			// this.objects.WLAN.Enable = false;
			this.objects.WifiStatus.Enable = false;
			this.objects.WifiStatus.Status = false;

			// All possible value are: "Enabled","Disabled","Waiting","Ongoing","Error"
			if (this.objects.Wificom.Enable) {
				ctl.msgbox.Show(ctl.msgbox.QUESTION.YES_NO, t('config.wifi.general.info.wificom', 'X wifi comm sera désactivé'), undefined, (function () {
					this.toggleWifiInterfaces(false, handlers);
				}.bind(this)));
			} else {
				this.toggleWifiInterfaces(false, handlers);

			}
		} else {
			this.objects.WifiStatus.Enable = true;
			this.objects.WifiStatus.Status = true;
			this.toggleWifiInterfaces(true, handlers);

		}
	},
	
	toggleSecurityKeyDisplay: function() {
		var shouldDisplay = this.objects.WifiStatus.ConfigurationMode ? $("keydisplay").checked : $("keydisplay2").checked;
		$("keydisplay").checked = shouldDisplay;
		$("keydisplay2").checked = shouldDisplay;
		this.client.execute("sysbus.Screen:setShowWifiPassword", {"Enable":shouldDisplay}, {
			onSuccess: function() {},
			onFailure: function() {}
		});
	},

	whenSaved: function (obj) {
		this.logger.info("object saved");	
		ctl.popup.Close();
		window.location.reload();
	},

	whenNotSaved: function (obj) {
		this.logger.warn("failed to save object");
		this.logger.warn(obj);
		var notification = new Sah.Widget.ObjectNotification(obj, t("config.wifi.general.label.title", "X Wifi"));
		notification.show();
		var same=this.objects.WifiStatus.ConfigurationMode;		
		if(same){
			this.fillForm();			
		}else{
			this.fillForm2();
		}
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/wifi/ssid.js */

Wifi.Ssid = Class.create(Sah.AuthenticatedForm, /** @lends Wifi.General.Basic */ {
	initialize: function ($super, form) {
		$super(form);
		this.walnRadio0 = "";
		this.walnRadio1 = "";
		this.sourcePage = this.getFirstHashParams("simpleWifiConfig");
		this.urlHashes = this.getUrlHashes();
		this.setupBreadCrumb();
		/*checking for the number of wifi interfaces*/
		// this.interfaces = Wifi.getWifiInterfaces(config.BUILD_HARDWARE);
		this.checkingBoxModel();
		//Sah.translator.change($("ssid_error"), "config.wifi.ssid.label.error.orange", "X orange is forbidden");
		Sah.translator.change($("orangesuffix"), "config.wifi.ssid.label.error.orangesuffix", "X orange is forbidden");
		$("config.wifi.ssiderror").show();
		$("bt_ssid_discard").observe("click", this.onCancel.bind(this));
		$("bt_ssid_save").observe("click", this.onSave.bind(this));

	},
	checkingBoxModel:function(){

		/*setting default hgw model & wifisetting & loading them*/
		this.needs("WIFI", {
			path: "sysbus.NeMo.Intf.lan:getMIBs",
			method:"execute",
			methodParams:{
				mibs:"base wlanvap wlanradio",
				flag:"wlanvap || wlanradio",
				traverse:"down"

			}
		});
		this.load();
	},

	objectsLoaded: function () {
		this.objects.wlanRadios = [];
		for (var k in this.objects.WIFI.wlanradio) {
			if (!this.objects.WIFI.wlanradio.hasOwnProperty(k))
				continue;
			this.objects.wlanRadios.push(k);
		}

		if (this.objects.wlanRadios.length > 0) {
			if (this.objects.WIFI.wlanradio[this.objects.wlanRadios[0]].OperatingFrequencyBand === "2.4GHz") {
				this.walnRadio0 = this.objects.wlanRadios[0];
				if (this.objects.wlanRadios[1]) {
					this.walnRadio1 = this.objects.wlanRadios[1];
				}
			} else if (this.objects.wlanRadios[1]) {
				this.walnRadio0 = this.objects.wlanRadios[1];
				this.walnRadio1 = this.objects.wlanRadios[0];
			}
		}
		this.client.execute("sysbus.Wificom.OpenMode:getStatus", {}, {
			onSuccess: this.loadWifiCom.bind(this),
			onFailure: this.loadWifiCom.bind(this)
		});
	},
	loadWifiCom: function (result) {
		if (result && result.result && result.result.data) {
			this.objects.Wificom = result.result.data;
		} else {
			this.objects.Wificom = {
				Active: false,
				Enable: false,
				Status: "disabled"
			};
		}
		this.client.execute("sysbus.Wificom.SecureMode:getStatus", {}, {
			onSuccess: this.loadWifiComSecureMode.bind(this),
			onFailure: this.loadWifiComSecureMode.bind(this)
		});
	},
	
	loadWifiComSecureMode: function (result) {
		if (result && result.result && result.result.data) {
			this.objects.wifiComSecureMode = result.result.data;
		} else {
			this.objects.wifiComSecureMode = {
				Enable: false,
				Status: "deactivated"
			};
		}
		this.objects.WLAN = this.objects.WIFI.wlanvap.wl0;
		this.objects.WLAN.Enable = this.objects.WIFI.base.wl0.Enable;
		this.objects.WLAN.Status = this.objects.WIFI.base.wl0.Status;
		if(this.walnRadio1 !== ""){
			this.objects.WLAN5G = this.objects.WIFI.wlanvap.wl1;

			this.objects.WLAN5G.Enable = this.objects.WIFI.base.wl1.Enable;
			this.objects.WLAN5G.Status = this.objects.WIFI.base.wl1.Status;
		}
		if(this.objects.Wificom.Enable || this.objects.wifiComSecureMode.Enable){
			$('orange-wifi-link').show();
		}
		if(this.urlHashes.indexOf("24ghz") !== -1){
			$("wlan_ssid").value = this.objects.WLAN.SSID;
		} else if(this.urlHashes.indexOf("5ghz") !== -1){
			$("wlan_ssid").value = this.objects.WLAN5G.SSID;
		}
		else{
			$("wlan_ssid").value = this.objects.WLAN.SSID;
		}
		
		if(this.objects.Wificom.Status.toLowerCase() == "enabled" && this.objects.wifiComSecureMode.Status.toLowerCase() == "enabled"){
			$("orangessid").update(this.objects.Wificom.SSID /*+ " <br> " + this.objects.wifiComSecureMode.SSID*/);
			this.orangeSSID=this.objects.Wificom.SSID;
		} else if(this.objects.Wificom.Status.toLowerCase() == "enabled"){
			$("orangessid").update(this.objects.Wificom.SSID);
				this.orangeSSID=this.objects.Wificom.SSID;
		} else if(this.objects.wifiComSecureMode.Status.toLowerCase() == "enabled"){
			$("orangessid").update(this.objects.wifiComSecureMode.SSID);
				this.orangeSSID=this.objects.wifiComSecureMode.SSID;
		} else {
			$("orangessid").update(this.objects.Wificom.SSID);
				this.orangeSSID=this.objects.Wificom.SSID;
		}

		this.form.enable();
		this.logger.info("object loaded done");
	},

	onSave: function () {

		setTimeout(function(){
			ctl.waiting.Hide()
		},30000);
		if ($("wlan_ssid")) {
			
			if(this.urlHashes.indexOf("24ghz") !== -1){
				this.objects.WLAN.SSID = $("wlan_ssid").value;
			} else if(this.urlHashes.indexOf("5ghz") !== -1){
				this.objects.WLAN5G.SSID = $("wlan_ssid").value;
			}
			else{
				this.objects.WLAN.SSID = $("wlan_ssid").value;
			}
		}
		if (this.objects.WLAN.SSID.replace(/^\s*|\s*$/g, '').toLowerCase() == this.objects.Wificom.SSID.toLowerCase()
				|| (this.objects.WLAN5G && (this.objects.WLAN5G.SSID.replace(/^\s*|\s*$/g, '').toLowerCase() == this.objects.Wificom.SSID.toLowerCase()) && this.urlHashes.indexOf("5ghz") !== -1)) {
			Sah.translator.change($("orangesuffix"), "config.wifi.ssid.label.error.orangesuffix", "X orange is forbidden");
			$("orangessid").update(this.objects.Wificom.SSID);	
			$('config.wifi.ssiderror').show();
		}
		else if (this.objects.WLAN.SSID.replace(/^\s*|\s*$/g, '').toLowerCase() == this.objects.wifiComSecureMode.SSID.toLowerCase()
				|| (this.objects.WLAN5G && (this.objects.WLAN5G.SSID.replace(/^\s*|\s*$/g, '').toLowerCase() == this.objects.wifiComSecureMode.SSID.toLowerCase()) && this.urlHashes.indexOf("5ghz") !== -1)) {
			Sah.translator.change($("orangesuffix"), "config.wifi.ssid.label.error.orangesuffix", "X orange is forbidden");
			$("orangessid").update(this.objects.wifiComSecureMode.SSID);	
			$('config.wifi.ssiderror').show();	
		} else if (this.objects.WLAN.SSID.length > 32 || (this.objects.WLAN5G.SSID.length > 32 && this.urlHashes.indexOf("5ghz") !== -1)) {
			Sah.translator.change($("ssid_error"), "config.wifi.ssid.label.error.length", "X ssid too long");
			$('config.wifi.ssiderror').show();
		}else if((this.objects.WLAN5G.SSID==this.objects.WLAN.SSID)&&(this.urlHashes.indexOf("both") <0)){ 
			ctl.msgbox.Show(ctl.msgbox.QUESTION.OK, t('advconfig.wifi.general.info.ssidmustbedifferent', 'X You have configured differently the WiFi 2.4 GHz and 5 GHz.'),  (function () {
					Sah.redirect("/advConfigWifi.html");	
				}.bind(this)));
		}
		else if (!Sah.Validations.isValidSSID(this.objects.WLAN.SSID) || this.objects.WLAN.SSID.length === 0 || ((!Sah.Validations.isValidSSID(this.objects.WLAN5G.SSID) || this.objects.WLAN5G.SSID.length === 0) && this.urlHashes.indexOf("5ghz") !== -1)) {
			Sah.translator.change($("ssid_error"), "config.wifi.ssid.label.error.invalid", "X invalid ssid");
			$('config.wifi.ssiderror').show();
		} else {
			
							ctl.msgbox.Show(ctl.msgbox.QUESTION.VALID_CANCEL, t('advconfig.wifi.general.info.confirmation', 
									'X You have modified your WiFi configuration.'),(function () {
											Sah.redirect("/advConfigWifi.html");	
									}.bind(this)),(function () {
											if(this.urlHashes.indexOf("24ghz") !== -1){
								var savedObject = {
									wlanvap:{
										wl0:{
											SSID:this.objects.WLAN.SSID
										}
									}
								};
							} else if(this.urlHashes.indexOf("5ghz") !== -1){
								if(this.walnRadio1 !== ""){
									var savedObject = {
										wlanvap:{
											wl1:{
												SSID:this.objects.WLAN5G.SSID
											}
										}
									};
								}
							} else if(this.urlHashes.indexOf("both") !== -1){
								var savedObject = {
									wlanvap:{
										wl0:{
											SSID:this.objects.WLAN.SSID
										}
									}
								};
								if(this.walnRadio1 !== ""){
									savedObject.wlanvap.wl1 = {
										SSID:this.objects.WLAN.SSID
									}
								}
							} else{
								var savedObject = {
									wlanvap:{
										wl0:{
											SSID:this.objects.WLAN.SSID
										}
									}
								};
							}
				// 			this.markAsLoading();
							this.client.execute("sysbus.NeMo.Intf.wl0:setWLANConfig",
							{
								"mibs": savedObject
							},
							{
								onSuccess: this.whenSaved.bind(this),
								onFailure: this.whenNotSaved.bind(this)
							});
			
			}.bind(this))  );
					
					
		
		}

		return true;
	},

	whenSaved: function (obj) {
		this.markAsLoaded();
		this.logger.info("object saved");
		return this.goBack();
	},

	whenNotSaved: function (obj) {
		this.markAsLoaded();
		this.logger.warn("failed to save object");
		this.logger.warn(obj);
		var notification = new Sah.Widget.ObjectNotification(obj, t("config.wifi.general.label.title", "X Wifi"));
		notification.show();
	},

	onCancel: function (event) {
		return this.goBack();
	},
	getFirstHashParams : function(defaultq) {
		var q = window.location.hash.substring(1);
		return q || defaultq;
	},

	getUrlHashes : function (){
		return location.hash.split("#")
	},
	setupBreadCrumb : function(){
		$('wifi-sourcepage').onclick = null;
		switch(this.sourcePage){
			case "advancedWifiConfig":

				Sah.translator.change($$("#wifi-sourcepage span")[0],"general.label.vmenu.config.advancedwifi","");
				$$("#content-left-vmenu li")[0].removeClassName('current');
				$$("#content-left-vmenu li")[2].addClassName('current');
				$('wifi-sourcepage').observe('click',function(e){					
					Sah.redirect("/advConfigWifi.html");				
				});
				break;
			default :
				$('wifi-sourcepage').observe('click',function(e){
					Sah.redirect("/configWifi.html");
				});
				break;
		}
		


	},
	goBack:function(){
		/*switch(this.sourcePage){
			case "advancedWifiConfig":
				return Sah.redirect("/advConfigWifi.html");
				break;
			default :
				return Sah.redirect("/configWifi.html");
				break;
		}*/

			Sah.redirect("/advConfigWifi.html");
		
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/wifi/scheduling/period.js */

/**
 * TODO: fixup documentation
 * Scheduling Period
 *
 */
Wifi.Scheduling.Period = Class.create(Sah.AuthenticatedForm, /** @lends Wifi.Scheduling.Period# **/ {
	_srcElm: [],

	initialize: function ($super, form) {
		$super(form);
		this.sourcePage = this.getFirstHashParams("simpleWifiConfig");
		this.setupBreadCrumb();
		this.allSpans = $CYT('#scheduling span.box-0([1-7])-([0-9]+)h');
		this.daysTranslations = {};
		this.statusTranslations= {};
		// Initialize events listners
		$$(".WifiSchedulingManagementSave").each(function (b) {
			b.observe("click", this.onSave.bind(this));
		}, this);

		$$(".WifiSchedulingManagementCancel").each(function (b) {
			b.observe("click", this.onCancel.bind(this));
		}, this);

		$$("input[type=radio][name=WifiScheduling.Enable]").each(function (radio) {
			radio.observe("click", this.drawTable.bind(this));
		}, this);
		document.observe('sah:admin:language:change', this.refrechGrid.bind(this));


		if (Sah.Form.cache['sysbus.Scheduler:getCompleteSchedules']) {
			Sah.Form.cache['sysbus.Scheduler:getCompleteSchedules'] = false;
		}
		this.setupKbNavigation();
		this.client.execute("sysbus.Wificom.OpenMode:getStatus", {}, {
			onSuccess: this.loadWifiCom.bind(this),
			onFailure: this.loadWifiCom.bind(this)
		});


	},
	loadWifiCom: function (result) {
		if (result && result.result && result.result.data) {
			this.objects.Wificom = result.result.data;
		} else {
			this.objects.Wificom = {
				Active: false,
				Enable: false,
				Status: "disabled"
			};
			
		}
		this.client.execute("sysbus.Wificom.SecureMode:getStatus", {}, {
			onSuccess: this.loadWifiComSecureMode.bind(this),
			onFailure: this.loadWifiComSecureMode.bind(this)
		});
	},
	
	loadWifiComSecureMode: function (result) {
		if (result && result.result && result.result.data) {
			this.objects.wifiComSecureMode = result.result.data;
		} else {
			this.objects.wifiComSecureMode = {
				Enable: false,
				Status: "deactivated"
			};
		}
		if (this.objects.Wificom.Enable || this.objects.wifiComSecureMode.Enable) {
			$('orange-wifi-link').show();
		}
		this.client.execute("sysbus.Scheduler:getCompleteSchedules", {
			type: "WLAN"
		}, {
			onSuccess: this.objectsLoaded.bind(this)
		});
	},

	objectsLoaded: function (obj) {
		this.fillWithGreen();
		if (obj.result.status == false || obj.result.data.scheduleInfo.length === 0) {
			this.objects.scheduleInfo = {
				"ID": "wl0",
				"enable": false,
				"override": "Enable",
				"base": "Weekly",
				"def": "Enable",
				"schedule": []
			};
		} else {
			this.objects.scheduleInfo = obj.result.data.scheduleInfo[0];
		}
		
		this.fillForm();
	},
	refrechGrid:function(){
		this.daysTranslations = {};
		this.statusTranslations= {};
		this.fillWithGreen();
		this.fillForm();
	},

	/**
	 * Draw each instance in sahbus on the calendar
	 */
	fillForm: function () {
		// Check for radio instead of checkbox
		// if (this.objects.scheduleInfo.enable && this.objects.scheduleInfo.override == "Enable") {
		if (this.objects.scheduleInfo.enable === false) {
			$$("input[type=radio][name=WifiScheduling.Enable]")[0].checked = true;
			$('ct-schedulelayer').show();
			$('lb_enabled').show();
		// } else if (this.objects.scheduleInfo.enable && this.objects.scheduleInfo.override == "") {
		} else {
			$$("input[type=radio][name=WifiScheduling.Enable]")[1].checked = true;
			$('ct-schedulelayer').hide();
			$('lb_enabled').hide();
			this.allSpans.each(function (entity) {				
				Event.observe(entity.parentNode, "mousedown",this.startDragSelect.bind(this, entity));
				Event.observe(entity.parentNode, "click", this.toggleState.bind(this, entity));
			}, this);
			this.fillCases();
		}
		// else if (this.objects.scheduleInfo.enable && this.objects.scheduleInfo.override == "Disable") {
			// $$("input[type=radio][name=WifiScheduling.Enable]")[0].checked = true;
			// $('ct-schedulelayer').show();
			// $('lb_enabled').show();
		// }
	},

	fillCases: function () {
		
		if (this.objects.scheduleInfo.schedule) {
			this.objects.scheduleInfo.schedule.each(function (schedule) {
				if (schedule && schedule.state === 'Disable') {
					var day, hour, iconIndex = 0;
					for (var index = schedule.begin; index < schedule.end; index += 3600) {
						day = Math.floor(index / 86400) + 1;
						hour = (index - (86400 * (day - 1))) / 3600;
						iconIndex++;
				  
						this.setInputBoxClass($$(".box-0" + day + "-" + Wifi.Scheduling.Period.Hour[hour] + "h")[0], "red");
					}
				}
			}, this);
		}
		
	},

	setInputBoxClass: function (element, color) {
		if (color == "red") {
			element.removeClassName("input-box-green");
			element.addClassName("input-box-red");	
			this.changeState(element, "red");
		} else {
			element.removeClassName("input-box-red");
			element.addClassName("input-box-green");
			this.changeState(element, "green");
		}
	},

	toggleState: function (element,evnt) {	
		
		evnt.preventDefault();
		if (element.hasClassName("input-box-red")) {
			element.removeClassName("input-box-red");
			element.addClassName("input-box-green");
			
		} else {
			element.removeClassName("input-box-green");
			element.addClassName("input-box-red");
			
		}
		this.updateScheduleInfo();
		this.fillWithGreen();
		this.fillCases();
		
		return false;
		
	},

	fillCase: function (element, obj) {
		if(!obj){
			obj = window.event;
		}
		obj.stop();
		
		var target = (obj.currentTarget) ? obj.currentTarget.down("span") : obj.srcElement.down("span");
		if(!(target && target.className)) target = element;
		var _srcEnd = target.className.match("[0-9]{2}-[0-9]{2}")[0].split('-');

		var hStart = Math.min(parseInt(_srcEnd[1], 10), parseInt(this._srcElm[1], 10));
		var hEnd = Math.max(parseInt(_srcEnd[1], 10), parseInt(this._srcElm[1], 10));

		var dStart = Math.min(parseInt(_srcEnd[0], 10), parseInt(this._srcElm[0], 10));
		var dEnd = Math.max(parseInt(_srcEnd[0], 10), parseInt(this._srcElm[0], 10));

		this.resetHiLighted();
		for (var hour = hStart; hour <= hEnd; hour++) {
			for (var day = dStart; day <= dEnd; day++) {
				var el = $$('#scheduling span.box-0' + day + '-' + Wifi.Scheduling.Period.Hour[hour] + 'h')[0];
				el.addClassName('hiLighted');
				if (this._srcElm[3].indexOf("input-box-red") >= 0) {
					el.removeClassName("input-box-red");
					el.addClassName("input-box-green");
					this.changeState(el, "green");
				} else {
					el.removeClassName("input-box-green");
					el.addClassName("input-box-red");
					this.changeState(el, "red");
				}
			}
		}
	},

	resetHiLighted: function () {
		$$('#scheduling span.hiLighted').each(function (el) {
			el.removeClassName('hiLighted');

			if (this._srcElm[3].indexOf("input-box-red") >= 0) {
				el.removeClassName("input-box-green");
				el.addClassName("input-box-red");
				this.changeState(el, "red");
			} else {
				el.removeClassName("input-box-red");
				el.addClassName("input-box-green");
				this.changeState(el, "green");
			}
		}, this);
	},

	onMouseUp: function (obj) {
		this.allSpans.each(function (entity) {
			Event.stopObserving(entity.parentNode, "mouseover");			
			entity.removeClassName('hiLighted');
		});
		Event.stopObserving(document, "mouseup");
		this._srcElm = [];
		this.updateScheduleInfo();
		this.fillWithGreen();
		this.fillCases();
		if(!obj){
			obj = window.event;
		}
		obj.stop();
	},

	startDragSelect: function (element, obj) {
		if(!obj){
			obj = window.event;
		}
		obj.stop();
		this.fillCase(element, obj);
		
		var target = (obj.currentTarget) ? obj.currentTarget.down("span") : obj.srcElement.down("span");
	
		if(!(target && target.className)) return;
		this._srcElm = target.className.match("[0-9]{2}-[0-9]{2}")[0].split('-');
		
		this._srcElm[3] = target.className.match("input-box-.*")[0];

		this.allSpans.each(function (entity) {
			
			Event.observe(entity.parentNode, "mouseover", this.fillCase.bind(this, entity));
		}, this);

		Event.observe(document, "mouseup", this.onMouseUp.bind(this));
	},

	onCancel: function () {
		this.goBack();
	},

	onSave: function (event) {
		var timeRanges = null;
		event.stop();
		this.updateScheduleInfo();
		// Save Scheduling
		this.client.execute("sysbus.Scheduler:addSchedule", {
			type: "WLAN",
			info: this.objects.scheduleInfo
		}, {
			onSuccess: this.whenSaved.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		});
	},

	updateScheduleInfo: function () {
		var intervals = [];
		var reg = "([0-9]+)h";
		var regD = "-0([1-7]{1})-";
		var periods = $$('#scheduling tr span[class ~= input-box-red]');

		if ($$("input[name=WifiScheduling.Enable]")[1].checked == true) {
			this.objects.scheduleInfo.override = "";
			this.objects.scheduleInfo.enable = true;
			this.objects.scheduleInfo.schedule = [];
			for (var index = 0; index < periods.length; index++) {
				var startTime = parseInt((new RegExp(reg, "g")).exec(periods[index].className)[1], 10);
				var day = parseInt((new RegExp(regD, "g")).exec(periods[index].className)[1], 10);
				intervals.push({
					begin: (day - 1) * 86400 + 3600 * startTime,
					end: (day - 1) * 86400 + 3600 * (startTime + 1),
					state: "Disable"
				});
			}

			index = 1;
			if (intervals.length > 0) {
				this.objects.scheduleInfo.schedule.push(intervals[0]);
				while (index < intervals.length) {
					if (this.objects.scheduleInfo.schedule[this.objects.scheduleInfo.schedule.length - 1].end === intervals[index].begin) {
						this.objects.scheduleInfo.schedule[this.objects.scheduleInfo.schedule.length - 1].end = intervals[index].end;
					} else {
						this.objects.scheduleInfo.schedule.push(intervals[index]);
					}
					index++;
				}
			}
		} else {
			// this.objects.scheduleInfo.override = "Enable";
			this.objects.scheduleInfo.enable = false;
		}
	},

	whenSaved: function (obj) {
		if(this.objects.scheduleInfo.enable === false){
			this.client.execute("sysbus.NMC.Wifi:set", {
				"Enable": true,
				"Status": true
			}, {
				onSuccess: this.whenWifiOnSaved.bind(this),
				onFailure: this.whenWifiOnNotSaved.bind(this)
			});
		}
		else{
			this.goBack();
		}
	},
	whenWifiOnSaved: function (obj) {
		this.goBack();
	},
	whenWifiOnNotSaved: function (obj) {
		this.goBack();
	},
	whenNotSaved: function (obj) {
		this.goBack();
	},

	whenWl1Saved: function (obj) {
		if(this.objects.scheduleInfo.enable === false){
			this.client.execute("sysbus.NMC.Wifi:set", {
				"Enable": true,
				"Status": true
			}, {
				onSuccess: this.whenWifiOnSaved.bind(this),
				onFailure: this.whenWifiOnNotSaved.bind(this)
			});
		}
		else{
			this.goBack();
		}
	},

	fillWithGreen: function () {
		
		this.allSpans.each(function (elem) {
			elem.removeClassName("input-box-red");
			elem.addClassName("input-box-green");
			this.changeState(elem, "green");		
		},this);
		
	},
	changeState:function(elem,color){
	
		var data = elem.className.match("[0-9]{2}-[0-9]{2}")[0].split('-');
		var day = data[0];		
		var hour = parseInt(data[1],10);		
		var buttontext;
		var textdays = ["monday","tuesday","wednesday","thursday","friday","saturday","sunday"];
		var texthour = (hour/10>=1?"":"0")+hour+"h "+(hour+1/10>=1?"":"0"+(hour+1)+"h");
		if(color === "red"){
			buttontext = this.translateDays(textdays[day-1])+" "+texthour+" "+this.translateStatus("disabled");
			
		}else{
			buttontext = this.translateDays(textdays[day-1])+" "+texthour+" "+this.translateStatus("enabled");
		}
		var modifydom = function(){
			elem.innerHTML=buttontext;
		}
		modifydom.defer();
		
	},
	translateDays: function(day){
		if(!this.daysTranslations[day]){
			this.daysTranslations[day]=t("general.label.days."+day,"");
			
		}
		return this.daysTranslations[day];
		
		
	},
	translateStatus:function(status){
		if(!this.statusTranslations[status]){
			this.statusTranslations[status]=t("general.label."+status,status);
		}	
		return this.statusTranslations[status];
		
	},

	drawTable: function (event) {
		if ($$("input[name=WifiScheduling.Enable]")[1].checked == true) {
			$('ct-schedulelayer').hide();
			$('lb_enabled').hide();
			this.fillCases();
			this.allSpans.each(function (entity) {
				Event.observe(entity.parentNode, "mousedown", this.startDragSelect.bind(this, entity));
				Event.observe(entity.parentNode, "click", this.toggleState.bind(this, entity));
			}, this);
		} else {
			$('ct-schedulelayer').show();
			$('lb_enabled').show();
			this.fillWithGreen();
			this.allSpans.each(function (entity) {
				Event.stopObserving(entity.parentNode, "mousedown");
				Event.stopObserving(entity.parentNode, "click");
			}, this);
		}
		this.updateScheduleInfo();
	},

	getFirstHashParams: function (defaultq) {
		q = window.location.hash.substring(1);
		return q || defaultq;
	},
	setupBreadCrumb: function () {
		$('wifi-sourcepage').onclick = null;
		switch (this.sourcePage) {
			case "advancedWifiConfig":
				Sah.translator.change($$("#wifi-sourcepage span")[0], "general.label.vmenu.config.advancedwifi", "");
				$$("#content-left-vmenu li")[0].removeClassName('current');
				$$("#content-left-vmenu li")[2].addClassName('current');
				$('wifi-sourcepage').observe('click', function (e) {
					Sah.redirect("/advConfigWifi.html");
				});
				break;
			default:
				$('wifi-sourcepage').observe('click', function (e) {
					Sah.redirect("/configWifi.html");
				});
				break;
		}


	},
	goBack: function () {
		switch (this.sourcePage) {
			case "advancedWifiConfig":
				return Sah.redirect("/advConfigWifi.html");
				break;
			default:
				return Sah.redirect("/configWifi.html");
				break;
		}
	},
	setupKbNavigation : function(){
		var kb = new Sah.Keyboard("scheduling");
		kb.down("tab",function(e){
			$("bt_cancel").focus();
		}.bind(this));
		kb.down("shift tab",function(e){		
			$("WifiScheduling.Disable").focus();
		}.bind(this));
		kb.down(["left","right"],function(e){	
			
			var currentFocus = $$(":focus")[0];
			if(kb.lastKey() == "right"){
				if(kb.lastKey('shift') ){
					this.toggleState(currentFocus.down("span"),e);
				}
				var next = currentFocus.next("button")||
				(currentFocus.up("td")&&currentFocus.up("td").next("td")&&currentFocus.up("td").next("td").down("button"))||
				(currentFocus.up("tr")&&currentFocus.up("tr").next("tr")&&currentFocus.up("tr").next("tr").down("button"))||
				undefined;
				if(next){
					next.focus();
					
				}
			}
			if(kb.lastKey() == "left"){
				var previous = currentFocus.previous("button")||
				(currentFocus.up("td")&&currentFocus.up("td").previous("td")&&currentFocus.up("td").previous("td").down("button",3))||
				(currentFocus.up("tr")&&currentFocus.up("tr").previous("tr")&&currentFocus.up("tr").previous("tr").down("td",6)&&currentFocus.up("tr").previous("tr").down("td",6).down("button",3))||
				undefined;
				if(previous){
					previous.focus();
					if(kb.lastKey('shift') ){
						this.toggleState(previous.down("span"),e);
					}
				}
			}
			
			
		
		}.bind(this));
		
		
	}
	
});

Wifi.Scheduling.Period.Hour = {
	"0": "00",
	"1": "01",
	"2": "02",
	"3": "03",
	"4": "04",
	"5": "05",
	"6": "06",
	"7": "07",
	"8": "08",
	"9": "09",
	"10": "10",
	"11": "11",
	"12": "12",
	"13": "13",
	"14": "14",
	"15": "15",
	"16": "16",
	"17": "17",
	"18": "18",
	"19": "19",
	"20": "20",
	"21": "21",
	"22": "22",
	"23": "23"
};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/wifi/orangeConfig.js */

Wifi.OrangeConfig = Class.create(Sah.AuthenticatedForm, /** @lends Wifi.OrangeConfig */ {
	initialize: function ($super, form) {
		$('orange-wifi-link').addClassName('current');
		$$('#header-hmenu li.active')[0].removeClassName('active');
		$('hmenu-wifi').addClassName('active');
		
		$super(form);
		
		/* prepare to load the objects we need */
		this.client.execute("sysbus.Wificom.OpenMode:getStatus", {}, {
			onSuccess: this.loadWifiComOpenMode.bind(this),
			onFailure: this.loadWifiComOpenMode.bind(this)
		});
		
	},
	loadWifiComOpenMode: function (result) {
		if (result && result.result && result.result.data) {
			this.objects.wifiComOpenMode = result.result.data;
		} else {
			this.objects.wifiComOpenMode = {
				Active: false,
				Enable: false,
				Status: "disabled"
			};
		}
		this.client.execute("sysbus.Wificom.SecureMode:getStatus", {}, {
			onSuccess: this.loadWifiComSecureMode.bind(this),
			onFailure: this.loadWifiComSecureMode.bind(this)
		});
	},
	
	loadWifiComSecureMode: function (result) {
		if (result && result.result && result.result.data) {
			this.objects.wifiComSecureMode = result.result.data;
		} else {
			this.objects.wifiComSecureMode = {
				Enable: false,
				Status: "deactivated"
			};
		}
		this.objectsLoaded();
	},

	objectsLoaded: function () {
		if (this.objects.wifiComOpenMode.Enable || this.objects.wifiComSecureMode.Enable) {
			$('orange-wifi-link').show();
		}

		if(this.objects.wifiComOpenMode.Status.toLowerCase() == "activated" && this.objects.wifiComSecureMode.Status.toLowerCase() == "activated"){
			$("OrangeWifi.SSIDv").update(this.objects.wifiComOpenMode.SSID + " <br> " + this.objects.wifiComSecureMode.SSID);
		} else if(this.objects.wifiComOpenMode.Status.toLowerCase() == "activated"){
			$("OrangeWifi.SSIDv").update(this.objects.wifiComOpenMode.SSID);
		} else if(this.objects.wifiComSecureMode.Status.toLowerCase() == "activated"){
			$("OrangeWifi.SSIDv").update(this.objects.wifiComSecureMode.SSID);
		} else {
			$("OrangeWifi.SSIDv").update(this.objects.wifiComOpenMode.SSID);
		}
		this.fillForm();
	},

	fillForm: function () {
			if(this.objects.wifiComOpenMode.Status.toLowerCase() == "error" || this.objects.wifiComSecureMode.Status.toLowerCase() == "error"){
			$("OrangeWifiEnabled").hide();
			$("OrangeWifiError").show();
			$("OrangeWifiNoteligible").hide();
			//$("OrangeWifiDisabledStatus").update("Error");			
		} else if(this.objects.wifiComOpenMode.Status.toLowerCase() == "not_eligible"){ 			
			$("OrangeWifiEnabled").hide();
			$("OrangeWifiDisabled").hide();
			$("OrangeWifiNoteligible").show();	
		} else if(this.objects.wifiComOpenMode.Status.toLowerCase() == "wifi-off"){
			$("OrangeWifiEnabled").hide();
			$("OrangeWifiOff").show();
			$("OrangeWifiNoteligible").hide();
			//$("OrangeWifiDisabledStatus").update("Wi-Fi Off");
		} else if(this.objects.wifiComOpenMode.Status.toLowerCase() == "activated" || this.objects.wifiComSecureMode.Status.toLowerCase() == "activated"){
			$("OrangeWifiEnabled").show();
			$("OrangeWifiDisabled").hide();
		} else if(this.objects.wifiComOpenMode.Status.toLowerCase() == "deactivated"){
			$("OrangeWifiEnabled").hide();
			$("OrangeWifiDisabled").show();
			$("OrangeWifiNoteligible").hide();
		}		
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/wifi/macFiltring.js */

Wifi.MacFiltring = Class.create(Sah.AuthenticatedForm, /** @lends Wifi.General.Basic */ {
	initialize: function ($super, form) {
		$super(form);
		this._macfilterInitialized = false;
		$('wlan_macfilter_enable').observe('click', this.toggleMacFiltring.bind(this));		
		$('wlan_host_list').observe('change', this.selectHostMacFiltring.bind(this));
		$('bt_host_add').observe('click', this.addHostMacFiltring.bind(this));  
		Event.observe(document, 'MacFiltring:Activate', this.activateMacFiltering.bind(this));
		Event.observe(document, 'MacFiltring:Desactivate', this.desactivateMacFiltering.bind(this));
		/* prepare to load the objects we need */
		this.interfaces = Wifi.getWifiInterfaces(config.BUILD_HARDWARE);
		this.checkingBoxModel();
	},
	checkingBoxModel: function () {
		this.needs("Hosts", {
			path: "sysbus.Devices:get",
			method: "execute",
			methodParams: {
				expression:""
			}
		});
		this.needs("WIFI", {
			path: "sysbus.NeMo.Intf.lan:getMIBs",
			method:"execute",
			methodParams: {
				mibs:"base wlanvap wlanradio",
				flag:"wlanvap || wlanradio",
				traverse:"down"
			}
		});
               
		this.load();
	},
	objectsLoaded: function () {
		this.objects.wlanRadios = [];
		for (var k in this.objects.WIFI.wlanradio) {
			if (!this.objects.WIFI.wlanradio.hasOwnProperty(k))
				continue;
			this.objects.wlanRadios.push(k);
		}

		if (this.objects.wlanRadios.length > 0) {
			if (this.objects.WIFI.wlanradio[this.objects.wlanRadios[0]].OperatingFrequencyBand === "2.4GHz") {
				this.interfaces.wlanradio0 = this.objects.wlanRadios[0];
				if (this.objects.wlanRadios[1]) {
					this.interfaces.wlanradio1 = this.objects.wlanRadios[1];
				}
			} else if (this.objects.wlanRadios[1]) {
				this.interfaces.wlanradio0 = this.objects.wlanRadios[1];
				this.interfaces.wlanradio1 = this.objects.wlanRadios[0];
			}
		}
		this.objects.WLAN = this.objects.WIFI.wlanvap.wl0;		
		this.objects.WLAN.Enable = this.objects.WIFI.base.wl0.Enable;
		this.objects.WLAN.Status = this.objects.WIFI.base.wl0.Status;
		this.fillForm();
		this.form.enable(); 
		this.markAsLoaded();
	},
	fillForm : function(){
		/** MAC filtering states **/
		var wlanMacFilterEnable =  $('wlan_macfilter_enable'),
		wlanMacFilterState = $('wlan_macfilter_state'),
		cntMacFiltring = $('cnt_macfilter');
		if (this.objects.WLAN.MACFiltering.Mode === "Off") {
			wlanMacFilterEnable.checked = false;
			wlanMacFilterState.style.color = "red";
// 			wlanMacFilterEnable.value = t("general.btn.enable", "");
			Sah.translator.change(wlanMacFilterEnable, "general.btn.enable", "X Disabled");
			Sah.translator.change(wlanMacFilterState, "general.label.disabled", "X Disabled");
			cntMacFiltring.hide();
		} else if (this.objects.WLAN.MACFiltering.Mode === "WhiteList") {
			wlanMacFilterEnable.checked = true;
			wlanMacFilterState.style.color = "#38A403";
// 			wlanMacFilterEnable.value = t("general.btn.disable", "");
			Sah.translator.change(wlanMacFilterEnable, "general.btn.disable", "X Disabled");
			Sah.translator.change(wlanMacFilterState, "general.label.enabled", "X Enabled");
			cntMacFiltring.show();
			this.fillMacFiltring();
		}
	}, 
	
	createSavedObject : function(params){
		var savedObject = {
			wlanvap: {
				wl0: 
				params
			}
		};

		if (this.interfaces.wlanradio1) {
			savedObject.wlanvap.wl1 =  params;
                        
		}
		return savedObject;
	},

	activateMacFiltering: function () {
		this.logger.info("Mac Filtring Enabled");
		$('wlan_macfilter_enable').checked = true;
		$('wlan_macfilter_state').style.color = "#38A403";
		Sah.translator.change($('wlan_macfilter_enable'), "general.btn.disable", "X Disabled");
		Sah.translator.change($('wlan_macfilter_state'), "general.label.enabled", "X Enabled");
		$('cnt_macfilter').show();
		this.fillMacFiltring();
		this.objects.WLAN.MACFiltering.Mode = "WhiteList";
		
		// WPS graphical disabling 
		Sah.translator.change($('wlan_wps_bt_enable'), "general.btn.enable", "X Enabled");
		Sah.translator.change($('wlan_wps_pin_enable'), "general.btn.enable", "X Enabled");

			
		Sah.translator.change($('wlan_wps_bt_state'), "general.label.disabled", "X Disabled");
		Sah.translator.change($('wlan_wps_pin_state'), "general.label.disabled", "X Disabled");
		$('wlan_wps_pin_state').style.color = $('wlan_wps_bt_state').style.color = "red";
		$$('.cnt-wlan-wps-global').each(Element.show);
		$("wps_mask").show();
		//~document.fire('WPS:Desactivate',true); 

	},
	desactivateMacFiltering: function () {
		if(this.objects.WLAN.MACFiltering.Mode !="Off") {
			$('wlan_macfilter_enable').checked = false;
			$('wlan_macfilter_state').style.color = "red";
			Sah.translator.change($('wlan_macfilter_enable'), "general.btn.enable", "X Enabled");
			Sah.translator.change($('wlan_macfilter_state'), "general.label.disabled", "X Disabled");
			$('cnt_macfilter').hide();		
			this.objects.WLAN.MACFiltering.Mode = "Off";
		}
	},

	fillMacFiltring: function () {
		if (!this._macfilterInitialized) {			
			this._knownHosts = {};
			this._macs = {};
			this._macRows = {};
			$A(this.objects.Hosts).each(function (host) {
				this._knownHosts[host.PhysAddress] = host;
			}, this);
			this._macfilterRowTemplate = $("wlan_mac_template");
			$('wlan_mac_table').select("tr.simple").each(function (e) {
				e.remove();
			});			
			$H(this.objects.WLAN.MACFiltering.Entry).each(function (reg) {				
				if(reg[1]&&reg[1].MACAddress){					
					this.addRowMacFiltring(reg[1].MACAddress);
					this._macRows[reg[0]] = reg[1].MACAddress;
					this._macs[reg[1].MACAddress] = reg[1];
				}

			}, this);
			$('wlan_mac_table').select("tr.simple").each(function (e) {
				e.show();
			});
			$('wlan_host_list').innerHTML = "";
			this._hosts = {};
			$A(this.objects.Hosts).each(function (host) {
				if ((host.Tags.toLowerCase().indexOf("wifi")>=0) && (host.DiscoverySource.toLowerCase().indexOf("self")<0) && this._macs[host.PhysAddress] === undefined) {
					host.Name = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', host.Name || host.PhysAddress.replace(/:/g, '-')));
					$('wlan_host_list').appendChild(new Element('option', {
						value: host.PhysAddress
					}).update(host.Name));
					this._hosts[host.PhysAddress] = host;
				}
			}, this);
			this.AddCustomMac = new Element("option", {
				"value": "other"
			});
			this.AddCustomMac.update(t("advconfig.wifi.label.othername", "other"));
			$('wlan_host_list').insert(this.AddCustomMac);
			this.selectHostMacFiltring();
		}
	},
	toggleMacFiltring: function () {		
		// security type none + mac filtering off (careful logic is reversed!)
		if(($('wlan_security_type').value.toLowerCase()  === "none") && (this.objects.WLAN.MACFiltering.Mode.toLowerCase() === "whitelist")){	
				ctl.msgbox.Show(ctl.msgbox.QUESTION.VALID_CANCEL, t('advconfig.wifi.general.info.nosecurity1',
				 'X Be careful, if you validate, then your WiFi will be no more secured.'),(function () {}), this.toggleMacFiltringProceed.bind(this)  );
		}
		else {
			this.toggleMacFiltringProceed();
		}
	},
	toggleMacFiltringProceed: function () {
		this.objects.WLAN.MACFiltering.Mode = (this.objects.WLAN.MACFiltering.Mode === "WhiteList") ? "Off" : "WhiteList";
		this.markAsLoading();
		
		var originParams = {
			"MACFiltering": {
			    "Mode": this.objects.WLAN.MACFiltering.Mode
			}
		};
		
		if ( this.objects.WLAN.MACFiltering.Mode === "Off" ) {
			originParams.WPS = {
				"Enable": false
			};
		}
		
		var savedObject = this.createSavedObject(originParams); 
		this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanradio0 + ":setWLANConfig", {
			"mibs": savedObject
		}, {
			onSuccess: function (mode) {
				if (mode === "Off") {
					$('wlan_macfilter_enable').checked = false;
					$('wlan_macfilter_state').style.color = "red";
					Sah.translator.change($('wlan_macfilter_enable'), "general.btn.enable", "X Disabled");
					Sah.translator.change($('wlan_macfilter_state'), "general.label.disabled", "X Disabled");
					$('cnt_macfilter').hide();
					ctl.popup.Close();
					this.markAsLoaded();
					this.whenSaved()
				} else {
					document.fire('WPS:Desactivate',true); 
					setTimeout(function(){this.whenSaved();}.bind(this), 2000);
		
				}
			}.bind(this, this.objects.WLAN.MACFiltering.Mode),
			onFailure: this.whenNotSaved.bind(this)
		});     
	},

	selectHostMacFiltring: function () {
		if ($('wlan_host_list').value !== "other") {
			$('wlan_host_ip').update("");
			$('mac-filtring-physAddress').hide();
			$('wlan_host_mac').show();
			var host = this._hosts[$('wlan_host_list').value];
			if (host) {
				$('wlan_host_ip').update(host.IPAddress);
				$('wlan_host_mac').update(host.PhysAddress);
			}
		} else {
			$('wlan_host_ip').update(t("advconfig.wifi.label.othername", "other"));
			$('mac-filtring-physAddress').show();
			$('wlan_host_mac').hide();
		}
	},

	addHostMacFiltring: function () {
		var mac = $('wlan_host_list').value;
		if (mac === "other") {
			mac = $('mac-filtring-physAddress').value;
		}
		if (!Sah.Validations.isValidMacAddress(mac)) {
			$("mac_error").update(t("advconfig.wifi.error.macaddress", "Invalid MAC Address"));
			$("config.wifi.macerror").show();
			this.logger.error("unable to save mac", mac._errors);
			return false;
		}
		var host = this._knownHosts[mac];
		this.markAsLoading();
		var lastMacId = 0;
		for (var r in this._macRows) {
			row= parseInt(r,10);
			if (row > lastMacId) lastMacId = row;
		}
		this._macRows[parseInt(lastMacId) + 1] = mac;

		var macFiltringList = {};
		for (var row1 in this._macRows) {
			macFiltringList[row1] = {
				MACAddress: this._macRows[row1]
			};
		}
                
		var originParams = {
			MACFiltering: {
				Entry: macFiltringList
			}
		};                                
		var savedObject = this.createSavedObject(originParams);                
		this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanradio0 + ":setWLANConfig", {
			"mibs": savedObject
		}, {
			onSuccess: this.savedNewMac.bind(this, mac),
			onFailure: this.whenNotSaved.bind(this)
		});
	},
	savedNewMac: function (mac) {
		
		this.addRowMacFiltring(mac);
		this.whenSaved();
	},

	addRowMacFiltring: function (mac) {
		var host = this._knownHosts[mac];
		// sanitizes name field
		for(var key in host) {
			if(key === "Name") {
				host[key] = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', host[key]));
			}			
		}
		var tr = this._macfilterRowTemplate.clone(true);
		if (!host) {
			tr.writeAttribute("id", mac);
			tr.writeAttribute("class", "simple");
			tr.select('[name]').each(function (e) {
				switch (e.readAttribute('name')) {
					case 'Name':
						e.update(t("advconfig.wifi.label.othername", "other"));
						break;
					case 'IPAddress':
						e.update(t("advconfig.wifi.label.othername", "other"));
						break;
					case 'PhysAddress':
						e.update(mac);
						break;

				}
			}, this);
			tr.down('.btn-delete').observe('click', this.deleteHostMacFiltring.bind(this, mac));
			$('wlan_mac_table').appendChild(tr);
		} else {
			tr.writeAttribute("id", mac);
			tr.writeAttribute("class", "simple");
			tr.select('[name]').each(function (e) {
				e.update(host[e.readAttribute('name')]);
			}, this);
			tr.down('.btn-delete').observe('click', this.deleteHostMacFiltring.bind(this, mac));
			$('wlan_mac_table').appendChild(tr);
		}
	},

	deleteHostMacFiltring: function (mac) {
		this.markAsLoading();
		var macFiltringList = {};
		for (var row1 in this._macRows) {
			if (this._macRows[row1] != mac) {
				macFiltringList[row1] = {
					MACAddress: this._macRows[row1]
				};
			}

		}
		var originParams = {
			MACFiltering: {
				Entry: macFiltringList
			}
		};                                
		var savedObject = this.createSavedObject(originParams); 
		this.client.execute("sysbus.NeMo.Intf." + this.interfaces.wlanradio0 + ":setWLANConfig", {
			"mibs": savedObject
		}, {
			onSuccess: this.whenSaved.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		});


	}, 
	whenSaved: function () {
		
		/*this.logger.info("object saved");		
		this.checkingBoxModel();
		this.loaded = false;
		this.load();*/
		window.location.reload();		
	},

	whenNotSaved: function (obj) {
		this.logger.warn("failed to save object");
		this.logger.warn(obj);
		this.markAsLoaded();
	}
       
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/wifi/securityKey.js */

Wifi.SecurityKey = Class.create(Sah.AuthenticatedForm, /** @lends Wifi.General.Basic */ {
	initialize: function ($super, form) {
		$super(form);
		this.walnRadio0 = "";
		this.walnRadio1 = "";
		this.sourcePage = this.getFirstHashParams("simpleWifiConfig");
		this.urlHashes = this.getUrlHashes();
		// this.interfaces = Wifi.getWifiInterfaces(config.BUILD_HARDWARE);
		this.checkingBoxModel();
		this.setupBreadCrumb();
		$("bt_security_discard").observe("click", this.onCancel.bind(this));
		$("bt_security_save").observe("click", this.onSaveSecurityKey.bind(this));

	/* prepare to load the objects we need */
	},
	checkingBoxModel:function(result){
		/*setting default hgw model & wifisetting & loading them*/
		this.needs("WIFI", {
			path: "sysbus.NeMo.Intf.lan:getMIBs",
			method:"execute",
			methodParams:{
				mibs:"base wlanvap wlanradio",
				flag:"wlanvap || wlanradio",
				traverse:"down"
			}
		});
		this.load();
	},


	objectsLoaded: function () {
		this.objects.wlanRadios = [];
		for (var k in this.objects.WIFI.wlanradio) {
			if (!this.objects.WIFI.wlanradio.hasOwnProperty(k))
				continue;
			this.objects.wlanRadios.push(k);
		}

		if (this.objects.wlanRadios.length > 0) {
			if (this.objects.WIFI.wlanradio[this.objects.wlanRadios[0]].OperatingFrequencyBand === "2.4GHz") {
				this.walnRadio0 = this.objects.wlanRadios[0];
				if (this.objects.wlanRadios[1]) {
					this.walnRadio1 = this.objects.wlanRadios[1];
				}
			} else if (this.objects.wlanRadios[1]) {
				this.walnRadio0 = this.objects.wlanRadios[1];
				this.walnRadio1 = this.objects.wlanRadios[0];
			}
		}

		this.client.execute("sysbus.Wificom.OpenMode:getStatus", {}, {
			onSuccess: this.loadWifiCom.bind(this),
			onFailure: this.loadWifiCom.bind(this)
		});
	},
	loadWifiCom: function (result) {
		if (result && result.result && result.result.data) {
			this.objects.Wificom = result.result.data;
		} else {
			this.objects.Wificom = {
				Active: false,
				Enable: false,
				Status: "disabled"
			};
		}
		this.client.execute("sysbus.Wificom.SecureMode:getStatus", {}, {
			onSuccess: this.loadWifiComSecureMode.bind(this),
			onFailure: this.loadWifiComSecureMode.bind(this)
		});
	},
	
	loadWifiComSecureMode: function (result) {
		if (result && result.result && result.result.data) {
			this.objects.wifiComSecureMode = result.result.data;
		} else {
			this.objects.wifiComSecureMode = {
				Enable: false,
				Status: "deactivated"
			};
		}
		this.objects.WLAN = this.objects.WIFI.wlanvap.wl0;
		this.objects.WLAN.Enable = this.objects.WIFI.base.wl0.Enable;
		this.objects.WLAN.Status = this.objects.WIFI.base.wl0.Status;
		
		if(this.walnRadio1 !== ""){
				this.objects.WLAN5G = this.objects.WIFI.wlanvap.wl1;
				this.objects.WLAN5G.Enable = this.objects.WIFI.base.wl1.Enable;
				this.objects.WLAN5G.Status = this.objects.WIFI.base.wl1.Status;
		}

		if(this.objects.Wificom.Enable || this.objects.wifiComSecureMode.Enable){
			$('orange-wifi-link').show();
		}

		if(this.urlHashes.indexOf("24ghz") !== -1){
			if (this.objects.WLAN.Security.ModeEnabled.substr(0,3)=== "WPA") {
				$('wlan_key').value = this.objects.WLAN.Security.KeyPassPhrase;
			} else if (this.objects.WLAN.Security.ModeEnabled.substr(0,3) === "WEP") {
				$('wlan_key').value = this.objects.WLAN.Security.WEPKey;
			}
			
		} else if(this.urlHashes.indexOf("5ghz") !== -1){
			
		/*	if(this.walnRadio1 !== ""){
				this.objects.WLAN = this.objects.WIFI.wlanvap.wl1;
				this.objects.WLAN.Enable = this.objects.WIFI.base.wl1.Enable;
				this.objects.WLAN.Status = this.objects.WIFI.base.wl1.Status;
			}*/
			if (this.objects.WLAN5G.Security.ModeEnabled.substr(0,3)=== "WPA") {
				$('wlan_key').value = this.objects.WLAN5G.Security.KeyPassPhrase;
			} else if (this.objects.WLAN5G.Security.ModeEnabled.substr(0,3) === "WEP") {
				$('wlan_key').value = this.objects.WLAN5G.Security.WEPKey;
			}
		} else{
			if (this.objects.WLAN.Security.ModeEnabled.substr(0,3)=== "WPA") {
				$('wlan_key').value = this.objects.WLAN.Security.KeyPassPhrase;
			} else if (this.objects.WLAN.Security.ModeEnabled.substr(0,3) === "WEP") {
				$('wlan_key').value = this.objects.WLAN.Security.WEPKey;
			}
		}
		this.Key=$('wlan_key').value ;
	},

	onSaveSecurityKey: function (event) {

		var key = $('wlan_key').value,
		isValid = true;


			if((this.objects.WLAN5G.SSID==this.objects.WLAN.SSID)&&(((this.urlHashes.indexOf("24ghz") !== -1)&&(key!=this.Key))||
			((this.urlHashes.indexOf("5ghz") !== -1)&&(key!=this.Key)))){
					
					ctl.msgbox.Show(ctl.msgbox.QUESTION.OK, t('advconfig.wifi.general.info.ssidmustbedifferent', 'X You have configured differently the WiFi 2.4 GHz and 5 GHz.'),  (function () {
					Sah.redirect("/advConfigWifi.html");	
				}.bind(this)));
		
				
			} else {
						
						if(this.urlHashes.indexOf("5ghz") !== -1){
			
									if(this.walnRadio1 !== ""){
										this.objects.WLAN = this.objects.WLAN5G;
										this.objects.WLAN.Enable = this.objects.WLAN5G.Enable ;
										this.objects.WLAN.Status = this.objects.WLAN5G.Status;
									}
						}
					
		if (this.objects.WLAN.Security.ModeEnabled.substr(0,3) === "WPA") {
			if (Sah.Validations.isValidWPAKey(key)) {
				this.objects.WLAN.Security.KeyPassPhrase = key;

			} else {
				Sah.translator.change($("securityKey_warning"), "advconfig.wifi.securitykey.error.wpa", "X Wrong WPA passphrase");
				$("securitykey_description").hide();
				$("securityKey_error").show();
				isValid = false;
			}
		} else if (this.objects.WLAN.Security.ModeEnabled.substr(0,3)=== "WEP") {
			if (Sah.Validations.isValidWEPKey(key)) {
				this.objects.WLAN.Security.WEPKey = key;

			} else {
				Sah.translator.change($("securityKey_warning"), "advconfig.wifi.securitykey.error.wep", "X Wrong WEP key");
				$("securitykey_description").hide();
				$("securityKey_error").show();
				isValid = false;
			}
		}
		
		if (isValid){
			
						ctl.msgbox.Show(ctl.msgbox.QUESTION.VALID_CANCEL, t('advconfig.wifi.general.info.confirmation', 
											'X You have modified your WiFi configuration.'),(function () {
												Sah.redirect("/advConfigWifi.html");	
											}.bind(this)),(function () {
												if(this.urlHashes.indexOf("24ghz") !== -1){
										var savedObject = {
											wlanvap:{
												wl0:{
													Security:{
														KeyPassPhrase:this.objects.WLAN.Security.KeyPassPhrase,

														WEPKey : this.objects.WLAN.Security.WEPKey
													}
												}
											}
										};
									} else if(this.urlHashes.indexOf("5ghz") !== -1){
										if(this.walnRadio1 !== ""){
											var savedObject = {
												wlanvap:{
													wl1:{
														Security:{
															KeyPassPhrase:this.objects.WLAN.Security.KeyPassPhrase,

															WEPKey : this.objects.WLAN.Security.WEPKey
														}
													}
												}
											};
										}
									} else if(this.urlHashes.indexOf("both") !== -1){
										var savedObject = {
											wlanvap:{
												wl0:{
													Security:{
														KeyPassPhrase:this.objects.WLAN.Security.KeyPassPhrase,
														WEPKey : this.objects.WLAN.Security.WEPKey
													}
												}
											}
										};
										if(this.walnRadio1 !== ""){
											savedObject.wlanvap.wl1 = {
												Security:{
													KeyPassPhrase:this.objects.WLAN.Security.KeyPassPhrase,

													WEPKey : this.objects.WLAN.Security.WEPKey
												}
											};
										}
									} else{
										var savedObject = {
											wlanvap:{
												wl0:{
													Security:{
														KeyPassPhrase:this.objects.WLAN.Security.KeyPassPhrase,

														WEPKey : this.objects.WLAN.Security.WEPKey
													}
												}
											}
										};
									}

									this.markAsLoading();
									this.client.execute("sysbus.NeMo.Intf.wl0:setWLANConfig",
									{
										"mibs":savedObject
									},
									{
										onSuccess: this.whenSaved.bind(this),
										onFailure: this.whenNotSaved.bind(this)
									});
				}.bind(this))  );
					
					
			
		}
	}
	},

	whenSaved: function () {
		this.markAsLoaded();
		this.logger.info("object saved");
		return this.goBack();
	},

	whenNotSaved: function (obj) {
		this.markAsLoaded();
		this.logger.warn("failed to save object");
		this.logger.warn(obj);
	},

	onCancel: function (event) {
		return this.goBack();
	},
	getFirstHashParams : function(defaultq) {
		q = window.location.hash.substring(1);
		return q || defaultq;
	},
	getUrlHashes : function (){
		return location.hash.split("#")
	},
	setupBreadCrumb : function(){
		$('wifi-sourcepage').onclick = null;
		switch(this.sourcePage){
			case "advancedWifiConfig":

				Sah.translator.change($$("#wifi-sourcepage span")[0],"general.label.vmenu.config.advancedwifi","");
				$$("#content-left-vmenu li")[0].removeClassName('current');
				$$("#content-left-vmenu li")[2].addClassName('current');
				$('wifi-sourcepage').observe('click',function(e){									
					Sah.redirect("/advConfigWifi.html");					
				});
				break;
			default :
				$('wifi-sourcepage').observe('click',function(e){
					Sah.redirect("/configWifi.html");
				});
				break;
		}

	},
	goBack:function(){
		
			Sah.redirect("/advConfigWifi.html");
		
	}

});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/wan.js */

/**
 * @namespace Holds the wan entity and its associated forms
 */
var Wan = {};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/lan/access.js */

/**
 * @namespace
 */
Lan.Access = {};


/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/home/customizeDevice.js */

/* TODO: documentation */
Home.CustomizeDevice = Class.create(Sah.AuthenticatedForm, {
	_physAddress: "",
	_line: "",
	_name:"",
	
	initialize: function ($super, form) {
		$super(form);
		if (window.location.href.split('?')[1]) {
			if (window.location.href.split('?')[1].split('#')[0]) {
				this._physAddress = decodeURIComponent(window.location.href.split('?')[1].split('#')[0]);
			} else {
				this._physAddress = decodeURIComponent(window.location.href.split('?')[1]);
			}
		}
		this.sourcePage = this.getFirstHashParams("connected");
		this.setupBreadCrumb(); /* when the form is submitted, call the onSave method of this class */
		$$("#bt_cancel").each(function (btn) {
			btn.observe("click", this.onCancel.bind(this));
		}, this);

		$$('#customize-devices-list li').each(function (elem) {
			Event.observe(elem, 'click', this.onClickedDevice.bind(this, elem));
		}, this);

		$$("#bt_save").each(function (btn) {
			btn.observe("click", this.onSave.bind(this));
		}, this);
                
		console.warn(Home.CustomizeDevice.DeviceClasses);
		
		this.rq = new Ajax.Request("/sysbus/Devices/Device/"+this._physAddress+":get", {
		method: "post",
		postBody: Object.toJSON({
			"parameters": {}
		}),
		contentType:"application/x-sah-ws-4-call+json",
		requestHeaders: {
			"X-Context":Sah.Bus.contextID,
			"X-Sah-Request-Type": "idle"
		},
		onSuccess: this.getDevice.bind(this),
		onFailure: this.failed.bind(this)
		});
	},

	objectsLoaded: function (obj) {
		if ( this._physAddress.indexOf('$line=')>=0 ) {
			this.fillCatDevice();
			Sah.translator.change($("device_info"),"home.devicescustomize.catiq.label.name.info","");
		} else {
			this.objects.device = obj.result.status;
			this.fillForm();
		}
	},
	
	getDevice: function (response) {
		if (!(o = response.responseText)) {
			return;
		} else {
		objet = eval ("(" + o + ")");
			this.objects.device=objet.status;
			this.fillForm();
			
		}	  
	},
	
	failed: function(response) {
		var msg = "error monitoring events: " + response.status + " " + response.statusText;
		if (response.responseText) {
		    msg += " " + response.responseText;
		}
		Sah.logger.error(msg);
	},

	fillForm: function () {
	     
		var deviceType = "",
		deviceLabelTranslation = "",
		undef;
		this.objects.device.DeviceType="SetTopBox";
  
		if ( Home.CustomizeDevice.DeviceClasses[this.objects.device.DeviceType.toLowerCase()] !== undef  ){
			deviceType = Home.CustomizeDevice.DeviceClasses[this.objects.device.DeviceType.toLowerCase()].toLowerCase();
		}else{
			deviceType = "desktop";
		}
		if ( Home.CustomizeDevice.DeviceLabelTranslation[this.objects.device.DeviceType.toLowerCase()] !== undef  ){
			deviceLabelTranslation = Home.CustomizeDevice.DeviceLabelTranslation[this.objects.device.DeviceType.toLowerCase()];
		}else{
			deviceLabelTranslation = Home.CustomizeDevice.DeviceLabelTranslation["desktop"];
		}

		$('DeviceName').update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html',this.objects.device.Name)));
		$('DeviceIcon').down('img').alt = t(deviceLabelTranslation,deviceType);
		$('DeviceIcon').down('img').src = this.getSrcIcon(deviceType);
		if(!this.objects.device.DeviceType){
			if(this.objects.device.Tags.indexOf("stb")>=0){
				this.objects.device.DeviceType="stb";	
			}else if(this.objects.device.Tags.indexOf("dect")>=0){
				this.objects.device.DeviceType="dect-phone";
			}
		}
		if (this.objects.device.DeviceType.toLowerCase().indexOf("set-top")>=0 ||this.objects.device.DeviceType.toLowerCase().indexOf("stb")>=0 ||this.objects.device.DeviceType.toLowerCase().indexOf("settopbox")>=0){
		    deviceType="stb";
		    
		}
		document.observe("sah:admin:language:change",function (){
			$('DeviceIcon').down('img').alt = t(deviceLabelTranslation,deviceType);
		}.bind(this));
		
		$("DeviceToCustomize.$UserFriendlyName").setValue(this.objects.device.Name);
		
		$$('#customize-devices-list li.' + deviceType )[0].addClassName('selected');
		
		var hCarrossel = new UI.Carousel("DeviceToCustomize", {
			direction: "horizontal",
			previousButton: ".left",
			nextButton: ".right",
			container: ".list",
			scrollInc: 4.8
		});
		this.setupCarrouselTabsEvents("DeviceToCustomize",hCarrossel);
		if ( this.objects.device["Tags"].indexOf("voice") >= 0 && this.objects.device["Tags"].indexOf("dect") >= 0 && this.objects.device["Tags"].indexOf("handset") >= 0 && this.objects.device["Tags"].indexOf("physical") >= 0) {
			$('DeviceToCustomize').setStyle({display: 'none'});
			$('selectLabel').setStyle({display: 'none'}); 
		}
		
	},

	fillCatDevice: function () {
		$('DeviceName').update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html',this._name)));
		$('DeviceIcon').down('img').alt = "Dect Phone";
		$('DeviceIcon').down('img').src = this.getSrcIcon("dect-phone");
		$("DeviceToCustomize.$UserFriendlyName").setValue(this._name);
	},
	
	onClickedDevice: function (oElem, oEvent) {
		$$('#DeviceToCustomize li.selected')[0].removeClassName("selected");
		oElem.addClassName("selected");
		$('DeviceIcon').className = $$('li.selected')[0].className.replace(/ selected/i, '');
		
		$('DeviceIcon').down('img').alt = $$('li.selected')[0].className.replace(/ selected/i, '');
		var DeviceCategorie=$$('li.selected')[0].className.replace(/ selected/i, '');
		$('DeviceIcon').down('img').src = this.getSrcIcon(DeviceCategorie.replace(/ linkhover/i, ''));
	},

	onSaveCatIq: function (event) {
		event.stop();
		if ($F("DeviceToCustomize.$UserFriendlyName").length < 17 && $F("DeviceToCustomize.$UserFriendlyName").strip() != "") {
			this.client.execute("sysbus.Devices.Device."+this._physAddress+":setName", {
				"name": $F("DeviceToCustomize.$UserFriendlyName")
			}, {
				onSuccess: this.whenSaved.bind(this),
				onFailure: this.whenNotSaved.bind(this)
			});
		} else if ($F("DeviceToCustomize.$UserFriendlyName").length >= 17) {
			Sah.translator.change($$(".device_error_value")[0],'home.devicescustomize.catiq.label.name.error.length', 'X too long');
			$("device_info").hide();
			$("device_error").show();
		} else {
			Sah.translator.change($$(".device_error_value")[0],'home.devicescustomize.label.name.error.empty', 'X empty');
			$("device_info").hide();
			$("device_error").show();
		}
		
		return true;
	},
	
	onSave: function (event) {
	
		if(this.objects.device.Tags.indexOf("dect")>=0){
			this.onSaveCatIq(event);	
		}else{
				event.stop();
				if ($F("DeviceToCustomize.$UserFriendlyName").length < 65 && $F("DeviceToCustomize.$UserFriendlyName").strip() != "") {
					this.objects.device.Name = $F("DeviceToCustomize.$UserFriendlyName");
					var Devicecat=$$('li.selected')[0].className.replace(/ selected/i, '');
					this.objects.device.DeviceType = Home.CustomizeDevice.DeviceClasses[Devicecat.replace(/ linkhover/i, '')];
					this.client.execute("sysbus.Devices.Device."+this._physAddress+":set", {
						parameters: this.objects.device
					}, {
						onSuccess: this.beforeSave.bind(this),
						onFailure: this.whenNotSaved.bind(this)
					});
					this.client.execute("sysbus.Devices.Device."+this._physAddress+":setName", {
						name: $F("DeviceToCustomize.$UserFriendlyName")
					}, {
						onSuccess: this.whenSaved.bind(this),
						onFailure: this.whenNotSaved.bind(this)
					});
				} else if ($F("DeviceToCustomize.$UserFriendlyName").length >= 65) {
					Sah.translator.change($$(".device_error_value")[0],'home.devicescustomize.label.name.error.length', 'X too long');
					$("device_info").hide();
					$("device_error").show();
				} else {
					Sah.translator.change($$(".device_error_value")[0],'home.devicescustomize.label.name.error.empty', 'X empty');
					$("device_info").hide();
					$("device_error").show();
				}
		
				return true;
				console.warn(this.objects.device.DeviceType);
		}
	},

	whenSaved: function (deviceType, obj) {
		// Todo: add a success message
		var that = this;
		this.markAsLoading();
		setTimeout(function(){				
			that.goBack();
		},3000);
	},
	
	beforeSave: function() {
	  
	},

	whenNotSaved: function (obj) {
		Sah.translator.change($$(".device_error_value")[0],'home.devicescustomize.label.name.error.notavailable', 'X not available');
		$("device_info").hide();
		$("device_error").show();
	},

	onCancel: function (event) {
		event.stop();
		this.goBack();
	},
	
	getFirstHashParams: function (defaultq) {
		q = window.location.hash.substring(1);
		return q || defaultq;
	},
	
	setupBreadCrumb: function () {
		$('devices-sourcepage').onclick = null;
		switch (this.sourcePage) {
			case "disconnected":
				Sah.translator.change($$("#devices-sourcepage span")[0], "general.label.vmenu.notconnecteddevices.title", "");
// 				$$("#content-left-vmenu li")[0].removeClassName('current');
// 				$$("#content-left-vmenu li")[1].addClassName('current');
				$('devices-sourcepage').observe('click', function (e) {
					Sah.redirect("/notConnectedDevices.html");
				});
				break;
			case "pairphones":
				Sah.translator.change($$("#devices-sourcepage span")[0], "general.label.vmenu.pairphones.title", "");
				$$("#content-left-vmenu li")[0].removeClassName('current');
				$('devices-sourcepage').observe('click', function (e) {
					Sah.redirect("/pairphones.html");
				});
				break;
			default:
				$('devices-sourcepage').observe('click', function (e) {
				      Sah.redirect('/');
				});
				break;
		}


	},
	goBack: function () {
		switch (this.sourcePage) {
			case "disconnected":
				return Sah.redirect("/notConnectedDevices.html");
				break;
			case "pairphones":
				return Sah.redirect("/pairphones.html");
				break;
			default:
				return Sah.redirect('/');

				break;
		}
	},
	
	getSrcIcon: function (deviceCat) {
		return appUrl + "/images/"+ appConfig + Home.CustomizeDevice.IconPath[deviceCat];
	},
	getIndex : function(node){
		var childs = node.parentNode.childNodes;                                                      
		for (var i=0;i < childs.length;i++){
                                                               
			if (node === childs[i])  return i;
		}
		return 0;
                                                       
	},
	setupCarrouselTabsEvents : function(carrouselDivId,carrouselObject){
		$$("#"+carrouselDivId+" div.hCarrossel ul li").each(function(li){
			this.addFocusEvent(li, function(e){
				var li = e.target.parentNode;                                       
				var index = this.getIndex(li);
				(index-3>0)&& carrouselObject.scrollTo(index-3);
				
			
			}.bind(this),"focus",true);
		},this); 
	
		
	}
}); 

Home.CustomizeDevice.DeviceLabelTranslation = {
	"phone": "home.devicescustomize.label.type.mobile",
	"mobile": "home.devicescustomize.label.type.mobile",
	"notebook": "home.devicescustomize.label.type.notebook",
	"smartphone": "home.devicescustomize.label.type.mobile",
	"tablette": "home.devicescustomize.label.type.tablet",
	"laptop": "home.devicescustomize.label.type.laptop",
	"computer": "home.devicescustomize.label.type.computer",
	"desktop": "home.devicescustomize.label.type.computer",
	"printer": "home.devicescustomize.label.type.printer",
	"gameconsole": "home.devicescustomize.label.type.game",
	"game": "home.devicescustomize.label.type.game",
	"set-top box orange": "home.devicescustomize.label.type.stb",
	"stb": "home.devicescustomize.label.type.stb",
	"audio/video": "home.devicescustomize.label.type.stb",
	"tv": "home.devicescustomize.label.type.tv",
	"liveradio": "home.devicescustomize.label.type.liveradio",
	"photo": "photoframe",
	"photoframe": "photo",
	"storage": "home.devicescustomize.label.type.massstorage",
	"mass-storage": "home.devicescustomize.label.type.massstorage",
	"Unknown": "home.devicescustomize.label.type.computer",	
	"dect-phone": "home.devicescustomize.label.type.dectphone",
	"homelibrary": "home.devicescustomize.label.type.homelibrary",
	"liveplugwifi":"home.devicescustomize.label.type.liveplugwifi",
	"squeezebox":"home.devicescustomize.label.type.squeezebox",
	"sensorhome":"home.devicescustomize.label.type.sensorhome",
	
	"ampliAV":"home.devicescustomize.label.type.ampliAV",
	"femtocell":"home.devicescustomize.label.type.femtocell",
	"homelive":"home.devicescustomize.label.type.homelive",
	"homepoint":"home.devicescustomize.label.type.homepoint",
	"ipcamera":"home.devicescustomize.label.type.ipcamera",
	"leblocorange":"home.devicescustomize.label.type.leblocorange",
	"TVdongle":"home.devicescustomize.label.type.TVdongle",

	
};

Home.CustomizeDevice.DeviceClasses = {
	"phone": "mobile",
	"mobile": "phone",
	"notebook": "notebook",
	"smartphone": "smartphone",
	"tablette": "tablette",
	"laptop": "laptop",
	"computer": "desktop",
	"desktop": "computer",
	"printer": "printer",
	"gameconsole": "game",
	"game": "gameConsole",
	"settopbox": "stb",
	"set-top box orange": "stb",
	"stb": "stb",
	"audio/video": "stb",
	"tv": "tv",
	"liveradio": "liveradio",
	"photo": "photoframe",
	"photoframe": "photo",
	"storage": "mass-storage",
	"mass-storage": "storage",
	"Unknown": "desktop",	
	"dect-phone": "dect-phone",
	"homelibrary": "homelibrary",
	"liveplugwifi":"liveplugwifi",
	"squeezebox":"squeezebox",
	"TVdongle":"TVdongle",
	
	"ampliAV":"ampliAV",
	"femtocell":"femtocell",
	"homelive":"homelive",
	"homepoint":"homepoint",
	"ipcamera":"ipcamera",
	"leblocorange":"leblocorange",
	"TVdongle":"TVdongle",
	"stbplay":"stbplay"
};

Home.CustomizeDevice.IconPath = {
	"phone": "/devices/icons-devices-mobile.png",
	"mobile": "/devices/icons-devices-mobile.png",
	"smartphone": "/devices/icons-devices-smartphone.png",
	"tablette": "/devices/icons-devices-tablet.png",
	"dectPhone": "/devices/icons-devices-telephoneparinternet.png",
	"notebook": "/devices/icons-devices-laptop.png",
	"laptop": "/devices/icons-devices-laptop.png",
	"computer": "/devices/icons-devices-desktop.png",
	"desktop": "/devices/icons-devices-desktop.png",
	"printer": "/devices/icons-devices-printer.png",
	"gameconsole": "/devices/icons-devices-game.png",
	"game": "/devices/icons-devices-game.png",
	"set-top box orange": "/devices/icons-devices-stb.png",
	"stb": "/devices/icons-devices-stb.png",
	"audio/video": "/devices/icons-devices-stb.png",
	"tv": "/devices/icons-devices-tv.png",
	"liveradio": "/devices/icons-devices-liveradio.png",
	"photo": "/devices/icons-devices-photoframe.png",
	"photoframe": "/devices/icons-devices-photoframe.png",
	"storage": "/devices/icons-devices-usb-hdd.png",
	"mass-storage": "/devices/icons-devices-usb-hdd.png",
	"unknown": "/devices/icons-devices-desktop.png",
	"desktop-gray": "/devices/icons-devices-desktop-gray.png",
	"laptop-gray": "/devices/icons-devices-laptop-gray.png",
	"mobile-gray": "/devices/icons-devices-mobile-gray.png",
	"printer-gray": "/devices/icons-devices-printer-gray.png",
	"stb-gray": "/devices/icons-devices-stb-gray.png",
	"tv-gray": "/devices/icons-devices-tv-gray.png",
	"game-gray": "/devices/icons-devices-game-gray.png",
	"liveradio-gray": "/devices/icons-devices-liveradio-gray.png",
	"photoframe-gray": "/devices/icons-devices-photoframe-gray.png",
	"mass-storage-gray": "/devices/icons-devices-usb-hdd-gray.png",	
	"dect-phone": "/devices/icons-devices-telephoneparinternet.png",
	"homelibrary": "/devices/icons-devices-homelibrairy.png",
	"liveplugwifi":"/devices/icons-devices-liveplugwifi.png",
	"squeezebox":"/devices/icons-devices-squeezebox.png",
	"sensorhome":"/devices/icons-devices-sensorhome.png",
	
	"ampliAV":"/devices/icons-devices-ampliAV.png",
	"femtocell":"/devices/icons-devices-femtocell.png",
	"homelive":"/devices/icons-devices-homelive.png",
	"homepoint":"/devices/icons-devices-homepoint.png",
	"ipcamera":"/devices/icons-devices-ipcamera.png",
	"leblocorange":"/devices/icons-devices-leblocorange.png",
	"TVdongle":"/devices/icons-devices-TVdongle.png",
	"stbplay":"/devices/icons-devices-stbplay.png"
	
};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/lan/access/period.js */

/**
 * TODO: fix documentation
 * Access Period
 *
 */
Lan.Access.Period = Class.create(Sah.AuthenticatedForm, /** @lends Lan.Access.Period# **/ {
	_srcElm: [],
	_physAddress: "",

	initialize: function ($super, form) {
		$super(form);
		if (window.location.href.split('?')[1]) {
			if (window.location.href.split('?')[1].split('#')[0]) {
				this._physAddress = decodeURIComponent(window.location.href.split('?')[1].split('#')[0]);
			} else {
				this._physAddress = decodeURIComponent(window.location.href.split('?')[1]);
			}
		}
		this.sourcePage = this.getFirstHashParams("connected");
		this.setupBreadCrumb();
		this.allSpans = $CYT('#scheduling span.box-0([1-7])-([0-9]+)h');
		this.daysTranslations = {};
		this.statusTranslations= {};
		// Initialize events listners
		$$(".AccessSchedulingManagementSave").each(function (b) {
			b.observe("click", this.onSave.bind(this));
		}, this);

		$$(".AccessSchedulingManagementCancel").each(function (b) {
			b.observe("click", this.onCancel.bind(this));
		}, this);

		$$("input[type=radio][name=TimeOfDay.Enable]").each(function (radio) {
			radio.observe("click", this.drawTable.bind(this));
		}, this);
		document.observe('sah:admin:language:change', this.refrechGrid.bind(this));
		this.setupKbNavigation();

		this.client.execute("sysbus.Devices.Device."+this._physAddress+":get", {}, 
				    {
			onSuccess: this.updateDeviceInfo.bind(this)
		});
		
		this.client.execute("sysbus.Scheduler:getSchedule", {
			type: "ToD",
			ID: this._physAddress
		}, {
			onSuccess: this.objectsLoaded.bind(this)
		});
	},

	objectsLoaded: function (obj) {
		if (obj.result.status == false) {
			this.objects.scheduleInfo = {
				"ID": this._physAddress,
				"enable": true,
				"override": "Enable",
				"base": "Weekly",
				"def": "Enable",
				"schedule": []
			};
		} else {
			this.objects.scheduleInfo = obj.result.data.scheduleInfo;
		}

		this.fillForm();
	},
	refrechGrid:function(){
		this.daysTranslations = {};
		this.statusTranslations= {};
		this.fillWithGreen();
		this.fillForm();
	},

	updateDeviceInfo: function (obj) {
	  
		var deviceType = "",
		undef;
		
		this.objects.device = obj.result.status;
		
		if ( Home.CustomizeDevice.DeviceClasses[this.objects.device.DeviceType.toLowerCase()] !== undef  ){
			deviceType = Home.CustomizeDevice.DeviceClasses[this.objects.device.DeviceType.toLowerCase()];
		}else{
			deviceType = "desktop";
		}
		
		$('DeviceName').update(this.objects.device.Name, 8);
		$('deviceNameTop').update(this.objects.device.Name);
		$('icon-img').src = appUrl + "/images/"+ appConfig + Home.CustomizeDevice.IconPath[deviceType];
	},

	/**
	 * Draw each instance in sahbus on the calendar
	 */
	fillForm: function () {
		// Check for radio instead of checkbox
		if (this.objects.scheduleInfo.enable && this.objects.scheduleInfo.override == "Enable") {
			$$("input[type=radio][name=TimeOfDay.Enable]")[0].checked = true;
			$('ct-schedulelayer').show();
			$('lb_enabled').show();
			$('lb_disabled').hide();
		} else if (this.objects.scheduleInfo.enable && this.objects.scheduleInfo.override == "") {
			$$("input[type=radio][name=TimeOfDay.Enable]")[2].checked = true;
			$('ct-schedulelayer').hide();
			$('lb_enabled').hide();
			$('lb_disabled').hide();
			this.allSpans.each(function (entity) {
				Event.observe(entity.parentNode, "mousedown", this.startDragSelect.bind(this, entity));
				Event.observe(entity.parentNode, "click", this.toggleState.bind(this, entity));
			}, this);
			this.fillCases();
		} else if ( this.objects.scheduleInfo.override === "Disable" ) {
			$$("input[type=radio][name=TimeOfDay.Enable]")[1].checked = true;
			$('ct-schedulelayer').show();
			$('lb_enabled').hide();
			$('lb_disabled').show();
			this.fillWithRed();
		}
	},

	fillCases: function () {
		if (this.objects.scheduleInfo.schedule) {
			this.objects.scheduleInfo.schedule.each(function (schedule) {
				if (schedule && schedule.state === 'Disable') {
					var day, hour, iconIndex = 0;
					for (var index = schedule.begin; index < schedule.end; index += 3600) {
						day = Math.floor(index / 86400) + 1;
						hour = (index - (86400 * (day - 1))) / 3600;
						iconIndex++;
						
						this.setInputBoxClass($$(".box-0" + day + "-" + Lan.Access.Period.Hour[hour] + "h")[0], "red");
					}
				}
			}, this);
		}
	},

	setInputBoxClass: function (element, color) {
		if (color == "red") {
			element.removeClassName("input-box-green");
			element.addClassName("input-box-red");
			this.changeState(element, "red");
		} else {
			element.removeClassName("input-box-red");
			element.addClassName("input-box-green");
			this.changeState(element, "green");
		}
	},

	toggleState: function (element,evnt) {
		evnt.preventDefault();
		if (element.hasClassName("input-box-red")) {
			element.removeClassName("input-box-red");
			element.addClassName("input-box-green");
		} else {
			element.removeClassName("input-box-green");
			element.addClassName("input-box-red");
		}
		this.updateScheduleInfo();
		this.fillWithGreen();
		this.fillCases();
		return false;
	},

	fillCase: function (element, obj) {	
		if(!obj){
			obj = window.event;
		}		
		obj.stop();
		var target = (obj.currentTarget) ? obj.currentTarget.down("span") : obj.srcElement.down("span");
		
		if(!(target && target.className)) target = element;
		var _srcEnd = target.className.match("[0-9]{2}-[0-9]{2}")[0].split('-');

		var hStart = Math.min(parseInt(_srcEnd[1], 10), parseInt(this._srcElm[1], 10));
		var hEnd = Math.max(parseInt(_srcEnd[1], 10), parseInt(this._srcElm[1], 10));

		var dStart = Math.min(parseInt(_srcEnd[0], 10), parseInt(this._srcElm[0], 10));
		var dEnd = Math.max(parseInt(_srcEnd[0], 10), parseInt(this._srcElm[0], 10));

		this.resetHiLighted();
		for (var hour = hStart; hour <= hEnd; hour++) {
			for (var day = dStart; day <= dEnd; day++) {
				var el = $$('#scheduling span.box-0' + day + '-' + Lan.Access.Period.Hour[hour] + 'h')[0];
				el.addClassName('hiLighted');
				if (this._srcElm[3].indexOf("input-box-red") >= 0) {
					el.removeClassName("input-box-red");
					el.addClassName("input-box-green");
					this.changeState(el, "green");
				} else {
					el.removeClassName("input-box-green");
					el.addClassName("input-box-red");
					this.changeState(el, "red");
				}
			}
		}
	},

	resetHiLighted: function () {
		$$('#scheduling span.hiLighted').each(function (el) {
			el.removeClassName('hiLighted');

			if (this._srcElm[3].indexOf("input-box-red") >= 0) {
				el.removeClassName("input-box-green");
				el.addClassName("input-box-red");
				this.changeState(el, "red");
			} else {
				el.removeClassName("input-box-red");
				el.addClassName("input-box-green");
				this.changeState(el, "green");
			}
		}, this);
	},

	onMouseUp: function (obj) {
		if(!obj){
			obj = window.event;
		}
		this.allSpans.each(function (entity) {
			Event.stopObserving(entity.parentNode, "mouseover");
			entity.removeClassName('hiLighted');
		});

		Event.stopObserving(document, "mouseup");
		this._srcElm = [];
		this.updateScheduleInfo();
		this.fillWithGreen();
		this.fillCases();		
		obj.stop();
	},

	startDragSelect: function (element, obj) {
		if(!obj){
			obj = window.event;
		}
		obj.stop();
		this.fillCase(element, obj);
		
		var target = (obj.currentTarget) ? obj.currentTarget.down("span") : obj.srcElement.down("span");
	
		if(!(target && target.className)) return;
		this._srcElm = target.className.match("[0-9]{2}-[0-9]{2}")[0].split('-');
		this._srcElm[3] = target.className.match("input-box-.*")[0];

		this.allSpans.each(function (entity) {
			Event.observe(entity.parentNode, "mouseover", this.fillCase.bind(this, entity));
		}, this);

		Event.observe(document, "mouseup", this.onMouseUp.bind(this));
	},

	onCancel: function () {
		//ctl.popup.sahObject = null;
		this.goBack();

	},

	onSave: function (event) {
		var timeRanges = null;
		this.updateScheduleInfo();
		event.stop();
		
		
		// Save Scheduling
		
		// 		if ( $$("input[name=TimeOfDay.Enable]")[1].checked == true  ) {
		// 			this.client.execute("sysbus.Scheduler:overrideSchedule", {
		// 				"type":"ToD",
		// 				"ID": this._physAddress,
		// 				"override":"Disable"
		// 			}, {
		// 				onSuccess: this.whenSaved.bind(this),
		// 				onFailure: this.whenNotSaved.bind(this)
		// 			});
		// 		} else {
		this.client.execute("sysbus.Scheduler:addSchedule", {
			type: "ToD",
			info: this.objects.scheduleInfo
		}, {
			onSuccess: this.whenSaved.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		});
	// 		}
	},

	updateScheduleInfo: function () {
		var intervals = [];
		var reg = "([0-9]+)h";
		var regD = "-0([1-7]{1})-";
		var periods = $$('#scheduling tr span[class ~= input-box-red]');

		if ($$("input[name=TimeOfDay.Enable]")[2].checked == true) {
			this.objects.scheduleInfo.override = "";
			this.objects.scheduleInfo.schedule = [];
			this.objects.scheduleInfo.enable = true;
			for (var index = 0; index < periods.length; index++) {
				var startTime = parseInt((new RegExp(reg, "g")).exec(periods[index].className)[1], 10);
				var day = parseInt((new RegExp(regD, "g")).exec(periods[index].className)[1], 10);
				intervals.push({
					begin: (day - 1) * 86400 + 3600 * startTime,
					end: (day - 1) * 86400 + 3600 * (startTime + 1),
					state: "Disable"
				});
			}

			index = 1;
			
			if (intervals.length > 0) {
				this.objects.scheduleInfo.schedule.push(intervals[0]);
				
				while (index < intervals.length) {
					if (this.objects.scheduleInfo.schedule[this.objects.scheduleInfo.schedule.length - 1].end === intervals[index].begin) {
						this.objects.scheduleInfo.schedule[this.objects.scheduleInfo.schedule.length - 1].end = intervals[index].end;
					} else {
						this.objects.scheduleInfo.schedule.push(intervals[index]);
					}
					index++;
				}
			}
		} else if ( $$("input[name=TimeOfDay.Enable]")[1].checked == true ) {
			this.objects.scheduleInfo.override = "Disable";
			this.objects.scheduleInfo.enable = true;
		} else {
			this.objects.scheduleInfo.override = "Enable";
			this.objects.scheduleInfo.enable = true;
		}
	},

	whenSaved: function (obj) {
		this.goBack();
	},

	whenNotSaved: function (obj) {
		this.goBack();
	},

	fillWithGreen: function () {
		this.allSpans.each(function (elem) {
			elem.removeClassName("input-box-red");
			elem.addClassName("input-box-green");
			this.changeState(elem, "green");
		},this);
	},
	
	fillWithRed: function () {
		this.allSpans.each(function (elem) {
			elem.removeClassName("input-box-green");
			elem.addClassName("input-box-red");
			this.changeState(elem, "red");
		},this);
		
	},
	
	drawTable: function (event) {
		if ($$("input[name=TimeOfDay.Enable]")[2].checked == true) {
			$('ct-schedulelayer').hide();
			$('lb_enabled').hide();
			$('lb_disabled').hide();
			this.fillWithGreen();
			this.fillCases();
			this.allSpans.each(function (entity) {
				Event.observe(entity.parentNode, "mousedown", this.startDragSelect.bind(this, entity));
				Event.observe(entity.parentNode, "click", this.toggleState.bind(this, entity));
			}, this);
		} else if ($$("input[name=TimeOfDay.Enable]")[1].checked == true) {
			$('ct-schedulelayer').show();
			$('lb_enabled').hide();
			$('lb_disabled').show();
			this.fillWithRed();
			this.allSpans.each(function (entity) {
				Event.stopObserving(entity.parentNode, "mousedown");
				Event.stopObserving(entity.parentNode, "click");
			}, this);
		} else {
			$('ct-schedulelayer').show();
			$('lb_enabled').show();
			$('lb_disabled').hide();
			this.fillWithGreen();
			this.allSpans.each(function (entity) {
				Event.stopObserving(entity.parentNode, "mousedown");
				Event.stopObserving(entity.parentNode, "click");
			}, this);
		}
		this.updateScheduleInfo();
	},
	changeState:function(elem,color){
		
		var data = elem.className.match("[0-9]{2}-[0-9]{2}")[0].split('-');
		var day = data[0];		
		var hour = parseInt(data[1],10);		
		var buttontext;
		var textdays = ["monday","tuesday","wednesday","thursday","friday","saturday","sunday"];
		var texthour = (hour/10>=1?"":"0")+hour+"h "+(hour+1/10>=1?"":"0")+(hour+1)+"h";
		if(color === "red"){
			buttontext = this.translateDays(textdays[day-1])+" "+texthour+" "+this.translateStatus("disabled");
			
		}else{
			buttontext = this.translateDays(textdays[day-1])+" "+texthour+" "+this.translateStatus("enabled");
		}
		var modifydom = function(){
			elem.innerHTML=buttontext;
		}
		modifydom.defer();
		
	},
	translateDays: function(day){
		if(!this.daysTranslations[day]){
			this.daysTranslations[day]=t("general.label.days."+day,"");
			
		}
		return this.daysTranslations[day];
		
		
	},
	translateStatus:function(status){
		if(!this.statusTranslations[status]){
			this.statusTranslations[status]=t("general.label."+status,status);
		}	
		return this.statusTranslations[status];
		
	},


	getFirstHashParams: function (defaultq) {
		q = window.location.hash.substring(1);
		return q || defaultq;
	},

	setupBreadCrumb: function () {
		$('devices-sourcepage').onclick = null;
		
		switch (this.sourcePage) {
			case "disconnected":
				Sah.translator.change($$("#devices-sourcepage span")[0], "general.label.vmenu.notconnecteddevices.title", "");
// 				$$("#content-left-vmenu li")[0].removeClassName('current');
// 				$$("#content-left-vmenu li")[1].addClassName('current');
				$('devices-sourcepage').observe('click', function (e) {
					Sah.redirect("/notConnectedDevices.html");
				});
				break;
			default:
				$('devices-sourcepage').observe('click', function (e) {
					Sah.redirect('/HGWconfiguration.html');
				});
				break;
		}


	},

	goBack: function () {
		switch (this.sourcePage) {
			case "disconnected":
				return Sah.redirect("/notConnectedDevices.html");
				break;
			default:
				return Sah.redirect('/');
				break;
		}
	},
	setupKbNavigation : function(){
		var kb = new Sah.Keyboard("scheduling");
		kb.down("tab",function(e){			
			$("bt_cancel").focus();
		}.bind(this));
		kb.down("shift tab",function(e){
			$("TimeOfDay.schedule").focus();
		}.bind(this));
		
		kb.down(["left","right"],function(e){	
			
			var currentFocus = $$(":focus")[0];
			if(kb.lastKey() == "right"){
				if(kb.lastKey('shift') ){
					this.toggleState(currentFocus.down("span"),e);
				}
				var next = currentFocus.next("button")||
				(currentFocus.up("td")&&currentFocus.up("td").next("td")&&currentFocus.up("td").next("td").down("button"))||
				(currentFocus.up("tr")&&currentFocus.up("tr").next("tr")&&currentFocus.up("tr").next("tr").down("button"))||
				undefined;
				if(next){
					next.focus();					
				}
			}
			if(kb.lastKey() == "left"){
				var previous = currentFocus.previous("button")||
				(currentFocus.up("td")&&currentFocus.up("td").previous("td")&&currentFocus.up("td").previous("td").down("button",3))||
				(currentFocus.up("tr")&&currentFocus.up("tr").previous("tr")&&currentFocus.up("tr").previous("tr").down("td",6)&&currentFocus.up("tr").previous("tr").down("td",6).down("button",3))||
				undefined;
				if(previous){
					previous.focus();
					if(kb.lastKey('shift') ){
						this.toggleState(previous.down("span"),e);
					}
				}
			}
			
			
		
		}.bind(this));
		
	
		
	}

});

Lan.Access.Period.Hour = {
	"0": "00",
	"1": "01",
	"2": "02",
	"3": "03",
	"4": "04",
	"5": "05",
	"6": "06",
	"7": "07",
	"8": "08",
	"9": "09",
	"10": "10",
	"11": "11",
	"12": "12",
	"13": "13",
	"14": "14",
	"15": "15",
	"16": "16",
	"17": "17",
	"18": "18",
	"19": "19",
	"20": "20",
	"21": "21",
	"22": "22",
	"23": "23"
};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/lan/static.js */

Lan.Static = Class.create(Sah.AuthenticatedForm, /** @lends Lan.Static.Ip# */ {
	initialize: function ($super, form) {
		$super(form);

		/* setup events */
		$$(".LanStaticIpAdd").each(function (b) {
			b.observe("click", this.onSave.bind(this));
		}, this);

		this.host = this.form.down("select[name='StaticIP.Host']");
		this.host.observe("change", this.onHostChanged.bind(this));

		this.needs("staticLeases", {
			path: "sysbus.DHCPv4.Server.Pool.default:getStaticLeases",
			method: "execute"
		});
		this.needs("Hosts", {
			path: "sysbus.Devices:get",
			method: "execute",
			methodParams: {
				expression:"edev && physical && dhcp and .Active==true"
			}
		});
		//this.markAsLoading();
		this.form.disable();
		this.load();
	},
	objectsLoaded: function () {
		this.staticHostsByIp = $H();
		this.staticHostsByMac = $H();
		$A(this.objects.staticLeases).each(function (h) {
			this.staticHostsByIp[h.IPAddress] = h.MACAddress;
			this.staticHostsByMac[h.MACAddress] = h.IPAddress;
		}.bind(this));
		
		this.objects.HostDevices = this.objects.Hosts.select(function (h) {
			if (h.IPAddressSource)
			return (!this.isStb(h) && h.Active && (h.Tags.indexOf("dhcp")>=0) && (h.Tags.indexOf("physical")>=0) && h.Name != "localhost" && (h.Tags.indexOf("N/A")<=0) && h.PhysAddress != "00:00:00:00:00:00" && !(this.staticHostsByIp[h.IPAddress]) && !(this.staticHostsByMac[h.PhysAddress.toLowerCase()]));
		}.bind(this));
		

		/* get the bridge default DHCP Pool */
		/*  this.objects.DHCP.Pool.each(function (pool)
	      {
		if (pool.Name === "bridge_default")
		{
		  this.objects.BridgePool= "DHCP.Server.Pool."+pool._name;
		}
	      },this);


	      this.objects.Lease =  this.objects.DHCP.Lease.select(function (l) {
		return (l.Reserved == "0");
	      });

	      this.objects.DHCPStaticAddress = this.objects.DHCP.DHCPStaticAddress;
	      this.objects.DHCPStaticAddress.each(function (ip) {
		this.IPsByMac[ip.Chaddr] = ip;
	      }, this);
	      Sah.set({staticIPs:this.IPsByMac});
         */
		Sah.set({
			staticIPs: this.staticHostsByMac
		});
		this.fillHostSelect();

		/* setup needed templates */
		this.ipTemplate = Sah.Templates.Ip;
		this.ipTemplate.callback = this.appendIp.bind(this);

		this.ipTemplate.apply(this.objects.staticLeases);

		this.form.enable();
		this.onHostChanged();
		this.markAsLoaded();
	},

	isStb: function (device) {
		if (device.Tags.indexOf("stb")>=0) {
		   return true;
		} else if (device.DeviceType) {
			if (/*device.detectedTypes.toLowerCase().indexOf('tv') >= 0 ||*/
			  device.DeviceType.toLowerCase().indexOf('set-top') >= 0 ||
			  device.DeviceType.toLowerCase().indexOf('stb') >= 0 /*||
			  device.detectedTypes.toLowerCase().indexOf('renderer') >= 0 */)
			{
				return true;
			}
		}
		
		return false;
		
	},

	setIpHost: function (ip) {
		var host = $A(this.objects.Hosts).detect(function (o) {
			return (o && o.PhysAddress && o.PhysAddress.toLowerCase() === ip.MACAddress.toLowerCase());
		});

		if (host) {
			ip._host = host;
			ip.Name = host.Name;
		} else {
			ip.Name = "general.label.unmanaged";
			
		}
		
		var ipv4Adr = "", 
			ipv6Adr = "";
		if(host){	
		host.IPv4Address.each(function(adr){
				ipv4Adr = adr.Address;
		});
		host.IPv6Address.each(function(adr){
				ipv6Adr = adr.Address;
		});
		}
		ip.ipv6Address = ipv6Adr;
		ip.ipAddress = ipv4Adr;
	},

	/**
	 * @param {Object} element element in the form
	 * @param {Object} ip an instance in sahbus
	 *Add each row of the template and create the event handler for buttons */
	appendIp: function (element, ip) {
		element.id = ip.LeasePath;
		this.setIpHost(ip);
		this.ipTemplate.getElementForParameter(element, "Name").update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', ip.Name)));
		
		var isStaticLease="";
		/* when clicking delete remove the element */
		element.del = element.down(".btn-delete");
		element.del.observe("click", this.deleteIp.bind(this, element, ip));
		
		if (ip.IPAddress && ip.IPAddress !== ""){
			this.ipTemplate.getElementForParameter(element, "IPAddress").update(ip.IPAddress);
			element.down(".ipv4_label").show();
		}else{
			element.down(".ipv4_label").hide();
		}
		// if(ip.ipv6Address && ip.ipv6Address !== ""){
			// this.ipTemplate.getElementForParameter(element, "ipv6Address").update(ip.ipv6Address);
			// element.down(".ipv6_label").show();
		// }else{
			// element.down(".ipv6_label").hide();
		// }
		
		this.objects.Hosts.each(function (l) {
		      if (ip.ipAddress===l.IPAddress) {
			  ip.Name=l.Name;
			  element.Name=l.Name;
			  this.ipTemplate.getElementForParameter(element, "Name").update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', l.Name)));
			  isStaticLease="ok";
		      }  
		}, this);
		
		/* show the element form */
		this.ipTemplate.showForm(element);
		if(ip.Name=="general.label.unmanaged")
			Sah.translator.change(this.ipTemplate.getElementForParameter(element, "Name"), ip.Name,"X Unknown");
		//if (isStaticLease === "ok"){
		    $('LanStaticIp').down("tbody").insert(element);
		//}
	},

	refreshDevices : function(){
		this.objects.HostDevices = this.objects.Hosts.select(function (h) {
		     if (h.IPAddressSource)
			return (!this.isStb(h) && h.Active && (h.Tags.indexOf("dhcp")>=0) && (h.Tags.indexOf("physical")>=0) && h.Name != "localhost" && (h.Tags.indexOf("N/A")<=0) && h.PhysAddress != "00:00:00:00:00:00" && !(this.staticHostsByIp[h.IPAddress]) && !(this.staticHostsByMac[h.PhysAddress]));
		}.bind(this));
		
		this.fillHostSelect();
	},

	fillHostSelect: function () {
		var select = this.host;
		select.update("");
		this.objects.HostDevices.each(function (l) {
			// if (l.active &&  l.hostName != "localhost" && l.interfaceType!="N/A" && l.physAddress != "00:00:00:00:00:00"){
				var option = new Element("option");
				option.update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', l.Name)));
				option.host = l;
				select.insert(option);
			// }

		}, this);

		this.newIpOption = new Element("option", {
			"value": "CUSTOM"
		});
		Sah.translator.change(this.newIpOption, "advconfig.network.dhcp.label.editnewlease", "X Edit New Lease");
		select.insert(this.newIpOption);
	},

	onHostChanged: function () {
		this.loadHostInForm(this.host.options[this.host.selectedIndex].host);
	},

	loadHostInForm: function (host) {
		this.form.down("input[name='StaticIP.Yiaddr']").enable();
		if (host) {
			this.form.down("input[name='StaticIP.Yiaddr']").setValue(host.IPAddress);
			this.form.down("input[name='StaticIP.Chaddr']").setValue(host.PhysAddress);
		} else { /* custom hosts */
			//this.form.down("input[name='StaticIP.Yiaddr']").disable();
			this.form.down("input[name='StaticIP.Yiaddr']").setValue("");
			this.form.down("input[name='StaticIP.Chaddr']").setValue("");
		}
	},


	/**
	 * This function used for deleting an instance in sahbus
	 */
	deleteIp: function (element, ip) {
		this.client.execute("sysbus.DHCPv4.Server.Pool.default:deleteStaticLease", {
			MACAddress: ip.MACAddress
		}, this.whenDeleted.bind(this, element, ip));
	},

	whenDeleted: function (tr, ip) {
		tr.remove();
		this.staticHostsByMac[ip.MACAddress] = null;
		delete this.staticHostsByMac[ip.MACAddress];
		
		this.staticHostsByIp[ip.IPAddress] = null;
		delete this.staticHostsByIp[ip.IPAddress];
		
		Sah.set({
			staticIPs: this.staticHostsByMac
		});
		var host = $A(this.objects.Hosts).detect(function (o) {
			return (o && o.PhysAddress == ip.MACAddress);
		});
		this.objects.Hosts.each(function(o){
		  if (o.PhysAddress.toLowerCase()==ip.MACAddress.toLowerCase()){
		    host=o;
		  }

		}.bind(this));
		if (host) {
			var option = new Element("option");
			option.update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', host.Name)));
			option.host = host;
			this.newIpOption.insert({
				"before": option
			});
		}
		this.refreshDevices();
		//this.markAsLoading();
		setTimeout(function(){				
				Sah.redirect('/advConfigNetworkDhcp.html');
			},5000);
	},

	onSave: function (event) {
		Event.stop(event);
		//$("advconfig.dhcp.error").hide();
		this.logger.info("adding static ip");
		var ip = {
			"Chaddr": this.toObject().StaticIP.Chaddr,
			"Yiaddr": this.toObject().StaticIP.Yiaddr
		};
		this.ipGW = Sah.get('ipGW');
		this.ipMin = Sah.get('ipMin');
		this.ipMax = Sah.get('ipMax');

		this.client.execute("sysbus.DHCPv4.Server.Pool.default:addStaticLease", {
			"MACAddress": ip.Chaddr,
			"IPAddress": ip.Yiaddr
		}, this.whenSaved.bind(this, ip));

		//this.objects.DHCPStaticAddress._add(this.whenSaved.bind(this), ip._getParameters());
		return false;
	},

	whenSaved: function (ip) {
		/*ip.MACAddress = ip.Chaddr;
		ip.IPAddress = ip.Yiaddr;
		
		this.staticHostsByIp[ip.IPAddress] = ip.MACAddress;
		this.staticHostsByMac[ip.MACAddress] = ip.IPAddress;
		Sah.set({
			staticIPs: this.staticHostsByMac
		});
		this.markAsLoaded();
		this.logger.info("object saved");
		this.ipTemplate.apply(ip);
		var hostOpt = $A(this.host).detect(function (o) {

			return (o.host && o.host.physAddress == ip.Chaddr);
		});
		if (hostOpt) {
			hostOpt.remove();
			this.onHostChanged();
		}*/
		//this.markAsLoading();
		setTimeout(function(){				
				Sah.redirect('/advConfigNetworkDhcp.html');
			},5000);
	},

	validateForm: function (obj) {
		if (this.staticHostsByIp[obj.Yiaddr]) {
			this.displayMessageError("advconfig.network.dhcp.error.usedipaddress", "X Used IP Address");
			return false;
		}
		if (this.staticHostsByMac[obj.Chaddr]) {
			this.displayMessageError("advconfig.network.dhcp.error.usedmacaddress", "X Used Mac Address");
			return false;
		}


		var ipNew = new Sah.IPAddress(obj.Yiaddr, this.ipGW.bytesMask);

		if (!ipNew.check()) {
			this.displayMessageError("advconfig.network.dhcp.error.ipaddress.bad", "Bad IP Address");
			return false;
		/*} else if (!ipNew.bytes.isInRange(this.ipMin, this.ipMax)) {
			this.displayMessageError("advconfig.network.dhcp.error.withinrange", "IP Address should be within the DHCP range");
			return false;*/
		} else if (!ipNew.match(this.ipGW)) {
			this.displayMessageError("advconfig.network.dhcp.error.withinsubnet", "IP Address should be within the subnetwork");
			return false;
		} else if (ipNew.bytes.eq(this.ipGW.bytes)) {
			this.displayMessageError("advconfig.network.dhcp.error.reservedip", "This is a reserved IP Address");
			return false;
		}

		if (!Sah.Validations.isValidMacAddress(obj.Chaddr)) {
			this.displayMessageError("advconfig.network.dhcp.error.macaddress", "Bad MAC Address");
			return false;
		}
		return true;
	},

	displayMessageError: function (label, alternate) {
		//Sah.translator.change($("advconfig.dhcp.error.description"), label, alternate);
		//$("advconfig.dhcp.error").show();

	},

	onCancel: function () {
		// TODO : cancel modfication
	}

});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/lan/dhcpLeases.js */

Lan.DhcpLeases = Class.create(Sah.AuthenticatedForm,/** @lends Security.Rule# */{
	initialize: function ($super, form){
		$super(form);

		this.tbody = this.form.down("#DhcpLeases");

		this.needs("DhcpHosts", {
			path: "sysbus.Devices:get",
			method: "execute",
			methodParams: {
				"expression":{"lan":"edev && physical && dhcp and .Active==true"}
			}
		});

		this.form.disable();

		this.load();
	},

	objectsLoaded: function (){
		this.HostsByMac = $H();
		_hosts=[];	
         //this.objects.DhcpHosts={"lan":[{"Key":"00:1C:F0:D1:55:29","DiscoverySource":"bridge","Name":"sayhi-haythem","Active":true,"Tags":"lan edev mac physical ipv4 ipv6 mdns dhcp eth","LastConnection":"0001-01-01T00:00:00Z","LastChanged":"0001-01-01T00:00:00Z","DeviceType":"","PhysAddress":"00:1C:F0:D1:55:29","Ageing":false,"Layer2Interface":"eth0","IPAddress":"2001:0db8:0000:85a3:0000:0000:ac1f:8001","IPAddressSource":"DHCP","VendorClassID":"","UserClassID":"","ClientID":"01:00:1C:F0:D1:55:29","SerialNumber":"","ProductClass":"","OUI":"","Index":"13","Actions":[{"Function":"setName","Name":"Edit Name","Arguments":[{"Name":"name","Type":"string","Mandatory":true},{"Name":"source","Type":"string","Mandatory":false}]}],"Names":[{"Name":"PC_13","Source":"default"},{"Name":"sayhi-haythem","Source":"mdns"},{"Name":"sayhi-haythem","Source":"dhcp"}],"DeviceTypes":[{"Type":"Computer","TypeSource":"db"}],"IPv4Address":[{"Address":"192.168.1.11","Status":"reachable","Scope":"global","AddressSource":"DHCP","Reserved":false}],"IPv6Address":[{"Address":"fe80::21c:f0ff:fed1:5529","Status":"reachable","Scope":"link","AddressSource":"Static"}],"mDNSService":[{"Name":"sayhi-haythem","ServiceName":"_udisks-ssh._tcp","Domain":"local","Port":"22","Text":""},{"Name":"CD586E20CD58","ServiceName":"_touch-able._tcp","Domain":"local","Port":"3689","Text":"\"Password=false\" \"Ver=131073\" \"DvSv=2049\" \"DbId=CD586E20CD58\" \"DvTy=iTunes\" \"OSsi=0x1F6\" \"txtvers=1\" \"CtlN=haythems Music\""},{"Name":"sayhi-haythem [00:1c:f0:d1:55:29]","ServiceName":"_workstation._tcp","Domain":"local","Port":"9","Text":""},{"Name":"haythem@sayhi-haythem","ServiceName":"_presence._tcp","Domain":"local","Port":"5298","Text":"\"jid=\" \"node=http://telepathy.freedesktop.org/caps\" \"hash=sha-1\" \"nick=haythem\" \"email=\" \"txtvers=1\" \"ver=ZnhRZWOoMTG3+KszAQjhF93u9qw=\" \"status=avail\" \"last=\" \"port.p2pj=5298\" \"1st=haythem\""}]}]};
		//console.warn(this.objects.DhcpHosts);
		_hosts=this.objects.DhcpHosts["lan"];
		_hosts.each(function (h) {
			this.HostsByMac[h.PhysAddress] = h;
		}, this);
		
		this.objects.Lease = $A();
		_hosts.each(function (l) { 
			var host = this.HostsByMac[l.PhysAddress];
			if (host)
				l.Name = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', host.Name));
			else
				l.Name = t("advconfig.network.dhcp.label.unknownname", "unknown (%1)", l.PhysAddress);

			var ipv4Adr = "", ipv6Adr = "";
			if (l.IPv4Address) {
			  l.IPv4Address.each(function(address) {
			    ipv4Adr=address.Address;
			  });
			}
			
 			if (l.IPv6Address) {
 			  l.IPv6Address.each(function(address) {
 			    if (address.Scope.toLowerCase().indexOf("link")<0)
						ipv6Adr=address.Address;
 			  });
 			}

 			if (ipv6Adr.length>0) {
				$('ipv6AddressSpan').setStyle({display: 'block'});
				$('ipv6AddressValue').setStyle({display: 'block'});
			}
			l.ipv6Address = ipv6Adr;
			l.ipAddress = ipv4Adr;
			l.physAddress=host.PhysAddress;
			this.objects.Lease.push(l);
			
		}, this);

		this.objects.Lease =  this.objects.Lease.select(function (l) {
			return true;
		});

		/* setup needed templates */
		this.leaseTemplate = Sah.Templates['Lease'];
		this.leaseTemplate.callback = this.appendLease.bind(this);
		this.leaseTemplate.apply(this.objects.Lease);

		this.form.enable();
	},

	/**
     * @param {Object} element element in the form
     * @param {Object} lease an instance in sahbus
     * Add each row of the template and create the event handler for buttons */
	appendLease: function (element, lease){
		this.tbody.insert(element);
	},
	
	isDhcp: function (Names){
		for(var i=0;i<Names.length;i++){
		    if (Names[i].Source.indexOf("dhcp")){
		      return true;
		    } else 
		    return false;
		}
	},
	
	isStb: function (device) {
		if (device.detectedTypes.toLowerCase().indexOf('tv') >= 0 ||
			device.deviceType.toLowerCase().indexOf('set-top') >= 0 ||
			device.deviceType.toLowerCase().indexOf('stb') >= 0 ||
			device.detectedTypes.toLowerCase().indexOf('renderer') >= 0) {
			return true;
		}
		
		return false;
	}
}
);

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/lan/connectionList.js */

/**
 * The Lan summary form
 *
 * When the class is intantiated, the initialize method is called. There you first
 * need to call the parent constructor using $super. Then you can set up the various
 * event handlers that you will need. Then you need to define which objects you need
 * from sahbus with the needs() method. Finally you can call the load method that
 * will load those objects.
 *
 * When all the objects needed are loaded, the method objectsLoaded() will be called.
 * By default, the object fetched are stored into the variable objects. If you need
 * to, like in this case, you can setup other variables in objects. Those will be
 * used to fillup the form with the values from sahbus and to save the form into
 * sahbus. A mapping is automatically created that maps the objects properties to
 * form elements, using the this.fromObject(this.objects) method. You can than store
 * back the form in the objects by using object._update(this.toObject) method.
 * @class
 * @augments Sah.Form
 */

Lan.ConnectionList = Class.create(Sah.AuthenticatedForm,
/** @lends Lan.ConnectionList */
{
  initialize: function ($super, form)
  {
    $super(form);

    /* prepare to load the objects we need */
    this.needs("Eth.MACAddress", {
      path: "sysbus.NeMo.Intf.lan:getFirstParameter",
      method : "execute",
      methodParams : {
        "name":"LLAddress",
        "traverse":"down"
      }
    });
    this.needs("LanPort", {
      path: "sysbus.IGD.LANDevice.bridge.LANEthernetInterfaceConfig", 
      depth: -1
    });
    this.needs("ConnMode",{
      path:"sysbus.NMC:getWANStatus",
      method : "execute"
    });
    this.load();
  },

  objectsLoaded: function ()
  {
    // this.objects.ConnectionList = this.objects.Lan.ConnectionList;
    //this.objects.ConnMode = this.objects.ConnectionList.ConnMode;
    //this.objects.IP = this.objects.ConnectionList.IP;
    //       this.objects.Group = this.objects.ConnectionList.Group;

    this.prepareForm();
    this.fromObject(this.objects);
  },

  prepareForm: function ()
  {
    //       /* get the Lan Stb Wan Port */
    //       this.objects.Group.each(function(group) {
    //         if (group.Name == "lan")
    //           { this.objects.LanPort = group; }
    //         if (group.Name == "stb")
    //           { this.objects.StbPort = group; }
    //         if (group.Name == "wan")
    //           { this.objects.WanPort = group; }
    //       },this);

    this.objects.Port = {};

    /* get Lanports */
    if( this.objects.LanPort )
    {
      this.objects.LanPort1 = this.getPortNumberedObject(this.objects.LanPort, "port1");
      this.objects.LanPort2 = this.getPortNumberedObject(this.objects.LanPort, "port2");
      this.objects.LanPort3 = this.getPortNumberedObject(this.objects.LanPort, "port3");
      this.objects.LanPort4 = this.getPortNumberedObject(this.objects.LanPort, "port4");
    }
    else
    {
      this.objects.LanPort1 = "";
      this.objects.LanPort2 = "";
      this.objects.LanPort3 = "";
      this.objects.LanPort4 = "";
    }

    if( this.objects.StbPort )
    {
      this.objects.StbPort2 = this.getPortNumberedObject(this.objects.StbPort.Port, "port2");
      this.objects.StbPort3 = this.getPortNumberedObject(this.objects.StbPort.Port, "port3");
    }
    else
    {
      this.objects.StbPort2 = "";
      this.objects.StbPort3 = "";
    }

    if( this.objects.WanPort )
    {
      this.objects.WanPort4 = this.getPortNumberedObject(this.objects.WanPort.Port, "port4");
    }
    else
    {
      this.objects.WanPort4 = "";
    }

    /* Last Mode Settings
      Sah.translator.change($("Port.ModeYellow"), Lan.ConnectionList.DisplayYellowMode[this.objects.LanPort2.Enable][this.objects.StbPort2.Enable], this.objects.LanPort2.Enable+"-"+this.objects.StbPort2.Enable );
      Sah.translator.change($("Port.ModeGreen"), Lan.ConnectionList.DisplayGreenMode[this.objects.LanPort3.Enable][this.objects.StbPort3.Enable], this.objects.LanPort3.Enable+"-"+this.objects.StbPort3.Enable );
      Sah.translator.change($("Port.ModeWhite"), Lan.ConnectionList.DisplayWhiteMode[this.objects.LanPort4.Enable][this.objects.WanPort4.Enable], this.objects.LanPort4.Enable+"-"+this.objects.WanPort4.Enable );
     */
    /* New Mode Settings */
    var vpc = 0;//this.objects.ConnMode.Enable;
    var is_DSL = this.objects.ConnMode.LinkType;
    if ( is_DSL === "DSL")
    {
      if ( vpc === "1" )
      {
        Sah.translator.change($("Port.ModeWhite"), "support.systeminformation.lan.mode.internet", "X internet" );
      }
      else
      {
        Sah.translator.change($("Port.ModeWhite"), "support.systeminformation.lan.mode.InternetTV", "X internet & TV" );
      }
    }
    else
    {
      Sah.translator.change($("Port.ModeWhite"), "support.systeminformation.lan.mode.internetONT", "X FTTH" );
    }
    if ( vpc === "1" )
    {
      Sah.translator.change($("Port.ModeYellow"), "support.systeminformation.lan.mode.tv", "X TV" );
      Sah.translator.change($("Port.ModeGreen"), "support.systeminformation.lan.mode.tv", "X TV" );
      Sah.translator.change($("Port.ModeRed"), "support.systeminformation.lan.mode.internet", "X internet" );
    }
    else
    {
      Sah.translator.change($("Port.ModeYellow"), "support.systeminformation.lan.mode.InternetTV", "X internet & TV" );
      Sah.translator.change($("Port.ModeGreen"), "support.systeminformation.lan.mode.InternetTV", "X internet & TV" );
      Sah.translator.change($("Port.ModeRed"), "support.systeminformation.lan.mode.InternetTV", "X internet & TV" );
    }
    /* */
    Sah.translator.change($("Port.StatusRed"), Lan.ConnectionList.Status[this.objects.LanPort1.Status], this.objects.LanPort1.Status );
    if ( this.objects.LanPort2.Enable == true ) {
      Sah.translator.change($("Port.StatusYellow"), Lan.ConnectionList.Status[this.objects.LanPort2.Status], this.objects.LanPort2.Status );
    }
    else {
      Sah.translator.change($("Port.StatusYellow"), Lan.ConnectionList.Status[this.objects.StbPort2.Status], this.objects.StbPort2.Status );
    }

    if ( this.objects.LanPort3.Enable == true ) {
      Sah.translator.change($("Port.StatusGreen"), Lan.ConnectionList.Status[this.objects.LanPort3.Status], this.objects.LanPort3.Status );
    }
    else {
      Sah.translator.change($("Port.StatusGreen"), Lan.ConnectionList.Status[this.objects.StbPort3.Status], this.objects.StbPort3.Status );
    }

    if ( this.objects.LanPort4.Enable == true ) {
      Sah.translator.change($("Port.StatusWhite"), Lan.ConnectionList.Status[this.objects.LanPort4.Status], this.objects.LanPort4.Status );
    }
    else {
      Sah.translator.change($("Port.StatusWhite"), Lan.ConnectionList.Status[this.objects.WanPort4.Status], this.objects.WanPort4.Status );
    }


    // this.objects.Eth = this.objects.IP;
    var macAddress = this.objects.Eth.MACAddress;

    $("Eth.MACAddressRed").update(macAddress);
    $("Eth.MACAddressYellow").update(macAddress);
    $("Eth.MACAddressGreen").update(macAddress);
    $("Eth.MACAddressWhite").update(macAddress);
  },

  getPortNumberedObject: function (obj, portNumber) {
    obj.each(function(portNumber,port) {
      if (port.Name.slice(2)== portNumber)
      {
        this.port=port;
      }
      return;
    }.curry(portNumber),this);

    return this.port;
  }

}
);

Lan.ConnectionList.Status = {
  "Up": "support.systeminformation.lan.status.link",
  "NoLink": "support.systeminformation.lan.status.nolink"
};

Lan.ConnectionList.DisplayGreenMode = {
  "1": {
    "1": "support.systeminformation.lan.mode.InternetTV",
    "0": "support.systeminformation.lan.mode.internet"
  },
  "0": {
    "1": "support.systeminformation.lan.mode.tv",
    "0": "support.systeminformation.lan.mode.disable"
  }
};
Lan.ConnectionList.DisplayYellowMode = {
  "1": {
    "1": "support.systeminformation.lan.mode.InternetTV",
    "0": "support.systeminformation.lan.mode.internet"
  },
  "0": {
    "1": "support.systeminformation.lan.mode.tv",
    "0": "support.systeminformation.lan.mode.disable"
  }
};
Lan.ConnectionList.DisplayWhiteMode = {
  "1": {
    "1": "support.systeminformation.lan.mode.internetONT",
    "0": "support.systeminformation.lan.mode.internet"
  },
  "0": {
    "1": "support.systeminformation.lan.mode.internetONT",
    "0": "support.systeminformation.lan.mode.disable"
  }
};


/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/lan/dhcp.js */

/**
 * The lan access management form
 */

Lan.Dhcp = Class.create(Sah.AuthenticatedForm,/** @lends Lan.Dhcp */{
	_dhcpv6_status: "",
	initialize: function ($super, form){
		$super(form);
    
		this.el = {
			enable: $("dhcp_enable"),
			disable: $("dhcp_disable"),
			ip: $("dhcp_ip"),
			mask: $("dhcp_mask"),
			minAddr: $("dhcp_min_addr"),
			maxAddr: $("dhcp_max_addr"),
			cancel: $("dhcp_cancel"),
			save: $("dhcp_save")
		};

		/* when the form is submitted, call the onSave method of this class */
		this.el.cancel.observe("click", this.onCancel.bind(this));
		this.el.save.observe("click", this.onSave.bind(this));
    		this.el.disable.observe("click", this.selectDisableDHCP.bind(this));
		
		$$("input[name=DHCPServer.DHCPEnable]").each(function (elt) {
			elt.observe("click", this.stateChange.bind(this, elt));
		}, this);
    
		this.el.ip.observe('change', this.onIpChange.bind(this));
		this.el.mask.observe('change', this.onIpChange.bind(this));
		
		this.needs("DHCPServer", {
			path: "sysbus.NMC:getLANIP",
			method : "execute"
		});
		
		this.needs("Status", {
			path: "sysbus.NMC:getWANStatus",
			method: "execute"
		});
  
		
		this.load();
	},

	objectsLoaded: function (){
		this.objects.initialDHCPServer = Object.clone(this.objects.DHCPServer);
		this.dhcpEnabled = this.objects.DHCPServer.DHCPEnable ;	
		this.objects.DHCPServer._addError = function (param, message, key){
			var label = key || "";
			this._errors.push({
				parameter: param, 
				message: message, 
				label: label
			});
		};
		
		/*if(this.objects.Status.IPv6Address != "") {
			$$(".ipv6").each(function(el) {				
				el.setStyle({display : "table-row"});
			});
			
			this.client.execute("sysbus.DHCPv6.Server:getDHCPv6ServerStatus", {}, {
				onSuccess: this.setDHCPv6Status.bind(this)
			});
		}
		*/
		this.fillForm();
		
		this.markAsLoaded();
	},
	
	
	/*setDHCPv6Status: function (obj) {
		if (obj.result.status === "Enabled") {
			$('dhcp_enablev6').checked = true;
			$('dhcp_disablev6').checked = false;
			this._dhcpv6_status = true;
		} else {
			$('dhcp_enablev6').checked = false;
			$('dhcp_disablev6').checked = true;
			this._dhcpv6_status = false;
		}
	},
	*/
	fillForm: function (){
		$("dhcp_error").update();
		$("config.lan.dhcp").hide();
		this.fromObject(this.objects);
		var elt = {
			value:this.dhcpEnabled?1:0
		};
		(this.dhcpEnabled) ? this.el.enable.checked = true   : this.el.disable.checked = true;
		this.stateChange(elt);
		
		if(this.dhcpEnabled){					
			$("advConfigIPv6").show();			
			$("advConfigIPv6Span").show();			
		}else{
			$("advConfigIPv6").hide();		
			$("advConfigIPv6Span").hide();
		}
		
		Sah.set({
			ipGW:new Sah.IPAddress(this.objects.DHCPServer.Address,this.objects.DHCPServer.Netmask),
			ipMin:Sah.Byte4.parseIPAddress(this.objects.DHCPServer.DHCPMinAddress).bytes,
			ipMax:Sah.Byte4.parseIPAddress(this.objects.DHCPServer.DHCPMaxAddress).bytes
		});
	},
    
	checkChange:function(){
		var check= function(o1, o2){
			for(var p in o1){
				if(o1.hasOwnProperty(p)){          
					if(o1[p] !== o2[p]){            
						return false;
					}
				}
			}    
			return true;
		}
		var newDHCPServer = {
			Address:	this.objects.DHCPServer.Address,	
			Netmask:	this.objects.DHCPServer.Netmask,
			DHCPEnable:	this.objects.DHCPServer.DHCPEnable,      
			DHCPMinAddress:	this.objects.DHCPServer.DHCPMinAddress,
			DHCPMaxAddress:	this.objects.DHCPServer.DHCPMaxAddress
    
		};    
	
		return check(newDHCPServer,this.objects.initialDHCPServer);
	},
    	checkOnlyRangeChange:function(){
		var check= function(o1, o2){
			for(var p in o1){
				if(o1.hasOwnProperty(p)){          
					if(o1[p] !== o2[p]){            
						return false;
					}
				}
			}    
			return true;
		}
		var newDHCPServer = {
			Address:	this.objects.DHCPServer.Address,	
			Netmask:	this.objects.DHCPServer.Netmask,
			DHCPEnable:	this.objects.DHCPServer.DHCPEnable,      
			DHCPMinAddress:	this.objects.initialDHCPServer.DHCPMinAddress,
			DHCPMaxAddress:	this.objects.initialDHCPServer.DHCPMaxAddress
    
		};    
	
		return check(newDHCPServer,this.objects.initialDHCPServer);
	},
	onSave: function (event){
		var checked = "";
		if(event) {
			event.stop(event);
		}
		$("dhcp_error").update();
		$("config.lan.dhcp").hide();      
		Object.extend(this.objects.DHCPServer,this.toObject().DHCPServer);
    
		this.objects.DHCPServer.DHCPEnable = $("dhcp_enable").checked ? true : false;
	
		if (!this.checkChange()) {
			this.objects.DHCPServer._validations=[];
			this.objects.DHCPServer._errors =$A();            
			if(this.validateForm(this.objects.DHCPServer)) {
				this.markAsLoading();             
				this.client.execute("sysbus.NMC:setLANIP",{
					Address:	this.objects.DHCPServer.Address,	
					Netmask:	this.objects.DHCPServer.Netmask,
					DHCPEnable:	this.objects.DHCPServer.DHCPEnable,      
					DHCPMinAddress:	this.objects.DHCPServer.DHCPMinAddress,
					DHCPMaxAddress:	this.objects.DHCPServer.DHCPMaxAddress
				},{
					onSuccess : this.whenSaved.bind(this, this.objects.DHCPServer.Address),
					onFailure: this.whenNotSaved.bind(this)
				});    
   
			} else {
				Sah.translator.change($("dhcp_error"),this.objects.DHCPServer._errors[0].label,this.objects.DHCPServer._errors[0].message);
				$("config.lan.dhcp").show();
				this.logger.error("unable to save rule", this.objects.DHCPServer._errors);
			}
		} else {
			this.logger.info("nothing has changed in LanAccess, skipping save");
		}
		
		/*if (this.objects.Status.IPv6Address != "") {
			checked = $("dhcp_enablev6").checked ? true : false;
			
			if (checked !== this._dhcpv6_status) {
				this.client.execute("sysbus.DHCPv6.Server:enableDHCPv6Server", {
					enable: checked
				}, {
					onSuccess: function () {
						this._dhcpv6_status = checked
					}.bind(this)
				});
			}
		}
		*/
		return false;
	},

	/**
	* called when the form was correctly saved
	*/
	onCommit: function (ipChanged){
		this.objects.DHCPServer.DHCPEnable = (this.dhcpEnabled ? true : false);
		this.client.execute("sysbus.NMC:setLANIP",{
			Address:	this.objects.DHCPServer.Address,	
			Netmask:	this.objects.DHCPServer.Netmask,
			DHCPEnable:	this.objects.DHCPServer.DHCPEnable,      
			DHCPMinAddress:	this.objects.DHCPServer.DHCPMinAddress,
			DHCPMaxAddress:	this.objects.DHCPServer.DHCPMaxAddress
		},{
			onSuccess : this.whenSaved.bind(this, this.objects.DHCPServer.Address),
			onFailure: this.whenNotSaved.bind(this)
		});    
	},

	whenSaved : function(ipChanged){
		this.logger.info("object saved");
		this.fillForm();
		this.markAsLoaded();
		if (ipChanged) {
			/* reload window to the home page because we are not authenticated for the new IP*/
			if(!this.checkOnlyRangeChange())
				window.location = "http://" + this.objects.DHCPServer.Address;
			else {
				window.location.reload();
			}
		}		
	},

	whenNotSaved: function (obj){
		this.logger.warn(obj);
		this.markAsLoaded();
		var notification = new Sah.Widget.ObjectNotification(obj, t("Lan.Dhcp.Title", "Lan DHCP"));
		notification.show();
		this.fillForm();
	},

	onCancel: function(event){
		Event.stop(event);
		this.objects.DHCPServer = this.objects.initialDHCPServer;
		this.objectsLoaded();
      
		return false;
	},
  
	onIpChange: function (){
		var ip = new Sah.IPAddress(this.el.ip.getValue(), this.el.mask.getValue());
		if(ip.check( Sah.IPAddress.CHK_LAN | Sah.IPAddress.CHK_HOST )){
			var ips = ip.getDHCPRange();
			this.el.minAddr.setValue(ips.first);
			this.el.maxAddr.setValue(ips.last);
		}
	},
    
	validateForm: function (obj){
       
		var ip = new Sah.IPAddress(obj.Address, obj.Netmask);
		if(!ip.check( Sah.IPAddress.CHK_LAN | Sah.IPAddress.CHK_HOST )){
			if(ip.errno & Sah.IPAddress.ERR_ADDR){
				obj._addError("IPAddress","X Bad IP Address","advconfig.network.dhcp.error.ipaddress.bad");
				return false;
			}else if(ip.errno & Sah.IPAddress.ERR_MASK){
				obj._addError("SubnetMask", "X Bad SubnetMask","advconfig.network.dhcp.error.subnetMask");
				return false;
			}
		}

		if (ip.conflict("192.168.128.1/24") && config.BUILD_PROJECT.indexOf("2.8") < 0) {
			obj._addError("IPAddress","X Conflict with 192.168.128.0/24 reserved subnetwork","advconfig.network.dhcp.error.conflict.subnet192168128");
			return false;
		}
		
		if(!ip.checkDHCPRange( obj.DHCPMinAddress, obj.DHCPMaxAddress )){
			if(ip.errno & Sah.IPAddress.ERR_FIRST){
				obj._addError("MinAddress","X Bad  Start IP Address","advconfig.network.dhcp.error.ipaddress.minAddress");
				return false;
			}else if(ip.errno & Sah.IPAddress.ERR_LAST){
				obj._addError("MaxAddress","X Bad End IP Address","advconfig.network.dhcp.error.ipaddress.maxAddress");
				return false;
			}
		}
      
		var staticIPs = Sah.get("staticIPs"),
		min = Sah.Byte4.parseIPAddress(obj.DHCPMinAddress).bytes.toInt(),
		max = Sah.Byte4.parseIPAddress(obj.DHCPMaxAddress).bytes.toInt();
      
		for (ip in staticIPs){
			if(staticIPs.hasOwnProperty(ip)){
				if(staticIPs[ip]&&Sah.Byte4.parseIPAddress(staticIPs[ip])){
					var v = Sah.Byte4.parseIPAddress(staticIPs[ip]).bytes.toInt();
					if( !(min <= v && v <= max)){
						obj._addError("MinAddress","At least one static IP is out of the DHCP range. Please delete the concerned host first or choose an other DHCP range","advconfig.network.dhcp.error.outofrangestaticip");
						return false;
					}
				}
      
			}
		}
       
    
		return true;
	},
  	selectDisableDHCP:function(){
		if(this.objects.DHCPServer.DHCPEnable){
			ctl.msgbox.Show(ctl.msgbox.QUESTION.YES_NO, t('advconfig.network.dhcp.info.disable', 'X '), (function () {
						this.disableDHCP();
					}.bind(this)), undefined);
		}
	},
	disableDHCP:function(){
		this.el.enable.checked = true	
	},
	stateChange: function (elt) {  
		this.dhcpEnabled = (elt.value == "1");		
		if(this.dhcpEnabled){
			['dhcp_ip','dhcp_mask','dhcp_min_addr','dhcp_max_addr'].each(function(el){
				$(el).enable();
			});
			
		}else{
			['dhcp_ip','dhcp_mask','dhcp_min_addr','dhcp_max_addr'].each(function(el){
				$(el).disable();
			});
		}
	}
});


/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/tv.js */

/**
 * @namespace Holds the services entity and its associated forms
 */
var Tv = {};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/captive/captivePortal.js */
/**
 * The captive portal form
 *
 * When the class is intantiated, the initialize method is called. There you first
 * need to call the parent constructor using $super. Then you can set up the various
 * event handlers that you will need. Then you need to define which objects you need
 * from sahbus with the needs() method. Finally you can call the load method that
 * will load those objects.
 *
 * When all the objects needed are loaded, the method objectsLoaded() will be called.
 * By default, the object fetched are stored into the variable objects. If you need
 * to, like in this case, you can setup other variables in objects. Those will be
 * used to fillup the form with the values from sahbus and to save the form into
 * sahbus. A mapping is automatically created that maps the objects properties to
 * form elements, using the this.fromObject(this.objects) method. You can than store
 * back the form in the objects by using object._update(this.toObject) method.
 * @class
 * @augments Sah.AuthenticatedForm
 */

Captive.CaptivePortal = Class.create(Sah.Form, {
        initialize: function ($super, form) {
		$super(form);
		this.getErrorCode();
        },
	
	getErrorCode: function () {
		var href = decodeURI(window.location.href);
		
		var pa = href.split('?').pop().split("&");

		var p = {}, undef;
		
		for(var j=0; j<pa.length; j++) {
		      var kv = pa[j].split("=");
		      p[kv[0]] = kv[1];
		}	

		if (p.errorcode !== undef && p.errorcode != '') {
			this.appeendErrorCode(p.errorcode);
		} else {
			this.client.execute("sysbus.NMC.Error:getPrimaryErrorCode", {}, {
				onSuccess: this.appendErrorDescription.bind(this),
				onFailure: this.appendFailure.bind(this)
			});
		}
	  
	}, 
	
	appeendErrorCode: function (errorCode) {

		if (appConfig === 'fr'){
		      if (Sah.captivePortal[errorCode]) {
			      $("errorMessages").update(Sah.captivePortal[errorCode].messages);
		      } else {
			      $("errorMessages").update(Sah.captivePortal["Error_01"].messages);
		      }
		} else if (appConfig === 'pl'){
		      if (Sah.captivePortal[errorCode]) {
			      $("errorMessages").update(Sah.captivePortal[errorCode].messages_pl);
		      } else {
			      $("errorMessages").update(Sah.captivePortal["Error_01"].messages_pl);
		      }
		}
	
	},
	
        appendErrorDescription: function (obj) {
		    
		if (appConfig === 'fr'){
		      if (Sah.captivePortal[obj.result.status]) {
			      $("errorMessages").update(Sah.captivePortal[obj.result.status].messages);
		      } else {
			      $("errorMessages").update(Sah.captivePortal["Error_01"].messages);
		      }
		} else if (appConfig === 'pl'){
		       if (Sah.captivePortal[obj.result.status]) {
			      $("errorMessages").update(Sah.captivePortal[obj.result.status].messages_pl);
		      } else {
			      $("errorMessages").update(Sah.captivePortal["Error_01"].messages_pl);
		      }
		} 
        },
	
	appendFailure: function () {
	
		if (appConfig === 'fr'){
		    $("errorMessages").update(Sah.captivePortal["Error_01"].messages);
		} else if (appConfig === 'pl'){
		    $("errorMessages").update(Sah.captivePortal["Error_01"].messages_pl);
		} 
	}
});
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/captive/stbCaptivePortal.js */
/**
 * The captive portal form
 *
 * When the class is intantiated, the initialize method is called. There you first
 * need to call the parent constructor using $super. Then you can set up the various
 * event handlers that you will need. Then you need to define which objects you need
 * from sahbus with the needs() method. Finally you can call the load method that
 * will load those objects.
 *
 * When all the objects needed are loaded, the method objectsLoaded() will be called.
 * By default, the object fetched are stored into the variable objects. If you need
 * to, like in this case, you can setup other variables in objects. Those will be
 * used to fillup the form with the values from sahbus and to save the form into
 * sahbus. A mapping is automatically created that maps the objects properties to
 * form elements, using the this.fromObject(this.objects) method. You can than store
 * back the form in the objects by using object._update(this.toObject) method.
 * @class
 * @augments Sah.AuthenticatedForm
 */

Captive.StbCaptivePortal = Class.create(Sah.Form, {
	initialize: function ($super, form) {
	    $super(form);
		    
	    this.appendErrorDescription();
	},

	appendErrorDescription: function () {
	    $("errorMessages").update(Sah.captivePortal["Error_09"].messages);
	}
    }
);
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/wan/ConnectionModeOpt.js */

Wan.ConnectionModeOpt = Class.create(Sah.AuthenticatedForm, {
	
	
	initialize: function ($super, form) {
		$super(form);
	
		$("bt_save").observe("click", this.onSave.bind(this));
		$("bt_cancel").observe("click", this.onCancel.bind(this));
		$("bridged_check").observe("click",this.onChange.bind(this));
		$("routed_check").observe("click",this.onChange.bind(this));
		//$("bt_refresh").observe("click", this.onRestart.bind(this));


		
		
		this.needs("MLTV", {
			path: "sysbus.NMC.OrangeTV:getIPTVMultiScreens",
			method: "execute",
			methodParams: {}
		});
		
		this.needs("WAN", {
			path: "sysbus.NMC:getWANStatus",
			method: "execute",
			methodParams: {}
		});
		

		

		this.form.disable();
		this.load();
	},
	
	objectsLoaded: function () {
		
		this.oldstatus = this.objects.MLTV.MLTVEnable; 
		this.form.enable();
		this.fillForm();
	},
	
	fillForm: function () {
		if(this.objects.WAN.LinkType == "ethernet"){
	/*		$($("cnt_config_ports_pc").down("td.last div")).hide();
			$($("cnt_config_ports_satellite").down("td.last div")).hide();
			$($("cnt_config_ports_stb").down("td.last div")).hide();
			var ftth = new Element("span");
			ftth.className = "translation Translations.advconfig.ports.label.ftth";
			ftth.setStyle({
				margin:'auto'
			});
			var ftth2=ftth.clone(), ftth3 = ftth.clone();
			$($("cnt_config_ports_pc").down("td.last")).appendChild(ftth);
			$($("cnt_config_ports_satellite").down("td.last")).appendChild(ftth2);
			$($("cnt_config_ports_stb").down("td.last")).appendChild(ftth3);
	*/	
			$($("pc_port4_ftth").parentNode).show();
			$($("sat_port4_ftth").parentNode).show();
			$($("stb_port4_ftth").parentNode).show();
		}
		else{
			$($("pc_port4").parentNode).show();
			$($("sat_port4").parentNode).show();
			$($("stb_port4").parentNode).show();
		} 
		for(var i=1; i<5;i++){
			$("pc_port"+i).className="picture";
			$("sat_port"+i).className="picture";
			$("stb_port"+i).className="picture";
		}
		
		if(this.objects.MLTV.MLTVEnable){
			$("bridged_check").checked = true;
			Sah.translator.change($("cnt_config_ports_satellite").down("td.first span"),"advconfig.ports.label.iptv1","");
			Sah.translator.change($("cnt_config_ports_stb").down("td.first span"),"advconfig.ports.label.iptv2","");
			$("pc_port2").className = $("pc_port3").className = "disabled-picture";
			$("sat_port1").className = $("sat_port4").className  = "disabled-picture";
			$("stb_port1").className = $("stb_port4").className  = "disabled-picture";
			
		}else{
			$("routed_check").checked =true;
			Sah.translator.change($("cnt_config_ports_satellite").down("td.first span"),"advconfig.ports.label.sat","");
			Sah.translator.change($("cnt_config_ports_stb").down("td.first span"),"advconfig.ports.label.iptv","");
						
			$("pc_port2").className = $("sat_port2").className = "disabled-picture";
			$("stb_port1").className = $("stb_port3").className = $("stb_port4").className = "disabled-picture";
		}
		
	},
	onChange:function(){
		
		this.objects.MLTV.MLTVEnable = $("bridged_check").checked? true : false;
		this.fillForm();
	},
	onCancel: function(){
		this.objects.MLTV.MLTVEnable = this.oldstatus ;
		this.fillForm();
	},
	onSave:function(){
		this.client.execute("sysbus.NMC.OrangeTV:setIPTVMultiScreens",{
			MLTVEnable : $("bridged_check").checked ? true : false
		},{
			onSuccess:this.whenSaved.bind(this),
			onFailure:this.whenNotSaved.bind(this)
		})
	},
	whenSaved : function(){
		this.logger.info("modification has been saved");
		//Sah.redirect("/advConfigNetworkDhcp.html");
	},
	whenNotSaved : function(){
		this.logger.warn("modification has not been saved")
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/wan/internet.js */
/*
 *
 * Broadband Network Details
 *
 *      ( Link Type )
 *
 */

Wan.Internet = Class.create(Sah.AuthenticatedForm, /** @lends Wan.Internet# */ {
    initialize: function ($super, form) {
        $super(form);

        /* this.needs("Wan", {
      path: "SI.Wan"
    });*/
        this.needs("Wan.Status", {
            path: "sysbus.NMC:getWANStatus",
            method: "execute"
        });
        this.needs("Wan.NMC", {
            path: "sysbus.NMC",
            depth: 1
        });
        /* this.needs("Wan.Devices",{
      path:"sysbus.IGD.WANDevice",
      depth:1
    });*/
        this.needs("Wan.Infos", {
            path: "sysbus.NeMo.Intf.data:getMIBs",
            methodParams: {
                traverse: "down"
            },
            method: "execute"
        });

        //this.markAsLoading();
        this.load();
    },

    objectsLoaded: function () {
        
    }
});
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/wan/connectionSettings.js */

Wan.ConnectionSettings = Class.create(Sah.AuthenticatedForm, {
	_update: false,
	_currentProtocol: 'ppp',
	_timeout: null,
	
	initialize: function ($super, form) {
		$super(form);
                
		if (appConfig === 'pl') {
			$("accesstype_warning").removeClassName("Translations.advconfig.accesstype.label.warning.fr");
			$("accesstype_warning").addClassName("Translations.advconfig.accesstype.label.warning.pl");
			Sah.translator.refresh();
		}
		this.events = []; 
		this.request = {"channelid":0, "events":[ {"service":"NMC.Autodetect", "event":"changed"} ] };                
		this.retry = 0;
		this._pattern = {
			Ethernet: {
				dhcp: /eth(ernet)?-dhcp/i,
				ppp: /eth(ernet)?-ppp/i,
				pppoe: /eth(ernet)?-pppoe([^\+]|$)/i,
				pppoe_vcmux: /eth(ernet)?-pppoe\+vcmux/i,
				pppoe_llc: /eth(ernet)?-pppoe\+llc/i,
				pppoa: /eth(ernet)?-pppoa([^\+]|$)/i,
				pppoa_vcmux: /eth(ernet)?-pppoa\+vcmux/i,
				pppoa_llc: /eth(ernet)?-pppoa\+llc/i
			},
			DSL: {
				dhcp: /dsl-dhcp/i,
				ppp: /dsl-ppp/i,
				pppoe: /dsl-pppoe([^\+]|$)/i,
				pppoe_vcmux: /dsl-pppoe\+vcmux/i,
				pppoe_llc: /dsl-pppoe\+llc/i,
				pppoa: /dsl-pppoa([^\+]|$)/i,
				pppoa_vcmux: /dsl-pppoa\+vcmux/i,
				pppoa_llc: /dsl-pppoa\+llc/i
			}
		};

		this._profileList = [{
			code: "",
			label: "setup.accesstype.label.countries.option.select",
			alt: "X Select..."
		},
		
		{
			code: "LU",
			label: "setup.accesstype.label.countries.option.luxembourg",
			alt: "X Luxembourg"
		},

		{
			code: null,
			label: null
		},

		{
			code: "CI",
			label: "setup.accesstype.label.countries.option.ivorycoast",
			alt: "X Ivory Coast"
		},

		{
			code: "MU",
			label: "setup.accesstype.label.countries.option.republicofmauritius",
			alt: "X Republic of Mauritius"
		},

		{
			code: "SN",
			label: "setup.accesstype.label.countries.option.senegal",
			alt: "X Senegal"
		},

		{
			code: "OTHER",
			label: "setup.accesstype.label.countries.option.other",
			alt: "X Other"
		}];

		this._waitSet = ["..", "....", "......", "........", "..........", "........", "......", "....", "..", ""];

		$("bt_save").observe("click", this.onSave.bind(this));
		$("bt_cancel").observe("click", this.onCancel.bind(this));
		$("bt_refresh").observe("click", this.onRestart.bind(this));
		//$("wan_username").observe("keyup", this.clearPassword.bind(this));
		if(!$("wan_username").addEventListener){
			
			$("wan_username").attachEvent("onpropertychange", this.clearPassword.bind(this));
		}else
		{
			$("wan_username").addEventListener("input",this.clearPassword.bind(this),false);
		}
		

		$("cnt_link_type").show();
		
		this.needs("WANStatus", {
			path: "sysbus.NMC:getWANStatus",
			method: "execute",
			methodParams: {}
		});
		
		$("header-controls-accessibility-contrast3").observe("click", function(){
			$('msgbox_text').setStyle({
				color: 'white'
			});
			$('msgbox_waiter').setStyle({
				color: 'white'
			});
			
		});
		
		$("header-controls-accessibility-contrast2").observe("click", function(){
			$('msgbox_text').setStyle({
				color: 'black'
			});
			$('msgbox_waiter').setStyle({
				color: 'black'
			});			
		});
		
		$("header-controls-accessibility-contrast1").observe("click", function(){
			$('msgbox_text').setStyle({
				color: 'black'
			});
			$('msgbox_waiter').setStyle({
				color: 'black'
			});			
		});
		this.form.disable();
		this.load();
	},
	
	objectsLoaded: function () {
		if (config.BUILD_PROJECT.indexOf("2.8") < 0 && appConfig === 'pl') {
			$('cnt_link_type').hide();
			$('hr-orange').hide();
		}
		if (this.objects.WANStatus.LinkType && this.objects.WANStatus.Protocol) {
			this.objects.LinkType = (this.objects.WANStatus.LinkType.toLowerCase() == "ethernet") ? "Ethernet":this.objects.WANStatus.LinkType.toUpperCase();	
			this.objects.Protocol = this.objects.WANStatus.Protocol.toLowerCase() === "dhcp" ? "DHCP" : "PPP";
		} else {
			this.objects.LinkType = "DSL";
			this.objects.Protocol = "PPP";
		}
		
		if (this.objects.Protocol && this.objects.Protocol.toLowerCase() == "dhcp") {
			this._currentProtocol = 'dhcp';
		} else {
			this._currentProtocol = 'ppp';
		}
		
		this.fillForm();
		this.form.enable();
		this._updateWanState();
	},
	
	fillForm: function () {
		if (appConfig === "fr") {
			this.objects.Prefix = "fti/";
		} else if (appConfig === "pl") {
			this.objects.Prefix = "";
		}
		
		this.objects.Suffix = "";
		
		$("cnt_msgbox").hide();

		if (this.objects.LinkType === "Ethernet" && $("cnt_link_type_eth").visible() || !$("cnt_link_type_dsl").visible()) {
			$("link_type_eth").checked = true;
		} else {
			$("link_type_dsl").checked = true;
		}
		
		this._initialOfferType = $('link_type_dsl').checked ? "dsl" : "ethernet";
		this.getCridentials();

		$('link_type_dsl').observe("click", this.connectionChanged.bind(this));
		$('link_type_eth').observe("click", this.connectionChanged.bind(this));
	},
	
	
	getCridentials: function () {
		this.client.execute("sysbus.NeMo.Intf.data:getMIBs", {
			"mibs":"ppp", 
			"flag":"", 
			"traverse": "all"
		}, {
			onSuccess: this.success.bind(this),
			onFailure: this.failure.bind(this)
		});
	},
	
	success: function (obj) {
		this.objects.PPP = obj.result.status;
		if (this.objects.PPP.ppp.ppp_data.Username !== "" && this.objects.PPP.ppp.ppp_data.Username !== "pnp/orange2" ) {
			$("wan_username").setValue(this.objects.PPP.ppp.ppp_data.Username.replace('fti/', ''));
			$("wan_password").setValue("********");
		} else {
			$("wan_username").setValue("");
			$("wan_password").setValue("");
		}
		$("cnt_credentials").show();
	},
	
	
	failure: function () {
		$("cnt_credentials").show();
	},

	connectionChanged: function () {
		var linkType = $('link_type_dsl').checked ? "DSL" : "Ethernet";
		this.objects.LinkType = linkType ;
		var currentLinkType = (this.objects.WANStatus.LinkType.toLowerCase() == "ethernet") ? "Ethernet":this.objects.WANStatus.LinkType.toUpperCase() ;

		if ( linkType ===  currentLinkType ) {
			['wan_username', 'wan_password'].each(function(el){ $(el).enable(); });
		} else {
			['wan_username', 'wan_password'].each(function(el){ $(el).disable(); });
		}

		if (this._currentProtocol === 'dhcp' && this.objects.WANStatus.Protocol.toLowerCase() === 'ppp') {
			this._currentProtocol = 'ppp';
			this.getCridentials();
		}
	},
	
	_updateWanState: function (result) {
		if (result) {
			this.objects.WANStatus = result.result.data;
		}
		
		if (this.objects.WANStatus.LinkType && this.objects.WANStatus.Protocol) {
			this.objects.LinkType = (this.objects.WANStatus.LinkType.toLowerCase() == "ethernet") ? "Ethernet":this.objects.WANStatus.LinkType.toUpperCase();	
			this.objects.Protocol = this.objects.WANStatus.Protocol.toLowerCase() === "dhcp" ? "DHCP" : "PPP";
		} else {
			this.objects.LinkType = "DSL";
			this.objects.Protocol = "PPP";
		}

		if (this._currentProtocol === 'dhcp' && this.objects.Protocol.toLowerCase() === 'ppp') {
			this._currentProtocol = 'ppp';
			this.getCridentials();
		}
		
		if ($("cnt_msgbox").visible()) {
			if (!this.objects.WANStatus.LinkState.match(/up/i)) {
				var linkType = $('link_type_dsl').checked ? "DSL" : "Ethernet";
				
				if (linkType === "Ethernet") {
					this.displayMessage("error.ftth_link", "Ethernet Link Status", "Link with fiber mode is down", 0);
				} else {
					this.displayMessage("error.adsl_link", "Physical Link Status", "ADSL synchronization failed", 0);
				}
						
				this._update = false;
			} else if (this.objects.WANStatus.ConnectionState) {
				if (this.objects.WANStatus.ConnectionState.match(/^connected|bound/i)) {
					this.displayMessage("connected", "", "", 0);
					this._update = false;
				} else if (this.objects.WANStatus.Protocol.match(/^ppp/i) /*&& this.objects.WANStatus.LastConnectionError === "ERROR_AUTHENTICATION_FAILURE"*/) {
					this.retry +=1;
					if (this.retry > 5) {
						this.retry =0;
						this.displayMessage("error.authentication", "Authentication Failure", "Authentication Failure", 0);
	
						this._update = false;
					}
				} else {
					// if(this.objects.WANStatus.LastConnectionError !== "ERROR_USER_DISCONNECT"){
						this.displayMessage("status.connection", "", "", 1);
					//}
				}
			}
			
					
			if (this._update) {
				if (this._timeout != null) {
					clearTimeout(this._timeout);
				}
				this._timeout = setTimeout(function () {
					this.client.execute("sysbus.NMC:getWANStatus", {}, this._updateWanState.bind(this));
				}.bind(this), 5000);
			}
		}
	},
	
	onSave: function (event) {
		var wanobject = {},
		linkType = $('link_type_dsl').checked ? "DSL" : "Ethernet",
		WanMode = this.objects.LinkType+"_PPP";
		//var protocol = this.objects.Protocol; //not used
		//console.warn("onSave: linkType =%s, this.objects.LinkType =%s, this.objects.WANStatus.LinkType %s", linkType ,this.objects.LinkType , this.objects.WANStatus.LinkType);
			
	/*	if (protocol.toLowerCase().indexOf("dhcp") >= 0) {
			//$("cnt_credentials").hide();
			var currentOfferType = linkType.toLowerCase();
			if (this._initialOfferType === currentOfferType) {	
				Event.stop(event);
				return;
			} else {
				WanMode = this.objects.LinkType + "_PPP";
				wanobject = {
					"WanMode": WanMode
				};
			}
		} else {	*/		
			var login, password, saveProfile = false;
			
			if(linkType === "DSL" && this.objects.WANStatus.LinkType.toLowerCase().indexOf("dsl")<0) {
				WanMode="DSL_PPP";
			//	protocol = this.objects.Protocol; //not used
				saveProfile = true ;
				//console.warn("onSave: WanMode = DSL_PPP ");	
			} 
			if(linkType === "Ethernet" && this.objects.WANStatus.LinkType.toLowerCase().indexOf("dsl")>=0) {			
				WanMode="Ethernet_PPP";			
			//	protocol = this.objects.Protocol; //not used
				saveProfile = true ;
				//console.warn("onSave: WanMode = Ethernet_PPP ");	
			}
			
			$("cnt_msgbox").hide();

			if (saveProfile) {
				console.warn("onSave: Change line Profile ");
				wanobject = {
					"WanMode": WanMode,
					"Username": "pnp/orange2",
					"Password": "orange"
				}
				this.client.execute("sysbus.NMC:setWanMode", wanobject, {
					onSuccess: this.whenSaved.bind(this),
					onFailure: this.whenNotSaved.bind(this)
				});	
				return;
			}
			this._waitSetIt = 0;
			
			//if (protocol.toLowerCase().match(/ppp/i) && this._currentProtocol != 'dhcp') {
				var arr = $("wan_username").value.split("fti/");

				if (arr[0] === "") {
					arr =  arr.slice(1);
				}
				
				login = arr.join("");
				if (appConfig === 'fr') {
					login = this.objects.Prefix + arr.join('fti/');
				}
				password = $("wan_password").value;
				
				if (!login.match(new RegExp("^" + this.objects.Prefix + "\\S+" + this.objects.Suffix + "$")) || !password.match(/\S/)) {
					this.displayMessage("error.empty", "Invalid values", "Check that login and password are correct", 0);
					return;
				}
			//}
			
			wanobject = {
				"WanMode": WanMode,
				"Username": login,
				"Password": password
			}

			if (this.objects.PPP && this.objects.PPP.ppp.ppp_data && this.objects.PPP.ppp.ppp_data.Username && this.objects.PPP.ppp.ppp_data.Username != "") {
			  console.warn('dhcp');
				if (login != this.objects.PPP.ppp.ppp_data.Username && password == "********") {
					wanobject = {
						"WanMode": WanMode,
						"Username": login,
				                "Password": password
					}
				}
			}
			
			if (password === "********" || this._currentProtocol === 'dhcp') {
			  console.warn('_currentProtocol dhcp');
				wanobject = {
					"WanMode": WanMode,
					"Username": login,
					"Password": password
				}
			}

			if((login == this.objects.PPP.ppp.ppp_data.Username)&& (password === "********")){
				wanobject = {
					"WanMode": WanMode
				}
			}
			
			var is_DSL = (this.objects.LinkType !== "Ethernet") ? "DSL" : "Ethernet";
			Cookie.set('WanInterfaceConfig', is_DSL);
		//}
		this.client.execute("sysbus.NMC:setWanMode", wanobject, {
			"onSuccess": function () {
				this._update = true;
				if (this._timeout != null) {
					clearTimeout(this._timeout);
				}
				this._timeout=setTimeout(function () {
					this.client.execute("sysbus.NMC:getWANStatus", {}, this._updateWanState.bind(this));
				}.bind(this), 5000);
			}.bind(this),
			"onFailure": this.whenNotSaved.bind(this)
		});
		this.displayMessage("status.connection", "", "", 1);
	},


     rebootBox: function () {
         this.client.execute("sysbus.UserInterface:setState", {"currentState" : "" }, {});
         this.client.execute("sysbus.NMC:reboot", { }, {
             onSuccess: function() {
                     setInterval(this.redirect("/setupAuthenticationType.html"),5000);}.bind(this),
 	        onFailure: function() {	this.logger.error("error rebooting try manually"); }.bind(this)
 		});
     },
     eventObserve: function () {
 		this.rq = new Ajax.Request("/sysbus/eventmanager:get_events", {
 			method: "post",
 			postBody: Object.toJSON({ "parameters": this.request }),
 			contentType:"application/x-sah-ws-4-call+json",
 			requestHeaders: {
 				"X-Context":Sah.Bus.contextID,
 				"X-Sah-Request-Type": "idle"
 			},
 			onSuccess: this.eventReceived.bind(this),
 			onFailure: this.eventFailed.bind(this)
 		});
 	},
     eventFailed: function (response) {
 		var msg = "error monitoring events: " + response.status + " " + response.statusText;
 		if (response.responseJSON) {
 			msg += " " + response.responseText;
 		}
 		Sah.logger.error(msg);
         //need force reboot
         this.rebootBox ();
 	},
     eventReceived: function (response) {
 	        var o;
 		    if (o = response.responseText) {
 		        if ((o.indexOf("null")<0)&&(o.indexOf("error")<0)) {
 			        response = JSON.parse(o);
 			        if(response.status){
 				        this.events = this.events.concat(response.status.events);
 				        this.request.channelid = response.status.channelid;
 			        }
                     var e = null,
                     firstBoot,
 		            undef;
 		            while ((e = this.events.shift())) {
 			            if (e.data.object.attributes.FirstBoot != undef) {
 				            firstBoot =e.data.object.attributes.FirstBoot;
 			            }
 		            }
                     //Sah.logger.error(firstBoot);
         		    if(firstBoot == 1 ) {
                         this.rebootBox ();
                     }
     		    } else {
 		            this.eventObserve();
 			    }
 		    } else {
 			        this.eventObserve();
 		    }
 	},

	whenSaved: function (obj) {
		['wan_username', 'wan_password'].each(function(el){ $(el).disable(); });
		console.info ("whenSaved :setWanMode ok");
		Cookie.set('WanInterfaceConfig', this.objects.LinkType);
		Sah.logger.error("set default credentiel");
		this.eventObserve();
	},

	whenNotSaved: function (obj) {
		if (this.objects.stopRereshReq) {
			return;
		}
		this.logger.warn("Saving connection parameters failed");
		this.logger.warn(obj);
	},

	displayMessage: function (errorName, defaultTitle, defaultMessage, nbRefresh) {
		if (this._waitSetIt >= 10) {
			this._waitSetIt = 0;
		}
		
		Sah.translator.change($("msgbox_title"), "advconfig.accesstype." + errorName + ".label", "X " + defaultTitle);
		Sah.translator.change($("msgbox_text"), "advconfig.accesstype." + errorName + ".description", "X " + defaultMessage);
		
		if (nbRefresh > 0) {
			$("msgbox_waiter").update(this._waitSet[this._waitSetIt % 10]);
			this._waitSetIt++;
		} else {
			$("msgbox_waiter").update("");
		}
		
		$("cnt_msgbox").show();
	},

	onCancel: function (event) {
		event.stop();
				
		if (this._timeout != null) {
			clearTimeout(this._timeout);
		}
		
		$("cnt_msgbox").hide();
		
		var linkType = $('link_type_dsl').checked ? "DSL" : "Ethernet";
		
		if (this.objects.Protocol.toLowerCase().indexOf("dhcp") >= 0) {
			//$("cnt_credentials").hide();
			
			if (this._initialOfferType === linkType.toLowerCase()) {	
				Event.stop(event);
				return;
			}
		}
		
		
		//Sah.redirect("/advConfigAccessType.html");
		
		if (this.objects.WANStatus.LinkType && this.objects.WANStatus.Protocol) {
			this.objects.LinkType = (this.objects.WANStatus.LinkType.toLowerCase() == "ethernet") ? "Ethernet":this.objects.WANStatus.LinkType.toUpperCase();	
			this.objects.Protocol = this.objects.WANStatus.Protocol.toLowerCase() === "dhcp" ? "DHCP" : "PPP";
		} else {
			this.objects.LinkType = "DSL";
			this.objects.Protocol = "PPP";
		}
		
		if (this.objects.LinkType === "Ethernet" && $("cnt_link_type_eth").visible() || !$("cnt_link_type_dsl").visible()) {
			$("link_type_eth").checked = true;
		} else {
			$("link_type_dsl").checked = true;
		}
		
		if (this.objects.PPP.ppp && this.objects.PPP.ppp.ppp_data && this.objects.Protocol.match(/ppp/i)) {
			if (this.objects.PPP.ppp.ppp_data.Username !== "") {
				$("wan_username").setValue(this.objects.PPP.ppp.ppp_data.Username.replace('fti/', ''));
				$("wan_password").setValue("********");
			}
			else{				
				$("wan_username").setValue("");
				$("wan_password").setValue("");
			}
			
		}
		
		//if (this.objects.Protocol && this.objects.Protocol == "PPP") {
			$("cnt_credentials").show();
		//}

		$('link_type_dsl').observe("click", this.connectionChanged.bind(this));
		$('link_type_eth').observe("click", this.connectionChanged.bind(this));
	},

	onRestart: function (event) {
		event.stop();
		this.displayMessage("status.connection", "", "", 1);
		
		if(this.objects.Protocol.toLowerCase() ==="dhcp"){	
		this.client.execute("sysbus.NMC:setWanMode", {
			"WanMode": this.objects.LinkType+"_"+this.objects.Protocol
		}, {
			"onSuccess": function () {
				this._update = true;
				if (this._timeout != null) {
					clearTimeout(this._timeout);
				}
				this._timeout=setTimeout(function () {
					this.client.execute("sysbus.NMC:getWANStatus", {}, this._updateWanState.bind(this));
				}.bind(this), 5000);
			}.bind(this),
			"onFailure": this.whenNotSaved.bind(this)
		});
		
		}
		else {
		  this.client.execute("sysbus.NeMo.Intf.data:setFirstParameter", {
			"name": "Enable",
			"value": 0,
			"flag": "ppp",
			"traverse": "down"
		}, {
			"onSuccess":function () { 		
				this.client.execute("sysbus.NeMo.Intf.data:setFirstParameter", {
					"name": "Enable",
					"value": 1,
					"flag": "ppp",
					"traverse": "down"
					},{
					"onSuccess": function () {
					this._update = true;
						if (this._timeout != null) {
									clearTimeout(this._timeout);
							}
							this._timeout=setTimeout(function () {
						        this.client.execute("sysbus.NMC:getWANStatus", {}, this._updateWanState.bind(this));
									}.bind(this), 5000);
								}.bind(this),
								"onFailure": this.whenNotSaved.bind(this)
							});}.bind(this),
		
			"onFailure": this.whenNotSaved.bind(this)
		});
		}
	
	
	},

	clearPassword: function () {
		$("wan_password").setValue("");
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/wan/IPv6.js */

Wan.IPv6 = Class.create(Sah.AuthenticatedForm, {
	
	
	initialize: function ($super, form) {
		$super(form);
		$("bt_enable").hide();
		$("bt_disable").hide();
		$("bt_reconnect").hide();
		$("bt_disable").observe("click", this.onDisable.bind(this));
		$("bt_enable").observe("click", this.onEnable.bind(this));
		$("bt_reconnect").observe("click", this.onEnable.bind(this));

		if($('helpsection')){
			$('helpsection').hide();
		}

		this.needs("ipv6.status", {
			path: "sysbus.NMC.IPv6:get", 
			method:"execute"			
		});
		this.needs("ipv6.Prefix", {
			path: "sysbus.NMC:getWANStatus", 
			method:"execute"			
		});
		this.load();
	},
	
	objectsLoaded: function () {
		this.updateIPv6Status(); 
	},
	updateIPv6Status: function(){

		
		window.clearTimeout(this.timeout);
		var IPv6Status ="general.label.inprogress"; 		   
		if(this.objects.ipv6.status && !this.objects.ipv6.status.Enable){
			$("bt_enable").show();
			$("bt_disable").hide();
			$("bt_reconnect").hide();
			IPv6Status ="general.label.disabled";
		}else if(this.objects.ipv6.status && this.objects.ipv6.status.Enable && this.objects.ipv6.status.IPv6Address) {
			$("bt_enable").hide();
			$("bt_disable").show();
			$("bt_reconnect").hide();
			$('ipv6.address').update(this.objects.ipv6.Prefix.IPv6DelegatedPrefix);
			IPv6Status ="general.label.enabled";
			
		}else{
			$("bt_enable").hide();
			$("bt_disable").show();
			$("bt_reconnect").show();
			IPv6Status ="general.label.inprogress";
			this.timeout = window.setTimeout((function () {
						this.redirect("/advConfigIPv6.html");
					}).bind(this),3000);
		
		}
		Sah.translator.change($('Status.IPv6Enable'), IPv6Status, this.objects.ipv6.status);
	},	
	onDisable: function(){
				
				this.client.execute("sysbus.NMC.IPv6:set", {
					Enable: false,
					UserRequested:false
				}, {
					onSuccess: function () {
						Sah.redirect("/advConfigIPv6.html");
					}.bind(this)
				});
			
	},
	onEnable: function(){
				this.client.execute("sysbus.NMC.IPv6:set", {
					Enable: true,
					UserRequested:true
				}, {
					onSuccess: function () {
						Sah.redirect("/advConfigIPv6.html");
					}.bind(this)
				});
			
			
	},
	onReconnect:function(){
			this.onEnable();
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/wan/dynDNS.js */

/* TODO: documentation */
Wan.DynDNS = Class.create(Sah.AuthenticatedForm, {
	initialize: function ($super, form){
		
		$super(form);

		this.services = this.form.down("select[name='Line.Service']");

		/* setup events */
		$$(".WanDynDNSAdd").each(function (b) {
			b.observe("click", this.onSave.bind(this));
		}, this);

		/* fetch needed data */
		this.needs("DynDNS.Hosts", {
			path: "sysbus.DynDNS:getHosts",
			method :"execute",
			methodParams : {}
		});
		this.needs("DynDNS.Services", {
			path: "sysbus.DynDNS:getServices",
			method :"execute",
			methodParams : {}
		});
		this.refrech = null;
		document.observe('sah:admin:language:change', this.objectsLoaded.bind(this));
		//this.markAsLoading();
		this.form.disable();
		//this.markAsLoaded();
		this.load();
	},
    

	objectsLoaded: function ()
	{
       
		this.objects.Hosts = $A(this.objects.DynDNS.Hosts);
       
		/* setup needed templates */
		$$("tr.added").each(function(tr){
			tr.remove();
		});
		this.dynDNSTemplate = Sah.Templates['DynDNS'];
		this.dynDNSTemplate.callback = this.appendDynDNS.bind(this);
		this.dynDNSTemplate.apply(this.objects.DynDNS.Hosts);

		this.fillServicesSelect();
		//this.launchRefrech();
		this.form.enable();
		//this.markAsLoaded();
	},
	launchRefrech: function(){
		if(!this.refrech){
			this.refrech = setTimeout(function(){				
				this.needs("DynDNS.Hosts", {
					path: "sysbus.DynDNS:getHosts",
					method :"execute",
					methodParams : {}
				});
				this.needs("DynDNS.Services", {
					path: "sysbus.DynDNS:getServices",
					method :"execute",
					methodParams : {}
				});
				
				this.loaded = false;
				this.load();
			}.bind(this),5000);
		}		
	},

	deleteHostname: function (tr, host)
	{
		this.client.execute("sysbus.DynDNS:delHost",
		{
			"hostname":host.hostname
		},

		{
			"onSuccess":this.deleteClient.bind(this, tr),
			"onFailure":this.whenNotSaved.bind(this)
		} 
		);  
   
       
	},

	deleteClient: function (tr)
	{
		tr.remove();       
	},

	parseLastUpdate: function (str)
	{
		var time = ('' + str).replace(/-/g,"/").replace(/[TZ]/g," ");
		var str = new Date(time);
		var lastUpdate = {
			year:((str.getFullYear()+"").length == 1)?"0"+str.getFullYear():str.getFullYear(),
			month:(((str.getMonth()+1)+"").length == 1)?"0"+(str.getMonth()+1):(str.getMonth()+1),
			day:((str.getDate()+"").length == 1)?"0"+str.getDate():str.getDate(),
			hour:((str.getHours()+"").length == 1)?"0"+str.getHours():str.getHours(),
			minute:((str.getMinutes()+"").length == 1)?"0"+str.getMinutes():str.getMinutes(),
			seconde:((str.getSeconds()+"").length == 1)?"0"+str.getSeconds():str.getSeconds()
            	}
            	
		var timeStr = '';
		if ( Cookie.get("language") == "fr" ) {
			timeStr = lastUpdate.day+"/"+lastUpdate.month+"/"+lastUpdate.year.toString().substring(2,4)+" "+lastUpdate.hour+":"+lastUpdate.minute+":"+lastUpdate.seconde;
		}
		if ( Cookie.get("language") == "pl" ) {
			timeStr = lastUpdate.day+"/"+lastUpdate.month+"/"+lastUpdate.year.toString().substring(2,4)+" "+lastUpdate.hour+":"+lastUpdate.minute+":"+lastUpdate.seconde;
		}
		if ( Cookie.get("language") == "en" ) {
			timeStr = lastUpdate.year.toString().substring(2,4)+"/"+lastUpdate.month+"/"+lastUpdate.day+" "+lastUpdate.hour+":"+lastUpdate.minute+":"+lastUpdate.seconde;
		}
		return timeStr;
   
	},
/*
	parseLastUpdate: function (currentTime) {
		currentTime = currentTime.substring(0, 25);
		var currentDate = new Date(currentTime);

		var hourStr = currentDate.getHours();
		var minStr = currentDate.getMinutes();
		if (hourStr < 10) {
			hourStr = '0' + hourStr;
		}
		if (minStr < 10) {
			minStr = '0' + minStr;
		}

		// French Date Form :  'mercredi 5 mai 2010' + 24 hour
		var timeStr = '';

		if (Cookie.get("language") == "fr") {
			timeStr += t(Admin.Npt.Days[currentDate.getDay()], currentDate.getDay());
			timeStr += " " + currentDate.getDate();
			timeStr += " " + t(Admin.Npt.Months[currentDate.getMonth()], currentDate.getDay());
			timeStr += " " + currentDate.getFullYear();
			timeStr += " " + hourStr + ":" + minStr;
			return timeStr;
		}
		// Polish Date Form :  '5 maja 2010' + 24 hour
		else if (Cookie.get("language") == "pl") {
			timeStr += currentDate.getDate();
			timeStr += " " + t(Admin.Npt.Months[currentDate.getMonth()], currentDate.getDay());
			timeStr += " " + currentDate.getFullYear();
			timeStr += " " + hourStr + ":" + minStr;
			return timeStr;
		}
		// English & Default Date Form : 'Wednesday, May 05, 2010' + 24 hour
		else {
			if (appConfig === "pl") {
				timeStr += t(Admin.Npt.Days[currentDate.getDay()], currentDate.getDay());
				timeStr += " " + t(Admin.Npt.Months[currentDate.getMonth()], currentDate.getDay());
				timeStr += " " + currentDate.getDate();
				timeStr += " " + currentDate.getFullYear();
				timeStr += " " + hourStr + ":" + minStr;
				return timeStr;
			} else {
				timeStr += t(Admin.Npt.Days[currentDate.getDay()], currentDate.getDay()) + ",";
				timeStr += " " + t(Admin.Npt.Months[currentDate.getMonth()], currentDate.getDay());
				timeStr += " " + currentDate.getDate() + ",";
				timeStr += " " + currentDate.getFullYear();
				timeStr += " " + hourStr + ":" + minStr;
				return timeStr;
			}
		}
	},
*/
	appendDynDNS: function (element, hostName)
	{
      
		var dynDNS = hostName;
		element.id = hostName.service+"-"+hostName.hostname;

       
		this.dynDNSTemplate.getElementForParameter(element, "service").update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', hostName.service)));

		this.dynDNSTemplate.getElementForParameter(element, "username").update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', dynDNS.username)));
		this.dynDNSTemplate.getElementForParameter(element, "password").update("********");
		this.dynDNSTemplate.getElementForParameter(element, "hostname").update(Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', dynDNS.hostname)));
		/*if(dynDNS.last_update){
            this.dynDNSTemplate.getElementForParameter(element, "lastUpdate").update(dynDNS.last_update);
        }*/
        
		var date = null;
      
		if (dynDNS.last_update === "0001-01-01T00:00:00Z"){
			date = "unknown";
		}else{
			date = this.parseLastUpdate(dynDNS.last_update);
		}
		this.dynDNSTemplate.getElementForParameter(element, "lastUpdate").update(date);
		element.addClassName('added');
        

		/* when clicking delete remove the element */
		element.del = element.down(".WanDynDNSDelete");
		element.del.observe("click", this.deleteHostname.bind(this, element, hostName));

		this.form.down("tbody").insert(element);
	},

	fillServicesSelect: function ()
	{		
		$("service").innerHTML="";
		for (var service in this.objects.DynDNS.Services){
			if(this.objects.DynDNS.Services.hasOwnProperty(service)){
				service = this.objects.DynDNS.Services[service];
               
				/* create a new option element */
				var option = new Element("option", {
					value: service
				});
				option.service = service;

				/* translate the option text */
				option.update(service);               
				/* insert the option in the select box */
				this.services.insert(option);

			}
		}
    
	},   

	onSave : function ()
	{
		$("dyndns_error").update();
		$("config.wan.dyndnserror").hide();
		var hostname = this.form.down("input[name='Line.HostName']").getValue();
		var username = this.form.down("input[name='Line.Username']").getValue();
		var password = this.form.down("input[name='Line.Password']").getValue();
		var service = this.services.options[this.services.selectedIndex].service;
       
		if(!hostname.match(/^[\w_\.-]+$/) || !username.match(/\S/) || !password.match(/\S/))
		{
			Sah.translator.change($("dyndns_error"), "advconfig.network.dyndns.error","X Invalid DynDns Fields");
			$("config.wan.dyndnserror").show();
			return false ;
		}

		var HostParams = {
			"hostname":hostname,
			"username": username,
			"password": password,
			"service": service
		};

		this.isDuplicated = false;

		if (this.objects.Hosts.detect(function(host){    
              
			return (host.hostname == hostname);
		})) {
			Sah.translator.change($("dyndns_error"), "advconfig.network.dyndns.errorduplicate","X hostname already configured for another service");
			$("config.wan.dyndnserror").show();
			this.isDuplicated = true;
           
		}
        
		if(this.isDuplicated)
		{
			return false ;
		}
		this.client.execute("sysbus.DynDNS:addHost",
			HostParams,
			{
				"onSuccess":this.whenSaved.bind(this,HostParams),
				"onFailure":this.whenNotSaved.bind(this)
			} 
			);  
	}, 
	
    
	whenSaved: function (host){
		
		this.client.execute("sysbus.DynDNS:getHosts",{},{
			onSuccess:function(res){
				if(!host.last_update){
					host.last_update = "0001-01-01T00:00:00Z";
				}
				if(res && res.result && res.result.status){
					$A(res.result.status).each(function(h){
						if(h.service == host.service && h.username == host.username && h.password == host.password&& h.hostname == host.hostname){
							host.last_update = h.last_update;	
							this.objects.DynDnsHost = h;
						}
					},this);
				}
              
 				this.dynDNSTemplate.apply(host);
				this.progress = 0; 		
				this._delay=[5000,10000,20000];							
				setTimeout(this.run.bind(this), this._delay[this.progress]);
			}.bind(this),
			
			onFailure:function(){
				this.dynDNSTemplate.apply(host);
			}.bind(this)
		});
		
		
		
// 		this.refrech = null;
// 		this.launchRefrech();
	},
	
	
	
	
	run : function (){
		this.client.execute("sysbus.DynDNS:getHosts",{},
			{
				onSuccess:this.updateDate.bind(this),
				onFailure:function(){}
			} 
		);
		
	},
	
	
	updateDate : function (obj){
		this.objects.Updt = "0001-01-01T00:00:00Z";
		
		if(obj && obj.result && obj.result.status){
			$A(obj.result.status).each(function(hst){
				if(hst.service == this.objects.DynDnsHost.service && hst.username == this.objects.DynDnsHost.username && hst.password == this.objects.DynDnsHost.password && hst.hostname == this.objects.DynDnsHost.hostname){
					this.data = hst;
					this.objects.Updt = hst.last_update;
				}
			},this);
		}

		var updt = this.objects.Updt;
		
		var date = null;
		var undef;
		if (this.progress < 2){	
			if (updt === "0001-01-01T00:00:00Z" || updt === "" || updt === undef){
				this.progress++;
				setTimeout(this.run.bind(this), this._delay[this.progress]);
			}else{
				date = this.parseLastUpdate(updt);
				this.dynDNSTemplate.getElementForParameter($(this.data.service+"-"+this.data.hostname), "lastUpdate").update(date);
				this.progress = 0;
			}	
		}else{
			if (updt === "0001-01-01T00:00:00Z" || updt === "" || updt === undef){
				date = "unknown";
				
			}else{
				date = this.parseLastUpdate(updt);
			}
			this.dynDNSTemplate.getElementForParameter($(this.data.service+"-"+this.data.hostname), "lastUpdate").update(date);
			this.progress = 0;
		}
	},
	
	whenNotSaved : function(){
		Sah.translator.change($("dyndns_error"), "advconfig.network.dyndns.error","X invalid dynDNS server");
		$("config.wan.dyndnserror").show();
		this.logger.warn("not saved");
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/wan/dnsEquipments.js */

/* TODO: documentation */
Wan.DnsEquipments = Class.create(Sah.AuthenticatedForm, {
	initialize: function ($super, form) {
		$super(form);
		this.form.hide(); /* fetch needed data */
		this.needs("Devices", {
			path: "sysbus.Devices:get",
			method: "execute",
			methodParams: {
				expression:"physical && edev and .Active==true"
			}
		});

		/*this.needs("DHCPServer", {
			path: "sysbus.NMC:getLANIP",
			method : "execute"
		});*/
		this.load();
	},

	objectsLoaded: function () { /* setup needed templates */
		this.dnsTemplate = Sah.Templates.DNS;
		this.objects.Devices.each(function (a) {
		      if (a["Tags"].indexOf("self")<0 && a["Tags"].indexOf("edev") >= 0 && a["Tags"].indexOf("physical") >= 0 && a["Active"]) {


				var DNSName = "";
				a.Names.each(function (name) {
				   if (name.Source ==="dns") {
				     a.DNSName=name.Name;
				   }
				});
				var ipv4Adr = "", ipv6Adr = "";
				if (a.IPv4Address) {
				  a.IPv4Address.each(function(address) {
				    ipv4Adr=address.Address;
				  });
				}
				
				if (a.IPv6Address) {
				  a.IPv6Address.each(function(address) {
				    if (address.Scope.toLowerCase().indexOf("link")<0)
				    ipv6Adr=address.Address;
				  });
				}
				a.ipv6Address = ipv6Adr;
				a.ipAddress = ipv4Adr;
		      }
		});

		this.dnsTemplate.callback = this.appendDevice.bind(this);
		// sanitizes Names
		for(var key in this.objects.Devices) {
				var value = this.objects.Devices[key];
				for(var subkey in value) {
					if(subkey === "Name") {
						value[subkey] = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', value[subkey]));
					}
			}
		}
		this.dnsTemplate.apply(this.objects.Devices);
		this.form.show();
	},

	appendDevice: function (element, device) {
		element.id = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', device.Name));
		var isDnsEquipment =false;
		if (device.DeviceTypes) {
		  device.DeviceTypes.each(function(type) {
		    
		    if (type.TypeSource)
		        if (type.TypeSource.indexOf("dns")>=0)
			   isDnsEquipment=true;
		  });  
		}
// 		 if (device["Tags"].indexOf("self")<0 && device["Tags"].indexOf("edev") >= 0 && device["Tags"].indexOf("physical") >= 0 && device["Active"]) {
			var isGlobal=false;
			if (device.IPv4Address) {
				device.IPv4Address.each(function(add){
				  if(add.Scope.indexOf("global")>=0)
				    isGlobal=true;
				});
			}
			if (isGlobal===true) {
				if (device.ipAddress && device.ipAddress !== ""){
					this.dnsTemplate.getElementForParameter(element, "ipAddress").update(device.ipAddress);
					element.down(".ipv4_label").show();
				}else{
					element.down(".ipv4_label").hide();
				}
				if(device.ipv6Address && device.ipv6Address !== ""){
					this.dnsTemplate.getElementForParameter(element, "ipv6Address").update(device.ipv6Address);
					element.down(".ipv6_label").show();
					element.down(".ipv4_label").show();
				}else{
					element.down(".ipv6_label").hide();
					element.down(".ipv4_label").hide();
				}

				element.down(".bt_save").observe("click", this.onSave.bind(this, device, element));

				/* show the element form */
				this.dnsTemplate.showForm(element);
				$('dnsEquipmentsList').down("tbody").insert(element);
			}
		
	},

	onSave: function (device, element, event) {
		event.stop();
		device.DNSName = element.down(".DNSName").getValue();
		var dnsNameReg = new RegExp("^([a-zA-Z0-9]*(\-)*)*$");
		if (device.DNSName === "") {
			Sah.translator.change($("advconfig.network.dns.error.description"), "advconfig.network.dns.error.empty.description", "X Empty device name");
			$("advconfig.network.dns.error").show();
		} else if (device.DNSName.length > 64) {
			Sah.translator.change($("advconfig.network.dns.error.description"), "advconfig.network.dns.error.length.description", "X Device name must contains under then 64 char");
			$("advconfig.network.dns.error").show();
		} else if (!dnsNameReg.test(device.DNSName)) {
			Sah.translator.change($("advconfig.network.dns.error.description"), "advconfig.network.dns.error.invalid.description", "X Invalid device name");
			$("advconfig.network.dns.error").show();
		} else {
			$("advconfig.network.dns.error").hide();
			device.Names.each(function (name) {
			    if (name.Source.indexOf("dns")>=0) {
			      name.Name=device.DNSName;
			    }
			});
			
			
			this.client.execute("sysbus.Devices.Device."+device.PhysAddress+":setName", {
				"name" : device.DNSName, 
				"source" : "dns"
			}, {
				onSuccess: this.onSuccess.bind(this),
				onFailure: this.onFailure.bind(this)
			});
		}
	},

	onSuccess: function () {
		//toDo add on success behavior
	},

	onFailure: function () {
		//toDo add on failure behavior
	},

	filter: function (device) {
		return ((device.Tags.indexOf("USB")<=0) && (device.Name != "localhost") && !(device.Tags.indexOf("N/A")<0) && (device.Active));
	}

});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/wan/dns.js */

/**
 * The wan dns form
 *
 * When the class is intantiated, the initialize method is called. There you first
 * need to call the parent constructor using $super. Then you can set up the various
 * event handlers that you will need. Then you need to define which objects you need
 * from sahbus with the needs() method. Finally you can call the load method that
 * will load those objects.
 *
 * When all the objects needed are loaded, the method objectsLoaded() will be called.
 * By default, the object fetched are stored into the variable objects. If you need
 * to, like in this case, you can setup other variables in objects. Those will be
 * used to fillup the form with the values from sahbus and to save the form into
 * sahbus. A mapping is automatically created that maps the objects properties to
 * form elements, using the this.fromObject(this.objects) method. You can than store
 * back the form in the objects by using object._update(this.toObject) method.
 * @class
 * @augments Sah.AuthenticatedForm
 */

Wan.Dns = Class.create(Sah.AuthenticatedForm, /** @lends Wan.Dns */ {
	initialize: function ($super, form) {
		$super(form);

		/* prepare to load the objects we need */
		this.needs("WanStatus", {
			path: "sysbus.NMC:getWANStatus",
			method: "execute"
		});

		this.markAsLoading();
		this.form.disable();
		this.load();
	},

	objectsLoaded: function () {
		this.prepareForm();
		if (this.objects.WanStatus && this.objects.WanStatus.DNSServers) {			
			this.form.enable();
		}

		this.fillForm();
		this.markAsLoaded();
	},

	prepareForm: function () {
		this.objects.WanDNS = {};
		this.objects.WanDNS.DNSPrimary = "";
		this.objects.WanDNS.DNSSecondary = "";
		this.objects.WanDNS.DNSPrimaryv6 = "";
		this.objects.WanDNS.DNSSecondaryv6 = "";
		
		if(this.objects.WanStatus.IPv6Address != ""){
			$$(".ipv6").each(function(el) {				
				el.setStyle({display : "table-row"});
				});
		}
		
		if (this.objects.WanStatus.DNSServers) {
			var dnsArray = this.objects.WanStatus.DNSServers.split(",");
			var dns4Array=[];
			var dns6Array=[];
		
			for ( var i = 0; i <dnsArray.length; i++){
			      if (dnsArray[i].indexOf('.') >= 0) 
				  dns4Array.push(dnsArray[i]);
			      
			      if (dnsArray[i].indexOf(':') >= 0)
				  dns6Array.push(dnsArray[i]);
			}
			
			this.objects.WanDNS.DNSPrimary = (dns4Array[0]) ? dns4Array[0] : "";
			this.objects.WanDNS.DNSSecondary = (dns4Array[1]) ? dns4Array[1] : "";
			
			this.objects.WanDNS.DNSPrimaryv6 = (dns6Array[0]) ? dns6Array[0] : "";
			this.objects.WanDNS.DNSSecondaryv6 = (dns6Array[1]) ? dns6Array[1] : "";
		}
	},

	fillForm: function () {
		/* map the value directly to the form, ie the form element with an id matching
		 * a path from this.objects will be set automatically. */
		this.fromObject(this.objects);
	},

	onCancel: function (event) {
		this.prepareForm();
	}
});
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/forgottenPassword.js */

var ForgottenPassword = Class.create(Sah.Form, /** @lends ForgottenPassword# */ {
	initialize: function ($super, form) {
		$super(form);
		
		this.errorCount = 0;
		this.maxErrorCount = 3;
		this.popupTimeout = 60000;
		
		this.forgottenPasswordLink = $("forgotten-password-link-div");
		this.popupClose = $("ct-popup-header-close");
		this.popupBody = $("ct-popup-content");
		
		
		Event.observe(document, "loginSuccessful", this.handleLogin.bind(this));
		Event.observe(document, "logoutSuccessful", this.handleLogout.bind(this));
		
		this.auth = new Sah.Auth(this.client);
		this.forgottenPasswordLink.observe("click", this.triggerPopup.bind(this));
		
		if (this.auth.authenticate())
			this.handleLogin();
		
		this.load();
	},
	
	/*** Clickable Message in the Header Part ***/
	
	handleLogin: function() {
		this.forgottenPasswordLink.hide();
	},
	
	handleLogout: function() {
		this.forgottenPasswordLink.show();
	},
	
	
	/*** Popup Part ***/
	
	handleCancel: function() {
		this.client.execute("sysbus.PasswordRecovery:stop", {}, {
			onSuccess: function() {},
			onFailure: function() {}
		});
		this.errorCount = 0;
		ctl.popup.Close();
		this.removePopupHandlers();
	},
	
	handleValidate: function () {
		var pincodeInput = this.popupBody.down("input[name='forgotten-password-popup-pincode']").value;
		this.client.execute("sysbus.PasswordRecovery:checkPinCode", {
			"pincode":pincodeInput
			}, {
			onSuccess: this.onRightPincode.bind(this),
			onFailure: this.onWrongPincode.bind(this)
		});
	},
	
	onWrongPincode: function() {
		this.errorCount++;
		this.errorCount %= this.maxErrorCount;
		this.showPopup();
	},
	
	onRightPincode: function() {
		this.handleCancel();
		
		popupBody = "<p>" + t("general.label.forgottenpasswordpopup.doneMessage", "Le mot de passe a été réinitialisé : il correspond aux 8 premiers caractères de la clé de sécurité WiFi imprimée sur l'étiquette de la Livebox.") + "</p>\n" +
				"<br>\n" +
				"<br>\n" +
				"<div style=\"float:right\">\n" +
				"<input type=\"button\" name=\"forgotten-password-popup-close\" value=\"" + t("general.label.forgottenpasswordpopup.doneCloseButton", "fermer") + "\" class=\"png input-btn input-btn-orange-small\"/>\n" + 
				"</div>";
		
		ctl.popup.Open(popupBody, "<h4>" + t("general.label.forgottenpasswordpopup.doneTitle", "Mot de passe réinitialisé") + "</h4>", 400, 160);
		this.popupBody.down("input[name='forgotten-password-popup-close']").observe("click", function() {
			ctl.popup.Close();
		});
	},
	
	openPopup: function() {
		
		popupBody = "<p>" + t("general.label.forgottenpasswordpopup.message", "Pour confirmer la réinitialisation du mot de passe, saisissez le code PIN à 4 chiffres qui s'affiche actuellement sur l'écran en façade de votre Livebox.") + "</p>\n" +
				"<br>\n" +
				"<br>\n" +
				"<input name=\"forgotten-password-popup-pincode\" style=\"width: 60px\" type=\"text\">" +
				"<br>\n" +
				"<br>\n" +
				"<p name=\"forgotten-password-popup-errormsg\" style=\"color:#FF6804;\">" + t("general.label.forgottenpasswordpopup.errormessage", "Le code PIN saisi est erroné. Vérifiez le code affiché sur l'écran en facade de votre Livebox.<br>A noter : ce code PIN change au bout de trois erreurs.") + "</p>\n" +
				"<br>\n" +
				"<div style=\"float:right\">\n" +
				"<input type=\"button\" name=\"forgotten-password-popup-cancel\" value=\"" + t("general.label.forgottenpasswordpopup.cancelbutton", "annuler") + "\" class=\"png input-btn input-btn-gray-small\"/>\n" +
				"<input type=\"button\" name=\"forgotten-password-popup-validate\" value=\"" + t("general.label.forgottenpasswordpopup.validatebutton", "réinitialiser") + "\" class=\"png input-btn input-btn-orange-small\"/>\n" + 
				"</div>";
				
		
		ctl.popup.Open(popupBody, "<h4>" + t("general.label.forgottenpasswordpopup.title", "Réinitialiser le mot de passe") + "</h4>", 400, 285);
	},
	
	triggerPincode: function() {
		this.client.execute("sysbus.PasswordRecovery:stop", {}, {
			onSuccess: function() {},
			onFailure: function() {}
		});
		this.client.execute("sysbus.PasswordRecovery:start", {}, {
			onSuccess: function() {},
			onFailure: function() {}
		});
		if (this.timeoutResult)
			window.clearTimeout(this.timeoutResult);
		this.timeoutResult = window.setTimeout(this.handleCancel.bind(this), this.popupTimeout);
	},
	
	removePopupHandlers: function() {
		this.popupClose.stopObserving("click");
		this.popupBody.down("input[name='forgotten-password-popup-cancel']").stopObserving();
		this.popupBody.down("input[name='forgotten-password-popup-validate']").stopObserving();
		this.popupBody.down("input[name='forgotten-password-popup-pincode']").stopObserving();
	},
	
	setPopupHandlers: function() {
		this.removePopupHandlers();
		this.popupClose.observe("click", this.handleCancel.bind(this));
		this.popupBody.down("input[name='forgotten-password-popup-cancel']").observe("click", this.handleCancel.bind(this));
		this.popupBody.down("input[name='forgotten-password-popup-validate']").observe("click", this.handleValidate.bind(this));
		this.popupBody.down("input[name='forgotten-password-popup-pincode']").observe("keyup", (function(key) {
			if (key.keyCode == 13)
				this.handleValidate();
		}).bind(this));
	},
	
	showPopup: function() {
		this.openPopup();
		
		if (this.errorCount == 0) {
			this.popupBody.down("p[name='forgotten-password-popup-errormsg']").hide();
		} else {
			this.popupBody.down("p[name='forgotten-password-popup-errormsg']").show();
		}
		this.setPopupHandlers();
	},
	
	triggerPopup: function() {
		this.errorCount = 0;
		this.triggerPincode();
		this.showPopup();
	}
	
});
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/home/remoteAuthentification.js */

Home.RemoteAuthentification = Class.create(Sah.Form,
{
    initialize: function ($super, form)
    {
        $super(form);
        this.auth = new Sah.Auth(this.client);
        $("bt_save").observe("click", this.doLogin.bind(this));
        $("bt_cancel").observe("click", this.doCancel.bind(this));
        Event.observe(document, "sah:authentication:error", this.whenNotSaved.bind(this));
	
	if ($$(".input-info-help .content").length > 0 && $$(".input-info-help .content")[0].innerHTML === "") {
		$$(".input-info-help")[0].setStyle("display:none");
	}
       
       
    },
    doCancel : function(event){
        
        this.form.reset();
        event.stop(event);
        $('home.authentification.remoteaccess.error').hide();
    },


 
    doLogin: function (event) {
        this.logger.info("loging in");
        event.stop(event);
        $("home.authentification.remoteaccess.error").hide();      
        if ($F("Username").match(/^\s*$/) || $F("Password").match(/^\s*$/)) {
             $("home.authentification.remoteaccess.error").show();      
           // this.displayMessage("error.invalid", "", "", 0);
            return false;
        }

        this.auth.login($F("Username"), $F("Password"), {
            onSuccess: this.whenSaved.bind(this),
            onFailure: this.whenNotSaved.bind(this)
        });

        return false;
    },

    whenSaved: function (obj)
    {
        document.location = "/";
    },

    whenNotSaved: function (obj)
    {
         $("home.authentification.remoteaccess.error").show();      
        this.logger.warn("authentification failure");
        this.logger.warn(obj);
    },
  
    displayMessage: function (errorName, defaultTitle, defaultMessage) {
        Sah.translator.change($("msgbox_title"), "setup.unlockaccess." + errorName + ".label", "X " + defaultTitle);
        Sah.translator.change($("msgbox_text"), "setup.unlockaccess." + errorName + ".description", "X " + defaultMessage);
        $("cnt_msgbox").show();
    }
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/home/accessTypePnP.js */

Home.AccessTypePnP = Class.create(Sah.Form, {
	initialize: function ($super, form) {
	  
		$super(form);

		this.needs("PnP", {
			path: "sysbus.PnP:get",
			method: "execute"
		});
		this.needs("WANStatus", {
			path: "sysbus.NMC:getWANStatus",
			method: "execute"
		});
		this.needs("Autodetect", {
			path: "sysbus.NMC.Autodetect:get",
			method: "execute"
		});
		
		$('notConnected').observe('click',this.redirectFirstInstall.bind(this));
		$('bt_anotherpage').observe('click', this.toExternalPage.bind(this));
		$("footer-menu").observe("click", this.onInfoLegalAccess.bind(this));
		
		this.load();
	},

	objectsLoaded: function () {
	    var undef;
		$$("#footer-menu")[0].stopObserving("click");
		$$("#footer-menu")[0].observe("click", this.showLegal.bind(this));
			
		if ( $$("#footer-menu")[1] !== undef ) {
			$$("#footer-menu")[1].observe("click", this.showLegal.bind(this));
			
		}		
		
		if (this.objects.WANStatus.LinkState === "up") {
			if (this.objects.PnP) {
				if(this.objects.PnP.Status==="Idle"){	
				  /*On affiche la première page d'attente avec le spinner en attendant un changement d'état*/
					this.redirect("/setupAccessInProgress.html");
				}else if(this.objects.PnP.Status.toLowerCase()==="timeout"||this.objects.PnP.Status==="Error"){
				  	/* On affiche la page de connexion SANS le Numéro de téléphone et avec les infos nom/prénom dont on dispose*/
				   console.warn('PnP.Status first receive  running');
				  this.redirect("/setupAuthenticationType.html");
				}			
				else if(this.objects.PnP.Status.toLowerCase()==="running"){
				  /*Un Sms a été envoyé à l'utilisateur et on attend une réponse. 
				   On affiche alors la page de connexion avec toutes les informations disponibles*/
				  console.warn('PnP.Status first receive running');
				  this.redirect("/setupAuthenticationType.html");
				  
				}
				else if(this.objects.PnP.Status.toLowerCase()==="ok" &&  this.objects.Autodetect.FirstBoot && this.objects.UserInterfaceStatus === ""){
				  /*  L'utilisateur a envoyé le Sms, les login/password ont été mis à jour et une tentative de connexion WAN a été lancée.
				    On affiche alors le spinner "Connexion en cours..." et on surveille l'état du ConnectionState dans getWanStatus*/
				        console.warn('PnP.Status first receive OK');
					this.redirect("/setupAccessInProgress.html");	 
				}
				else{
				      //redirect to the auuthentification page
				      //let the old setup page works
				      this.redirect("/setupAuthenticationType.html");
				      console.warn('Go to setupAuthenticationType with PnP.Status '+this.objects.PnP.Status);
				}

			} else{
			  //rediecrt to the authentication page
			  //let the old setup page works
			 this.redirect("/setupAuthenticationType.html");
			}
		  
		}
		else{    
		        // Go to accesType.js with LinkState === "down" in which error page will page diplayed  
			 this.redirect("/setupAuthenticationType.html");			
		}
		this.form.enable();
	},
	
	onInfoLegalAccess: function (event) {
		event.stop();
		this.infoLegalLoaded();
	},
	
	infoLegalLoaded: function () {
		$("content-center").update(this.legalInfo);
		Sah.translator.update();
		$("bt_back_legal").observe("click", function () {
			this.redirect("/setupAccessType.html");
		}.bind(this));
		this.fixFirefoxBgRedraw();
	},

	fixFirefoxBgRedraw: function () {
		if (Prototype.Browser.Gecko) { /* force firefox redraw */
			$('document-background-footer').setOpacity(0.99);
			window.setTimeout(function () {
				$('document-background-footer').setOpacity(1);
			}, 2);
		}
	},
	
	showLegal: function () {
		//$("content").hide();
		$('content-welcome-page').hide();
		$('legal_Info').show();
		Sah.translator.update();
		
		$("bt_back_legal").observe("click", function () {
			$('content-welcome-page').show();
			$('legal_Info').hide();
		});
		
		this.fixFirefoxBgRedraw();
	},

	requireIdentConfirmation: function (){
		$('content-welcome-page').setStyle({display: 'block'});
		$('bt_anotherpage').enable();
		$('userName1').update(this.objects.PnP.ProposedDisplayName);
		$('userName1').setStyle({color: '#FF6600'});
		$('userName').update(this.objects.PnP.ProposedDisplayName+".");
		$('userName').setStyle({color: '#FF6600'});

	},

	redirectFirstInstall: function (){

		this.client.execute("sysbus.PnP:setIdConfirmed", {
				"idConfirmed": false
			}, {
				onSuccess: function () { this.redirect("/setupAuthenticationType.html");}.bind(this),
				onFailure: function () { this.redirect("/setupAuthenticationType.html");}.bind(this)
			}
		);
		return false;
	},
	
	toExternalPage: function(){
		this.client.execute("sysbus.PnP:setIdConfirmed", {
				"idConfirmed": true
			}, {
				onSuccess: function () {this.redirect("/setupAccessInProgress.html");}.bind(this),
				onFailure: function () {this.redirect("/setupAuthenticationType.html");}.bind(this)
			}
		);

	},

	redirectHomePage: function(){

		this.client.execute("sysbus.PnP:setIdConfirmed", {
				"idConfirmed": true
			}, {
				"onSuccess": function () {}
		});

		this.client.execute("sysbus.UserInterface:setState", {
				"currentState": 'connected'
			}, {
				"onSuccess": function () {this.redirect("/");}.bind(this)});
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/home/summaryLedsStatus.js */

/**
 * Summary Leds Status
 */

Home.SummaryLedsStatus = Class.create(Sah.AuthenticatedForm,/** @lends Home.SummaryLedsStatus# */{
	
    initialize: function ($super, form){
        $super(form);
		
        this.needs("LED", {
            path: "sysbus.LED", 
            depth: -1
        });
		
	if (config.BUILD_PROJECT.indexOf("2.8") >= 0) {
		$('internetPhone').hide();				
		$('support-leds-status-internet-gray').hide();
		$('support-leds-status-info-gray').show();
// 		Sah.translator.change($('internet_info'), "support.ledsstatus.label.adsl", "X Enabled");
	} else{
		$('support-leds-status-info-gray').hide();
		$('support-leds-status-internet-gray').show();
// 		Sah.translator.change($('internet_info'), "support.ledsstatus.label.adsl", "X Enabled");
	}	
        this.form.disable();
        this.load();
},
	
    objectsLoaded: function (){
        this.getLedStatus();
        this.form.enable();
		this.refresh(10);
    },
	
    getLedStatus: function ()
    {
		var iconIdArray = [ "icons-leds-gray",
		"icons-leds-black",
		"icons-leds-blue",
		"icons-leds-red",
		"icons-leds-red-alternative-1",
		"icons-leds-red-alternative-5",
		"icons-leds-green",
		"icons-leds-green-alternative-1",
		"icons-leds-green-alternative-5",
		"icons-leds-orange",
		"icons-leds-orange-alternative-1",
		"icons-leds-orange-alternative-5" ];
		
		var iconPathArray = [ "icons-leds-gray.png",
		"icons-leds-black.png",
		"icons-leds-blue.png",
		"icons-leds-red.png",
		"icons-leds-red-alternative-1s.gif",
		"icons-leds-red-alternative-5s.gif",
		"icons-leds-green.png",
		"icons-leds-green-alternative-1s.gif",
		"icons-leds-green-alternative-5s.gif",
		"icons-leds-orange.png",
		"icons-leds-orange-alternative-1s.gif",
		"icons-leds-orange-alternative-5s.gif" ];
		
        this.objects.Leds = this.objects.LED;
        this.objects.Leds.each(function(led)
        {
            if( Home.SummaryLedsStatus.Display[led.Name] )
            {
                var name = Home.SummaryLedsStatus.Display[led.Name].name;
                var icon = "";
                var id = "";
                var keyState = "-Off";
                if( led.State !== "Off" )
                {
                    keyState = led.Color+"-"+led.State;
                }
                if( Home.SummaryLedsStatus.Display[led.Name][keyState] )
                {
                    icon = Home.SummaryLedsStatus.Display[led.Name][keyState].icon;
                    id = Home.SummaryLedsStatus.Display[led.Name][keyState].id;
                }
                else
                {
                    // Actual led state not supported
                    icon = "icons-leds icons-leds-gray";
                    id = "";
                }

                var elementLabel = $("support-leds-label-"+name);
                Sah.translator.change(elementLabel, id, "X Status" );
                elementLabel.show();

                var element = $("support-leds-color-"+name);
                /*var className = element.classNames();                        
                element.removeClassName(className);
                element.addClassName(icon);*/
                var iconIdSeek = icon.split(" ")[1];
                var iconIndex = iconIdArray.indexOf(iconIdSeek);
                element.innerHTML = "<img class=\"voice Voice.support.img.ledstatus."+ iconIdSeek + "\" src=\"images/fr/leds/" + iconPathArray[iconIndex] + "\" alt=\"\">";
                element.show();
            }
        }, this);
        // Required to update alt/title in tags
       Sah.translator.updateVoices(Sah.translator.language);
    },
	
    refresh: function (refreshPeriod)
    {
        new PeriodicalExecuter(this.refreshLedStatus.bind(this), refreshPeriod); 
    },
	
    refreshLedStatus: function (event)
    {
        this.objects.LED._childs = [];
        this.objects.LED._load(this.getLedStatus.bind(this));
    }
});
	
	
Home.SummaryLedsStatus.Display = {
    "Internet Led": {
        "name": "internet",
        // Connected
        "Green-Solid": {
            "icon": "icons-leds icons-leds-green",
            "id": "support.ledsstatus.comment.green_solid.adsl"
        },
        // Synchronization failed
        "Red-FlashFast": {
            "icon": "icons-leds icons-leds-red-alternative-5",
            "id": "support.ledsstatus.comment.red_fast.adsl"
        },
        // Connecting
        "Orange-FlashSlow": {
            "icon": "icons-leds icons-leds-orange-alternative-1",
            "id": "support.ledsstatus.comment.orange_slow.adsl"
        }
    },
    "VoIP Led": {
        "name": "phone",
        // VoIP Off
        "-Off": {
            "icon": "icons-leds icons-leds-gray",
            "id": "support.ledsstatus.comment.gray.phone"
        },
        // VoIp On & available
        "Green-Solid": {
            "icon": "icons-leds icons-leds-green",
            "id": "support.ledsstatus.comment.green_solid.phone"
        },
        // VoIp On but busy
        "Green-FlashSlow": {
            "icon": "icons-leds icons-leds-green-alternative-1",
            "id": "support.ledsstatus.comment.green_slow.phone"
        },
        // VoIp On but busy
        "Green-FlashFast": {
            "icon": "icons-leds icons-leds-green-alternative-5",
            "id": "support.ledsstatus.comment.green_fast.phone"
        }
    },
    "Lan Led": {
        "name": "network",
        // Network Off
        "-Off": {
            "icon": "icons-leds icons-leds-gray",
            "id": "support.ledsstatus.comment.gray.network"
        },
        // Network On
        "Green-FlashSlow": {
            "icon": "icons-leds icons-leds-green-alternative-1",
            "id": "support.ledsstatus.comment.green_slow.network"
        },
        // Network On
        "Green-FlashFast": {
            "icon": "icons-leds icons-leds-green-alternative-5",
            "id": "support.ledsstatus.comment.green_fast.network"
        }
    },
    "Wifi Led": {
        "name": "wireless",
        // WiFi Off
        "-Off": {
            "icon": "icons-leds icons-leds-gray",
            "id": "support.ledsstatus.comment.gray.wireless"
        },
        // WiFi On
        "Green-Solid": {
            "icon": "icons-leds icons-leds-green",
            "id": "support.ledsstatus.comment.green_solid.wireless"
        },
        // WiFi WPS Association
        "Green-FlashSlow": {
            "icon": "icons-leds icons-leds-green-alternative-1",
            "id": "support.ledsstatus.comment.green_slow.wireless"
        },
        // WiFi WPS Pairing
        "Green-FlashFast": {
            "icon": "icons-leds icons-leds-green-alternative-5",
            "id": "support.ledsstatus.comment.green_fast.wireless"
        }
    }
};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/home/information.js */

Home.Information = Class.create(Sah.Form, {
	initialize: function ($super, form) {
		// Remove empty info Panel
		if ($$(".input-info-help .content").length > 0 && $$(".input-info-help .content")[0].innerHTML === "") {
			$$(".input-info-help")[0].setStyle("display:none");
		}
		
		$super(form);
		
		this.appendDYKContainer();
		this.infoKeys = $A();
		for (var infoKey in Translations.home.didyouknow.description) {
			if(infoKey.indexOf("lb28")<1){
				this.infoKeys.push(infoKey);
			}
		}
		  
		this.translator = false;
		
		this.currentKey = this.infoKeys[Math.floor(Math.random() * this.infoKeys.length)];
		Sah.Translate.updated(this.fillInformation.bind(this));
		this.periodicalExecuter = new PeriodicalExecuter(this.refresh.bind(this), 30);
	},

	appendDYKContainer: function () {
		// Append Did you know div
		var elem = new Element('div', {
			'class': 'input-info-help'
		}).update('<div class="header" id="home-dashboard-didyouknow-label"><h6><span class="translation Translations.home.didyouknow.label"></span></h6></div><div class="content" id="home-dashboard-didyouknow-content"></div><div class="footer"></div>');
		$('content-right').appendChild(elem);
		//refresh translations
		Event.observe(window,'load',function(){
			Sah.translator.refresh();
		});
		
	},
	
	fillInformation: function () {
		Sah.translator.change($("home-dashboard-didyouknow-content"), "home.didyouknow.description." + this.currentKey, "X description");
	},

	refresh: function () {
		var newKey = this.currentKey;
		while (newKey == this.currentKey) {
			newKey = this.infoKeys[Math.floor(Math.random() * this.infoKeys.length)];
		}
		this.currentKey = newKey;
		this.fillInformation();
	}
});
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/home/accessType.js */

Home.AccessType = Class.create(Sah.Form, {
	initialize: function ($super, form) {
		$super(form);
		
		if (appConfig === "pl") {
			$('cnt_first_install').hide();
			$('loading').show();
		}
		this.retry = 0;
		$("footer-menu").observe("click", this.onInfoLegalAccess.bind(this));
		$("link_restore").observe("click", this.onRestore.bind(this));
		$("bt_save").observe("click", this.onSave.bind(this));
		$("bt_cancel").observe("click", this.onCancel.bind(this));		
		document.observe("sah:admin:language:change",function (){
			var warningLabel = "setup.accesstype.label.warning" + "." + appConfig;
			$('cnt_input_info_warning-content').innerHTML = t(warningLabel, '');
		});
		
		var warningLabel = "setup.accesstype.label.warning" + "." + appConfig;
		$('cnt_input_info_warning-content').innerHTML = t(warningLabel, '');

		this.legalInfo = $("legal_Info").innerHTML;
		this.setupAccessError = $("setupAccessTypeError").innerHTML;
		this.rebootProgress = $("reboot-progress").innerHTML;

		this.objects.nbRefresh = 0;
		this.objects.stopRereshReq = true;
		this.objects.runningReq = false;
		this.IsSMSReceived = false;
		this.timeout = null;

		this._pattern = {
			Ethernet: {
				dhcp: /eth(ernet)?-dhcp/i,
				ppp: /eth(ernet)?-ppp/i,
				pppoe: /eth(ernet)?-pppoe([^\+]|$)/i,
				pppoe_vcmux: /eth(ernet)?-pppoe\+vcmux/i,
				pppoe_llc: /eth(ernet)?-pppoe\+llc/i,
				pppoa: /eth(ernet)?-pppoa([^\+]|$)/i,
				pppoa_vcmux: /eth(ernet)?-pppoa\+vcmux/i,
				pppoa_llc: /eth(ernet)?-pppoa\+llc/i
			},

			DSL: {
				dhcp: /dsl-dhcp/i,
				ppp: /dsl-ppp/i,
				pppoe: /dsl-pppoe([^\+]|$)/i,
				pppoe_vcmux: /dsl-pppoe\+vcmux/i,
				pppoe_llc: /dsl-pppoe\+llc/i,
				pppoa: /dsl-pppoa([^\+]|$)/i,
				pppoa_vcmux: /dsl-pppoa\+vcmux/i,
				pppoa_llc: /dsl-pppoa\+llc/i
			}
		};

		this._profileList = [{
				code: "",
				label: "setup.accesstype.label.countries.option.select",
				alt: "X Select..."
			}, {
				code: "LU",
				label: "setup.accesstype.label.countries.option.luxembourg",
				alt: "X Luxembourg"
			}, {
				code: null,
				label: null
			}, {
				code: "CI",
				label: "setup.accesstype.label.countries.option.ivorycoast",
				alt: "X Ivory Coast"
			}, {
				code: "MU",
				label: "setup.accesstype.label.countries.option.republicofmauritius",
				alt: "X Republic of Mauritius"
			}, {
				code: "SN",
				label: "setup.accesstype.label.countries.option.senegal",
				alt: "X Senegal"
			}, {
				code: "OTHER",
				label: "setup.accesstype.label.countries.option.other",
				alt: "X Other"
			}];

		this._waitSet = ["..", "....", "......", "........", "..........", "........", "......", "....", "..", ""];
		this._profileURL = {
			LU: "http://www.orange.lu",
			CI: "http://www.orange.ci",
			MU: "http://www.orange.mu",
			SN: "http://www.orange.sn",
			OTHER: ""
		};

		this.connected = null;
		this.form.disable();
		
		this.needs("PnP", {
			path: "sysbus.PnP:get",
			method: "execute"
		});

		this.needs("WANStatus", {
			path: "sysbus.NMC:getWANStatus",
			method: "execute"
		});
		
		this.needs("Autodetect", {
			path: "sysbus.NMC.Autodetect:get",
			method: "execute"
		});

		this.needs("UserInterfaceStatus",{
				path:"sysbus.UserInterface:getState", 
				method: "execute"				
			});


		this.refreshWhenNMCCrashes = setTimeout(function(){
			this.redirect("/setupAccessType.html");
		}.bind(this),5000);
		
		$("header-controls-accessibility-contrast3").observe("click", function(){
			$('msgbox_text').setStyle({
				color: 'white'
			});
			$('msgbox_waiter').setStyle({
				color: 'white'
			});
			
		});
		
		$("header-controls-accessibility-contrast2").observe("click", function(){
			$('msgbox_text').setStyle({
				color: 'black'
			});
			$('msgbox_waiter').setStyle({
				color: 'black'
			});			
		});
		
		$("header-controls-accessibility-contrast1").observe("click", function(){
			$('msgbox_text').setStyle({
				color: 'black'
			});
			$('msgbox_waiter').setStyle({
				color: 'black'
			});			
		});
                
		this.request = {"channelid":0,
				"events":[
					    {"service":"PnP", "event":"changed"}
					  ]
                                   };
		
		this.events = [];
		
		this.load();
	},

	onRestore: function () {
		$('cnt_first_install').hide();
		$('cnt_restore').show();
	},

	redirectToConfirmation: function (response) {
		this.connectedLoaded(response);

		this.client.execute("sysbus.UserInterface:setState", {
			"currentState": 'connected'
		}, {});

		this.showConfirmation();
	},

	observe: function () {
		this.rq = new Ajax.Request("/sysbus/eventmanager:get_events", {
			method: "post",
			postBody: Object.toJSON({
				"parameters": this.request
			}),
			contentType:"application/x-sah-ws-4-call+json",
			requestHeaders: {
				"X-Context":Sah.Bus.contextID,
				"X-Sah-Request-Type": "idle"
			},
			onSuccess: this.eventReceived.bind(this),
			onFailure: this.failed.bind(this)
		});
		
		document.fire("sah:home:service:refreshStatus");
	},
	
        eventReceived: function (response) {
		var o;
		if (o = response.responseText) {
		        if ((o.indexOf("null")<0)&&(o.indexOf("error")<0)) {
			    response = JSON.parse(o);
			    if(response.status){
				this.events = this.events.concat(response.status.events);
				this.request.channelid = response.status.channelid;
			    }
			    this.processEvents();
			} else {
			      this.observe();
			}
		} else {
			    this.observe();
		}
	},
	failed: function (response) {
		var msg = "error monitoring events: " + response.status + " " + response.statusText;

		if (response.responseJSON) {
			msg += " " + response.responseText;
		}
		Sah.logger.error(msg);
	},
	processEvents: function () {
		var e = null,
		device = null,
		interfaceType = null,
		types = [],
		undef;
		var status = "";
		while ((e = this.events.shift())) {
		  
			if (e.data.object.attributes.Status != undef) {
				status =e.data.object.attributes.Status;
			} 
		}
		if(status !== "OK"){
		   this.observe();
		   console.warn("waiting PnP Status udapdte");
		} else {
		    //SMS event received
		    this.objects.stopRereshReq = false;
		    this.objects.runningReq = false;
		    this.IsSMSReceived = true;
		    if(this.Wantimeout)
	            window.clearTimeout(this.Wantimeout);
		    this.Wantimeout = window.setTimeout((function (event) {
				this.client.execute("sysbus.NMC.Autodetect:get", {}, this._updateFirstBoot.bind(this));
			}).bind(this), 5000);
		    console.info("SMS confirmation ConnectionState connected");
		}
// 		}
	},
	_updateFirstBoot: function (result) {	
		if (result) {
			      this.objects.Autodetect = result.result.status;
		}		
		if(this.Wantimeout)
			window.clearTimeout(this.Wantimeout);
		if(!this.objects.Autodetect.FirstBoot){
		      this.displayMessage("error.running", "", "",1);
		      this.Wantimeout = window.setTimeout((function (event) {
				      this.client.execute("sysbus.NMC:getWANStatus", {}, this._updateWanState.bind(this));
			      }).bind(this), 10000);
		} else {
		      this.Wantimeout = window.setTimeout((function (event) {
				this.client.execute("sysbus.NMC.Autodetect:get", {}, this._updateFirstBoot.bind(this));
			}).bind(this), 5000);
		}
	},
	objectsLoaded: function () {	
               this.observe();
		if (this.objects.WANStatus){
			window.clearTimeout(this.refreshWhenNMCCrashes);
			this.refreshWhenNMCCrashes = null;
		}
		if (this.objects.WANStatus.LinkState === "down") {
			this.errorPage();
		} 
		// SPnP OK + check recepuration  LastName/FirstName && MobilePhoneNumber
		else if(this.objects.PnP.Status.toLowerCase()==="running" && this.objects.Autodetect.FirstBoot && this.objects.UserInterfaceStatus === "")	  
		{
		  // Un Sms a été envoyé à l'utilisateur et on attend une réponse. On affiche alors la page de connexion avec toutes les informations disponibles
		  
		     $('cnt_first_install').show();
		     this.requireIdentConfirmation();
		     this.fromObject(this.objects);
			
			if (this.objects.WANStatus.LinkType && this.objects.WANStatus.Protocol) {
				this.objects.LinkType = (this.objects.WANStatus.LinkType.toLowerCase() == "ethernet")?"Ethernet":this.objects.WANStatus.LinkType.toUpperCase();
				this.objects.Protocol = this.objects.WANStatus.Protocol === "DHCP" ? "DHCP" : "PPP";
			} else {
				this.objects.LinkType = "DSL";
				this.objects.Protocol = "PPP";
			}
			this.fillForm();
			this.form.enable();
		  
		}
		  
		 else if((this.objects.PnP.Status.toLowerCase()==="timeout"||this.objects.PnP.Status==="Error") && this.objects.Autodetect.FirstBoot && this.objects.UserInterfaceStatus === ""){
		   //On affiche la page de connexion SANS le Numéro de téléphone et avec les infos nom/prénom dont on dispose	
		  $('cnt_first_install').show();
		  this.requireIdentConfirmation2();		  
		  this.fromObject(this.objects);
			if (this.objects.WANStatus.LinkType && this.objects.WANStatus.Protocol) {
				this.objects.LinkType = (this.objects.WANStatus.LinkType.toLowerCase() == "ethernet")?"Ethernet":this.objects.WANStatus.LinkType.toUpperCase();
				this.objects.Protocol = this.objects.WANStatus.Protocol === "DHCP" ? "DHCP" : "PPP";
			} else {
				this.objects.LinkType = "DSL";
				this.objects.Protocol = "PPP";
			}
			this.fillForm();
			this.form.enable();		  
		}
		
		else if (((this.objects.WANStatus.ConnectionState === "Connected") && (!this.objects.Autodetect.FirstBoot || (this.objects.UserInterfaceStatus === "connected")) )|| (this.objects.WANStatus.ConnectionState === "Bound" && this.objects.WANStatus.Protocol === "dhcp")) {
			if (Cookie.get("PPPUserName")) {			
									
				var confirmationurl = Sah.link("/setupAccessConfirmation.html");
				new Ajax.Request(confirmationurl, {
						method: "get",
						onSuccess: this.redirectToConfirmation.bind(this)
					});
				
			} else {
				this.client.execute("sysbus.UserInterface:setState", {
							"currentState": 'connected'
						}, {
							"onSuccess": function () {
								return window.location = "http://" + window.location.hostname;
							}.bind(this)
					});
				
			}
			return;
		}
		else if (!this.objects.Autodetect.FirstBoot && this.objects.PnP.Status.toLowerCase()==="ok" ){
		  this.redirect("/setupAccessInProgress.html");
		  
		  
		}
		else { /// PnP status : errore let connexion without pnp manuel mode			
			$('content-welcome-page-without-PnP2').show();
			$('cnt_first_install').show();
			this.fromObject(this.objects);
			
			if (this.objects.WANStatus.LinkType && this.objects.WANStatus.Protocol) {
				this.objects.LinkType = (this.objects.WANStatus.LinkType.toLowerCase() == "ethernet")?"Ethernet":this.objects.WANStatus.LinkType.toUpperCase();
				this.objects.Protocol = this.objects.WANStatus.Protocol === "DHCP" ? "DHCP" : "PPP";
			} else {
				this.objects.LinkType = "DSL";
				this.objects.Protocol = "PPP";
			}
			this.fillForm();
			this.form.enable();
		}

	},
       requireIdentConfirmation : function(){
	        $('content-welcome-pagePnP2').setStyle({display: 'block'});
		//$('content-welcome-pagePnP3').setStyle({display: 'none'});
		//$('bt_anotherpage').enable();
		$('userLastName').update(this.objects.PnP.LastName);
		$('userLastName').setStyle({color: '#FF6600'});
		$('userFirstName').update(this.objects.PnP.FirstName);
		$('userFirstName').setStyle({color: '#FF6600'});
	 
        },
       
        requireIdentConfirmation2 : function(){
	        $('content-welcome-pagePnP2').setStyle({display: 'none'});
		$('content-welcome-pagePnP3').setStyle({display: 'block'});
		$('userLastName2').update(this.objects.PnP.LastName);
		$('userLastName2').setStyle({color: '#FF6600'});
		$('userFirstName2').update(this.objects.PnP.FirstName);
		$('userFirstName2').setStyle({color: '#FF6600'});
		//$('bt_anotherpage').enable();

       },
	fillForm: function () {
		if (appConfig === "fr") {
			this.objects.Prefix = "fti/";
		} else if (appConfig === "pl") {
			this.objects.Prefix = "";
		}
		
		this.objects.Suffix = "";
		
		$("cnt_msgbox").hide();
		
		if (this.objects.Protocol.match(/ppp/i)) {
		
			$("wan_username").setValue("");
			$("wan_password").setValue("");
			
		}
		
	},

	_updateWanState: function (result) {
	        console.warn("click save");
		if (this.objects.stopRereshReq || this.objects.runningReq) {
			return;
		}

		if (result) {

			this.objects.WANStatus = result.result.data;
		}
		//if ($("cnt_msgbox").visible()) {
			if (this.objects.WANStatus.LinkState === "up") {
				var protocol = this.objects.WANStatus.Protocol;
				var WANConnection = this.objects.WANStatus;
				
				
				/*if(!this.objects.Autodetect.FirstBoot && (this.objects.WANStatus.ConnectionState === "Connected"||this.objects.WANStatus.ConnectionState === "Bound")){
					this.client.execute("sysbus.UserInterface:setState", {
						"currentState": 'connected'
					}, {});
					
					this.showConfirmation();
					return;
				}
				
				else*/ if (WANConnection.ConnectionState === "Connected" || (WANConnection.ConnectionState === "Bound" && WANConnection.Protocol === "dhcp")) {
					var confirmationurl = Sah.link("/setupAccessConfirmation.html");
 				              new Ajax.Request(confirmationurl, {
 						method: "get",
 						onSuccess: this.redirectToConfirmation.bind(this)
 					});
 			                return;
					
				}

				else if (protocol.match(/^ppp/i) && WANConnection.ConnectionState === "Connecting") {
					this.displayMessage("error.running", "", "", 1);
					
				} /*else if (protocol.match(/^ppp/i) && WANConnection.ConnectionState === "Unconfigured") { /// PPP only
					this.displayMessage("error.ppp_server", "Connection Status", "Authentication server unconfigured", 0);
					this.stopRefreshStatus();
					this.client.execute("sysbus.UserInterface:setState", {
						"currentState": ''
					}, {});
					
				}*/ else if (protocol.match(/^ppp/i) && WANConnection.LastConnectionError === "ERROR_AUTHENTICATION_FAILURE") {
					this.retry +=1;
					if(this.retry > 5) {
						this.retry =0;
						this.displayMessage("error.authentication", "Authentication Failure", "Authentication Failure", 0);
						this.stopRefreshStatus();
					}
						
				} else if (protocol.match(/^ppp/i) && WANConnection.LastConnectionError === "ERROR_ISP_TIMEOUT") { /// PPP only
					this.displayMessage("error.ppp_timeout", "Last Connection Error", "Authentication server timeout", 0);
					this.stopRefreshStatus();
					this.client.execute("sysbus.UserInterface:setState", {
						"currentState": ''
					}, {});
					
				} else {
					this.displayMessage("error.running", "", "",1);

				}
			} else {
				this.errorPage();
			//}
		}
		
		this.timeout = null;
		this.refreshStatus(5);
	},

	onProfileChange: function (event) {
		var login = $("wan_username").value;
		login = login.replace(new RegExp("^" + this.objects.Prefix, "i"), "");
		login = login.replace(new RegExp(this.objects.Suffix + "$", "i"), "");
		//this.objects.AMEA.Profile.Settings.CountryCode = $("profile_country").value;
		this.fillForm();
		login = this.objects.Prefix + login + this.objects.Suffix;
		$("wan_username").value = login;
	},

	onSave: function (event) {
		var login, password, saveProfile = false,
		protocol, onSuccess;
		
		this.objects.WanMode = this.objects.LinkType + '_' + "PPP";
		protocol = "PPP";
		$("cnt_msgbox").hide();
		onSuccess = saveProfile ? this.performSaveProfile.bind(this) : this.performSaveNoProfile.bind(this);
		if (protocol.match(/ppp/i)) {
			var arr = $("wan_username").value.split("fti/");
			
			if (arr[0] === "") {
				arr =  arr.slice(1);
			}
			
			login = arr.join("");
			if (appConfig === 'fr') {
				login = this.objects.Prefix + arr.join('fti/');
			}
			password = $("wan_password").value;
			
			if (appConfig === 'pl') {
				var arr = login.split("@neostrada.pl");
				
				if (arr[arr.length - 1] === "") {
					arr.pop();
				}
				
				login = arr.join("@neostrada.pl") + "@neostrada.pl";
			}
			
			if (!login.match(new RegExp("^" + this.objects.Prefix + "\\S+" + this.objects.Suffix + "$")) || !password.match(/\S/)) {
				this.displayMessage("error.empty", "Invalid values", "Check that login and password are correct", 0);
				return;
			}

			
		
		}
		this.beforeRequest();
		var is_DSL = (this.objects.LinkType !== "Ethernet") ? "DSL" : "Ethernet";
		Cookie.set('WanInterfaceConfig', is_DSL);
		Cookie.set('PPPUserName', login);
		this.client.execute("sysbus.NMC:setWanMode", {
			"WanMode": this.objects.WanMode,
			"Username": login,
			"Password": password
		}, {
			"onSuccess": this.whenSaved.bind(this),
			"onFailure": this.whenNotSaved.bind(this)
		});


		this.displayMessage("error.running", "", "", 1);
	},
	performSaveNoProfile: function (event) {
		if (this.objects.stopRereshReq) {
			this.afterRequest();
			return;
		}
		this.objects.AMEA._save({
			onSuccess: this.whenSaved.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		});
	},

	performSaveProfile: function (event) {
		this.objects.AMEA.Profile.Settings._save({
			onSuccess: this.whenSaved.bind(this),
			onFailure: this.whenNotSaved.bind(this)
		});
	},

	whenSaved: function (obj) {
	        if(this.Wantimeout)
			window.clearTimeout(this.Wantimeout);
		this.afterRequest();
		if (this.objects.stopRereshReq) {
			return;
		}
		this.displayMessage("error.running", "", "", 1);
		this.logger.warn("Saving connection parameters succeded");
		this.refreshStatus(15);
	},

	whenNotSaved: function (obj) {
		this.afterRequest();
		if (this.objects.stopRereshReq) {
			return;
		}
		this.logger.warn("Saving connection parameters failed");
		this.logger.warn(obj);
	},

	beforeRequest: function () {
		this.stopRefreshStatus();
		$("bt_save").disable();
		this.objects.stopRereshReq = false;
		this.objects.runningReq = true;
	},

	afterRequest: function () {
		this.objects.runningReq = false;
		$("bt_save").enable();
	},

	connectedLoaded: function (response) {
		this.connected = response.responseText;
	},
	connectionChanged: function () {
		$("content-confirmation").hide();
		$("content").show();
		$("cnt_credentials").show();
		
		$("wan_username").setValue("");
		$("wan_password").setValue("");
		
		
	},

	stopRefreshStatus: function () {
		this.objects.stopRereshReq = true;
		window.clearTimeout(this.timeout);
		this.timeout = null;
	},

	refreshStatus: function (refreshPeriod) {
		if (!this.connected) {
			var confirmationurl = Sah.link("/setupAccessConfirmation.html");
			if ( appConfig === 'pl' ) {
				confirmationurl = Sah.link("/setupAccessConfirmation_tp.html");
			}
				
			new Ajax.Request(confirmationurl, {
				method: "get",
				onSuccess: this.connectedLoaded.bind(this)
			});

		}
		if (this.objects.stopRereshReq || this.objects.runningReq) {
			return;
		}
		if (!this.timeout) {
			this.timeout = window.setTimeout((function (event) {
				this.client.execute("sysbus.NMC:getWANStatus", {}, this._updateWanState.bind(this));
			}).bind(this), refreshPeriod * 1000);
		}
	},
	
	fixFirefoxBgRedraw: function () {
		if (Prototype.Browser.Gecko) { /* force firefox redraw */
			$('document-background-footer').setOpacity(0.99);
			window.setTimeout(function () {
				$('document-background-footer').setOpacity(1);
			}, 2);
		}
	},

	displayMessage: function (errorName, defaultTitle, defaultMessage, nbRefresh) {
		Sah.translator.change($("msgbox_title"), "setup.accesstype." + errorName + ".label", "X " + defaultTitle);
		Sah.translator.change($("msgbox_text"), "setup.accesstype." + errorName + ".description", "X " + defaultMessage);

		if (nbRefresh > 0) {
			if (this.objects.nbRefresh >= 10) {
				this.objects.nbRefresh = 0;
			}
		
			$("msgbox_waiter").update(this._waitSet[(this.objects.nbRefresh % 10)]);
			
			this.objects.nbRefresh++;
		} else {
			$("msgbox_waiter").update("");
		}
		$("cnt_msgbox").show();
		this.fixFirefoxBgRedraw();
	},

	onCancel: function (event) {
		event.stop();
		this.stopRefreshStatus();
		this.fillForm();
	},

	onInfoLegalAccess: function (event) {
		event.stop();
		window.clearTimeout(this.refreshWhenNMCCrashes);
		this.refreshWhenNMCCrashes = null;
		window.clearTimeout(this.refrechtimeout);
		this.refrechtimeout = null;
		this.stopRefreshStatus();
		this.infoLegalLoaded();
	},

	infoLegalLoaded: function () {
		$("content-center").update(this.legalInfo);
		Sah.translator.update();
		$("bt_back_legal").observe("click", function () {
			this.redirect("/setupAccessType.html");
		}.bind(this));
		this.fixFirefoxBgRedraw();
	},

	showConfirmation: function () {
        if ( appConfig ==='pl' ) {			
			return window.location = window.location.protocol+"//" + window.location.host;
		}else{                
			window.clearTimeout(this.timeout);
			this.timeout = null;
			var undef;
			if($("connected-popup"))				
				$("connected-popup").remove();
			var divConfirmation = new Element('div', {
				id: "content-confirmation"
			});
			
			$("content").hide();
			$("document").insertBefore(divConfirmation,$("footer"));
			$("content-confirmation").update(this.connected);
			$("content-confirmation").setStyle("min-height: 570px;");
			$("content-confirmation").show();
			$('cnt_confirmation1').show();
			$('cnt_confirmation2').hide();

			
			$$("#footer-menu")[0].stopObserving("click");
			$$("#footer-menu")[0].observe("click", this.showLegal.bind(this));
			
			if ( $$("#footer-menu")[1] !== undef ) {
				$$("#footer-menu")[1].observe("click", this.showLegal.bind(this));
			}
			Sah.translator.update();
		}
	},
	getUserName: function(){
		
		if (Cookie.get("PPPUserName")) {
				$("confirmation_username1").update(" "+Cookie.get("PPPUserName").replace('fti/', ''));
				$("confirmation_username2").update(" "+Cookie.get("PPPUserName").replace('fti/', ''));
				Cookie.unset("PPPUserName")
			}
	},
	failure: function () {
		
	},
	showConnectionSetting: function () {
		$("content").show();
		$("content-confirmation").hide();
		$('legal_Info_conf').hide();		
		this.form.enable();
		this.stopRefreshStatus();
		if (this.objects.WANStatus.LinkType && this.objects.WANStatus.Protocol) {
				this.objects.LinkType = (this.objects.WANStatus.LinkType.toLowerCase() == "ethernet")?"Ethernet":this.objects.WANStatus.LinkType.toUpperCase();
				this.objects.Protocol = this.objects.WANStatus.Protocol === "DHCP" ? "DHCP" : "PPP";
		} else {
				this.objects.LinkType = "DSL";
				this.objects.Protocol = "PPP";
		}
		
		this.fillForm();
	},
	showLegal: function () {
		$("content").hide();
		$("content-confirmation").show();
		$$('#content-center')[1].hide();
		$('legal_Info_conf').show();
		Sah.translator.update();
		
		$$("#bt_back_legal")[1].observe("click", function () {
			$$('#content-center')[1].show();
			$('legal_Info_conf').hide();
		});
		
		this.fixFirefoxBgRedraw();
	},
	
	errorPage: function () {
		window.clearTimeout(this.timeout);
		this.timeout = null;

		$("content-center").update(this.setupAccessError);
		var newImg = new Element("img");
		newImg.className =  "voice Voice.general.icon.lb2";
		newImg.setAttribute("style", "display: block; margin-left:auto; margin-right:auto;");
		if (config.BUILD_PROJECT.indexOf("2.8") < 0) {
			newImg.src = '/images/'+appConfig+'/common/Livebox2.png';
		}else{
			newImg.src = '/images/'+appConfig+'/common/Livebox_2.8.png';

		}
		$("content-center").insertBefore(newImg,$("image-br"));
		Sah.translator.update();
		this.refrechtimeout = setTimeout(function(){
			this.redirect("/setupAccessType.html");
		}.bind(this),50000);
		$("bt_reboot_access").observe("click", function (e) {
			window.clearTimeout(this.refrechtimeout);
			this.refrechtimeout = null;
			this.redirect("/setupAccessType.html");
		}.bind(this));

		/*$("bt_reboot_access").observe("click", function (e) {
			e.stop();
			e.preventDefault();
			this.stopRefreshStatus();
			this.client.execute("sysbus.NMC:reboot", {}, {
				"onSuccess": this.onReboot.bind(this),
				"onFailure": this.onReboot.bind(this)
			});
			return false;
		}.bind(this));*/
		
		this.fixFirefoxBgRedraw();
	},
	
	onReboot: function () {
		$("content-center").update(this.rebootProgress);
		Sah.translator.update();
		this.resetDelay = "5";
		this.rebootAction = "1";
		this.progressBar = new Sah.Widget.ProgressBar("reboot-progress-bar", {});
		this.progressBar.animate(1837);
		setTimeout(function () {
			Sah.detectReboot('/')
		}, 138000);
		this.fixFirefoxBgRedraw();
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/home/ssh_access.js */

Home.Ssh_access = Class.create(Sah.Form, {
	initialize: function ($super, form) {
		$super(form);

		$("bt_valid").observe("click", this.onSave.bind(this));		
		$("footer-menu").observe("click", this.showLegalInfo.bind(this));		
		$("bt_back_legal").observe("click", this.showSshAccess.bind(this));		
		$$("ol li").each(function (elt) {
			elt.hide();
		}, this);
		this.needs("Devices", {
			path: "sysbus.Devices:get",
			method :"execute",
			methodParams: {
				"expression":{"usbDongle":" usb && smart-card && pki and .Active==true"}
			}
		});
		
		this.load();
	},



	objectsLoaded: function () {
	        if (this.objects["Devices"]["usbDongle"].length <= 0) {
		  this.redirect("/");
		} 
		this.fillForm();
		this.form.enable();
	
	

	},

	fillForm: function () {
		
		
	},
	showLegalInfo: function () {
		$("ssh_access").hide();
		$("legal_Info").show();
		// this.redirect("/legal.html");
		
	},
	showSshAccess: function () {
		$("legal_Info").hide();
		$("ssh_access").show();
		// this.redirect("/legal.html");
		
	},
	
	onSave: function () {
	      var value =$('pinValue').getValue();
	      this.client.execute("sysbus.PKIToken:verifyPin", {
		      "pin" : value
		      
	      }, {
		      onSuccess: this.whenSaved.bind(this),
		      onFailure: this.whenNotSaved.bind(this)
	      });	
	},
	
	whenSaved: function (result) {	
	      if (result.result ) {
			status=result.result.status;
			if (status=="0") {
			      $('status-ok').setStyle({display: 'block'});
			      $('badpincode').setStyle({display: 'none'});
			      $('badpki').setStyle({display: 'none'});
			      $('pkilocked').setStyle({display: 'none'});
			}
			if (status=="1") {
			      $('status-ok').setStyle({display: 'none'});
			      $('badpincode').setStyle({display: 'block'});
			      $('badpki').setStyle({display: 'none'});
			      $('pkilocked').setStyle({display: 'none'});
			}
			if (status=="2") {
			      $('status-ok').setStyle({display: 'none'});
			      $('badpincode').setStyle({display: 'none'});
			      $('badpki').setStyle({display: 'block'});
			      $('pkilocked').setStyle({display: 'none'});
			}
			if (status=="3") {
			      $('status-ok').setStyle({display: 'none'});
			      $('badpincode').setStyle({display: 'none'});
			      $('badpki').setStyle({display: 'none'});
			      $('pkilocked').setStyle({display: 'block'});
			}
	      } else {

			$('status-ok').setStyle({display: 'none'});
			$('badpincode').setStyle({display: 'none'});
			$('badpki').setStyle({display: 'block'});
			$('pkilocked').setStyle({display: 'none'});
		      }

	       
	},

	whenNotSaved: function (obj) {

	},
	sowMessage: function(index) {
		$$("ol li").each(function (elt) {
			elt.hide();
		}, this);
		
		$$("ol li")[index].show();
		
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/home/unlockAccess.js */

Home.UnlockAccess = Class.create(Sah.Form,
{
    initialize: function ($super, form)
    {
        $super(form);
        this.auth = new Sah.Auth(this.client);
        $("bt_save").observe("click", this.doLogin.bind(this));
        $("bt_cancel").observe("click", this.doCancel.bind(this));
        Event.observe(document, "sah:authentication:error", this.whenNotSaved.bind(this));

       
       
    },
    doCancel : function(event){
        
        this.form.reset();
        event.stop(event);
        $('home.authentification.remoteaccess.error').hide();
    },


 
    doLogin: function (event) {
        this.logger.info("loging in");
        event.stop(event);
        $("home.authentification.remoteaccess.error").hide();      
        if ($F("Username").match(/^\s*$/) || $F("Password").match(/^\s*$/)) {
             $("home.authentification.remoteaccess.error").show();      
           // this.displayMessage("error.invalid", "", "", 0);
            return false;
        }

        this.auth.login($F("Username"), $F("Password"), {
            onSuccess: this.whenSaved.bind(this),
            onFailure: this.whenNotSaved.bind(this)
        });

        return false;
    },

    whenSaved: function (obj)
    {
        document.location = "/advConfigAccessType.html";
    },

    whenNotSaved: function (obj)
    {
         $("home.authentification.remoteaccess.error").show();      
        this.logger.warn("authentification failure");
        this.logger.warn(obj);
    },
  
    displayMessage: function (errorName, defaultTitle, defaultMessage) {
        Sah.translator.change($("msgbox_title"), "setup.unlockaccess." + errorName + ".label", "X " + defaultTitle);
        Sah.translator.change($("msgbox_text"), "setup.unlockaccess." + errorName + ".description", "X " + defaultMessage);
        $("cnt_msgbox").show();
    }
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/home/setupaccessinprogress.js */

Home.SetupAccessInProgress = Class.create(Sah.Form, {
	initialize: function ($super, form) {
		$super(form);
		$("footer-menu").observe("click", this.onInfoLegalAccess.bind(this));
		this.legalInfo = $("legal_Info").innerHTML;
		this.needs("PnP", {
			path: "sysbus.PnP:get",
			method: "execute"
		});
		this.needs("UserInterfaceStatus",{path:"sysbus.UserInterface:getState", 
				method: "execute"				
		});
		this.needs("Autodetect", {
			path: "sysbus.NMC.Autodetect:get",
			method: "execute"
		});
		this.connected = null;
		this.timeout = null;
		this.Wantimeout = null;
		this.load();
	},
	objectsLoaded: function () {
		this.updatePnPState();	
		$$("#footer-menu")[0].stopObserving("click");
		$$("#footer-menu")[0].observe("click", this.showLegal.bind(this));

		Sah.translator.update();
	},
	showConfirmation: function () {
           
		window.clearTimeout(this.timeout);
		this.timeout = null;
		var undef;
		if($("connected-popup"))				
		    $("connected-popup").remove();
		var divConfirmation = new Element('div', {
				id: "content-confirmation"
			});
			
		$("content").show();			
		$("content-center").hide();
		$("document").insert(divConfirmation);
		$("content-confirmation").update(this.connected);
		$("content-confirmation").setStyle("min-height: 570px;");
		$("earth_confirmation").setStyle("margin-left: 175px;");
		$("label_confirmation").setStyle("margin-left: 175px;");
		
		$('cnt_confirmation_progress').show();
		$('cnt_confirmation2').hide();
		
		/*$$("#footer-menu")[0].stopObserving("click");
 		$$("#footer-menu")[0].observe("click", this.showLegal.bind(this));
 			
 		if ( $$("#footer-menu")[1] !== undef ) {
 				$$("#footer-menu")[1].observe("click", this.showLegal.bind(this));
		}*/
		$$("#footer-menu")[0].stopObserving("click");
		$$("#footer-menu")[0].observe("click", this.showLegal.bind(this));
			
		if ( $$("#footer-menu")[1] !== undef ) {
				$$("#footer-menu")[1].observe("click", this.showLegal.bind(this));
		}
		Sah.translator.update();


	},
	connectedLoaded: function (response) {
		this.connected = response.responseText;
	},
	
	onInfoLegalAccess: function (event) {
		event.stop();
		window.clearTimeout(this.refrechtimeout);
		this.refrechtimeout = null;
		this.stopRefreshStatus();
		this.infoLegalLoaded();
	},
	infoLegalLoaded: function () {
		$("content-center").update(this.legalInfo);
		Sah.translator.update();
		$("bt_back_legal").observe("click", function () {
			this.redirect("/setupAccessInProgress.html");
		}.bind(this));
		this.fixFirefoxBgRedraw();
	},
	showLegal: function () {
		$("content").hide();
		//$("content-confirmation").show();
		$$('#content-center')[1].hide();
		$('legal_Info_conf').show();
		Sah.translator.update();
		
		$$("#bt_back_legal")[1].observe("click", function () {
			$$('#content-center')[1].show();
			$('legal_Info_conf').hide();
		});
		
		this.fixFirefoxBgRedraw();
	},
	
	stopRefreshStatus: function () {
		this.objects.stopRereshReq = true;
		window.clearTimeout(this.timeout);
		this.timeout = null;
	},
	redirectToConfirmation: function (response) {
		this.connectedLoaded(response);

		this.client.execute("sysbus.UserInterface:setState", {
			"currentState": 'connected'
		}, {});

		this.showConfirmation();
	},
	updatePnPState: function (result) {
		
		if (result) {
			this.objects.PnP = result.result.status;
		}
		window.clearTimeout(this.timeout);
		if (this.objects.PnP) {		
			if(!this.objects.Autodetect.FirstBoot && this.objects.PnP.Status==="Idle"){
					this.redirect("/setupAuthenticationType.html");
					//this.redirect("/setupAccessInProgress.html");
			}else if(this.objects.PnP.Status==="Idle"){		
				        console.warn('update PnP Idle State ');
					this.timeout = window.setTimeout((function (event) {
						this.client.execute("sysbus.PnP:get", {}, this.updatePnPState.bind(this));
					}).bind(this),5000);
				
			}else if(this.objects.PnP.Status.toLowerCase()==="running"){
			  console.warn('update PnP State Idle to Running');
			  this.redirect("/setupAuthenticationType.html");
			}
			else if(this.objects.PnP.Status.toLowerCase()==="timeout"||this.objects.PnP.Status==="Error"){
			 
			  this.redirect("/setupAuthenticationType.html");
			}			
			else if(this.objects.PnP.Status.toLowerCase()==="ok" && (this.objects.UserInterfaceStatus != "connected")){
			        console.warn("OK from setupAccessinprogress PnP.Status=OK ");	
				this.objects.stopRereshReq = false;
		                this.objects.runningReq = false;
				if(this.Wantimeout)
				window.clearTimeout(this.Wantimeout);	
		                this.Wantimeout = window.setTimeout((function (event) {
						this.client.execute("sysbus.NMC:getWANStatus", {}, this.updateWanState.bind(this));
					}).bind(this), 10000);
				
			}
			 else{
		              this.redirect("/setupAuthenticationType.html");
		       }
		} else{
		  //rediecrt to the authentication page
		  //let the old setup page works
		  this.redirect("/setupAuthenticationType.html");
		}
	},
	updateWanState: function (result) {
		if (result) {
			this.objects.WANStatus = result.result.data;
		}
		if (this.objects.WANStatus.LinkState === "down") {
			this.redirect("/setupAuthenticationType.html");
		} else if ((this.objects.WANStatus.ConnectionState === "Connected")|| (this.objects.WANStatus.ConnectionState === "Bound" && this.objects.WANStatus.Protocol === "dhcp")) {
		     //   this.redirect("/setupAccessConfirmation.html");
			//this.showConfirmation();
			var confirmationurl = Sah.link("/setupAccessConfirmation.html");
 				new Ajax.Request(confirmationurl, {
 						method: "get",
 						onSuccess: this.redirectToConfirmation.bind(this)
 					});
 			return;

			
		}else if (this.objects.WANStatus.ConnectionState === "Disconnected") {
		          console.warn("PnP.Status = OK sans passé de Running et ConnectionState=Disconnected");
			 this.redirect("/setupAuthenticationType.html");		
		}
               
		window.clearTimeout(this.Wantimeout);				
		this.Wantimeout = window.setTimeout((function (event) {
						this.client.execute("sysbus.NMC:getWANStatus", {}, this.updateWanState.bind(this));
					}).bind(this), 10000);
	}
	
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/home/accessibility.js */

Home.Accessibility = Class.create(Sah.Form, {

	initialize: function ($super, form) {
		$super(form);
		if (!Cookie.get("zoom-accessibility")) {
			Cookie.set("zoom-accessibility", "small");
		}
		if (!Cookie.get("contrast-accessibility")) {
			Cookie.set("contrast-accessibility", "contrast1");
		}

		this.zoomAttributes = ["small", "normal", "big", "bigger", "biggest"];
		this.zoomAccessibility = Cookie.get("zoom-accessibility");
		this.contrastAccessibility = Cookie.get("contrast-accessibility");
		document.body.className = "accessibility-" + this.zoomAccessibility + " " + "accessibility-" + this.contrastAccessibility;
		this.setImgZoom(this.zoomAccessibility);
		$$("div.header-controls-accessibility").each(function (e) {
			e.observe("click", this.setAccessibility.bind(this));
		}, this);

	},
	
	
	setImgZoom: function (zoomLevel) {
		if (zoomLevel === "small"){
			this.updateImagesZoom("55px","43px");}
		else if (zoomLevel === "normal"){
			this.updateImagesZoom("60px","47px");}
		else if (zoomLevel === "big"){
			this.updateImagesZoom("65px","51px");}
		else if (zoomLevel === "bigger"){
			this.updateImagesZoom("70px","55px");}
		else if (zoomLevel === "biggest"){
			 this.updateImagesZoom("75px","59px");}
	},

	setAccessibility: function (event) {
		event.preventDefault();
		var selectedZoomLevel;

		if (!event){ event = window.event;}
		var currentTarget =  event.currentTarget||event.srcElement;

		while (currentTarget.nodeName.toUpperCase() !== "DIV") {
			currentTarget = currentTarget.parentNode;
		}

		var newClass = currentTarget.id.slice(16);
                var zoomLevel = selectedZoomLevel;
                
		switch (newClass) {
			case "accessibility-minus":
				selectedZoomLevel = this.findZoomLevel(this.zoomAccessibility);
				if (selectedZoomLevel !== false && selectedZoomLevel > 0) {
					$(document.body).removeClassName("accessibility-" + this.zoomAccessibility);
					$(document.body).addClassName("accessibility-" + this.zoomAttributes[selectedZoomLevel - 1]);
					this.zoomAccessibility = this.zoomAttributes[selectedZoomLevel - 1];
					Cookie.set("zoom-accessibility", this.zoomAttributes[selectedZoomLevel - 1]);
					
					zoomLevel = this.zoomAttributes[selectedZoomLevel - 1];
				}
				break;
			case "accessibility-plus":
				selectedZoomLevel = this.findZoomLevel(this.zoomAccessibility);
				if (selectedZoomLevel !== false && selectedZoomLevel < 4) {
					$(document.body).removeClassName("accessibility-" + this.zoomAccessibility);
					$(document.body).addClassName("accessibility-" + this.zoomAttributes[selectedZoomLevel + 1]);
					this.zoomAccessibility = this.zoomAttributes[selectedZoomLevel + 1];
					Cookie.set("zoom-accessibility", this.zoomAttributes[selectedZoomLevel + 1]);
					zoomLevel = this.zoomAttributes[selectedZoomLevel + 1];
				}
				break;
			case "accessibility-contrast1":
				if (this.contrastAccessibility !== "accessibility-contrast1") {
					$(document.body).removeClassName("accessibility-contrast3");
					$(document.body).removeClassName("accessibility-contrast2");
					$(document.body).addClassName("accessibility-contrast1");
					this.contrastAccessibility = "contrast1";
					Cookie.set("contrast-accessibility", "contrast1");
				}
				break;
			case "accessibility-contrast2":
				if (this.contrastAccessibility !== "accessibility-contrast2") {
					$(document.body).removeClassName("accessibility-contrast3");
					$(document.body).removeClassName("accessibility-contrast1");
					$(document.body).addClassName("accessibility-contrast2");
					this.contrastAccessibility = "contrast2";
					Cookie.set("contrast-accessibility", "contrast2");
				}
				break;
			case "accessibility-contrast3":
				if (this.contrastAccessibility !== "accessibility-contrast3") {
					$(document.body).removeClassName("accessibility-contrast2");
					$(document.body).removeClassName("accessibility-contrast1");
					$(document.body).addClassName("accessibility-contrast3");
					this.contrastAccessibility = "contrast3";
					Cookie.set("contrast-accessibility", "contrast3");
				}
				break;
		}
		
		this.setImgZoom(zoomLevel);
		
		return false;
	},
	
	findZoomLevel: function (zoomLevel) {
		var i;
		for ( i = 0; i < this.zoomAttributes.length; i+=1) {
			if (this.zoomAttributes[i] === zoomLevel) {return i;}
		}
		return false;
	},
	
	updateImagesZoom: function (widthVal, heightVal) {
		var cssRules;
		var theClass = 'img.img-zoom';
		var S;
		for ( S = 0; S < document.styleSheets.length; S+=1) {
			try {
				document.styleSheets[S].insertRule(theClass + ' { width:' + widthVal + '; height:' + heightVal + '; }', document.styleSheets[S][cssRules].length);
			} catch (err) {
				try {
					document.styleSheets[S].addRule(theClass, 'width:' + widthVal + '; height:' + heightVal + ';');
				} catch (err1) {
					try {
						if (document.styleSheets[S].rules) {
							cssRules = 'rules';
						} else if (document.styleSheets[S].cssRules) {
							cssRules = 'cssRules';
						} else {
							//no rules found... browser unknown
							this.logger.warn("no css rules found... browser unknown");
							
						}
						var R;
						for (R = 0; R<document.styleSheets[S][cssRules].length; R+=1) {
							if (document.styleSheets[S][cssRules][R].selectorText === theClass) {
								if (document.styleSheets[S][cssRules][R].style.width) {
									document.styleSheets[S][cssRules][R].style.width = widthVal;
									document.styleSheets[S][cssRules][R].style.height = heightVal;
									break;
								}
							}
						}
					} catch (err2) {
							this.logger.warn("unkown error setting stylesheets");
					}
				}
			}
		}
	}
});
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/home/datarate.js */

Home.Datarate = Class.create(Sah.Form, {
	initialize: function ($super, form) {
		
		$('left-datarate-link').addClassName('current');
		$$('#header-hmenu li.active')[0].removeClassName('active');
		$('hmenu-home').addClassName('active');
		
		$super(form);
		
		this.needs("Dsl", {
			path: "sysbus.NeMo.Intf.data:getMIBs",
			method:"execute",
			methodParams:{
				mibs:"dsl",
				flag:"",
				traverse:"down"
			}    
		});  
		
		this.needs("DeviceInfo", {
			path: "sysbus.DeviceInfo", 
			depth: -1
		});

		this.needs("Status", {
			path: "sysbus.NMC:getWANStatus", 
			method:"execute",
			methodParams:{}
		});

// 		this.markAsLoading();
		this.load();
	},
	objectsLoaded: function () { 
		this._uptime = this.objects.DeviceInfo.UpTime;
				
		if (this.objects.Dsl.dsl.dsl0) {
			this.objects.Dsl = this.objects.Dsl.dsl.dsl0;
		} else {
			this.objects.Dsl = {
				LinkStatus: '',
				LastChangeTime: '',
				LastChange: '',
				UpstreamCurrRate: '',
				DownstreamCurrRate: '',
				DownstreamNoiseMargin: ''
			}
		}
		
		if (this.objects.Dsl.LastChangeTime !== ''){
			if (this.objects.Status.Protocol.toLowerCase() === "ppp"){
				this.objects.LastChange = this._uptime - this.objects.Dsl.LastChangeTime;    
			} else {
				this.objects.LastChange = this.objects.Dsl.LastChange;   			
			} 
		} else {
			this.objects.LastChange = "";   
		}
		
		this.fillForm();
		this.markAsLoaded();
	},   

	fillForm: function () {      
		this.fromObject(this.objects);
		var UpstreamCurrRate,DownstreamCurrRate;

		if(this.objects.Status.LinkType.toLowerCase() === "dsl") {
			UpstreamCurrRate=(this.objects.Dsl.UpstreamCurrRate/1000) * 0.88;
			DownstreamCurrRate=(this.objects.Dsl.DownstreamCurrRate/1000) * 0.88;
		}else{
			UpstreamCurrRate=(this.objects.Dsl.UpstreamCurrRate/1000) * 0.96;
			DownstreamCurrRate=(this.objects.Dsl.DownstreamCurrRate/1000) * 0.96;
		}      
		$('Dsl.LastChangeTime').update(Sah.uptimeToDate(this.objects.LastChange));	
		$('Dsl.UpstreamCurrRate').update(parseFloat(UpstreamCurrRate).toFixed(1) + " Mbit/s");
		$('Dsl.DownstreamCurrRate').update(parseFloat(DownstreamCurrRate).toFixed(1) + " Mbit/s");
		document.observe("sah:admin:language:change",function (){
			$('Dsl.LastChangeTime').update(Sah.uptimeToDate(this.objects.LastChange));
		}.bind(this));
  
	},  
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/home/remoteBackup.js */

Home.RemoteBackup = Class.create(Sah.Form, {
	initialize: function ($super, form) {
		$super(form);
		
		if ($('hmenu-support').hasClassName('active')){
			this.client.execute("sysbus.UserManagement:getUsers", {}, {
				onSuccess: this.removeSupportLinks.bind(this),
				onFailure: this.WhenFailure.bind(this)
			});
		}
		
		if ($('hmenu-advconfig').hasClassName('active')){
			this.client.execute("sysbus.UserManagement:getUsers", {}, {
				onSuccess: this.removeAdvConfigLinks.bind(this),
				onFailure: this.WhenFailure.bind(this)
			});
		}
		
		this.load();
		
	},
    
    objectsLoaded: function(){
	},
	
	searchRAUser: function () {
	    var login = Cookie.get('login');
	    this.objects.Users.each(function (user) {     
		user.UserGroupParticipation = user.groups.join(" ");
		if ( (user.name == login) && user.UserGroupParticipation.indexOf("remoteadmin")>=0 && (user.name != "support") ) {
		    this.objects.userRemoteAdmin = user;
		}            
	    }, this);
	}, 
	
	WhenFailure: function(obj){
		if ($('hmenu-support').hasClassName('active')){
			$("left-backup-link").hide();
			$("left-hotline-link").hide();
			$("left-restore-link").hide();
		} else if ($('hmenu-advconfig').hasClassName('active')){
			$("left-remote-link").hide();
			$("separator").hide();
		}
	},
	
	/* Removes links under Support menu when the uer is a remote one */
	removeSupportLinks: function (obj) {
		if (obj && obj.result && obj.result.status){
			this.objects.Users = obj.result.status;
			this.searchRAUser();	
			if (this.objects.userRemoteAdmin){
				$("left-backup-link").hide();
				$("left-hotline-link").hide();
				$("left-restore-link").hide();
			}
		}else{
			$("left-backup-link").hide();
			$("left-hotline-link").hide();
			$("left-restore-link").hide();
		}
	},
	
	/* Removes links under Advanced Config menu when the uer is a remote one */
	removeAdvConfigLinks: function (obj) {
		if (obj && obj.result && obj.result.status){
			this.objects.Users = obj.result.status;
			this.searchRAUser();	
			if (this.objects.userRemoteAdmin){
				$("left-remote-link").hide();
				$("separator").hide();
			}
		}else{
			$("left-remote-link").hide();
			$("separator").hide();
		}
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/home/disconnectedDevices.js */

/* TODO: documentation */
Home.DisconnectedDevices = Class.create(Sah.Form, {
	initialize: function ($super, form) {
		$super(form);

		this.form.hide();
		this.objects = new Object;
		this.refreshDelays = $A();
		this.refreshIndex = 0;
		this.initRefreshDelays(); /* setup events */		
		this.catiqStatus = false;/*enable catiq display for 2.8*/
		
		$("bt_refresh").observe("click", function (event) {
			this.refreshIndex=this.refreshDelays.length;
			event.memo = "button";
			this.refreshDevices(event);
		}.bind(this));
		
		this.needs("Hosts", {
			path: "sysbus.Hosts:getDevices",
			method: "execute"
		});
		
		this.needs("Schedules", {
			path: "sysbus.Scheduler:getSchedules",
			methodParams : {
				"type":"ToD"
			},
			method: "execute"
		});
		
		
		// usbStorage
		this.needs("PhysicalMedium", {
			path: "sysbus.sah.hgw.models.DeviceManager:getDevices",
			method: "execute",
			methodParams: {
				sources: "usb",
				types: "Storage"
			}
		});
		
		// printers
		this.needs("USBHosts", {
			path: "sysbus.sah.hgw.models.DeviceManager:getDevices",
			method: "execute",
			methodParams: {
				sources: "usb",
				types: "Printer"
			}
		});
		
		
		
		// dect
		if (this.catiqStatus && config.BUILD_PROJECT.indexOf("2.8") >= 0) {
			this.client.execute("sysbus.VoiceService.VoiceApplication:listHandsets", {}, {
				onSuccess: this.updateVoiceService.bind(this),
				onFailure: this.loadAll.bind(this)
			});
		} else {
			this.objects.VoiceService = [];
			this.load();
		}
	},
	
	updateVoiceService: function (obj) {
		this.objects.VoiceService = [];
		if (obj.result.status) {
			this.objects.VoiceService = obj.result.status;
		}
		this.load();
	},
	
	loadAll: function () {
		this.objects.VoiceService = [];
		this.load();
	},
		
	objectsLoaded: function () {
		var id = 0;
		this.disconnectedEthernetDevices = [];
		this.disconnectedWifiDevices = [];
		this.disDectphones = [];
		this.usbList = [];
		
		this.objects.Hosts.each(function (device) {
			device._path = "hosts" + id;
			if ( device.interfaceType === "Ethernet" && device.active === false ) {
				this.disconnectedEthernetDevices.push(device);
			} else if ( device.interfaceType === "802.11" && device.active === false ) {
				this.disconnectedWifiDevices.push(device);
			}
			id++;
		}, this);
		
		id = 0;
		this.objects.VoiceService.each(function (catIQDevice) {
			if (catIQDevice.enable != "Enabled" && (catIQDevice.endpointType.toLowerCase().indexOf("cat-iq") >= 0 || catIQDevice.endpointType.toLowerCase().indexOf("undefined") >= 0 || catIQDevice.endpointType.toLowerCase().indexOf("dect gap") >= 0)) {
				catIQDevice._path = "catIQ_" + id;
				this.disDectphones.push(catIQDevice);
				id++;
			}
		}, this);
		
		/*	
		id = 0;
		this.objects.USBHosts.each(function (device) {
			device.type = 'usbPrinter';
			device._path = "USB" + id;
			device.name = device.productClass;
			this.usbList.push(device);
			id++;
		}, this);*/

		this.objects.PhysicalMedium.each(function (device) {
			if (device.status.toLowerCase() != "online" ) {
				device.type = 'usbFlash';
				device._path = "USB" + id;
				this.usbList.push(device);
				id++;
			}
		}, this);

		id = 0;
		
		
		$$(".row").each(function (elem) {
			elem.remove();
		}, this);
		
		this.form.show();
		this.fillLists();
		
		if (this.refreshIndex < this.refreshDelays.length && !this.isRefreshButton) {
			this.refresh(this.refreshDelays[this.refreshIndex]);
			this.refreshIndex++;
		}
	},
	
	fillLists: function () {
		// Append Ethernet Devices
		this.disconnectedEthernetDevices.each(function (device) {
			this.appendEthernetDevice(device);
		}, this);
		
		// Append Wireless Devices
		this.disconnectedWifiDevices.each(function (device) {
			this.appendWirelessDevice(device);
		}, this);
		
		// Append dect Devices
		if (this.catiqStatus && config.BUILD_PROJECT.indexOf("2.8") >= 0  ) {
			this.disDectphones.each(function (device) {
				this.appendIpPhoneDect(device);
			}, this);		
		}
		
		// Append disconnected USB devices
		this.usbList.each(function (device) {
			this.appendUsbDevice(device);
		}, this);
		
		Event.observe($('content'), "click", this.hideDeviceMenu.bind(this));
		if (!this.catiqStatus || config.BUILD_PROJECT.indexOf("2.8") < 0  ) {
			this.adjustdisconnectedDevicesTable();
		}
	},
	
	appendEthernetDevice: function (device) {
		var appended = false;
		// Check if there any empty Td to append the ethernet device
		$$('#notconnecteddevices_table tbody .ethernet').each(function (td) {
			if (td.innerHTML == "") {
				td.addClassName(this.getIcon(device));
				td.id = device._path;
				td.update(
					'<div class="internet-restriction-icon"></div><div class="icon png"><img width="55" height="43" alt="'+
					this.getIcon(device)
					+ '" src="' +
					this.getSrcIcon(this.getIcon(device))
					+ '" class="img-zoom"/></div><div class="title">' +
					Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.truncateDeviceName(device.hostName, 16)))
					+ '</div>'
					);
				
				appended = true;
				
				var deviceType = Home.DisconnectedDevices.DeviceClasses[device.deviceType.toLowerCase()];
		
				if (deviceType.indexOf("tv") >= 0 || deviceType.indexOf("stb") >=0 || deviceType.indexOf("set-top box") >= 0 ) {
				// nothing to do its stb or tv device
				} else {
					td.observe('click', this.changeDevice.bind(this, device));
				}
			}
		}, this);
		
		if (!appended) {	
			var tr = new Element('tr', {
				'class': 'row'
			}).update(
				'<td id="' +
				device._path 
				+ '" class="' +
				this.getIcon(device)
				+ ' li-device ethernet"><div class="internet-restriction-icon"></div><div class="icon png"><img width="55" height="43" alt="'+
				this.getIcon(device)
				+ '" src="' +
				this.getSrcIcon(this.getIcon(device))
				+ '" class="img-zoom"/></div><div class="title">' + 
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.truncateDeviceName(device.hostName, 16)))
				+ '</div></td><td class="li-device wireless"></td><td class="li-device usb"></td><td class="li-device dect dectphone mobile"></td>'
				);
			$$('#notconnecteddevices_table tbody')[0].appendChild(tr);
			
			var deviceType = Home.DisconnectedDevices.DeviceClasses[device.deviceType.toLowerCase()];
		
			if (deviceType.indexOf("tv") >= 0 || deviceType.indexOf("stb") >=0 || deviceType.indexOf("set-top box") >= 0 ) {
			// nothing to do its stb or tv device
			} else {
				$(device._path).observe('click', this.changeDevice.bind(this, device));
			}
		}
		
		this.setScheduleIcon(device._path, device.physAddress);
	},
	
	appendWirelessDevice: function (device) {
		var appended = false;
		// Check if there any empty Td to append the Wireless device
		$$('#notconnecteddevices_table tbody .wireless').each(function (td) {
			if (td.innerHTML == "" && !appended) {
				td.addClassName(this.getIcon(device));
				td.setAttribute('id',device._path);
				td.update(
					'<div class="internet-restriction-icon"></div><div class="icon png"><img width="55" height="43" alt="'+
					this.getIcon(device)
					+ '" src="' +
					this.getSrcIcon(this.getIcon(device))
					+ '" class="img-zoom"/></div><div class="title">' +
					Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.truncateDeviceName(device.hostName, 16)))
					+ '</div>'
					);
				
				appended = true;
				td.observe('click', this.changeDevice.bind(this, device));
			}
		}, this);
		
		if (!appended) {
			var tr = new Element('tr', {
				'class': 'row'
			}).update(
				'<td class="li-device ethernet"></td><td id ="' + device._path + '" class="' + this.getIcon(device) + 
				' li-device wireless"><div class="internet-restriction-icon"></div><div class="icon png"><img width="55" height="43" alt="'+
				this.getIcon(device)
				+ '" src="' +
				this.getSrcIcon(this.getIcon(device))
				+ '" class="img-zoom"/></div><div class="title">' + 
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.truncateDeviceName(device.hostName, 16)))
				+ '</div></td><td class="li-device usb"></td><td class="li-device dect dectphone mobile"></td>');
				
			$$('#notconnecteddevices_table tbody')[0].appendChild(tr);
			$(device._path).observe('click', this.changeDevice.bind(this, device));
		}
		
		this.setScheduleIcon(device._path, device.physAddress);
	},
	
	appendUsbDevice: function (device) {
		
		var appended = false;
		
		// Check if there any empty Td to append the ethernet device
		$$('#notconnecteddevices_table tbody .usb').each(function (td) {
			if (td.innerHTML == "" && !appended ) {
				td.addClassName("usb");
				td.id = device._path;
				td.update(
					'<div class="icon png"><img width="55" height="43" alt="Disconnected Usb device" src="' +
					this.getSrcIcon("mass-storage")
					+ '" class="img-zoom"/></div><div class="title">' +
					Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.truncateDeviceName(device.name, 16)))
					+ '</div>'
					);
				
				appended = true;
			}
		}, this);
		
		if (!appended) {
			var tr = new Element('tr', {
				'class': 'row'
			}).update(
				'<td class="li-device ethernet"></td><td class="li-device wireless"></td><td class="li-device usb"><div class="icon png"><img width="55" height="43" alt="Disconnected USB Device" src="' +
				this.getSrcIcon("mass-storage")
				+ '" class="img-zoom"/></div><div class="title">' +
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.truncateDeviceName(device.name, 16)))
				+ '</div></td><td class="li-device dect dectphone mobile"></td>'
				);
			$$('#notconnecteddevices_table tbody')[0].appendChild(tr);
		}
	},
	
	appendIpPhoneDect: function (device) {
		var appended = false;
		
		// Check if there any empty Td to append the ethernet device
		$$('#notconnecteddevices_table tbody .dectphone').each(function (td) {
			if (td.innerHTML == "" && !appended) {
				td.addClassName("mobile");
				td.id = device._path;
				td.update(
					'<div class="icon png"><img width="55" height="43" alt="Dect Phone" src="' +
					this.getSrcIcon("dectPhone")
					+ '" class="img-zoom"/></div><div class="title">' +
					Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.truncateDeviceName(device.name, 16)))
					+ '</div>'
					);
				
				appended = true;
				td.observe('click', this.changeCatIq.bind(this, device));
			}
		}, this);
		
		if (!appended) {
			var tr = new Element('tr', {
				'class': 'row'
			}).update(
				'<td class="li-device ethernet"></td><td class="li-device wireless"></td><td class="li-device usb"></td><td class="li-device dect dectphone mobile"><div class="icon png"><img width="55" height="43" alt="Dect Phone" src="' +
				this.getSrcIcon("dectPhone")
				+ '" class="img-zoom"/></div><div class="title">' +
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.truncateDeviceName(device.name, 16)))
				+ '</div></td>'
				);
			$$('#notconnecteddevices_table tbody')[0].appendChild(tr);
			$(device._path).observe('click', this.changeCatIq.bind(this, device));
		}
	},

	getIcon: function (device) {
		var ico = Home.DisconnectedDevices.DeviceClasses[device.deviceType.toLowerCase()];
		if (ico) {
			return ico;
		} else if (device.hostName.match(/liveradio|vintage/i)) {
			return "liveradio";
		} else {
			return "desktop";
		}
	},
	
	setScheduleIcon: function (path, physAddress) {
		var setted = false;
		
		this.objects.Schedules.scheduleInfo.each(function (schedule) {
			if (schedule.ID === physAddress ) {
				if (schedule.value.toLowerCase() === "disable") {
					$$("#" + path + " div.internet-restriction-icon")[0].removeClassName("internet-restriction-green");
					$$("#" + path + " div.internet-restriction-icon")[0].addClassName("internet-restriction-red");
					setted = true;
				}
			}
		}, this);
		
		if ( !setted ) {
			$$("#" + path + " div.internet-restriction-icon")[0].removeClassName("internet-restriction-red");
			$$("#" + path + " div.internet-restriction-icon")[0].addClassName("internet-restriction-green");
		}
	},
	
	refreshDevices: function (event) {
		if (event) {
			event.stop();
		}
		
		this.isRefreshButton = true;
		
		if ( this.refreshedPeriod && event.memo != "button" ) {
			this.isRefreshButton = false;
			this.refreshedPeriod.stop();
			this.refreshedPeriod = undefined;
		}
		
		this.client.execute("sysbus.Hosts:getDevices", {}, {
			onSuccess: this.whenLoaded.bind(this),
			onFailure: this.whenNotLoaded.bind(this)    
		});
	},
	
	whenLoaded: function (obj) {
		this.objects.Hosts = obj.result.status;
		this.client.execute("sysbus.Scheduler:getSchedules", {
			"type":"ToD"
		}, {
			onSuccess: this.scheduleLoaded.bind(this),
			onFailure: this.scheduleNotLoaded.bind(this)    
		});
	},

	scheduleLoaded: function (obj) {
		this.objects.Schedules = obj.result.data;
		this.objectsLoaded();
	},
	
	scheduleNotLoaded: function (obj) {
		this.objectsLoaded();
	},
	
	whenNotLoaded: function (obj) {},

	truncateDeviceName: function (deviceName, limit) {
		if (deviceName.length > limit) {
			return deviceName.substring(0, limit) + "...";
		} else {
			return deviceName;
		}
	},
	
	refresh: function (refreshPeriod) {
		if (this.refreshedPeriod) {
			this.refreshedPeriod.stop();
			this.refreshedPeriod = undefined;
		}
		this.refreshedPeriod = new PeriodicalExecuter(this.refreshDevices.bind(this), refreshPeriod);
	},
	
	initRefreshDelays: function () {
		this.refreshDelays[0] = 15;
		this.refreshDelays[1] = 15;
		this.refreshDelays[2] = 15;
		this.refreshDelays[3] =60;
		this.refreshIndex = 0;
	},
	
	delDevice: function (physAdress, event) {
		if ( event ) {
			event.stop();
		}
		
		this.client.execute("sysbus.Hosts:delHost", {
			"physAddress": physAdress
		}, {
			onSuccess: this.whenDeviceDeleted.bind(this),
			onFailure: this.whenDeviceNotDeleted.bind(this)	    
		});
	},
	
	whenDeviceDeleted: function () {
		this.logger.info("device has been deleted");
		this.refreshDevices(false);
	},
	
	whenDeviceNotDeleted: function () {
		this.logger.error("device Cant be deleted");
	},
	
	changeDevice: function (device, event) {
		$('dHostName').update(device.hostName);
		$('dAccessscheduling').observe('click', function (e) {
			e.preventDefault();
			Sah.redirect('/configAccessScheduling.html?' + encodeURIComponent(device.physAddress)+"#disconnected");
			return false;
		});
		$('dDevicescustomize').observe('click', function (e) {
			e.preventDefault();
			Sah.redirect('/homeDevicesCustomize.html?' + encodeURIComponent(device.physAddress)+"#disconnected");
			return false;
		});
		this.displayDeviceMenu(event);
		return false;
	},
	
	changeCatIq: function (device, event) {
		event.stop();
		$('catIqName').update(device.name);
		$('catIqCustomize').observe('click', function (e) {
			e.preventDefault();
			Sah.redirect('/homeDevicesCustomize.html?' + encodeURIComponent("$line=" + device.line + "$;$" +  device.name) + "#disconnected");
			return false;
		});
		this.displayCatIqMenu(event);
		return true;
	},
	
	displayDeviceMenu: function ( evnt ) {
		$$('#disconnectedDeviceMenu')[0].setStyle({
			display: 'block',
			top: evnt.clientY + 'px',
			left: evnt.clientX + 'px'
		});
		evnt.stop();
	},
	
	displayCatIqMenu: function (evnt) {
		$$('#catIqMenu')[0].setStyle({
			display: 'block',
			top: evnt.clientY + 'px',
			left: evnt.clientX + 'px'
		});
		evnt.stop();
	},
	
	hideDeviceMenu: function ( evnt ) {
		$('accessscheduling').stopObserving('click');
		$('devicescustomize').stopObserving('click');
		$('catIqCustomize').stopObserving('click');
		$$('#disconnectedDeviceMenu')[0].setStyle({
			display: 'none',
			top: 'auto',
			left: 'auto'
		});
		$$('#catIqMenu')[0].setStyle({
			display: 'none',
			top: 'auto',
			left: 'auto'
		});
		evnt.stop();
	},
	
	adjustdisconnectedDevicesTable: function () {
		$$('.dectphone').each(function(tdElm) {
			tdElm.remove();    
		});
		
		// Adjust displaying Mode.
		if ( !($('notconnecteddevices_table').hasClassName('adjusted')) ) {
			$('notconnecteddevices_table').addClassName('adjusted');
		}
	},
	
	getSrcIcon: function (deviceCat) {
		return appUrl + "/images/"+ appConfig + Home.DisconnectedDevices.IconPath[deviceCat.toLowerCase()];
	},  
	addFocusEvent: function(someElement,someFunction,someEvent){
		if(!someElement){
			return;
		}
		if (!someElement.addEventListener) {
			if(someEvent === "focus"){
				someElement.onfocusin = someFunction; 
			}else if(someEvent === "blur"){
				someElement.onfocusout = someFunction; 
			}                   
		}
		else {
			someElement.addEventListener(someEvent, someFunction, true);
		}
	},
	getIndex : function(node){
		var childs = node.parentNode.childNodes;                                                      
		for (var i=0;i < childs.length;i++){
                                                               
			if (node === childs[i])  return i;
		}
		return 0;
                                                       
	},
	setupCarrouselTabsEvents : function(carrouselDivId,carrouselObject){
		$$("#"+carrouselDivId+" div.hCarrossel ul li").each(function(li){
			this.addFocusEvent(li, function(e){
				var li = e.target.parentNode;                                       
				var index = this.getIndex(li);
				(index-3>0)&& carrouselObject.scrollTo(index-3);                              
			}.bind(this),"focus");
		},this); 
	}
});

Home.DisconnectedDevices.DeviceClasses = {
	"phone": "mobile",
	"mobile": "phone",
	"notebook": "laptop",
	"smartphone": "smartphone",
	"tablette": "tablette",
	"laptop": "notebook",
	"computer": "desktop",
	"desktop": "computer",
	"printer": "printer",
	"gameconsole": "game",
	"game": "gameConsole",
	"set-top box orange": "stb",
	"stb": "set-top box orange",
	"audio/video": "stb",
	"tv": "tv",
	"liveradio": "liveradio",
	"photo": "photoframe",
	"photoframe": "photo",
	"storage": "mass-storage",
	"mass-storage": "storage",
	"Unknown": "desktop",
	"unik": "unik",
	"dect-phone": "dect-phone",
	"homelibrary": "homelibrary"
};

Home.DisconnectedDevices.IconPath = {
	"phone": "/devices/icons-devices-smartphone.png",
	"mobile": "/devices/icons-devices-smartphone.png",
	"smartphone": "/devices/icons-devices-smartphone.png",
	"tablette": "/devices/icons-devices-tablet.png",
	"dectPhone": "/devices/icons-devices-telephoneparinternet.png",
	"notebook": "/devices/icons-devices-laptop.png",
	"laptop": "/devices/icons-devices-laptop.png",
	"computer": "/devices/icons-devices-desktop.png",
	"desktop": "/devices/icons-devices-desktop.png",
	"printer": "/devices/icons-devices-printer.png",
	"gameconsole": "/devices/icons-devices-game.png",
	"game": "/devices/icons-devices-game.png",
	"set-top box orange": "/devices/icons-devices-stb.png",
	"stb": "/devices/icons-devices-stb.png",
	"audio/video": "/devices/icons-devices-stb.png",
	"tv": "/devices/icons-devices-tv.png",
	"liveradio": "/devices/icons-devices-liveradio.png",
	"photo": "/devices/icons-devices-photoframe.png",
	"photoframe": "/devices/icons-devices-photoframe.png",
	"storage": "/devices/icons-devices-usb-hdd.png",
	"mass-storage": "/devices/icons-devices-usb-hdd.png",
	"unknown": "/devices/icons-devices-desktop.png",
	"desktop-gray": "/devices/icons-devices-desktop-gray.png",
	"laptop-gray": "/devices/icons-devices-laptop-gray.png",
	"mobile-gray": "/devices/icons-devices-mobile-gray.png",
	"printer-gray": "/devices/icons-devices-printer-gray.png",
	"stb-gray": "/devices/icons-devices-stb-gray.png",
	"tv-gray": "/devices/icons-devices-tv-gray.png",
	"game-gray": "/devices/icons-devices-game-gray.png",
	"liveradio-gray": "/devices/icons-devices-liveradio-gray.png",
	"photoframe-gray": "/devices/icons-devices-photoframe-gray.png",
	"mass-storage-gray": "/devices/icons-devices-usb-hdd-gray.png",
	"unik": "/devices/icons-devices-unik.png",
	"dect-phone": "/devices/icons-devices-telephoneparinternet.png",
	"homelibrary": "/devices/icons-devices-homelibrairy.png"
};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/home/restore.js */

/**
 * Home Restore
 */

Home.Restore = Class.create(Sah.Form,
/** @lends Home.Restore# */
{
	initialize: function ($super, form){
		$super(form);
		this.progressBar = new Sah.Widget.ProgressBar("test-progress",{});		
		
		this.isChrome = (navigator.userAgent.toLowerCase().indexOf('chrome/') > -1) ?   true : false;
		this.isSafari = (navigator.userAgent.toLowerCase().indexOf('safari/') > -1) ?   true : false;

		/*if (this.isChrome || this.isSafari){
			$("file_name").setStyle("direction:rtl");
		}*/
		//~ if (Prototype.Browser.Chrome)
			//~ $("file_name").setStyle({
				//~ "border": 0
			//~ });
		
		// Just for IE8 ~ PrototypeJS extension
		if (Prototype.Browser.IE) {
		    if (/MSIE (\d+\.\d+);/.test(navigator.userAgent)) {
			Prototype.BrowserFeatures['Version'] = new Number(RegExp.$1);
		    }
		}

		$('file_name').observe("change", function(e){
			var fileName=$('file_name').value;
			$('file_browse').value =fileName.replace("C:\\fakepath\\","");
		});

	/*	$('bt_browse').observe("click", function(e){
			$('file_name').click();
		});
		
		$('file_name').observe("change", function(e){
			$('file_browse').value = $('file_name').value;
		});
		
		if (Prototype.Browser.IE || Prototype.Browser.Opera || (Prototype.Browser.Gecko && this.version.split(".")[0] === "3")) {	
			$("file_browse").remove();
			$("bt_browse").remove();
			$("file_name").setStyle("visibility:visible;height:25px;");
			$("file_name").stopObserving('change', onchangeEvent);
			$("file_name").setAttribute('change', "");
		}*/
		
		document.observe('sah:models:System:state',this.uploadCompleted.bind(this));
		$("bt_restore").observe("click", this.onRestore.bind(this));
		$("bt_backtosetup").observe("click", this.onBackToSetup.bind(this));
        
		this.form.enable();
       
	},

	objectsLoaded: function (){
       
	},

	onRestore: function (){
		$("support.saverestore.nofile.error").hide();
		if ( $("file_name").getValue() != "" ) {    
			$("context").setValue(Sah.Bus.contextID);
			this.form.submit();
		} else {
			$("restore-tryagain-label").style.display = "block";
			this.displayErrorMessage(t('restoration.nofile.error.description','X Insert the file to restore.'));
		}
		return true;
	},

	markAsLoading: function ($super){
		// $super();
		$("restore-step2").style.display = "block";
		$("restore-upload-form").style.display ="none";
		$("restoration.specificpassword").style.display = "block";
        
	},

	markAsLoaded: function ($super){
		//$super();
		if (this.uploadChecker) {
			this.uploadChecker.stop();
			this.uploadChecker = null;
		}

		if (this.timeout) {
			window.clearTimeout(this.timeout);
			this.timeout = null;
		}
	},
    
	uploadCompleted :function(event){
        
		if(event.memo=="restore-success"){
			// this.timeout = window.setTimeout(this.checkUpload.bind(this), 1000);
			//  this.uploadChecker = new PeriodicalExecuter(this.checkUpload.bind(this), 5);
			this.markAsLoading();
			this.fileUploaded();
			
		}else{
			this.fileUploadError();
		}
	},

	checkUpload: function (){
		new Ajax.Request("/restore?status=true", {
			method: "get",
			onSuccess: function (response) {
				var status = response.responseJSON;
				if (status.active && status.action == "restore") {
					if( status.totalSize > 128 * 1024){
						$("restore-upload-form").style.display ="block";
						$("restore-tryagain-label").style.display ="block";
						this.logger.warn("tried to upload a file which is too large");
						document.fire('sah:models:System:state','restore-failure');
						return;
					}else{
						this.markAsLoading();
						this.fileUploaded();
					}
				}
			}.bind(this)/*,
            onFailure : function(){
                document.fire('sah:models:System:state','restore-failure');
                return;
            }.bind(this)*/
		});
	},
	onReboot: function(){       
		// Set the reboot delay to 5 seconds to allow appWeb to finish this page before device is rebooted    
		this.client.execute("sysbus.NMC:reboot",
		{},
		{
			"onSuccess":this.fileUploaded.bind(this),
			"onFailure":function(){
				this.logger.error("error rebooting try manually")
			}.bind(this)
		} 
		);  
       
		return false;
	},
	/**
     ** display tooltip to control admin password
     **/
	displayErrorMessage : function(msg){
		$("support.saverestore.nofile.error").show();
		$("support.saverestore.nofile.error.description").update(msg);
	},

	fileUploaded: function (event){
		this.markAsLoaded();
		this.progressBar.animate(1837);
		//var destinationUrl = "/";
		setTimeout(function(){
			Sah.detectReboot("/")
		},138000);   
		$("restore-tryagain-label").hide();
		$("support.saverestore.nofile.error").hide();
		$("support.saverestore.upload.error").hide();
	},

	fileUploadError: function (event){
		this.markAsLoaded();
		$("restore-tryagain-label").style.display = "block";
		$("support.saverestore.upload.error").show();
		$("support.saverestore.upload.error.description").update(t('restoration.upload.error.description','X Invalid file.'));

		/* ensure that the frame is not loading anymore */
		$("upload_target").src = Sah.link("/legal.html");
	},
	onBackToSetup:function(){
		if (this.uploadChecker) {
			this.uploadChecker.stop();
			this.uploadChecker = null;
		}

		if (this.timeout) {
			window.clearTimeout(this.timeout);
			this.timeout = null;
		}
        
		//$('file_browse').value = "";
		$('file_name').value = "";
		$('cnt_restore').hide();
		$('cnt_first_install').show();
		
		$("restore-tryagain-label").hide();
		$("support.saverestore.nofile.error").hide();
		$("support.saverestore.upload.error").hide();
		
		return true;
	}
}
);


/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/home/authentication.js */

Home.Authentication = Class.create(Sah.Form,/** @lends Home.Login# */{
    initialize: function ($super, form) {
        $super(form);
        this.auth = new Sah.Auth(this.client);
        if(!this.auth.authenticate()){
            $("logout-link-div").hide();
            $("login-inputs-div").show();
        }else{
            $("logout-link-div").show();
            $("login-inputs-div").hide();
            
        }
        $("bt_authenticate").observe("click", this.doLogin.bind(this));

        this.load();
    },

    doLogin: function (event){
        $('Username').setValue($F('PopupUsername'));
        $('Password').setValue($F('PopupPassword'));
       
// 	Event.fire($('Login'), 'sah:login');
        
	Event.stop(event);
        
        $$(".auth-failure").each(function (e) {
            e.hide();
        });
        this.logger.info("loging in");
        Event.stop(event);
	
        if ($F("Username").match(/^\s*$/) || $F("Password").match(/^\s*$/)) {
            this.authFailure();
            return false;
       }

        this.logger.info("request");
	
        this.auth.login($F("Username"), $F("Password"), { 
            onSuccess: this.authSuccessfull.bind(this),
            onFailure: this.authFailure.bind(this)
        });

        return false;
    },

    clearLogin: function (event)
    {
        $$(".auth-failure").each(function (e) {
            e.hide();
        });
        Event.stop(event);
        $("Username").setValue("");
        $("Password").setValue("");
        return false;
    },

    authSuccessfull: function (object){
        this.redirect("/");
    },

    authFailure: function (){
        this.logger.info("auth failure");
        $$(".auth-failure").each(function (e) {
            e.show();
        });
    }
}
);


/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/phoneBook/editContact.js */

/* TODO: documentation */
PhoneBook.EditContact = Class.create(Sah.Form, {
	initialize: function ($super, form) {
		$super(form);
		
		this.objects = new Object;
		this.form.disable();
		this.needs("Contact", {
			path: "sysbus.Phonebook:getContactByUniqueID",
			methodParams : {
				"uniqueID": decodeURIComponent(window.location.hash.split("#")[1])
			},
			method: "execute"
		});
		
		this.load();
	},
	
	objectsLoaded: function () {
		this.fillLists();
		this.form.enable();
	},
	
	fillLists: function () {
		$("lastname").value = this.objects.Contact.name.split(";")[0].split("N:")[1];
		$("firstname").value = this.objects.Contact.name.split(";")[1];
		$$("#melody option")[parseInt(this.objects.Contact.ringtone, 10) - 1].selected = true;
		
		this.objects.Contact.telephoneNumbers.each(function (phoneNumber) {
			switch (phoneNumber.type) {
				case 'CELL':
					$("mobile-number").value = phoneNumber.name;
					break;
				case 'HOME':
					$("home-number").value = phoneNumber.name;
					break;
				case 'WORK':
					$("office-number").value = phoneNumber.name;
					break;
			}
		});
		
		$$("#bt_delete").each(function (btn) {
			btn.observe("click", this.onDelete.bind(this));
		}, this);
		
		$$("#bt_cancel").each(function (btn) {
			btn.observe("click", this.onCancel.bind(this));
		}, this);

		$$("#bt_save").each(function (btn) {
			btn.observe("click", this.onSave.bind(this));
		}, this);
		
		$$("#bt_listen").each(function (btn) {
			btn.observe("click", this.ringTune.bind(this));
		}, this);
	},
	
	getFormContent: function () {
		var formContent = {
			"name": $("firstname").value,
// 			"formattedName": $("firstname").value,
			"formattedName": $("lastname").value,
			"ringtone": "1",
			"telephoneNumbers": []
		};
		var FirstName = $("firstname").value;
		var LastName = $("lastname").value;
		
		//var phonePattern = /^[\+|\*|\#]{0,1}[0-9]*$/;
		// var phonePattern = /^([\+|\*|\#]*[0-9]*)*$/;
		var phonePattern = /^([\+|\*|\#])*(\*|\#|[0-9]*)*$/;
		var emptyPattern = /^\s*$/;
		
		if ( emptyPattern.test($("firstname").value)
			|| emptyPattern.test($("lastname").value) ) {
		  
			return false;
		}
		if(formContent.name.length>16||formContent.formattedName.length>16){
			return false;
		}
			    
		if (  !emptyPattern.test($("home-number").value) ) {
			if(!phonePattern.test($("home-number").value) || $("home-number").value.length>20)return false;
			formContent.telephoneNumbers.push({
				"name": $("home-number").value,
				"type": "HOME",
				"preferred": false
			});
		}
		
		if ( !emptyPattern.test($("mobile-number").value) ) {
			if(!phonePattern.test($("mobile-number").value) || $("mobile-number").value.length>20)return false;
			formContent.telephoneNumbers.push({
				"name": $("mobile-number").value,
				"type": "CELL",
				"preferred": false
			});
		}
		
		if (  !emptyPattern.test($("office-number").value) ) {
			if(!phonePattern.test($("office-number").value) || $("office-number").value.length>20)return false;
			formContent.telephoneNumbers.push({
				"name": $("office-number").value,
				"type": "WORK",
				"preferred": false
			});
		}
		
		if (formContent.telephoneNumbers.length === 0) {
			return false;
		}
		
		formContent.ringtone = $F("melody");
		if(parseInt(formContent.ringtone, 10)>7||parseInt(formContent.ringtone, 10)<1){
			return false;
		}
// 		formContent.name = "N:" + formContent.name + ";" + formContent.formattedName + ";";
// 		formContent.formattedName = formContent.formattedName + " " + formContent.name.split(";")[0].split("N:")[1];
		formContent.name = "N:" + LastName + ";" + formContent.name + ";";
		formContent.formattedName = formContent.formattedName + " " + formContent.name.split(";")[1];
				     
		return {
			"uniqueID": decodeURIComponent(window.location.hash.split("#")[1]), 
			"contact": formContent
		};
	},
	
	onCancel: function () {
		Sah.redirect("/phonebook.html");
	},
	
	onSave: function () {
		var formContent = this.getFormContent();
		if (!formContent) {
			// Display Error Message
			$("input.error").show();
		} else {
			// Hide Error Message
			$("input.error").hide();
			
			// Save
			this.client.execute("sysbus.Phonebook:modifyContactByUniqueID", formContent,{
				onSuccess: this.onContactSaved.bind(this),
				onFailure: this.onContactFailure.bind(this)
			}); 
		}
	},
	
	ringTune: function () {
		this.client.execute("sysbus.VoiceService.VoiceApplication:ring", {
			"PhoneToUse": "",
			"Duration": 5000,
			"Ringtone": $("melody").value
		}, {
			onSuccess: function () {},
			onFailure: function () {}
		}); 
	},
	
	onDelete: function () {
		// Remove contact
		this.client.execute("sysbus.Phonebook:removeContactByUniqueID", {
			"uniqueID": this.objects.Contact.uniqueID
		}, {
			onSuccess: this.onContactDeleted.bind(this)
		}); 
	},
	
	onContactDeleted: function (obj) {
		if (obj.result.status == true) {
			Sah.redirect("/phonebook.html");
		}
	},

	onContactSaved: function (obj) {
		if (obj.result.status == true) {
			Sah.redirect("/phonebook.html");
		} else {
			// Display Error Message
			$("input.error").show();
		}
	},
	
	onContactFailure: function (obj) {
		// Display Error Message
		$("input.error").show();
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/phoneBook/phoneSettings.js */

/* TODO: documentation */
PhoneBook.PhoneSettings = Class.create(Sah.Form, {
	initialize: function ($super, form) {
		$super(form);
		
		$$("#bt_modify").each(function (btn) {
			btn.observe("click", this.modify.bind(this));
		}, this);

		$$("#bt_reset").each(function (btn) {
			btn.observe("click", this.reset.bind(this));
		}, this);
		
		this.objects = new Object;
		
		this.needs("PinCode", {
			path: "sysbus.DECT:getPIN",
			method: "execute"
		});
		
		this.needs("Version", {
			path: "sysbus.DECT:getVersion",
			method: "execute"
		});
		
		this.needs("StandardVersion", {
			path: "sysbus.DECT:getStandardVersion",
			method: "execute"
		});
		
		this.needs("RFPI", {
			path: "sysbus.DECT:getRFPI",
			method: "execute"
		});
		
		this.load();
	},
	
	objectsLoaded: function () {
		this.fillLists();
	},
	
	fillLists: function () {
		$("pincode").value = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.objects.PinCode));
		$("cat-iq-version").innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.objects.StandardVersion));
		$("firmwareVersion").innerHTML = "v "+Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.objects.Version));
		$("rfpi").innerHTML = Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', this.objects.RFPI));
	},
	
	modify: function () {
		pattern = /^[0-9]{4}$/;
		
		if (pattern.test($("pincode").value)) {
			$("pincode.error").hide();
			this.client.execute("sysbus.DECT:setPIN", {'pin' : $("pincode").value}, {
				onSuccess: function () {$("pincode.warning").show();}
			});
		} else {
			$("pincode.error").show();
		}
	},
	
	reset: function () {
		$("pincode.error").hide();
		$("pincode").value = "0000";
		this.client.execute("sysbus.DECT:reset", {}, {});
	},
	
	success: function (obj) {
		if (obj.result.status == true || obj.result.status == null) {
			$("pincode.warning").show();
		} else {
			$("pincode.warning").hide();
		}
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/phoneBook/phoneBook.js */

/* TODO: documentation */
PhoneBook.PhoneBook = Class.create(Sah.Form, {
	_sort:  "desc",
	_numberContacts : -1,
	
	initialize: function ($super, form) {
		$super(form);
		
		this.objects = new Object;
		this.form.hide();
		
		$("sorttable_icon").observe("click", this.sortTable.bind(this));
		$("bt_search").observe("click", function () {
			$("input.error").hide();
			var pattern = /^\s*$/,
			phonePattern = /^[\+|\*|\#]{0,1}[0-9]*$/,
			number = $("number").value,
			firstName = $("firstname").value,
			lastname = $("lastname").value;
			
			if (firstName.length>16||lastname.length>16||number.length>20||(!phonePattern.test(number) && !pattern.test(number))) {
				$("input.error").show();
			} else {
				$("input.error").hide();
				this.fillLists();
			}
		}.bind(this));
		
		$("addcontact").observe("click", this.addNewContact.bind(this));
		
		this.needs("Contacts", {
			path: "sysbus.Phonebook:getAllContacts",
			method: "execute"
		});
		
		this.load();
	},
	
	objectsLoaded: function () {
                this._numberContacts = 0;
		this.fillLists();
		this.form.show();
	},
	
	fillLists: function () {
		var filtredList = this.filterList();
		var list = filtredList.sort(this.sortByFormattedName.bind(this));
		
		$$(".ligne").each(function (elem) {
			elem.remove();
		}, this);
		
		this._numberContacts = list.length;
		
		list.each(function(contact) {
		        var types = {
				"cell":"mobile",
				"work":"office",
				"home":"home"
			}
			var elem = "";
			if (contact.telephoneNumbers.length == 0) {
				elem = '<tr class="ligne"><td class="first">' + 
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', contact.name.split(";")[1]))
				+ '</td><td>' +
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', contact.name.split(";")[0].split("N:")[1]))
				+ '</td><td> </td><td> </td><td>'+
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', contact.ringtone))
				+ '</td><td class="last"><a href="ipphone-phonebook-edit.html#' +
				encodeURIComponent(contact.uniqueID)
				+ '" tabindex="0"><span class="translation Translations.general.btn.modify"></span></a></td></tr>';
			} else if (contact.telephoneNumbers.length == 1) {
				elem = '<tr class="ligne"><td class="first">' + 
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', contact.name.split(";")[1]))
				+ '</td><td>' +
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', contact.name.split(";")[0].split("N:")[1]))
				+ '</td><td>' +
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', contact.telephoneNumbers[0].name))
				+ '</td ><td class="translation Translations.general.ipphone.numbertype.'+types[contact.telephoneNumbers[0].type.toLowerCase()]+'">' +
				 '</td><td>'+
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', contact.ringtone))
				+ '</td><td class="last"><a href="ipphone-phonebook-edit.html#' +	
				encodeURIComponent(contact.uniqueID)
				+ '" tabindex="0"><span class="translation Translations.general.btn.modify"></span></a></td></tr>';
			} else if (contact.telephoneNumbers.length == 2) {
				elem = '<tr class="ligne"><td style="width:150px;" rowspan="2" class="first">' + 
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', contact.name.split(";")[1]))
				+ '</td><td style="width:150px;" rowspan="2">' +
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', contact.name.split(";")[0].split("N:")[1]))
				+ '</td><td>' +
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', contact.telephoneNumbers[0].name))
				+ '</td><td class="translation Translations.general.ipphone.numbertype.'+types[contact.telephoneNumbers[0].type.toLowerCase()]+'">' +
				
				 '</td><td rowspan="2">'+
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', contact.ringtone))
				+ '</td><td rowspan="2" class="last"><a href="ipphone-phonebook-edit.html#' +
				encodeURIComponent(contact.uniqueID)
				+ '" tabindex="0"><span class="translation Translations.general.btn.modify"></span></a></td></tr><tr class="ligne"><td>' +
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', contact.telephoneNumbers[1].name))
				+ '</td><td class="translation Translations.general.ipphone.numbertype.'+types[contact.telephoneNumbers[1].type.toLowerCase()]+'">' +
				
				 '</td></tr>';
			} else {
				elem = '<tr class="ligne"><td style="width:150px;" rowspan="3" class="first">' + 
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', contact.name.split(";")[1]))
				+ '</td><td style="width:150px;" rowspan="3">' +
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', contact.name.split(";")[0].split("N:")[1]))
				+ '</td><td>' +
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', contact.telephoneNumbers[0].name))
				+ '</td><td class="translation Translations.general.ipphone.numbertype.'+types[contact.telephoneNumbers[0].type.toLowerCase()]+'">' +
				 '</td><td rowspan="3">'+
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', contact.ringtone))
				+ '</td><td rowspan="3" class="last"><a href="ipphone-phonebook-edit.html#' +
				encodeURIComponent(contact.uniqueID)
				+ '" tabindex="0"><span class="translation Translations.general.btn.modify"></span></a></td></tr><tr class="ligne"><td>' +
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', contact.telephoneNumbers[1].name))
				+ '</td><td class="translation Translations.general.ipphone.numbertype.'+types[contact.telephoneNumbers[1].type.toLowerCase()]+'">' +
				'</td></tr><tr class="ligne"><td>' +
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', contact.telephoneNumbers[2].name))
				+ '</td><td class="translation Translations.general.ipphone.numbertype.'+types[contact.telephoneNumbers[2].type.toLowerCase()]+'">' +
				 '</td></tr>';
			}
			
			if (elem != "") {
				$('phonebook-tbody').insert(elem);
			}
			
		});
		
		
		if(!list){
			$("input.error").show();
		}
		Sah.translator.refresh();
	},
	
	sortTable: function (event) {
		event.stop();
		this.sortToggle();		
		this.fillLists();
	},
	
	sortToggle: function () {
		if (this._sort === "desc") {
			this._sort = "asc";
			$("sorttable_icon").src= appUrl + "/images/"+ appConfig + "/icons/sort-asc-black.png";
		} else {
			this._sort = "desc";
			$("sorttable_icon").src= appUrl + "/images/"+ appConfig + "/icons/sort-desc-black.png";
		}
	},
	
	sortByFormattedName: function (a, b) {
		
		aName = a.formattedName.split(' ')[0];
		bName = b.formattedName.split(' ')[0];
		if (this._sort === "asc") {
			if (aName < bName) return -1;  
			if (aName > bName) return 1;
		} else {
			if (aName < bName) return 1;  
			if (aName > bName) return -1;
		}
		return 0; 
	},
	
	filterList: function () {
		var filtredList = [],
		firstName = $("firstname").value,
		lastname = $("lastname").value,
		number = $("number").value,
		pattern = /^\s*$/;
		
		if (!pattern.test(firstName) || !pattern.test(lastname) || !pattern.test(number)) {
			this.objects.Contacts.each(function (contact) {
				var exist = false;
				
				// -- 'Or' patterns --
				if ( (contact.name.split(";")[0].split("N:")[1].indexOf(lastname) >= 0 && !pattern.test(lastname)) 
					|| (contact.name.split(";")[1].indexOf(firstName) >= 0 &&  !pattern.test(firstName)) ) {
					exist = true;
				} else if (!pattern.test(number)) {
					contact.telephoneNumbers.each(function(phoneNumber) {
						if (phoneNumber.name.indexOf(number) >= 0) {
							exist = true;
						}
					});
				}
				
				// Only on field is filled
				/* //-- '&' patterns--//
				if ( (contact.name.split(";")[0].split("N:")[1].indexOf(lastname) >= 0 && !pattern.test(lastname) && pattern.test(firstName) && pattern.test(number)) 
					|| (contact.name.split(";")[1].indexOf(firstName) >= 0 &&  !pattern.test(firstName) && pattern.test(lastname) && pattern.test(number))
					|| (contact.name.split(";")[1].indexOf(firstName) >= 0 &&  !pattern.test(firstName) && !pattern.test(lastname)  && contact.name.split(";")[0].split("N:")[1].indexOf(lastname) >= 0 && pattern.test(number)) ) {
					exist = true;
				} else  if ( (!pattern.test(number) && pattern.test(lastname) && pattern.test(firstName)) 
					|| (contact.name.split(";")[1].indexOf(firstName) >= 0 &&  !pattern.test(firstName) && !pattern.test(lastname)  && contact.name.split(";")[0].split("N:")[1].indexOf(lastname) >= 0 && !pattern.test(number)) 
					|| (contact.name.split(";")[1].indexOf(firstName) >= 0 &&  !pattern.test(firstName) && pattern.test(lastname)  && !pattern.test(number)) 
					|| (pattern.test(firstName) && !pattern.test(lastname)  && contact.name.split(";")[0].split("N:")[1].indexOf(lastname) >= 0 && !pattern.test(number)) ) {
					
					contact.telephoneNumbers.each(function(phoneNumber) {
						if (phoneNumber.name.indexOf(number) >= 0) {
							exist = true;
						}
					});
				}
				*/
				
				if (exist === true) {
					filtredList.push(contact);
				}
			});
		} else {
			return this.objects.Contacts;
		}
		
		return filtredList;
	},
	
	addNewContact: function (event) {
                
		if (this._numberContacts <= 255 & this._numberContacts != -1){
			 Sah.redirect('/ipphone-phonebook-newcontact.html');
		} else if (this._numberContacts != -1) {
			$("input.error.limitation").show();
		}
		
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/phoneBook/pairPhone.js */

/* TODO: documentation */
PhoneBook.PairPhone = Class.create(Sah.Form, {
	_firstList: [],
	_added: false,
	
	initialize: function ($super, form) {
		$super(form);
		
		$$("#bt_pairphones").each(function (btn) {
			btn.observe("click", this.pairPhones.bind(this));
		}, this);

		
		this.objects = new Object;
		this.objects.VoiceService = [];
		// this.needs("VoiceService", {
			// path: "sysbus.VoiceService.VoiceApplication:listHandsets",
			// method: "execute"
		// });
		this.needs("DectInfos", {
			path: "sysbus.Devices:get",
			method: "execute",
			methodParams: {
				"expression": {
					"dect":"voice && dect && handset && physical"
				}
			}
		});
		
		this.load();
	},
	
	objectsLoaded: function () {
		this.fillLists();
	},
	
	fillLists: function () {
		this.objects.VoiceService = [];
		var VoiceServices= [];
		var index = 0;
		this.objects.DectInfos.dect.each(function (item){
			VoiceServices[index]  = {};
			VoiceServices[index].line = item.Key;
			VoiceServices[index].name = item.Name;
			VoiceServices[index].directoryNumber = item.DirectoryNumber;
			VoiceServices[index].enable = item.Active;
			VoiceServices[index].endpointType = item.EndpointType;
			VoiceServices[index].outgoingTrunkLine = item.OutgoingTrunkLine;
			index++;
		});
		

		this._firstList = VoiceServices;
		VoiceServices.each(function (lineCatIq) {
			if (lineCatIq.enable == true && (lineCatIq.endpointType.toLowerCase().indexOf("cat-iq") >= 0 || lineCatIq.endpointType.toLowerCase().indexOf("undefined") >= 0 || lineCatIq.endpointType.toLowerCase().indexOf("dect gap") >= 0)) {
				var elem = '<tr class="catphonelem" id="' +
				Sah.Tools.escapeString('js', lineCatIq.line)
				+'"><td class="first">' + 
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', lineCatIq.directoryNumber))
				+ '</td><td>' +
				Sah.Tools.escapeString('js', Sah.Tools.escapeString('html', lineCatIq.name))
				+ '</td><td><a onclick="return false;" class="lineModify"><span class="translation Translations.ipphone.pairphones.label.edit"></span></a></td><td class="last"> <input type="submit" class="line_unpair input-btn input-btn-orange-small translation Translations.ipphone.pairphones.label.unpair" value="" id="' + 
				Sah.Tools.escapeString('js', lineCatIq.line)
				+ '"></td></tr>';
				
				this.reset();
				
				$("pairing.stepend").hide();
				
				$("pairedphones_tbody").insert(elem);
			}
			Sah.translator.refresh();
			
			$$("#"+ lineCatIq.line + " .lineModify").each(function(modifLink) {
				Event.observe(modifLink, "click", this.modify.bind(this, lineCatIq));
			}, this);
			
			$$("#"+ lineCatIq.line + " .line_unpair").each(function(unpairLink) {
				Event.observe(unpairLink, "click", this.unpair.bind(this, lineCatIq));
			}, this);
		}, this);
	},
	
	modify: function (device, evt) {		
		evt.stop();	
		return Sah.redirect('/homeDevicesCustomize.html?' + encodeURIComponent(device.line) + "#pairphones");
	},
	
	unpair: function (unpairLink, evt) {
		evt.stop();
		this.client.execute("sysbus.VoiceService.VoiceApplication:deleteHandset", {
			"line": unpairLink.line
		},{
			onSuccess: this.successUnpaired.bind(this)
		}); 
		$("phonepairing.max").hide();
	},
	
	successUnpaired: function (obj) {
		// this.refresh();
		// this.client.execute("sysbus.VoiceService.VoiceApplication:listHandsets", {}, {
			// onSuccess: this.updateListAfterUnpair.bind(this),
			// onFailure: function(){}
		// });
		var that = this;
		setTimeout(function(){		
			
			that.client.execute("sysbus.Devices:get", {
			"expression": {
				"dect":"voice && dect && handset && physical"
			}
			}, {
				onSuccess: that.updateListAfterUnpair.bind(that),
				onFailure: function(){}
			});
			
			
			
			
		},3000);
		this.markAsLoaded();
		// this.needs("DectInfos", {
			// path: "sysbus.Devices:get",
			// method: "execute",
			// methodParams: {
				// "expression": {
					// "dect":"voice && dect && handset && physical"
				// }
			// }
		// });
	},
	
	updateListAfterUnpair: function (obj) {
		$$(".catphonelem").each(function (elem) {
			elem.remove();
		}, this);
			  
			if (obj.result.status.dect) {
				this.objects.DectInfos.dect=obj.result.status.dect;
// 				var index = 0;
// 				obj.result.status.dect.each(function (item){
// 					this.objects.VoiceService[index]  = {};
// 					this.objects.VoiceService[index].line = item.Key;
// 					this.objects.VoiceService[index].name = item.Name;
// 					this.objects.VoiceService[index].directoryNumber = item.DirectoryNumber;
// 					this.objects.VoiceService[index].enable = item.Active;
// 					this.objects.VoiceService[index].endpointType = item.EndpointType;
// 					this.objects.VoiceService[index].outgoingTrunkLine = item.OutgoingTrunkLine;
// 					index++;
// 				});
				this.fillLists();
				
			} else {
			  // this.failureRequest();
			}
		
	},
	
	pairPhones: function() {		
		if ($$(".catphonelem").size()<4) {
			this.reset();
				
				this.client.execute("sysbus.Devices:get", {
				"expression": {
					"dect":"voice && dect && handset && physical"
				}
				}, {
					onSuccess: this.initFirstList.bind(this),
					onFailure: function(){}
				});
			
			// this.client.execute("sysbus.VoiceService.VoiceApplication:listHandsets", {}, {
				// onSuccess: this.initFirstList.bind(this),
				// onFailure: function(){}
			// });
		} else {
			$("phonepairing.max").show();
		}
	},
	
	initFirstList: function (obj) {
		$$(".catphonelem").each(function (elem) {
			elem.remove();
		}, this);
		if (obj.result.status.dect) {
			this.objects.DectInfos.dect=obj.result.status.dect;
// 			var index = 0, that = this;
// 			obj.result.status.dect.each(function (item){
// 				that.objects.VoiceService[index]  = {};
// 				that.objects.VoiceService[index].line = item.Key;
// 				that.objects.VoiceService[index].name = item.Name;
// 				that.objects.VoiceService[index].directoryNumber = item.DirectoryNumber;
// 				that.objects.VoiceService[index].enable = item.Active;
// 				that.objects.VoiceService[index].endpointType = item.EndpointType;
// 				that.objects.VoiceService[index].outgoingTrunkLine = item.OutgoingTrunkLine;
// 				index++;
// 			});
			this.fillLists();
		} else {
		  // this.failureRequest();
		}
		 
		this.client.execute("sysbus.DECT:startPairing", {},{
			onSuccess: this.successRequest.bind(this),
			onFailure: this.failureRequest.bind(this)
		}); 
	},
	
	reset: function () {
		if (this.progressBar) {
			this.progressBar.reset();
			$$(".meter-wrap").each(function (elem) {
				elem.remove();
			});
			if (this.refreshedPeriod) {
				this.refreshedPeriod.stop();
				this.refreshedPeriod = undefined;
			}
		}
	
		if (this.timeout) {
			window.clearTimeout(this.timeout);
		}
		  
		this._added = false;
	},
	
	successRequest: function (obj) {
		if (obj.result.status == null || obj.result.status) {
			// Hide Error Message
			
			$("phonepairing.error").hide();
			$("pairing.stepend").show();
			this.updateProgress(obj);
		} else {
			$("pairing.stepend").hide();
			// Display Error Message
			$("phonepairing.error").show();
		}
	},
	
	updateProgress: function (obj) {
		if (obj.result.status == null || obj.result.status) {
			this.progressBar = new Sah.Widget.ProgressBar("pairing-progress",{});
			this.progressBar.animate(1225);
			
			// refresh dect phone list
			this.refreshedPeriod = new PeriodicalExecuter(this.refresh.bind(this), 2);
				
			// Hide error/progress pannel after 100s
			this.timeout = window.setTimeout(function() {
				$("pairing.stepend").hide();
				$("phonepairing.error").hide();
					
				if (this.refreshedPeriod) {
					this.refreshedPeriod.stop();
					this.refreshedPeriod = undefined;
				}
					
				if (!this._added) {
					$("pairing.stepend").hide();
					// Display Error Message
					$("phonepairing.error").show();
				}
			}.bind(this), 120000);
		} else {
			this.failureRequest();
		}
	},
	
	refresh: function () {
		// this.client.execute("sysbus.VoiceService.VoiceApplication:listHandsets", {}, {
			// onSuccess: this.updateList.bind(this),
			// onFailure: this.failureRequest.bind(this)
		// });
		this.client.execute("sysbus.Devices:get", {
		"expression": {
			"dect":"voice && dect && handset && physical"
		}
		}, {
			onSuccess: this.updateList.bind(this),
			onFailure: function(){}
		});
		
	},
	
// 	updateList: function (obj) {
// 		var index = 0, that = this;
// 		console.warn(obj.result.status.dect);
// 		obj.result.status.dect.each(function (item){
// 		  
// 			that.objects.VoiceService[index]  = {};
// 			that.objects.VoiceService[index].line = item.Key;
// 			that.objects.VoiceService[index].name = item.Name;
// 			that.objects.VoiceService[index].directoryNumber = item.DirectoryNumber;
// 			that.objects.VoiceService[index].enable = item.Active;
// 			that.objects.VoiceService[index].endpointType = item.EndpointType;
// 			that.objects.VoiceService[index].outgoingTrunkLine = item.OutgoingTrunkLine;
// 			index++;
// 		});
// 		this.checkAdded(this.objects.VoiceService);
// 		if (this._added){
// 			  $$(".catphonelem").each(function (elem) {
// 				  elem.remove();
// 			  }, this);
// 			  
// 			  if (this.objects.VoiceService) {
// 				  this.objects.VoiceService = this.objects.VoiceService;
// 				  this.fillLists();
// 			  } else {
// 			  // this.failureRequest();
// 			  }
// 		}
// 	},
	
	updateList: function (obj) {

		var index = 0, that = this;
		obj.result.status.dect.each(function (item){
		  
			that.objects.VoiceService[index]  = {};
			that.objects.VoiceService[index].line = item.Key;
			that.objects.VoiceService[index].name = item.Name;
			that.objects.VoiceService[index].directoryNumber = item.DirectoryNumber;
			that.objects.VoiceService[index].enable = item.Active;
			that.objects.VoiceService[index].endpointType = item.EndpointType;
			that.objects.VoiceService[index].outgoingTrunkLine = item.OutgoingTrunkLine;
			index++;
		});
		this.checkAdded(that.objects.VoiceService);
		if (this._added){
			  $$(".catphonelem").each(function (elem) {
				  elem.remove();
			  }, this);
			  
			  if (obj.result.status.dect) {
				  this.objects.DectInfos.dect = obj.result.status.dect;
				  this.fillLists();
			  } else {
			  // 			this.failureRequest();
			  }
		}
	},
	
	checkAdded: function (newList) {
		if (!this._added) {
			for(var i=0; i < newList.length; i++) {
				var exist = false;
				for(var j=0; j < this._firstList.length; j++) {
					if ( newList[i].line === this._firstList[j].line  ) {

						if(newList[i].enable == true && this._firstList[j]==false ){
							exist = false;
						}else{
							exist = true;
						}

					}
				}
				if (!exist) {
					this._added = true;
					//this.reset();
					this._firstList=newList;
					break;
				}
			}
		}
		
	},
	
	failureRequest: function () {
		this.client.execute("sysbus.DECT:stopPairing", {},{
			onSuccess: this.pairPhones.bind(this),
			onFailure: this.failurePairRequest.bind(this)
		});
	},
	
	failurePairRequest: function () {
		$("pairing.stepend").hide();
		// Display error pairing message
		$("phonepairing.error").show();
	}
});

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/controllers/phoneBook/newContact.js */

/* TODO: documentation */
PhoneBook.NewContact = Class.create(Sah.Form, {
	initialize: function ($super, form) {
		$super(form);
		
		$$("#bt_cancel").each(function (btn) {
			btn.observe("click", this.onCancel.bind(this));
		}, this);
		
		$$("#bt_listen").each(function (btn) {
			btn.observe("click", this.ringTune.bind(this));
		}, this);
		
		
		this.needs("Contacts", {
			path: "sysbus.Phonebook:getAllContacts",
			method: "execute"
		});
		
		this.load();
		
	},
	
	objectsLoaded: function () {
	  
		if (this.objects.Contacts.length <= 255){
			$$("#bt_save").each(function (btn) {
				btn.observe("click", this.onSave.bind(this));
			}, this);
		}else{
			$("input.error.limitation").show();
		}
		
	},
	
	getFormContent: function () {
		//var phonePattern = /^[\+|\*|\#]{0,1}[0-9]*$/;
		// var phonePattern = /^([\+|\*|\#]*[0-9]*)*$/;
		var phonePattern = /^([\+|\*|\#])*(\*|\#|[0-9]*)*$/;
		var emptyPattern = /^\s*$/;
		
		if ( emptyPattern.test($("firstname").value)
			|| emptyPattern.test($("lastname").value)  ) {
			return false;
		}
		var formContent = {
			"name": $("firstname").value,
// 			"formattedName": $("firstname").value,
			"formattedName": $("lastname").value,
			"ringtone": "1",
			"telephoneNumbers": []
		};
		var FirstName = $("firstname").value;
		var LastName = $("lastname").value;
		
		if(formContent.name.length>16||formContent.formattedName.length>16){
			return false;
		}
		
		if (  !emptyPattern.test($("home-number").value) ) {
			if(!phonePattern.test($("home-number").value) || $("home-number").value.length>20)return false;
			formContent.telephoneNumbers.push({
				"name": $("home-number").value,
				"type": "HOME",
				"preferred": false
			});
		}
		
		if ( !emptyPattern.test($("mobile-number").value) ) {
			if(!phonePattern.test($("mobile-number").value) ||  $("mobile-number").value.length>20)return false;
			formContent.telephoneNumbers.push({
				"name": $("mobile-number").value,
				"type": "CELL",
				"preferred": false
			});
		}
		
		if (  !emptyPattern.test($("office-number").value) ) {
			if(!phonePattern.test($("office-number").value) || $("office-number").value.length>20)return false;
			formContent.telephoneNumbers.push({
				"name": $("office-number").value,
				"type": "WORK",
				"preferred": false
			});
		}
		
		if (formContent.telephoneNumbers.length === 0) {
			return false;
		}
		
		formContent.ringtone = $F("melody");
		if(parseInt(formContent.ringtone, 2)>7||parseInt(formContent.ringtone, 2)<1){
			return false;
		}
// 		formContent.name = "N:" + formContent.name + ";" + formContent.formattedName + ";";
// 		formContent.formattedName = formContent.formattedName + " " + formContent.name.split(";")[0].split("N:")[1];
		formContent.name = "N:" + LastName + ";" + formContent.name + ";";
		formContent.formattedName = formContent.formattedName + " " + formContent.name.split(";")[1];

		return {"contact": formContent};
	},
	
	onCancel: function () {
		Sah.redirect("/phonebook.html");
	},
	
	onSave: function () {
		var formContent = this.getFormContent();
		if (!formContent) {
			// Display Error Message
			$("input.error").show();
		} else {
			// Hide Error Message
			$("input.error").hide();
			
			// Save
			this.client.execute("sysbus.Phonebook:addContactAndGenUUID", formContent,{
				onSuccess: this.onContactSaved.bind(this),
				onFailure: this.onCantactFailure.bind(this)
			}); 
		}
	},

	onContactSaved: function (obj) {
		Sah.redirect("/phonebook.html");
	},
	
	ringTune: function () {
		this.client.execute("sysbus.VoiceService.VoiceApplication:ring", {
			"PhoneToUse": "",
			"Duration": 5000,
			"Ringtone": $("melody").getValue()
		}, {
			onSuccess: function () {},
			onFailure: function () {}
		}); 
	},
	
	onCantactFailure: function (obj) {
		// Display Error Message
		$("input.error").show();
	}
});
 

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/keyboard.js */

/*@description Sah Keyboard is a keyboard navigation management library base on "Kibo" wish is released under the MIT License.*/
/*@author Talel Kaabachi*/
Sah.Keyboard = Class.create(
/** @lends Sah.Keyboard# */
{   
    KEY_NAMES_BY_CODE : {
        8: 'backspace', 
        9: 'tab', 
        13: 'enter',
        16: 'shift', 
        17: 'ctrl', 
        18: 'alt',
        20: 'caps_lock',
        27: 'esc',
        32: 'space',
        33: 'page_up', 
        34: 'page_down',
        35: 'end', 
        36: 'home',
        37: 'left', 
        38: 'up', 
        39: 'right', 
        40: 'down',
        45: 'insert', 
        46: 'delete',
        48: '0', 
        49: '1', 
        50: '2', 
        51: '3', 
        52: '4', 
        53: '5', 
        54: '6', 
        55: '7', 
        56: '8', 
        57: '9',
        65: 'a', 
        66: 'b', 
        67: 'c', 
        68: 'd', 
        69: 'e', 
        70: 'f', 
        71: 'g', 
        72: 'h', 
        73: 'i', 
        74: 'j', 
        75: 'k', 
        76: 'l', 
        77: 'm', 
        78: 'n', 
        79: 'o', 
        80: 'p', 
        81: 'q', 
        82: 'r', 
        83: 's', 
        84: 't', 
        85: 'u', 
        86: 'v', 
        87: 'w', 
        88: 'x', 
        89: 'y', 
        90: 'z',
        112: 'f1', 
        113: 'f2', 
        114: 'f3', 
        115: 'f4', 
        116: 'f5', 
        117: 'f6', 
        118: 'f7', 
        119: 'f8', 
        120: 'f9', 
        121: 'f10', 
        122: 'f11', 
        123: 'f12',
        144: 'num_lock'
    },
    MODIFIERS : ['shift', 'ctrl', 'alt'],

    WILDCARD_TYPES: ['arrow', 'number', 'letter', 'f'],

    WILDCARDS : {
        arrow: [37, 38, 39, 40],
        number: [48, 49, 50, 51, 52, 53, 54, 55, 56, 57],
        letter: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
        f: [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123]
    },
    
    initialize: function (element)
    {
        this.element = element || window.document;
        this.KEY_CODES_BY_NAME = {};
        for(var key in this.KEY_NAMES_BY_CODE)
            if(Object.prototype.hasOwnProperty.call(this.KEY_NAMES_BY_CODE, key))
                this.KEY_CODES_BY_NAME[this.KEY_NAMES_BY_CODE[key]] = +key;        
        this.start();
    },
    assert : function(expression, exception) {
        exception = exception || {};
        exception.name = exception.name || 'Exception raised';
        exception.message = exception.message || 'an error has occurred.';

        try {
            if(!expression)
                throw(exception);
        } catch(error) {
            this.logger.error(error.name + ': ' + error.message);
        }
    },
    isArray : function(what) {
        return !!(what && what.splice);
    },
    isString : function(what) {
        return typeof what === 'string';
    },
    arrayIncludes : function() {        
        if(Array.prototype.indexOf) {
            return function(haystack, needle) {
                return haystack.indexOf(needle) !== -1;
            };
        }
        else {
            return function(haystack, needle) {
                for(var i = 0; i < haystack.length; i++)
                    if(haystack[i] === needle)
                        return true;
                return false;
            };
        }
    }(),
    trimString : function(string) {
        return string.replace(/^\s+|\s+$/g, '');
    },
    neatString : function(string) {
        return this.trimString(string).replace(/\s+/g, ' ');
    },

    capitalize : function(string) {
        return string.toLowerCase().replace(/^./, function(match) {
            return match.toUpperCase();
        });
    },

    isModifier : function(key) {
        return this.arrayIncludes(this.MODIFIERS, key);
    } ,
    start : function() {
        var i;
        this.lastKeyCode = -1;
        this.lastModifiers = {};
        for(i = 0; i < this.MODIFIERS.length; i++)
            this.lastModifiers[this.MODIFIERS[i]] = false;

        this.keysDown = {
            any: []
        };
        this.keysUp = {
            any: []
        };
        for(i = 0; i < this.WILDCARD_TYPES.length; i++) {
            this.keysDown['any ' + this.WILDCARD_TYPES[i]] = [];
            this.keysUp['any ' + this.WILDCARD_TYPES[i]] = [];
        }

        this.downHandler = this.handler('down');
        this.upHandler = this.handler('up');
        var unloader = function () {
            Event.stopObserving(this.element, 'keydown', this.downHandler.bind(this));
            Event.stopObserving(this.element, 'keyup', this.upHandler.bind(this));
            Event.stopObserving(window, 'unload', unloader.bind(this));
        }
        Event.observe(this.element, 'keydown', this.downHandler.bind(this));
        Event.observe(this.element, 'keyup', this.upHandler.bind(this));
        Event.observe(window, 'unload', unloader.bind(this));        
    },
    matchingKeys : function(registeredKeys) {
        var i, j, keyCombination, match, result = [];
        for(var registeredKey in registeredKeys) {
            if(Object.prototype.hasOwnProperty.call(registeredKeys, registeredKey)) {
                keyCombination = this.trimString(registeredKey).split(' ');               
                if(keyCombination.length && keyCombination[0] !== 'any') {
                    match = true;
                    for(j = 0; j < keyCombination.length; j++)
                        match = match && (this.isModifier(keyCombination[j]) ? this.lastKey(keyCombination[j]) : (this.lastKey() === keyCombination[j]));
                    if(match)
                        result.push(registeredKey);
                }
            }
        }
        
        return result;
    },
    handler :function(upOrDown) {
        
        return function(e) {
            var i, j, matchingKeys, registeredKeys;

            e = e || window.event;

            this.lastKeyCode = e.keyCode;
            for(i = 0; i < this.MODIFIERS.length; i++)
                this.lastModifiers[this.MODIFIERS[i]] = e[this.MODIFIERS[i] + 'Key'];
            if(this.arrayIncludes(this.MODIFIERS, this.keyName(this.lastKeyCode)))
                this.lastModifiers[this.keyName(this.lastKeyCode)] = true;
          
            registeredKeys = this['keys' + this.capitalize(upOrDown)];
            matchingKeys = this.matchingKeys(registeredKeys);
          
            for(i = 0; i < registeredKeys.any.length; i++)
                if((registeredKeys.any[i](e) === false) && e.preventDefault)
                    e.preventDefault();

            for(i = 0; i < this.WILDCARD_TYPES.length; i++)
                if(this.arrayIncludes(this.WILDCARDS[this.WILDCARD_TYPES[i]], this.lastKeyCode))
                    for(j = 0; j < registeredKeys['any ' + this.WILDCARD_TYPES[i]].length; j++)
                        if((registeredKeys['any ' + this.WILDCARD_TYPES[i]][j](e) === false) && e.preventDefault)
                            e.preventDefault();

            for(i = 0; i < matchingKeys.length; i++)
                for(j = 0; j < registeredKeys[matchingKeys[i]].length; j++)
                    if((registeredKeys[matchingKeys[i]][j](e) === false) && e.preventDefault)
                        e.preventDefault();
        };
    },
    registerKeys : function(upOrDown, newKeys, func) {
        var i, registeredKeys = this['keys' + this.capitalize(upOrDown)];

        if(!this.isArray(newKeys))
            newKeys = [newKeys];
        
        for(i = 0; i < newKeys.length; i++) {
            this.assert(
                this.isString(newKeys[i]),
                {
                    name: 'Type error', 
                    message: 'expected string or array of strings.'
                }
                );

            newKeys[i] = this.neatString(newKeys[i]);
            
            if(this.isArray(registeredKeys[newKeys[i]]))
                registeredKeys[newKeys[i]].push(func);
            else
                registeredKeys[newKeys[i]] = [func];
        }
        

        return this;
    },
    unregisterKeys : function(upOrDown, newKeys, func) {
        var i, j, registeredKeys = this['keys' + this.capitalize(upOrDown)];

        if(!this.isArray(newKeys))
            newKeys = [newKeys];

        for(i = 0; i < newKeys.length; i++) {
            this.assert(
                this.isString(newKeys[i]),
                {
                    name: 'Type error', 
                    message: 'expected string or array of strings.'
                }
                );

            newKeys[i] = this.neatString(newKeys[i]);

            if(func === null)
                delete registeredKeys[newKeys[i]];
            else {
                if(this.isArray(registeredKeys[newKeys[i]])) {
                    for(j = 0; j < registeredKeys[newKeys[i]].length; j++) {
                        if(String(registeredKeys[newKeys[i]][j]) === String(func)) {
                            registeredKeys[newKeys[i]].splice(j, 1);
                            break;
                        }
                    }
                }
            }
        }

        return this;
    },
    delegate :function(action, keys, func) {
        return func !== null ? this.registerKeys(action, keys, func) : this.unregisterKeys(action, keys, func);
    },
    down : function(keys, func) {
        return this.delegate('down', keys, func);
    },
    up : function(keys, func) {
        return this.delegate('up', keys, func);
    },
    keyName : function(keyCode) {
        return this.KEY_NAMES_BY_CODE[keyCode + ''];
    },
    keyCode : function(keyName) {
        return +this.KEY_CODES_BY_NAME[keyName];
    },
    lastKey : function(modifier) {
        if(!modifier)
            return this.keyName(this.lastKeyCode);

        this.assert(
            this.arrayIncludes(this.MODIFIERS, modifier),
            {
                name: 'Modifier error', 
                message: 'invalid modifier ' + modifier + ' (valid modifiers are: ' + this.MODIFIERS.join(', ') + ').'
            }
            );

        return this.lastModifiers[modifier];
    },
    triggerEvent: function(element, eventName) {
	
        // safari, webkit, gecko
        if (document.createEvent){
            var evt = document.createEvent('HTMLEvents');
            evt.initEvent(eventName, true, true);
 
            return element.dispatchEvent(evt);
        } 
        // Internet Explorer
        if (element.fireEvent) {
            return element.fireEvent('on' + eventName);
        }
    },
    removeEvent: function(eventName){        
        Event.stopObserving(this.element,eventName);
    }
    
});





/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/base64.js */

Sah.Base64 = {
  keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

  encode: function (input) 
  {
    var output = "";
    var chr1, chr2, chr3 = "";
    var enc1, enc2, enc3, enc4 = "";
    var i = 0;
    
    do {
      chr1 = input.charCodeAt(i++);
      chr2 = input.charCodeAt(i++);
      chr3 = input.charCodeAt(i++);
      
      enc1 = chr1 >> 2;
      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
      enc4 = chr3 & 63;
      
      if (isNaN(chr2)) {
        enc3 = enc4 = 64;
      } else if (isNaN(chr3)) {
        enc4 = 64;
      }
      
      output = output +
        Sah.Base64.keyStr.charAt(enc1) +
        Sah.Base64.keyStr.charAt(enc2) +
        Sah.Base64.keyStr.charAt(enc3) +
        Sah.Base64.keyStr.charAt(enc4);
      chr1 = chr2 = chr3 = "";
      enc1 = enc2 = enc3 = enc4 = "";
    } while (i < input.length);
    
    return output;
  },
  
  decode: function (input) 
  {
    var output = "";
    var chr1, chr2, chr3 = "";
    var enc1, enc2, enc3, enc4 = "";
    var i = 0;
    
    // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
    var base64test = /[^A-Za-z0-9\+\/\=]/g;
    if (base64test.exec(input)) {
      alert("There were invalid base64 characters in the input text.\n" +
            "Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\n" +
            "Expect errors in decoding.");
    }
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    
    do {
      enc1 = Sah.Base64.keyStr.indexOf(input.charAt(i++));
      enc2 = Sah.Base64.keyStr.indexOf(input.charAt(i++));
      enc3 = Sah.Base64.keyStr.indexOf(input.charAt(i++));
      enc4 = Sah.Base64.keyStr.indexOf(input.charAt(i++));
      
      chr1 = (enc1 << 2) | (enc2 >> 4);
      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
      chr3 = ((enc3 & 3) << 6) | enc4;
      
      output = output + String.fromCharCode(chr1);
      
      if (enc3 != 64) {
        output = output + String.fromCharCode(chr2);
      }
      if (enc4 != 64) {
        output = output + String.fromCharCode(chr3);
      }
      
      chr1 = chr2 = chr3 = "";
      enc1 = enc2 = enc3 = enc4 = "";
      
    } while (i < input.length);
    
    return output;
  }
};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/tools.js */

Sah.Tools = {
/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Copyright (C) Paul Johnston 1999 - 2000.
 * Updated by Greg Holt 2000 - 2001.
 * See http://pajhome.org.uk/site/legal.html for details.
 */

  /*
   * Convert a 32-bit number to a hex string with ls-byte first
   */
  hex_chr : "0123456789abcdef",
  rhex : function (num)
  {
    str = "";
    for(j = 0; j <= 3; j++)
    str += this.hex_chr.charAt((num >> (j * 8 + 4)) & 0x0F) +
           this.hex_chr.charAt((num >> (j * 8)) & 0x0F);
    return str;
  },

 /*
  * Convert a string to a sequence of 16-word blocks, stored as an array.
  * Append padding bits and the length, as described in the MD5 standard.
  */
  str2blks_MD5 : function (str)
  {
    nblk = ((str.length + 8) >> 6) + 1;
    blks = new Array(nblk * 16);
    for(i = 0; i < nblk * 16; i++) blks[i] = 0;
    for(i = 0; i < str.length; i++)
      blks[i >> 2] |= str.charCodeAt(i) << ((i % 4) * 8);
      blks[i >> 2] |= 0x80 << ((i % 4) * 8);
      blks[nblk * 16 - 2] = str.length * 8;
    return blks;
  },

  /*
   * Add integers, wrapping at 2^32. This uses 16-bit operations internally 
   * to work around bugs in some JS interpreters.
   */
  add : function (x, y)
  {
    var lsw = (x & 0xFFFF) + (y & 0xFFFF);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return (msw << 16) | (lsw & 0xFFFF);
  },

  /*
   * Bitwise rotate a 32-bit number to the left
   */
  rol : function (num, cnt)
  {
    return (num << cnt) | (num >>> (32 - cnt));
  },

  /*
   * These functions implement the basic operation for each round of the
   * algorithm.
   */
  cmn: function (q, a, b, x, s, t)
  {
    return this.add(this.rol(this.add(this.add(a, q), this.add(x, t)), s), b);
  },
  ff :function (a, b, c, d, x, s, t)
  {
    return this.cmn((b & c) | ((~b) & d), a, b, x, s, t);
  },
  gg : function (a, b, c, d, x, s, t)
  {
    return this.cmn((b & d) | (c & (~d)), a, b, x, s, t);
  },
  hh : function (a, b, c, d, x, s, t)
  {
    return this.cmn(b ^ c ^ d, a, b, x, s, t);
  },
  ii : function (a, b, c, d, x, s, t)
  {
    return this.cmn(c ^ (b | (~d)), a, b, x, s, t);
  },

  /*
   * Take a string and return the hex representation of its MD5.
   */
  MD5 : function (str)
  {
    x = this.str2blks_MD5(str);
    var a =  1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d =  271733878;
 
    for(i = 0; i < x.length; i += 16)
    {
      var olda = a;
      var oldb = b;
      var oldc = c;
      var oldd = d;

      a = this.ff(a, b, c, d, x[i+ 0], 7 , -680876936);
      d = this.ff(d, a, b, c, x[i+ 1], 12, -389564586);
      c = this.ff(c, d, a, b, x[i+ 2], 17,  606105819);
      b = this.ff(b, c, d, a, x[i+ 3], 22, -1044525330);
      a = this.ff(a, b, c, d, x[i+ 4], 7 , -176418897);
      d = this.ff(d, a, b, c, x[i+ 5], 12,  1200080426);
      c = this.ff(c, d, a, b, x[i+ 6], 17, -1473231341);
      b = this.ff(b, c, d, a, x[i+ 7], 22, -45705983);
      a = this.ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
      d = this.ff(d, a, b, c, x[i+ 9], 12, -1958414417);
      c = this.ff(c, d, a, b, x[i+10], 17, -42063);
      b = this.ff(b, c, d, a, x[i+11], 22, -1990404162);
      a = this.ff(a, b, c, d, x[i+12], 7 ,  1804603682);
      d = this.ff(d, a, b, c, x[i+13], 12, -40341101);
      c = this.ff(c, d, a, b, x[i+14], 17, -1502002290);
      b = this.ff(b, c, d, a, x[i+15], 22,  1236535329);    

      a = this.gg(a, b, c, d, x[i+ 1], 5 , -165796510);
      d = this.gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
      c = this.gg(c, d, a, b, x[i+11], 14,  643717713);
      b = this.gg(b, c, d, a, x[i+ 0], 20, -373897302);
      a = this.gg(a, b, c, d, x[i+ 5], 5 , -701558691);
      d = this.gg(d, a, b, c, x[i+10], 9 ,  38016083);
      c = this.gg(c, d, a, b, x[i+15], 14, -660478335);
      b = this.gg(b, c, d, a, x[i+ 4], 20, -405537848);
      a = this.gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
      d = this.gg(d, a, b, c, x[i+14], 9 , -1019803690);
      c = this.gg(c, d, a, b, x[i+ 3], 14, -187363961);
      b = this.gg(b, c, d, a, x[i+ 8], 20,  1163531501);
      a = this.gg(a, b, c, d, x[i+13], 5 , -1444681467);
      d = this.gg(d, a, b, c, x[i+ 2], 9 , -51403784);
      c = this.gg(c, d, a, b, x[i+ 7], 14,  1735328473);
      b = this.gg(b, c, d, a, x[i+12], 20, -1926607734);
    
      a = this.hh(a, b, c, d, x[i+ 5], 4 , -378558);
      d = this.hh(d, a, b, c, x[i+ 8], 11, -2022574463);
      c = this.hh(c, d, a, b, x[i+11], 16,  1839030562);
      b = this.hh(b, c, d, a, x[i+14], 23, -35309556);
      a = this.hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
      d = this.hh(d, a, b, c, x[i+ 4], 11,  1272893353);
      c = this.hh(c, d, a, b, x[i+ 7], 16, -155497632);
      b = this.hh(b, c, d, a, x[i+10], 23, -1094730640);
      a = this.hh(a, b, c, d, x[i+13], 4 ,  681279174);
      d = this.hh(d, a, b, c, x[i+ 0], 11, -358537222);
      c = this.hh(c, d, a, b, x[i+ 3], 16, -722521979);
      b = this.hh(b, c, d, a, x[i+ 6], 23,  76029189);
      a = this.hh(a, b, c, d, x[i+ 9], 4 , -640364487);
      d = this.hh(d, a, b, c, x[i+12], 11, -421815835);
      c = this.hh(c, d, a, b, x[i+15], 16,  530742520);
      b = this.hh(b, c, d, a, x[i+ 2], 23, -995338651);

      a = this.ii(a, b, c, d, x[i+ 0], 6 , -198630844);
      d = this.ii(d, a, b, c, x[i+ 7], 10,  1126891415);
      c = this.ii(c, d, a, b, x[i+14], 15, -1416354905);
      b = this.ii(b, c, d, a, x[i+ 5], 21, -57434055);
      a = this.ii(a, b, c, d, x[i+12], 6 ,  1700485571);
      d = this.ii(d, a, b, c, x[i+ 3], 10, -1894986606);
      c = this.ii(c, d, a, b, x[i+10], 15, -1051523);
      b = this.ii(b, c, d, a, x[i+ 1], 21, -2054922799);
      a = this.ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
      d = this.ii(d, a, b, c, x[i+15], 10, -30611744);
      c = this.ii(c, d, a, b, x[i+ 6], 15, -1560198380);
      b = this.ii(b, c, d, a, x[i+13], 21,  1309151649);
      a = this.ii(a, b, c, d, x[i+ 4], 6 , -145523070);
      d = this.ii(d, a, b, c, x[i+11], 10, -1120210379);
      c = this.ii(c, d, a, b, x[i+ 2], 15,  718787259);
      b = this.ii(b, c, d, a, x[i+ 9], 21, -343485551);

      a = this.add(a, olda);
      b = this.add(b, oldb);
      c = this.add(c, oldc);
      d = this.add(d, oldd);
    }
    return this.rhex(a) + this.rhex(b) + this.rhex(c) + this.rhex(d);
  },

  dateHMS :function (time)
  {
    var addZero = function(v) { return v<10 ? '0' + v : v; };
    var d = new Date(time * 1000); //  millisecondes
    var dateArray = [];
    dateArray.push(addZero(d.getHours()-1));
    dateArray.push(addZero(d.getMinutes()));
    dateArray.push(addZero(d.getSeconds()));
    return dateArray.join(':');
  },

  getIEVersion :function ()
  {
    if (!!(window.attachEvent && navigator.userAgent.indexOf('Opera') === -1)) {
      var ver = navigator.userAgent.match(/MSIE ([0-9.]+);/);
      if (ver != null && ver[1] != undefined)
      {
        ver = parseInt(ver[1],10);
        if (ver == 7) {
        if (typeof (window.external.AddToFavoritesBar) != "undefined" ||
            typeof (window.external.AddService) != "undefined" ||
            typeof (window.external.AddService) != "undefined") return 8;
        }
        return ver;
      }
    }
    return false;
  },

	formatPhoneNumber : function (phoneNumber )
	{
		var format = '';
		if( phoneNumber )
		{
			var len = phoneNumber.length;
			if( appConfig ===  'pl' )
			{
				if( len > 9 )
				{
					format = phoneNumber.substr(len-9, 9 );
				}
				else
				{
					format = phoneNumber;
				}
			}
			else
			{
				if( len >= 9 )
				{
					format = '0' + phoneNumber.substr(3/*,len-3 */);
				}
				else
				{
					format = '0' + phoneNumber;
				}
			}
		}
		return format;
	},
	formatCountryCode : function (phoneNumber)
	{
		var defaultPattern = /^\+[0-9]{2}/;
		var allPattern = /^((\+|00)?(33|262|590|594|596))/; // covers all possibilities
		if( appConfig ===  "pl" )
		{
			if(phoneNumber.indexOf("+48") !== -1){
				return phoneNumber.replace("+48", "");
			}
			else{
				return phoneNumber.replace("+", "00");
			}
		}		
		else{
			if(phoneNumber.search(allPattern) !== -1) {
				return phoneNumber.replace(allPattern, "0");
			} else {
				return phoneNumber.replace(defaultPattern,'00');
			}
		}
	},
	escapeString : function (type, str, unescape) // type is 'js', 'uri', or 'html', unescape is 1 or anything else
	{
		function addslashes(str)
		{
		  
		  return (str + '')
			.replace(/[\\"']/g, '\\$&')
			.replace(/\u0000/g, '\\0')
			.replace(/\u000A/g, '\\n')
			.replace(/\u000B/g, '\\t')
			.replace(/\u000C/g, '\\f')
			.replace(/\u000D/g, '\\r');
			 console.warn((str + '').replace(/[\\"']/g, '\\$&'));
		}
		function stripslashes(str)
		{
		   return (str + '')
			.replace(/\\(.?)/g, function(s, n1) {
			  switch (n1) {
				case '\\':
				  return '\\';
				case '0':
				  return '\u0000';
				case 'n':
				  return '\u000A';
				case 't':
				  return '\u000B';
				case 'f':
				  return '\u000C';  
				case 'r':
				  return '\u000D';
				case '':
				  return '';
				default:
				  return n1;
			  }
			});
		}
		function array_flip(trans)
		{
			var key, tmp_ar = {};
			for ( key in trans )
			{
				if ( trans.hasOwnProperty( key ) )
				{
					tmp_ar[trans[key]] = stripslashes(key); //stripslashes key value
				}
			}
			return tmp_ar;
		};
		var str_buffer = str;
		if (type === 'js') {
			if (unescape === 1)
			{
				str_buffer = stripslashes(str_buffer);
			}
			else
			{
				str_buffer = addslashes(str_buffer);
			}
		}
		else {
			var html_array = 
			{
				"\&":"&amp",
				"\"":"&quot",
				"\<":"&lt",
				"\>":"&gt",
				"'":"&acute"
			};		
			var uri_array = 
			{
				"\%":"%25",
				" ":"%20",
				"\!":"%21",
				"\@":"%40",
				"\#":"%23",
				"\\$":"%24",		
				"\\^":"%5E",
				"\&":"%26",
				"\\*":"%2A",
				"\\(":"%28",
				"\\)":"%29",
				"\-":"%2D",
				"\_":"%5F",
				"\=":"%3D",
				"\\+":"%2B",
				"\:":"%3A",
				"\;":"%3B",
				"\\.":"%2E",
				"\"":"%22",
				"'":"%27",
				"\\\\":"%5C",
				"\/":"%2F",
				"\\?":"%3F",
				"\<":"%3C",
				"\>":"%3E",
				"\~":"%7E",
				"\\[":"%5B",
				"\\]":"%5D",
				"\\{":"%7B",
				"\\}":"%7D",
				"\`":"%60"
			};
			var array_used = {};
			var array_used_temp = {};
			var unescape_used = 0;			
			if(type === 'html') {
				array_used_temp = html_array;
				console.warn('case html '+str);
			}
			else if(type === 'uri') {
				array_used_temp = uri_array;

			}
			// defining the flipped arrays if needed
			if(unescape === 1) {
				array_used = array_flip(array_used_temp);

			}
			else {
				array_used = array_used_temp;
				console.warn('case 2 '+str);
			}		
			for(var val in array_used) {			
				str_buffer = str_buffer.replace(new RegExp(val, "g"), array_used[val]);
			}
		}
		console.warn(str_buffer);
		return str_buffer;
		
	},
	unescapeString : function (type, str) // shorthand
	{
		return this.escapeString(type,str,1);
	}
};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/byte4.js */
/*jslint bitwise: false */

/**
 * Sah.Byte4 manipulation class
 *
 */

/**
 * Sah.Byte4 constructor
 * take :
 * * 1 parameter (number of bits at 1 from the most significant bit)
 * * 4 parameters (4 bytes)
 *
 * @constructor
 */
Sah.Byte4 = function ()
{
    var i, nbb, ndx=7;
    if (arguments.length === 4) {
        this.push.apply(this, arguments);
    } else if (arguments.length === 1) {
        nbb = arguments[0];
        if(!isNaN(nbb) && nbb >= 0 && nbb <= 32){
            this.push(0,0,0,0);
            for (i = 0; i < nbb; i += 1) {
                   if (ndx == -1) {
			ndx = 7;
		    }
		    
		    this[~~(i/8)] += 1 << ndx;
		    ndx--;
            }   
        }
    }
};

Sah.Byte4.prototype = [];

/**
 * Clone the byte array
 * @return {Sah.Byte4} copy
 */
Sah.Byte4.prototype.clone = function ()
{
    return new Sah.Byte4(this[0], this[1], this[2], this[3]);
};

/**
 * Equal operator
 * @return {Boolean}
 */
Sah.Byte4.prototype.eq = function (bytes)
{
    return this[0] === bytes[0] &&
    this[1] === bytes[1] &&
    this[2] === bytes[2] &&
    this[3] === bytes[3];
};

/**
 * Different operator
 * @return {Boolean}
 */
Sah.Byte4.prototype.diff = function (bytes)
{
    return this[0] !== bytes[0] ||
    this[1] !== bytes[1] ||
    this[2] !== bytes[2] ||
    this[3] !== bytes[3];
};

/**
 * Bynary and operator
 * @return {Sah.Byte4} copy
 */
Sah.Byte4.prototype.and = function (bytes)
{
    return new Sah.Byte4(this[0] & bytes[0],
        this[1] & bytes[1],
        this[2] & bytes[2],
        this[3] & bytes[3]);
};

/**
 * Bynary or operator
 * @return {Sah.Byte4} copy
 */
Sah.Byte4.prototype.or = function (bytes)
{
    return new Sah.Byte4(this[0] | bytes[0],
        this[1] | bytes[1],
        this[2] | bytes[2],
        this[3] | bytes[3]);
};

/**
 * Bynary xor operator
 * @return {Sah.Byte4} copy
 */
Sah.Byte4.prototype.xor = function(bytes){
    return new Sah.Byte4(this[0] ^ bytes[0],
        this[1] ^ bytes[1],
        this[2] ^ bytes[2],
        this[3] ^ bytes[3]);
};

/**
 * Bynary not operator
 * @return {Sah.Byte4} copy
 */
Sah.Byte4.prototype.not = function (bytes)
{
    return new Sah.Byte4(~ this[0] & 0xFF,
        ~ this[1] & 0xFF,
        ~ this[2] & 0xFF,
        ~ this[3] & 0xFF);
};

/**
 * Get integer value
 * @return {Sah.Byte4} copy
 */
Sah.Byte4.prototype.toInt = function ()
{
    return this[0] * Math.pow(2, 24) +
    this[1] * Math.pow(2, 16) +
    this[2] * Math.pow(2, 8) +
    this[3];
};

/**
 * Set from an integer value
 * @return {Sah.Byte4} this ref
 */
Sah.Byte4.prototype.fromInt = function (val)
{
    // ~~ eq Math.flor
    this[3] = val % 256;
    val = ~~(val / 256);
    this[2] = val % 256;
    val = ~~(val / 256);
    this[1] = val % 256;
    val = ~~(val / 256);
    this[0] = val % 256;
    return this;
};

/**
 * Increase the value
 * @return {Sah.Byte4} this ref
 */
Sah.Byte4.prototype.increase = function (val)
{
    this.fromInt(this.toInt() + (val||1));
    return this;
};

/**
 * Decrease the value
 * @return {Sah.Byte4} this ref
 */
Sah.Byte4.prototype.decrease = function (val)
{
    this.fromInt(this.toInt() - (val||1));
    return this;
};

/**
 * Math plus operator
 * @return {Sah.Byte4} copy
 */
Sah.Byte4.prototype.plus = function (val)
{
    return new Sah.Byte4(0,0,0,0).fromInt(this.toInt() + val);
};

/**
 * Math minus operator
 * @return {Sah.Byte4} copy
 */
Sah.Byte4.prototype.minus = function (val)
{
    return new Sah.Byte4(0,0,0,0).fromInt(this.toInt() - val);
};

/**
 * Math lower than operator
 * @return {Boolean}
 */
Sah.Byte4.prototype.lt = function (bytes)
{
    return this.toInt() < bytes.toInt();
};

/**
 * Math lower than or equal operator
 * @return {Boolean}
 */
Sah.Byte4.prototype.lteq = function (bytes)
{
    return this.toInt() <= bytes.toInt();
};

/**
 * Math greater than operator
 * @return {Boolean}
 */
Sah.Byte4.prototype.gt = function (bytes)
{
    return this.toInt() > bytes.toInt();
};

/**
 * Math greater than or equal operator
 * @return {Boolean}
 */
Sah.Byte4.prototype.gteq = function (bytes)
{
    return this.toInt() >= bytes.toInt();
};

/**
 * Is the value is in the interval
 * @param {Sah.Byte4} min minimum
 * @param {Sah.Byte4} max maximum
 * @return {Boolean}
 */
Sah.Byte4.prototype.isInInterval = function (min, max)
{
    var intval = this.toInt();
    return min.toInt() < intval && intval < max.toInt();
};

/**
 * Is the value is in the interval
 * @param {Sah.Byte4} min minimum
 * @param {Sah.Byte4} max maximum
 * @return {Boolean}
 */
Sah.Byte4.prototype.isInRange = function (min, max)
{
    var intval = this.toInt();
    return min.toInt() <= intval && intval <= max.toInt();
};

/**
 * Check if the 1 and 0 bits are contigu
 * @return {Boolean}
 */
Sah.Byte4.prototype.isBytesContigu = function ()
{
    var n, p = 1, i, d;
    for (i = 0; i < 4; i += 1) {
        for (d = 7; d >= 0; d -= 1) {
            n = this[i] & (1 << d);
            if (!p && n) {
                return false;
            }
            p = n;
        }
    }
    return true;
};

/**
 * Convert to string
 */
Sah.Byte4.prototype.toString = function ()
{
    return this.join('.');
};

//HACK BEGIN: IE<9 compatibility
if (!Prototype.BrowserFeatures.ElementExtensions) {
    Sah._Byte4 = Sah.Byte4;

    Sah.Byte4 = function () {
        var self = [];
        Object.extend(self, Sah._Byte4.prototype);
        self.toString = Sah._Byte4.prototype.toString;
        Sah._Byte4.apply(self, arguments);
        return self;
    };
}
//HACK END: IE<9 compatibility

/**
 * Parse an IPv4 address fron the string format
 * @param {String} address format aaa.bbb.ccc.ddd or aaa.bbb.ccc.ddd/mm
 * @param {String} netmask format aaa.bbb.ccc.ddd
 * @return {Object} (bytes,bytesMask)
 */
Sah.Byte4.parseIPAddress = function (address, netmask)
{
    var ret, res, i, o;

    ret = {
        bytes: null,
        bytesMask: Sah.Byte4.ZERO // Default mask
    };

    if (address instanceof Array) {
        ret.bytes = address;
    } else {
        if (typeof address !== 'string') {
            return false;
        }
        res = /^([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)(\/([0-9]+))?$/.exec(address);
        if(!res){
            return false;
        }
        ret.bytes = new Sah.Byte4();
        for (i = 0; i < 4; i += 1) {
            o = parseInt(res[i + 1], 10);
            if (isNaN(o) || o < 0 || o > 255) {
                return false;
            }
            ret.bytes.push(o);
        }
        if(res[6]){
            ret.bytesMask = new Sah.Byte4(parseInt(res[6], 10));
        }
    }
    
    if (netmask) {
        if (netmask instanceof Array) {
            ret.bytesMask = netmask;
        } else if ((res = Sah.Byte4.parseIPAddress(netmask))) {
            ret.bytesMask = res.bytes;
        } else {
            ret.bytesMask = null; // Bad mask!
        }
    }
    
    return ret;
};

Sah.Byte4.countBitsFromLeft = function(num)
{
    if (num == 255 ){
        return(8);
    }
    i = 0;
    bitpat=0xff00; 
    while (i < 8){
        if (num == (bitpat & 0xff)){
            return(i);
        }
        bitpat=bitpat >> 1;
        i++;
    }
    return(Number.NaN);
}

/**
 * Sah.Byte4 zero
 */
Sah.Byte4.ZERO = new Sah.Byte4(0);

/*jslint bitwise: true */

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/ipaddress.js */
/*jslint bitwise: false */
/**
 * Sah.IPAddress constructor
 *
 * @see Sah.Byte4.parseIPAddress
 */
Sah.IPAddress = function (address, netmask)
{
    this.errno = null;
    this.bytes = null;
    this.bytesMask = null;
    var res = Sah.Byte4.parseIPAddress.apply(this, arguments);
    if (res) {
        this.bytes = res.bytes;
        this.bytesMask = res.bytesMask;
    }
};

/**
 * Test if the Sah.IPAddress match with a sub network
 *
 * @param {String} address format aaa.bbb.ccc.ddd or aaa.bbb.ccc.ddd/mm
 * @param {String} netmask format aaa.bbb.ccc.ddd
 * @return {Boolean}
 */
Sah.IPAddress.prototype.match = function (address, netmask)
{
    var res;

    if (address instanceof Sah.IPAddress) {
        netmask = address.bytesMask;
        address = address.bytes;
    } else if (typeof address === "string") {
        res = Sah.Byte4.parseIPAddress.apply(this, arguments);
        if (!res) {
            this.errno = Sah.IPAddress.ERR_FATAL;
            return false;
        }
        address = res.bytes;
        if (res.bytesMask) {
            netmask = res.bytesMask;
        } else {
            this.errno = Sah.IPAddress.ERR_FATAL;
            return false;
        }
    }
    if (this.bytes.and(netmask).eq(address.and(netmask))) {
        if (this.bytesMask.lt(netmask)) {
            this.errno = Sah.IPAddress.ERR_INV_MASK;
        } else {
            return true;
        }
    }
    return false;
};

/**
 * Test if the Sah.IPAddress may be in conflict with a sub network
 *
 * @param {String} address format aaa.bbb.ccc.ddd or aaa.bbb.ccc.ddd/mm
 * @param {String} netmask format aaa.bbb.ccc.ddd
 * @return {Boolean}
 */
Sah.IPAddress.prototype.conflict = function (address, netmask) {
    if (address instanceof Sah.IPAddress) {
        netmask = address.bytesMask;
        address = address.bytes;
    } else if (typeof address === "string") {
        var res = Sah.Byte4.parseIPAddress.apply(this, arguments);
        if (!res) {
            this.errno = Sah.IPAddress.ERR_FATAL;
            return false;
        }
        address = res.bytes;
        if (res.bytesMask) {
            netmask = res.bytesMask;
        } else {
            this.errno = Sah.IPAddress.ERR_FATAL;
            return false;
        }
    }
    netmask = netmask.and(this.bytesMask);
    if (this.bytes.and(netmask).eq(address.and(netmask))) {
        this.errno = Sah.IPAddress.ERR_INV_MASK;
        return true;
    }
    return false;
};

/**
 * Test if a host can loin an other host
 * @param {String} address
 * @param {String} netmask
 */
Sah.IPAddress.prototype.canJoin = function (address, netmask)
{
    var oth = new Sah.IPAddress(address, netmask);
    if (oth.check() &&
        (oth.bytesMask = oth.bytesMask.or(this.bytesMask)) &&
        oth.check(Sah.IPAddress.CHK_HOST) &&
        this.bytes.and(oth.bytesMask).eq(oth.bytes.and(oth.bytesMask)) &&
        this.bytes.diff(oth.bytes)) {
        return true;
    }
    this.errno = oth.errno;
    return false;
};

/**
 * Perform several checks
 * if check fails : the errno is set with a Sah.IPAddress.ERR_XXX error
 *
 * @param {Number} flags to choise what check you want to perform with flags Sah.IPAddress.CHK_XXX
 * @return {Boolean}
 */
Sah.IPAddress.prototype.check = function (flags)
{
    var net, imask;
    flags = flags || 0;
    this.errno = Sah.IPAddress.ERR_NA;

    if (!this.bytes) {
        this.errno = Sah.IPAddress.ERR_SYN_IP;
        return false;
    }

    if (!this.bytesMask) {
        this.errno = Sah.IPAddress.ERR_SYN_MASK;
        return false;
    }

    if (flags & 3) {
        net = this.bytes.and(this.bytesMask);
    }

    if (flags & 1 && !net.isInInterval(Sah.Byte4.ZERO, this.bytesMask)) {
        this.errno = Sah.IPAddress.ERR_INV_NET;
        return false;
    }

    if (flags & 2) {
        // private network (RFC 1918)
        // without autoconfigured network 169.254.0.0/16
        if (!this.match("10.0.0.0/8") &&
            !this.match("172.16.0.0/12") &&
            !this.match("192.168.0.0/16")) {
            if (!this.errno) {
                this.errno = Sah.IPAddress.ERR_INV_LAN;
            }
            return false;
        }
    }

    if (flags & 4) {
        imask = this.bytesMask.not();
        if (!this.bytes.and(imask).isInInterval(Sah.Byte4.ZERO, imask)) {
            this.errno = Sah.IPAddress.ERR_INV_HOST;
            return false;
        }
    }

    if (!(flags & 8)) {
        if (!this.bytesMask.isBytesContigu()) {
            this.errno = Sah.IPAddress.ERR_INV_MASK;
            return false;
        }
    }

    return true;
};

/**
 * Get the network address
 *
 * @return {Sah.IPAddress}
 */
Sah.IPAddress.prototype.getNet = function ()
{
    var ip = new Sah.IPAddress();
    ip.bytes = this.bytes.and(this.bytesMask);
    ip.bytesMask = this.bytesMask.clone();
    return ip;
};

/**
 * Get the broadcast address
 *
 * @return {Sah.IPAddress}
 */
Sah.IPAddress.prototype.getBCast = function ()
{
    var ip = new Sah.IPAddress();
    ip.bytes = this.bytes.or(this.bytesMask.not());
    ip.bytesMask = this.bytesMask.clone();
    return ip;
};

/**
 * Check the DHCP Range
 *
 * @return {Boolean}
 */
Sah.IPAddress.prototype.checkDHCPRange = function (first, last)
{
    var ret, lan, imask, hmin, hmax, hfst, hlst, hcur;

    ret = Sah.Byte4.parseIPAddress(first);
    if (!ret) {
        this.errno = Sah.IPAddress.ERR_SYN_FIRSTIP;
        return false;
    }
    first = ret.bytes;

    ret = Sah.Byte4.parseIPAddress(last);
    if (!ret) {
        this.errno = Sah.IPAddress.ERR_SYN_LASTIP;
        return false;
    }
    last = ret.bytes;

    lan = this.bytes.and(this.bytesMask);
    if (first.and(this.bytesMask).diff(lan)) {
        this.errno = Sah.IPAddress.ERR_INV_FIRSTIP;
        return false;
    }
    if (last.and(this.bytesMask).diff(lan)) {
        this.errno = Sah.IPAddress.ERR_INV_LASTIP;
        return false;
    }

    imask = this.bytesMask.not();
    hmin = 0;
    hmax = imask.toInt();
    hfst = first.and(imask).toInt();
    hlst = last.and(imask).toInt();
    hcur = this.bytes.and(imask).toInt();

    if (hfst <= hmin || hfst >= hmax) {
        this.errno = Sah.IPAddress.ERR_INV_FIRSTIP;
        return false;
    }

    if (hlst <= hfst || hlst >= hmax) {
        this.errno = Sah.IPAddress.ERR_INV_LASTIP;
        return false;
    }

    if (hcur >= hfst && hcur <= hlst) {
        if (hcur - hfst < hlst - hcur) {
            this.errno = Sah.IPAddress.ERR_INV_FIRSTIP;
            return false;
        } else {
            this.errno = Sah.IPAddress.ERR_INV_LASTIP;
            return false;
        }
    }

    return true;
};

Sah.IPAddress.prototype.maskToPrefix = function(mask){
    if(!Sah.IPAddress.isValidMask(mask.join("."))){
        return false;
    }
    var sumofbits=0;    
    
    for(var i=0 , j= mask.length ; i<j ; i+=1){
        sumofbits+= Sah.Byte4.countBitsFromLeft(mask[i]);
    }
    return sumofbits;
}
Sah.IPAddress.prototype.toString = function(){
    //console.log(this.bytesMask);
    if(this.bytes){
        return [this.bytes,this.maskToPrefix(this.bytesMask)].join("/");
    }
    else return null;
}
/**
 * Get the max DHCP Range
 *
 * @return {Object} (first:Bite4, last:Bite4)
 */
Sah.IPAddress.prototype.getDHCPRange = function ()
{
    var imask = this.bytesMask.not(),
    lan = this.bytes.and(this.bytesMask),
    hcur = this.bytes.and(imask).toInt(),
    hmin = 0,
    hmax = imask.toInt();

    if (hcur - hmin < hmax - hcur) {
        hmin = hcur;
    } else {
        hmax = hcur;
    }
    return {
        first: lan.plus(hmin + 1),
        last: lan.plus(hmax - 1)
    };
};

/**
 * Check if the IP address is valid
 * @return {Boolean}
 */
Sah.IPAddress.isValid = function (ip)
{
    return (new Sah.IPAddress(ip, "0.0.0.0")).check(Sah.IPAddress.CHK_HOST);
};

/**
 * Check if the network mask is valid
 * @return {Boolean}
 */
Sah.IPAddress.isValidMask = function (mask)
{
    return (new Sah.IPAddress("0.0.0.0", mask)).check();
};

Sah.IPAddress.CHK_NET           = 1;
Sah.IPAddress.CHK_LAN           = 2;
Sah.IPAddress.CHK_HOST          = 4;
Sah.IPAddress.NOT_CHK_CNTB      = 8;

Sah.IPAddress.ERR_SYN           = 0x0100;
Sah.IPAddress.ERR_INV           = 0x0200;
Sah.IPAddress.ERR_ADDR          = 0x0400;
Sah.IPAddress.ERR_MASK          = 0x0800;
Sah.IPAddress.ERR_FIRST         = 0x1000;
Sah.IPAddress.ERR_LAST          = 0x2000;

Sah.IPAddress.ERR_NO            = 0x00FF;

Sah.IPAddress.ERR_NA            = 0;
Sah.IPAddress.ERR_FATAL         = 1;
Sah.IPAddress.ERR_SYN_IP        = 2    | Sah.IPAddress.ERR_SYN | Sah.IPAddress.ERR_ADDR;
Sah.IPAddress.ERR_SYN_MASK      = 3    | Sah.IPAddress.ERR_SYN | Sah.IPAddress.ERR_ADDR;
Sah.IPAddress.ERR_INV_NET       = 4    | Sah.IPAddress.ERR_INV | Sah.IPAddress.ERR_ADDR;
Sah.IPAddress.ERR_INV_MASK      = 5    | Sah.IPAddress.ERR_INV | Sah.IPAddress.ERR_MASK;
Sah.IPAddress.ERR_INV_HOST      = 6    | Sah.IPAddress.ERR_INV | Sah.IPAddress.ERR_ADDR;
Sah.IPAddress.ERR_INV_LAN       = 7    | Sah.IPAddress.ERR_INV | Sah.IPAddress.ERR_ADDR;

Sah.IPAddress.ERR_SYN_FIRSTIP   = 11   | Sah.IPAddress.ERR_SYN | Sah.IPAddress.ERR_FIRST;
Sah.IPAddress.ERR_SYN_LASTIP    = 12   | Sah.IPAddress.ERR_SYN | Sah.IPAddress.ERR_LAST;
Sah.IPAddress.ERR_INV_FIRSTIP   = 13   | Sah.IPAddress.ERR_INV | Sah.IPAddress.ERR_FIRST;
Sah.IPAddress.ERR_INV_LASTIP    = 14   | Sah.IPAddress.ERR_INV | Sah.IPAddress.ERR_LAST;

/*jslint bitwise: true */
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/validation.js */

/**
  * @ namespace
  */
Sah.Validations = {
    /** @lends Sah.Validations. */

    /**
   * @todo add doc comments
   * @author Montassar
   */
    isValidApplicationName: function (nameApp)
    {
        var appNameRegExp = /^[a-zA-Z0-9\s\(\)\[\]{}\|\-\+_=\*\?<>!&%#:;']{1,}$/;
        var appNameNoSpaces = nameApp.replace(/^\s*|\s*$/g, "");
        return appNameRegExp.test(appNameNoSpaces);
    },

    /**
   * @todo add doc comments
   * @author Montassar
   */
    isValidFirewallRuleDescription: function (ruleDesc)
    {
        var ruleDescRegExp = /^[\x21-\x7E]{1,32}$/;
        return ruleDescRegExp.test(ruleDesc);
    },

    /**
   * @todo add doc comments
   * @author Montassar
   */
    isValidDNSName: function (nameDns)
    {
        var DNSNameRegEx = /^[a-zA-Z0-9\-]{1,64}$/;
        return DNSNameRegEx.test(nameDns); 
    },
   
    /**
   * @todo add doc comments
   * @author Montassar
   */
    isValidWord: function (word)
    {
        var wordRegExp = /^[\x21-\x7E]*$/;
        return wordRegExp.test(word);
    },

    /**
   * @todo add doc comments
   * @author Montassar
   */
    isValidDomain: function(domainValue)
    {
        var DomainRegExp = /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$/;
        return DomainRegExp.test(domain);
    },

    /**
   * @todo add doc comments
   * @author Montassar
   */
    isValidSSID: function (ssid) 
    {
        var SSIDRegExp = /^[\x20-\x7E]{1,32}$/;
        return SSIDRegExp.test(ssid); 
    },

    /**
   * @todo add doc comments
   * @author Montassar
   */
    isValidWPAKey: function (WPAKey)
    {
        return WPAKey.match(/^([\x20-\x7e]{8,63}|[a-e\d]{64})$/i) !== null;
    },

    /**
   * @todo add doc comments and use the same convention for wpaKey naming and WEPKey (case)
   * @author Montassar
   */
    isValidWEPKey: function (wepKey)
    {
	    return wepKey.match(/^[0-9a-f]{26}$/i);
	
//         return (wepKey.match(/^[0-9a-f]{10}$/i) /* 40-bit HEX */
//             || wepKey.match(/^[0-9a-f]{26}$/i) /* 104-bit HEX */
//             || wepKey.match(/^[0-9a-f]{32}$/i) /* 128-bit HEX */
//             || wepKey.match(/^.{5}$/i) /* 40-bit ASCII */
//             || wepKey.match(/^.{13}$/i) /* 104-bit ASCII */
//             || wepKey.match(/^.{16}$/i) /* 128-bit ASCII */);
            
    },

    /**
   * @todo add doc comments
   * @author Montassar
   */
    isValidBluetoothName: function (bluetoothName)
    {
        return  isValidSSID( bluetoothName );
    },

    /**
   * @todo add doc comments, fixup coding style
   * @author Montassar
   */
    isValidMacAddress: function (macaddress)
    {
        var mac_regexp =  /^([0-9a-f]{2}:){5}[0-9a-f]{2}$/i;
        return mac_regexp.test(macaddress);
    },

    /**
   * @todo add doc comments
   * @author Montassar
   */
    isValidbluetoothAddress: function (bluetoothAddress)
    {
        return isValidMacAddress(bluetoothAddress);
    },

    /**
   * @todo add doc comment
   * @author Montassar
   */
    isValidUnlockCode: function (unlockCode)
    {
        unlockCodeRegexp = /^[0-9a-zA-Z+\/]{27}$/i;
        return unlockCodeRegexp.test(unlockCode);
    },

    /**
   * @todo add doc comments
   * @author Montassar
   */
    isNumeric: function (str)
    {
        var numericRegExp = /^\d+$/;
        return numericRegExp.test(str);
    },

    /**
   * @todo add doc comments
   * @author Montassar
   */
    isValidNumber: function(sText, pMin, pMax)
    {
        return (sText.match(/^\d+$/)
            && sText >= pMin
            && sText <= pMax);
    },

    /**
   * @author Montassar
   */
    isValidPinCode: function (code)
    {    
	
	if(code === "00000000")
            return false;
	
        var codePattern = /^(\d{8})$/;
        var accum=0;
	
        if(!codePattern.test(code))
            return false;
        /* ~~ = Math.floor */
        accum += 3 * (~~(code / 10000000) % 10);
        accum += 1 * (~~(code / 1000000) % 10);
        accum += 3 * (~~(code / 100000) % 10);
        accum += 1 * (~~(code / 10000) % 10);
        accum += 3 * (~~(code / 1000) % 10);
        accum += 1 * (~~(code / 100) % 10);
        accum += 3 * (~~(code / 10) % 10);
        accum += 1 * (~~(code / 1) % 10);
        return (0 == (accum % 10));
    },

    /**
   * @todo add doc comments
   * @author Montassar
   */
    isValidPort: function (portNumber)
    {
        var codePattern = /^((\d{1,5})|((\d{1,5})\-(\d{1,5})))$/;
        if(codePattern.test(portNumber)) {
            var range = portNumber.split("-");
            return !(parseInt(range[0],10) < 1 
                || parseInt(range[0],10) > 65535
                || (range[1] != "undefined" 
                    && (parseInt(range[1],10) < 1 || parseInt(range[1],10) > 65535)));
        }
        return false ;
    },

    isValidPppLogin : function ( login)
    {
        var loginPattern = /^([A-z]+(\/)*[A-z]*)$/;
        return loginPattern.test(login) && login.length<=85;
    },

    isValidPppPassword : function ( passwd)
    {
        var passwdPattern = /^([0-z]+)$/;
        return passwdPattern.test(passwd) && passwd.length<=85;
    }
};


/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/intervalset.js */

/**
 * IntervalSet constructor
 * @param {Number} min minimum interval value
 * @param {Number} max maximum interval value
 */
Sah.IntervalSet = function (min, max) {
  this._min = min;
  this._max = max;
};

Sah.IntervalSet.prototype = [];

/**
 * Sort all elements of this interval set
 * @return {Sah.IntervalSet} itself
 */
Sah.IntervalSet.prototype.sort = function () {
  return Array.prototype.sort.call(this, function (a, b) {
    if (a.start < b.start) {
      return -1;
    } else if (a.start > b.start) {
      return 1;
    } else {
      return 0;
    }
  });
};

/**
 * Return the complement of this interval set
 * @return {Sah.IntervalSet} copy
 */
Sah.IntervalSet.prototype.complement = function () {
  var ret = new Sah.IntervalSet(this._min, this._max), start = null, end;
  if (this.length === 0) {
    ret.push({start: this._min, end: this._max});
    return ret;
  }
  if (this[0].start !== this._min) {
    ret.push({start: this._min, end: this[0].start - 1});
  }
  this.each(function (it) {
    if (!start) {
      start = (it.end < this._max ? it.end + 1: null);
      return;
    }
    ret.push({start: start, end: it.start - 1});
    start = (it.end < this._max ? it.end + 1: null);
  }, this);
  if (start) {
    ret.push({start: start, end: this._max});
  }
  return ret;
};

/**
 * Return the union of an interval and this interval set
 * @param {Object} intrv interval
 * @return {Sah.IntervalSet} copy
 */
Sah.IntervalSet.prototype.union = function (intrv) {
  var ret = new Sah.IntervalSet(this._min, this._max), notAdded = true;
  this.each(function (it) {
    if (it.end < intrv.start - 1) {
      ret.push(it);
    } else if (it.start > intrv.end + 1) {
      if (notAdded) {
        ret.push(intrv);
        notAdded = false;
      }
      ret.push(it);
    } else {
      intrv.start = Math.min(intrv.start, it.start);
      intrv.end = Math.max(intrv.end, it.end);
    }
  }, this);
  if (notAdded) {
    ret.push(intrv);
  }
  return ret;
};

/**
 * Return the exclusion of an interval and this interval set
 * @param {Object} intrv interval
 * @return {Sah.IntervalSet} copy
 */
Sah.IntervalSet.prototype.exclusion = function (intrv) {
  var ret = new Sah.IntervalSet(this._min, this._max);
  this.each(function (it) {
    if (it.end < intrv.start - 1) {
      ret.push(it);
    } else if (it.start > intrv.end + 1) {
      ret.push(it);
    } else {
      if (it.start < intrv.start) {
        ret.push({start: it.start, end: intrv.start - 1});
      }
      if (it.end > intrv.end) {
        ret.push({start: intrv.end + 1, end: it.end});
      }
    }
  }, this);
  return ret;
};

// IE < 9
if (!Prototype.BrowserFeatures.ElementExtensions) {
  Sah._IntervalSet = Sah.IntervalSet;

  Sah.IntervalSet = function () {
    var self = [];
    Object.extend(self, Sah._IntervalSet.prototype);
    Sah._IntervalSet.apply(self, arguments);
    return self;
  };
}

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/production.js */

Sah.Config.environment = "production";
Sah.Config.logLevel = "none";

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/bookmark.js */

/**
 * The bookmarks
 * @namespace
 */
Sah.Bookmarks = {};

/**
 * The lan connection
 */
Sah.Bookmarks.LANConnection = {
  load: function (form)
  {
    form.needs("InternetParameters", { path: "igd.Services.$Internet", depth: 0 });
    form.needs("LANConnection", { 
        path: function () { return "igd." + this.objects.InternetParameters.LANConnection; },
          depth: 4
    });
  }
};

/**
 * The wlan configuration
 */
Sah.Bookmarks.WLANConfiguration = {
  load: function (form)
  {
    form.needs("WLANConfiguration", { path: "WLANConfiguration", depth: -1 });
  }
};

/**
 * The wan configuration
 */
Sah.Bookmarks.WANConnectionDevice = {
  load: function (form)
  {
    form.needs("WANConnectionDevice", { path: "WANConnectionDevice", depth: -1, callback: this.bookmarkLoaded.bind(this, form) });
  },

  bookmarkLoaded: function (form)
  {
    form.objects.WANDSLLinkConfig = form.objects.WANConnectionDevice.WANDSLLinkConfig;
    form.objects.WANPPPConnection = form.objects.WANConnectionDevice.WANPPPConnection;
    form.objects.WANIPConnection = form.objects.WANConnectionDevice.WANIPConnection;
  }
};

Sah.Bookmarks.WANCommonInterfaceConfig = {
  load: function (form)
  {
    form.needs("WANCommonInterfaceConfig", { path: "WANCommonInterfaceConfig" , depth: 0 });
  }
};

Sah.Bookmarks.WANDSLInterfaceConfig = {
  load: function (form)
  {
    form.needs("InternetParameters", { path: "igd.Services.$Internet", depth: 0 });
    form.needs("WANDSLInterfaceConfig", {
        path: function () {
          return "igd." + (new Sah.Bus.Path(this.objects.InternetParameters.WANConnection)).butLast(4).toString() + ".WANDSLInterfaceConfig";
        },
        depth: 0
    });
  }
};

Sah.Bookmarks.Host = {
  load: function (form)
  {
    form.needs("Host", { path: "Host", depth: 4 });
  }
};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/widget.js */

/**
 * @namespace
 */
Sah.Widget = {};

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/widget/progress_bar.js */

Sah.Widget.ProgressBar = Class.create({/** @lends Sah.Widget.Language# */
    initialize: function (containerId,options){
        this.pbWrap = document.createElement('div');
        this.pbWrap.className = "meter-wrap";
        this.pbInner = document.createElement("div");
        this.pbInner.className="meter-value";
        this.pbWrap.appendChild(this.pbInner);
        this.container = document.getElementById(containerId);
        this.container.appendChild(this.pbWrap);
        this.pbInner.style.width = "0%";
        
        this.progressing = false;
        this.progress = 0;
        this.inter = null;
    },
    value : function(progressValue){
        this.pbInner.style.width = progressValue + "%";
    },
    animate: function(duration){
        if(!this.progressing){
            this.progressing = true;
           
           var run = function (){
                this.progress++;
                this.pbInner.style.width =  this.progress+"%";             
                if(this.progress == 98){
                    clearInterval(this.inter);
                    this.progressing = false;
                    this.progress = 0;
                }
            }
            this.inter = setInterval(run.bind(this), duration);
        }
       
    },
    reset : function(){
        this.pbInner.style.width = "0%";
        this.progress = 0;
        clearInterval(this.inter);
        this.progressing = false;     
    }
    
});
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/widget/image_select.js */

Sah.Widget.ImageSelect = Class.create(
  {
    /** @lends Sah.Widget.ImageSelect# */
    initialize: function (element)
    {
      this.select = element;
      this.select.hide();
      this.container = this.select.parentNode;
      this.container.style.textAlign = "center";
      this.images = [];
      this.reverseImage = {};
      var maxHeight = 0;
      for (var i = 0; i < this.select.options.length; i++) {
        var img = new Element("img");
        img.src = Sah.res("/" + this.select.options[i].value);
        img.hide();
        this.images.push(img);
        Element.insert(this.container, img);
        maxHeight = (maxHeight > img.getHeight() ? maxHeight : img.getHeight());
        this.reverseImage[this.select.options[i].value] = i;
      };

      this.container.style.height = maxHeight + "px";
      this.container.style.position = "relative";
      
      this.buttonLeft = new Element("input");
      this.buttonLeft.type = "button";
      this.buttonLeft.value = "<";
      this.buttonLeft.addClassName("button");
      this.buttonLeft.observe("click", this.nextImage.bind(this, -1));
      this.buttonLeft.setStyle({ position: "absolute", top: ((maxHeight - 25) / 2) + "px", left: "5px" });
      this.container.appendChild(this.buttonLeft);

      this.buttonRight = new Element("input");
      this.buttonRight.type = "button";
      this.buttonRight.value = ">";
      this.buttonRight.addClassName("button");
      this.buttonRight.observe("click", this.nextImage.bind(this, +1));
      this.buttonRight.setStyle({ position: "absolute", top: ((maxHeight - 25) / 2) + "px", right: "5px" });
      this.container.appendChild(this.buttonRight);

      this.selectImage(this.select.selectedIndex || 0);
      this.select.setValue = (function (value) { this.selectImage(this.reverseImage[value]); }).bind(this);
    },

    selectImage: function (i)
    {
      this.select.selectedIndex = i;
      if (this.currentImage)
        this.currentImage.hide();
      this.currentImage = this.images[i];
      this.images[i].show();
      this.images[i].style.marginTop = ((this.container.getHeight() - this.images[i].getHeight()) / 2) + "px";
    },

    nextImage: function (incr)
    {
      var newIndex = (this.select.selectedIndex + incr) % this.select.options.length;
      if (newIndex < 0) 
        newIndex = this.select.options.length + newIndex;
      this.selectImage(newIndex);
    }
  }
);

Sah.behave("select.images", Sah.Widget.ImageSelect);

/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/widget/language_select.js */

Sah.Widget.LanguageSelect = Class.create({ /** @lends Sah.Widget.Language# */
    initialize: function (control, options) {
        this.id = '';
        this.control = null;
        this.properties = {};
        this.content = {};
        this.items = [];
        this.elements = {};

        this.selects = [];
        this.currentIndex = 0;

        this.callback = function () {};
        this.showEvent = "click";

        var customControl = {};
        customControl.index = this.currentIndex;
        customControl.id = this.createId(control);
        customControl.select = this.getEBI(control);
        customControl.callback = this.getCallBack(options);
        customControl.showEvent = this.getShowEvent(options);
        customControl.content = this.getContent(customControl.select);
        customControl.elements = {};
        customControl.elements.box = this.buildCustomControl(customControl.select, customControl);

	
        this.buildEvents(customControl);
	
        customControl.showControl = function (target) {
            target.style.display = 'block';
	    customControl.elements.list.show = true;
        };

        customControl.hideControl = function (target) {
            target.style.display = 'none';
	    customControl.elements.list.show = false;
        };
	
        customControl.hideControl(customControl.elements.list);
        customControl.hideControl(customControl.select);
    },


    createId: function (baseName) {
        return 'langSelect_' + baseName;
    },

    getCallBack: function (options) {
        var result = function (e) {
            Sah.logger.warn(e);
        };

        if (options !== null || options !== undefined) {
            if ((options.onchange !== null || options.onchange !== undefined) && typeof (options.onchange) === "function") {
                result = options.onchange;
            }
        }

        return result;
    },

    getShowEvent: function (options) {
        var result = 'click';

        if (options !== null || options !== undefined) {
            if (options.showEvent !== null || options.showEvent !== undefined || options.showEvent === "click" || options.showEvent === "mouseover") {
                result = options.showEvent;
            }
        }

        return result;
    },

    getContent: function (select) {
        var items = select.getElementsByTagName('option');
        var result = [];
        var item;
        var i;
        for (i = 0; i < items.length; i++) {
            var option = items[i];
            item = {};
            item.value = option.value;
            item.text = option.innerHTML;
            result.push(item);
        }

        return result;
    },

    buildCustomControl: function (control, customControl) {

        //CREATE BOX
        var box = document.createElement('div');
        box.id = customControl.id + '_box';
        box.className = 'custom-select';
        customControl.elements.box = box;

        //CREATE SELECT VIEW
        var currentView = document.createElement('div');
        currentView.id = customControl.id + '_currentView';
        currentView.className = 'custom-select-view';
        customControl.elements.currentView = currentView;

        var currentContent = document.createElement('label');
        currentContent.id = customControl.id + '_currentContent';
        currentContent.setAttribute("for", customControl.select.id);
        currentContent.className = 'custom-select-label';
        customControl.elements.currentContent = currentContent;

        //CREATE CONTENT
        var list = document.createElement('ul');
        list.id = customControl.id + '_list';
        list.className = 'custom-select-list';
        list.show = false;
        var option;
        var flag;
        var text;
        var link;

        var selected_item = null;

        for (var i = 0; i < customControl.content.length; i++) {
            var item = customControl.content[i];
            link = new Element('a');
            link.className = 'link-lang';
            option = new Element('li');
            text = new Element('span');
            text.innerHTML = item.text;
            text.className = 'custom-select-item-text';
            flag = new Image();
            flag.src = "/images/"+appConfig+"/languages/" + item.value.toLowerCase() + ".png";
            flag.setAttribute("alt", "Voice.general.language.img."+item.value.toLowerCase());
            flag.setAttribute("class", "png Voice.general.language.img."+item.value.toLowerCase());

            option.appendChild(flag);
            link.appendChild(text);
            link.setAttribute("tabindex", 0);
            option.appendChild(link);
            option.setAttribute("livalue", item.value);


            if (i == 0) {
                option.className = 'custom-select-item custom-select-item-first';
            } else if (i == (this.items.length - 1)) {
                option.className = 'custom-select-item custom-select-item-last';
            } else {
                option.className = 'custom-select-item';
            }

            list.appendChild(option);

        }

        customControl.elements.list = list;

        //APPLY THE FIRST ITEM
        if (customControl.content.length > 0) {
            currentContent.innerHTML = customControl.elements.list.childNodes.item(customControl.select.selectedIndex).innerHTML;
            currentContent.setAttribute("value", customControl.elements.list.childNodes.item(customControl.select.selectedIndex).getAttribute("livalue"));
        }

        //MOUNT CASCADE ELEMENTS
        currentView.appendChild(currentContent);
        box.appendChild(currentView);
        box.appendChild(list);

        this.applyCustomControl(control, box);

        return box;
    },

    applyCustomControl: function (original, custom) {
        original.parentNode.insertBefore(custom, original);
    },

    buildEvents: function (customControl) {     
        var onClickItemFunction = function (e) {
	  
            customControl.elements.currentContent.innerHTML = this.innerHTML;
            customControl.elements.currentContent.setAttribute("livalue", this.getAttribute("livalue"));
            customControl.select.value = this.value;	  
            customControl.hideControl(customControl.elements.list);
// 	    customControl.elements.list.show = false;
            customControl.callback(this.getAttribute("livalue"));
        };

        var onClickFunction = function (e) {
                
//             var target = e.target || e.srcElement;

//             if (target != this) {
//                 return;
//             }
            if ($('langSelect_Language-select_list').style.display === "none") {
                customControl.showControl(customControl.elements.list);;
// 	  	customControl.elements.list.show = true;

            } else {
                customControl.hideControl(customControl.elements.list);;
// 	   	customControl.elements.list.show = false;
            }

        };
        var addfocusevent= function(someElement,someFunction,someEvent){
            if(!someElement){
                return;
            }
            if (!someElement.addEventListener) {
                if(someEvent == "focus"){
                    someElement.onfocusin = someFunction; 
                }else if(someEvent == "blur"){
                    someElement.onfocusout = someFunction; 
                }                   
            }
            else {
                someElement.addEventListener(someEvent, someFunction, true);
            }
        };
	
        this.addEvent(customControl.elements.currentView, 'click', onClickFunction);
//         this.addEvent(customControl.elements.currentContent, 'click', onClickFunction); 
        var showList = function () {               
            customControl.showControl(customControl.elements.list);;
// 	    customControl.elements.list.show = true;
        }
        var hideList = function () {
            customControl.hideControl(customControl.elements.list);;
// 	    customControl.elements.list.show = false;
        }
         
//         addfocusevent( $('header-controls-languages'), showList,"focus");
        addfocusevent( $('header-controls-accessibility-minus'), hideList,"focus");
        addfocusevent( $('header-controls-login'), hideList,"focus");
          
      
      
        var setFocus = function (e) {
            if (!e) {
                e = window.event;
            }
            var target = e.target || e.srcElement;
            if(!target){
                return;
            }
            target.parentNode.addClassName("li-lg-focused");
        }
        var unsetFocus = function (e) {
            if (!e) {
                e = window.event;
            }
            var target = e.target || e.srcElement;
            if(!target){
                return;
            }
            target.parentNode.removeClassName("li-lg-focused");
        }
        $$("li.custom-select-item").each(function (li) {
            addfocusevent( li, setFocus,"focus");
            addfocusevent( li, unsetFocus,"blur");   
            li.observe("click", onClickItemFunction);
            li.observe('keypress', function(event){                  
                if(event.keyCode == Event.KEY_RETURN) {       
                    var triggerEvent = function(element, eventName) {
                        // safari, webkit, gecko
                        if (document.createEvent){
                            var evt = document.createEvent('HTMLEvents');
                            evt.initEvent(eventName, true, true);
 
                            return element.dispatchEvent(evt);
                        } 
                        // Internet Explorer
                        if (element.fireEvent) {
                            return element.fireEvent('on' + eventName);
                        }
                    }
                    triggerEvent(this,"click");                    
                    Event.stop(event);
                }
            });
        }.bind(this));       
      
    },

    addEvent: function (control, event, event_function) {        
        var callback = function (e) {
            if (!e) {
                e = window.event;
            }
             
            event_function.call(control, e);
        };
        
        if (typeof control.attachEvent != 'undefined') {
            
            event = "on" + event;
            control.attachEvent(event, callback);
        } else {
            control.addEventListener(event, callback, false);
        }
        
    },
    getEBI: function (name) {
        return document.getElementById(name);
    }
});
/*jsdep /builds/release_ft_lbv3fr_sagem-lbv3_ft_multi_sip_normal_2017-11-02_V6.23.20_00_com/build/REL/2017-04-21_V9.1.35/output/staging/build/www/compile/web/js/sah/widget/notification.js */

Sah.Widget.Notification = Class.create(
  /** @lends Sah.Widget.Dialog# */
  {
    /**
     * Display a notification. The callback given will be called with an HTML
     * element that you can use to setup your content
     */
    initialize: function (callback)
    {
      this.element = new Element("div");
      this.element.addClassName("notification");
      this.element.hide();
      this.cover = new Element("div");
      this.cover.addClassName("cover");
      this.cover.hide();
      callback(this.element);
    },

    show: function ()
    {
      var parent = document.body;
      var dimension = document.viewport.getDimensions();
      parent.appendChild(this.cover);
      parent.appendChild(this.element);
      this.element.makePositioned();
      this.element.setStyle({ left: ((dimension.width - this.element.getWidth()) / 2) + "px",
                              top: ((dimension.height - this.element.getHeight()) / 2) + "px" });
      Effect.Appear(this.element, { duration: 0.3, afterFinish: (function () { this.closeButton.focus() }).bind(this) });
      Effect.Appear(this.cover, { duration: 0.3 });
    },

    remove: function ()
    {
      Effect.BlindUp(this.element, { duration: 0.3, afterFinish: function (effect) { effect.element.remove(); }});
      Effect.Fade(this.cover, { duration: 0.3, afterFinish: function (effect) { effect.element.remove(); }});
    },

    addButtonBar: function ()
    {
      this.buttonBar = new Element("div");
      this.buttonBar.addClassName("buttons");
      this.element.appendChild(this.buttonBar);
    },

    addCloseButton: function (title)
    {
      this.closeButton = new Element("input");
      this.closeButton.type = "button";
      this.closeButton.value = title;
      this.closeButton.addClassName("button");
      this.closeButton.observe("click", this.remove.bind(this));
      this.closeButton.observe("keypress", (function (event) { if (event.keyCode == Event.KEY_ESC) this.remove(); }).bind(this));
      this.buttonBar.appendChild(this.closeButton);
    }
  }
);

Sah.Widget.ObjectNotification = Class.create(Sah.Widget.Notification,
  /** @lends Sah.Widget.ObjectNotifcation# */
  {
    /**
     * Display a notification for errors in an object
     */
    initialize: function ($super, object, name)
    {
      this.object = object;
      this.errorList = new Element("dl");
      this.title = new Element("h1");
      this.title.insert(t("Errors.ObjectNotification.Title", 
        "Error saving %1", name));
      this.explain = new Element("p");
      this.explain.insert(t("Errors.ObjectNotification.Explain", 
        "Some errors where encountered while saving %1 configuration: ", name));
      $super(this.setErrors.bind(this));
      this.element.addClassName("error");
      this.element.appendChild(this.title);
      this.element.appendChild(this.explain);
      this.element.appendChild(this.errorList);
      this.addButtonBar();
      this.addCloseButton(t("Buttons.Close", "close"));
    },

    setErrors: function ()
    {
      this.object._errors.each(this.setError.bind(this));
    },

    setError: function (error)
    {
      var dt = new Element("dt");
      var dd = new Element("dd");
      dt.insert(error.parameter);
      dd.insert(error.message);
      this.errorList.appendChild(dt);
      this.errorList.appendChild(dd);
    }
  }
);
